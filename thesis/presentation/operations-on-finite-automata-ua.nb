(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    294325,       6599]
NotebookOptionsPosition[    288569,       6412]
NotebookOutlinePosition[    290671,       6470]
CellTagsIndexPosition[    290591,       6465]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell["\<\
\:041e\:043f\:0435\:0440\:0430\:0446\:0456\:0457 \:043d\:0430\:0434 
\:0441\:043a\:0456\:043d\:0447\:0435\:043d\:043d\:0438\:043c\:0438 \:0430\
\:0432\:0442\:043e\:043c\:0430\:0442\:0430\:043c\:0438\
\>", "Title",
 CellChangeTimes->{{3.6391424642486925`*^9, 3.6391424882310643`*^9}, {
  3.6391425272562966`*^9, 3.6391425323995905`*^9}, {3.639146266898192*^9, 
  3.639146271847475*^9}},
 TextAlignment->Center],

Cell["\<\
\:0414\:0443\:0431\:0456\:043d\:0456\:043d \:0414.\:041c.
\:041d\:0430\:0443\:043a\:043e\:0432\:0438\:0439 \:043a\:0435\:0440\:0456\
\:0432\:043d\:0438\:043a \[Dash] \:0421\:043e\:043f\:0440\:043e\:043d\:044e\
\:043a \:0422.\:041c.\
\>", "Subsubtitle",
 CellChangeTimes->{{3.6405022519297085`*^9, 3.6405022884547977`*^9}},
 TextAlignment->Right]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["\:0420\:043e\:0431\:043e\:0442\:0430 \:0430\:0432\:0442\:043e\:043c\
\:0430\:0442\:0430", "Section",
 CellChangeTimes->{{3.6404309568432674`*^9, 3.640430967563881*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"A", "=", 
     RowBox[{"NFA", "@", "\"\<TM\>\""}]}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"DynamicModule", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\[Omega]", "=", "\"\<0110100110010110\>\""}], ",", "tr"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"tr", "=", 
       RowBox[{"NFATrace", "[", 
        RowBox[{"\[Omega]", ",", "A"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Column", "[", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Row", "[", 
             RowBox[{
              RowBox[{"MapAt", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Style", "[", 
                  RowBox[{"#", ",", "Red"}], "]"}], "&"}], ",", "i"}], "]"}], 
              "@", 
              RowBox[{"Characters", "@", "\[Omega]"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"NFAPlot", "[", 
             RowBox[{"A", ",", 
              RowBox[{"VertexRenderingFunction", "\[Rule]", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"FirstPosition", "[", 
                    RowBox[{
                    RowBox[{
                    "A", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], ",", "#"}], "]"}], 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                    "&"}], "/@", 
                    RowBox[{
                    "tr", "\[LeftDoubleBracket]", "i", 
                    "\[RightDoubleBracket]"}]}], ",", "#2"}], "]"}], ",", 
                    "Red", ",", "Gray"}], "]"}], ",", 
                   RowBox[{"EdgeForm", "@", "Black"}], ",", 
                   RowBox[{"Disk", "[", 
                    RowBox[{"#1", ",", ".1"}], "]"}], ",", 
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    RowBox[{
                    "A", "\[LeftDoubleBracket]", "5", 
                    "\[RightDoubleBracket]"}], ",", "#2"}], "]"}], ",", 
                    RowBox[{"Disk", "[", 
                    RowBox[{"#1", ",", ".07"}], "]"}]}], "]"}], ",", 
                   RowBox[{"Text", "[", 
                    RowBox[{
                    RowBox[{"A", "\[LeftDoubleBracket]", 
                    RowBox[{"1", ",", "#2"}], "\[RightDoubleBracket]"}], ",", 
                    "#1", ",", 
                    RowBox[{"BaseStyle", "\[Rule]", "Black"}]}], "]"}]}], 
                  "}"}], "&"}], ")"}]}], ",", 
              RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}]}], "}"}], 
          ",", "Center"}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Dynamic", "@", 
         RowBox[{"InputField", "[", 
          RowBox[{"Dynamic", "[", 
           RowBox[{"\[Omega]", ",", 
            RowBox[{"v", "\[Function]", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"\[Omega]", "=", "v"}], ";", 
               RowBox[{"tr", "=", 
                RowBox[{"NFATrace", "[", 
                 RowBox[{"\[Omega]", ",", "A"}], "]"}]}]}], ")"}]}]}], "]"}], 
          "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", 
          RowBox[{"StringLength", "@", "\[Omega]"}], ",", "1", ",", 
          RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}]}], "}"}], ",", 
        RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], 
       "\[IndentingNewLine]", "]"}]}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6404292367058816`*^9, 3.6404293125182176`*^9}, {
   3.6404293755368223`*^9, 3.640429427876816*^9}, {3.640429461100716*^9, 
   3.640429611482318*^9}, {3.640429651098583*^9, 3.6404297058727164`*^9}, {
   3.6404297362164516`*^9, 3.6404298003201184`*^9}, {3.6404298477718325`*^9, 
   3.6404300981011505`*^9}, {3.6404301473919697`*^9, 3.640430156215474*^9}, 
   3.6404301889983497`*^9, {3.6404302191240726`*^9, 3.6404302197691097`*^9}, {
   3.6404302573992615`*^9, 3.6404304280230207`*^9}, {3.6404304586257715`*^9, 
   3.640430497100972*^9}, {3.640430629081521*^9, 3.640430766190363*^9}, {
   3.6404308021144176`*^9, 3.640430809580845*^9}, {3.6404308493161173`*^9, 
   3.640430895402754*^9}, {3.640430979840583*^9, 3.640431025256181*^9}, {
   3.6404310601681776`*^9, 3.640431071490825*^9}, {3.640431126173953*^9, 
   3.6404311583367925`*^9}, {3.640431200654213*^9, 3.6404314006016493`*^9}, {
   3.6404314360846786`*^9, 3.640431438993845*^9}, {3.6404317612002745`*^9, 
   3.640431764675473*^9}}],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`\[Omega]$$ = 
  "0110100110010110", $CellContext`tr$$ = {{2}, {3, 4}, {0, 2}, {5}, {1, 2}, {
   5}, {1, 2}, {3, 4}, {0, 2}, {5}, {1, 2}, {3, 4}, {0, 2}, {3, 4}, {0, 2}, {
   5}, {1, 2}}}, 
  TagBox[
   StyleBox[
    DynamicModuleBox[{$CellContext`i$$ = 2, Typeset`show$$ = True, 
     Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
     Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
     "\"untitled\"", Typeset`specs$$ = {{
       Hold[
        Dynamic[
         InputField[
          Dynamic[$CellContext`\[Omega]$$, 
           
           Function[$CellContext`v$, $CellContext`\[Omega]$$ = \
$CellContext`v$; $CellContext`tr$$ = $CellContext`NFATrace[$CellContext`\
\[Omega]$$, {{0, 1, 2, 3, 4, 5}, {
                "", "0", 
                 "1"}, {{{3}, {}, {}}, {{3}, {}, {}}, {{}, {5, 4}, {
                  6}}, {{}, {}, {}}, {{}, {}, {1}}, {{}, {2}, {}}}, 3, {1, 2, 
                4}}]]]]]], Manipulate`Dump`ThisIsNotAControl}, {
       Hold[$CellContext`i$$], 1, 16, 1}}, Typeset`size$$ = {
     505., {222., 229.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
     Typeset`skipInitDone$$ = False, $CellContext`i$1398$$ = 0}, 
     DynamicBox[Manipulate`ManipulateBoxes[
      1, StandardForm, "Variables" :> {$CellContext`i$$ = 1}, 
       "ControllerVariables" :> {
         Hold[$CellContext`i$$, $CellContext`i$1398$$, 0]}, 
       "OtherVariables" :> {
        Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
         Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
         Typeset`specs$$, Typeset`size$$, Typeset`update$$, 
         Typeset`initDone$$, Typeset`skipInitDone$$}, "Body" :> Column[{
          Row[
           MapAt[Style[#, Red]& , $CellContext`i$$][
            Characters[$CellContext`\[Omega]$$]]], 
          $CellContext`NFAPlot[{{0, 1, 2, 3, 4, 5}, {
            "", "0", 
             "1"}, {{{3}, {}, {}}, {{3}, {}, {}}, {{}, {5, 4}, {
              6}}, {{}, {}, {}}, {{}, {}, {1}}, {{}, {2}, {}}}, 3, {1, 2, 4}},
            VertexRenderingFunction -> ({
             If[
              MemberQ[
               Map[Part[
                 FirstPosition[
                  
                  Part[{{0, 1, 2, 3, 4, 5}, {
                    "", "0", 
                    "1"}, {{{3}, {}, {}}, {{3}, {}, {}}, {{}, {5, 4}, {
                    6}}, {{}, {}, {}}, {{}, {}, {1}}, {{}, {2}, {}}}, 3, {1, 
                    2, 4}}, 1], #], 1]& , 
                Part[$CellContext`tr$$, $CellContext`i$$]], #2], Red, Gray], 
             EdgeForm[Black], 
             Disk[#, 0.1], 
             If[
              MemberQ[
               
               Part[{{0, 1, 2, 3, 4, 5}, {
                 "", "0", 
                  "1"}, {{{3}, {}, {}}, {{3}, {}, {}}, {{}, {5, 4}, {
                   6}}, {{}, {}, {}}, {{}, {}, {1}}, {{}, {2}, {}}}, 3, {1, 2,
                  4}}, 5], #2], 
              Disk[#, 0.07]], 
             Text[
              
              Part[{{0, 1, 2, 3, 4, 5}, {
                "", "0", 
                 "1"}, {{{3}, {}, {}}, {{3}, {}, {}}, {{}, {5, 4}, {
                  6}}, {{}, {}, {}}, {{}, {}, {1}}, {{}, {2}, {}}}, 3, {1, 2, 
                4}}, 1, #2], #, BaseStyle -> Black]}& ), ImageSize -> Large]},
          Center], "Specifications" :> {
         Dynamic[
          InputField[
           Dynamic[$CellContext`\[Omega]$$, 
            
            Function[$CellContext`v$, $CellContext`\[Omega]$$ = \
$CellContext`v$; $CellContext`tr$$ = $CellContext`NFATrace[$CellContext`\
\[Omega]$$, {{0, 1, 2, 3, 4, 5}, {
                 "", "0", 
                  "1"}, {{{3}, {}, {}}, {{3}, {}, {}}, {{}, {5, 4}, {
                   6}}, {{}, {}, {}}, {{}, {}, {1}}, {{}, {2}, {}}}, 3, {1, 2,
                  4}}]]]]], {$CellContext`i$$, 1, 16, 1, Appearance -> 
          "Open"}}, "Options" :> {}, "DefaultOptions" :> {}],
      ImageSizeCache->{546., {282., 289.}},
      SingleEvaluation->True],
     Deinitialization:>None,
     DynamicModuleValues:>{},
     Initialization:>({$CellContext`NFAPlot[
          Pattern[$CellContext`M, 
           Blank[]], 
          Pattern[$CellContext`opts, 
           
           OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`NFA\[Delta]Edges, Identity, 
          GraphPlot, $CellContext`opts], $CellContext`DFACustomPlot[{
           Pattern[$CellContext`Q, 
            Blank[]], 
           Pattern[$CellContext`\[CapitalSigma], 
            Blank[]], 
           Pattern[$CellContext`\[Delta], 
            Blank[]], 
           Pattern[$CellContext`s, 
            Blank[]], 
           Pattern[$CellContext`F, 
            Blank[]]}, 
          Pattern[$CellContext`Edges, 
           Blank[]], 
          Pattern[$CellContext`PrePlot, 
           Blank[]], 
          Pattern[Plot, 
           Blank[]], 
          Pattern[$CellContext`opts, 
           OptionsPattern[]]] := 
        With[{$CellContext`Qf = 
           If[Null =!= $CellContext`Q, Part[$CellContext`Q, #]& , 
             Identity], $CellContext`\[CapitalSigma]f = 
           If[Null =!= $CellContext`\[CapitalSigma], 
             Part[$CellContext`\[CapitalSigma], #]& , Characters[
              FromCharacterCode[96 + #]]& ]}, 
          Apply[Plot, 
           $CellContext`PrePlot[{
             If[
              
              OptionValue[$CellContext`EdgeCollapsing], \
$CellContext`DFACollapseEdges, Identity][
              $CellContext`Edges[$CellContext`\[Delta]]], 
             Apply[Sequence, 
              FilterRules[
               FilterRules[{$CellContext`opts}, 
                Options[Plot]], 
               Except[{VertexRenderingFunction, EdgeRenderingFunction}]]], 
             VertexRenderingFunction -> Replace[
               OptionValue[VertexRenderingFunction], 
               Automatic -> ($CellContext`DFARenderState[#2, 
                 Replace[$CellContext`s, Null -> 1], $CellContext`F, #, 
                 VertexLabeling -> $CellContext`Qf, 
                 Apply[Sequence, 
                  FilterRules[{$CellContext`opts}, 
                   Options[$CellContext`DFARenderState]]]]& )], 
             EdgeRenderingFunction -> Replace[
               OptionValue[EdgeRenderingFunction], 
               Automatic -> ($CellContext`DFARenderTransition[#3, #, 
                 EdgeLabeling -> If[Null =!= $CellContext`\[CapitalSigma], 
                   Function[$CellContext`l, 
                    If[
                    Length[$CellContext`l] == 
                    Length[$CellContext`\[CapitalSigma]], "\[CapitalSigma]", 
                    If[
                    Length[$CellContext`l] > 
                    Length[$CellContext`\[CapitalSigma]]/2., 
                    Row[{"\[CapitalSigma]", "\[Backslash]", 
                    $CellContext`\[CapitalSigma]f[
                    Complement[
                    Range[
                    Length[$CellContext`\[CapitalSigma]]], $CellContext`l]]}], 
                    $CellContext`\[CapitalSigma]f[$CellContext`l]]]], 
                   FromCharacterCode[# + 96]& ], 
                 Apply[Sequence, 
                  FilterRules[{$CellContext`opts}, 
                   Options[$CellContext`DFARenderTransition]]]]& )]}]]], 
        Options[$CellContext`DFACustomPlot] = {
         AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> False, 
          AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, 
          Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, 
          ColorOutput -> Automatic, ContentSelectable -> Automatic, 
          CoordinatesToolOptions -> Automatic, DataRange -> Automatic, 
          DirectedEdges -> False, DisplayFunction :> $DisplayFunction, 
          EdgeLabeling -> True, EdgeRenderingFunction -> Automatic, 
          Epilog -> {}, FormatType :> TraditionalForm, Frame -> False, 
          FrameLabel -> None, FrameStyle -> {}, FrameTicks -> None, 
          FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, 
          ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, 
          ImageSizeRaw -> Automatic, LabelStyle -> {}, Method -> Automatic, 
          MultiedgeStyle -> Automatic, PackingMethod -> Automatic, PlotLabel -> 
          None, PlotRange -> All, PlotRangeClipping -> False, 
          PlotRangePadding -> Automatic, PlotRegion -> Automatic, PlotStyle -> 
          Automatic, PreserveImageOptions -> Automatic, Prolog -> {}, 
          RotateLabel -> True, SelfLoopStyle -> Automatic, Ticks -> Automatic,
           TicksStyle -> {}, VertexCoordinateRules -> Automatic, 
          VertexRenderingFunction -> Automatic, $CellContext`EdgeCollapsing -> 
          True, $CellContext`StartColor -> 
          RGBColor[1, 1, 0.85], $CellContext`Color -> 
          GrayLevel[0.85], $CellContext`PreRender -> Null, VertexSize -> 0.1, 
          VertexLabeling -> Automatic, VertexLabelStyle -> {
            GrayLevel[0], 12}, $CellContext`ArrowSize -> 
          Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
          Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
            GrayLevel[0], 12}}, $CellContext`DFACollapseEdges[
          Pattern[$CellContext`e, 
           Blank[]]] := MapAt[Replace[#, Pattern[$CellContext`l, 
             Blank[List]] :> Flatten[$CellContext`l]]& , {All, 2}][
          ReplaceRepeated[$CellContext`e, {
             Pattern[$CellContext`h, 
              BlankNullSequence[]], {
              Pattern[$CellContext`x, 
               Blank[]], 
              Pattern[$CellContext`l1, 
               Blank[]]}, 
             Pattern[$CellContext`u, 
              BlankNullSequence[]], {
              Pattern[$CellContext`x, 
               Blank[]], 
              Pattern[$CellContext`l2, 
               Blank[]]}, 
             Pattern[$CellContext`t, 
              
              BlankNullSequence[]]} :> {$CellContext`h, {$CellContext`x, \
{$CellContext`l1, $CellContext`l2}}, $CellContext`u, $CellContext`t}]], \
$CellContext`t = {False, False, False}, $CellContext`DFARenderState[
          Pattern[$CellContext`q, 
           Blank[]], 
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`F, 
           Blank[]], 
          Pattern[$CellContext`p, 
           Blank[]], 
          OptionsPattern[]] := {
          If[$CellContext`q === $CellContext`s, 
           OptionValue[$CellContext`StartColor], 
           OptionValue[$CellContext`Color]], 
          EdgeForm[Black], 
          OptionValue[$CellContext`PreRender], 
          Disk[$CellContext`p, 
           OptionValue[VertexSize]], 
          If[
           MemberQ[$CellContext`F, $CellContext`q], 
           Disk[$CellContext`p, 0.7 OptionValue[VertexSize]]], 
          Text[
           Replace[
            OptionValue[VertexLabeling], Automatic -> 
            Identity][$CellContext`q], $CellContext`p, BaseStyle -> 
           OptionValue[VertexLabelStyle]]}, 
        Options[$CellContext`DFARenderState] = {$CellContext`StartColor -> 
          RGBColor[1, 1, 0.85], $CellContext`Color -> 
          GrayLevel[0.85], $CellContext`PreRender -> Null, VertexSize -> 0.1, 
          VertexLabeling -> Automatic, VertexLabelStyle -> {
            GrayLevel[0], 12}}, $CellContext`DFARenderTransition[
          Pattern[$CellContext`t, 
           Blank[]], 
          Pattern[$CellContext`p, 
           Blank[]], 
          OptionsPattern[]] := {Black, 
          Arrowheads[{{
             OptionValue[$CellContext`ArrowSize], 
             OptionValue[$CellContext`ArrowPosition]}}], 
          Arrow[
           
           BSplineCurve[$CellContext`p, SplineDegree -> 
            Length[$CellContext`p] - 1]], 
          Text[
           Style[
            Replace[
             OptionValue[EdgeLabeling], Automatic -> 
             Identity][$CellContext`t], 
            Apply[Sequence, 
             OptionValue[EdgeLabelStyle]]], 
           
           BSplineFunction[$CellContext`p, SplineDegree -> 
            Length[$CellContext`p] - 1][
            OptionValue[$CellContext`EdgeLabelPosition]], Background -> 
           White]}, 
        Options[$CellContext`DFARenderTransition] = {$CellContext`ArrowSize -> 
          Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
          Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
            GrayLevel[0], 12}}, $DisplayFunction = 
        Identity, $CellContext`NFA\[Delta]Edges[
          Pattern[$CellContext`\[Delta], 
           Blank[]]] := With[{$CellContext`rd = Map[Range, 
             Dimensions[$CellContext`\[Delta], 2]]}, 
          Flatten[
           Inner[
            Composition[Thread, Reverse, List], 
            Part[$CellContext`rd, 2], 
            Inner[
             Composition[Thread, Rule], 
             Part[$CellContext`rd, 1], $CellContext`\[Delta], 
             Composition[Flatten, List]], List], 1]], 
        Attributes[$CellContext`v$] = {Temporary}, $CellContext`NFATrace[
          Pattern[$CellContext`\[Omega], 
           Blank[]], {
           Pattern[$CellContext`Q, 
            Blank[]], 
           Pattern[$CellContext`\[CapitalSigma], 
            Blank[]], 
           Pattern[$CellContext`\[Delta], 
            Blank[]], 
           Pattern[$CellContext`s, 
            Blank[]], 
           Blank[]}] := Catch[
          Map[Part[$CellContext`Q, #]& , 
           FoldList[
            Composition[Join[#, 
              Flatten[
               Part[$CellContext`\[Delta], #, 1]]]& , Apply[Union, 
              Part[$CellContext`\[Delta], 
               SlotSequence[1]]]& ], 
            Prepend[
             Part[$CellContext`\[Delta], $CellContext`s, 1], $CellContext`s], 
            StringCases[$CellContext`\[Omega], 
             Append[
              Thread[Rest[$CellContext`\[CapitalSigma]] -> Range[2, 
                 Length[$CellContext`\[CapitalSigma]]]], Blank[] :> 
              Throw[{}]]]]]]}; Typeset`initDone$$ = True),
     SynchronousInitialization->True,
     UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
     UnsavedVariables:>{Typeset`initDone$$},
     UntrackedVariables:>{Typeset`size$$}], "Manipulate",
    Deployed->True,
    StripOnInput->False],
   Manipulate`InterpretManipulate[1]],
  DynamicModuleValues:>{}]], "Output",
 CellChangeTimes->{{3.6404311512563877`*^9, 3.6404311587588167`*^9}, {
   3.6404312924124613`*^9, 3.640431370650936*^9}, 3.640431403623822*^9, 
   3.640431439373867*^9, 3.6404317873777714`*^9}]
}, {2}]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["\:0413\:0435\:043d\:0435\:0440\:0430\:0446\:0456\:044f \:043b\:0430\
\:043d\:0446\:044e\:0436\:043a\:0456\:0432 \:043c\:043e\:0432\:0438", \
"Section",
 CellChangeTimes->{{3.640427466976659*^9, 3.640427493005148*^9}, {
  3.640427614399091*^9, 3.64042761490512*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Multicolumn", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"DFAPlot", "[", 
          RowBox[{"#", ",", 
           RowBox[{"ImageSize", "\[Rule]", 
            RowBox[{"Scaled", "@", ".69"}]}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Column", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"SetterBar", "[", 
              RowBox[{
               RowBox[{"Dynamic", "@", "l"}], ",", 
               RowBox[{"Range", "[", 
                RowBox[{"0", ",", "5"}], "]"}]}], "]"}], ",", 
             RowBox[{"Pane", "[", 
              RowBox[{
               RowBox[{"Flatten", "@", 
                RowBox[{"Table", "[", 
                 RowBox[{
                  RowBox[{"DFAAcceptedWords", "[", 
                   RowBox[{"#", ",", "n"}], "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"n", ",", "0", ",", "l"}], "}"}]}], "]"}]}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"Scaled", "@", ".3"}], ",", "500"}], "}"}], ",", 
               RowBox[{"Scrollbars", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{"False", ",", "True"}], "}"}]}]}], "]"}]}], "}"}], 
           ",", "Center"}], "]"}]}], "}"}], "&"}], "@", 
      RowBox[{"ModMxN", "[", 
       RowBox[{"m", ",", "x", ",", "n"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "Automatic"}], "}"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"l", ",", "4"}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   RowBox[{"Evaluate", "@", 
    RowBox[{"Row", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Control", "@", 
        RowBox[{"{", 
         RowBox[{"##", ",", "1", ",", 
          RowBox[{"Appearance", "\[Rule]", "\"\<Labeled\>\""}]}], "}"}]}], 
       "&"}], "@@@", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"m", ",", "5"}], "}"}], ",", "1", ",", "10"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "0", ",", 
          RowBox[{
           RowBox[{"-", "1"}], "+", "m"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"n", ",", "6"}], "}"}], ",", "1", ",", "10"}], "}"}]}], 
       "}"}]}], "]"}]}], ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6391468742729316`*^9, 3.6391468837994766`*^9}, {
   3.6391470660399003`*^9, 3.6391474341259537`*^9}, {3.639147493441346*^9, 
   3.6391475094532623`*^9}, {3.6391475573990045`*^9, 
   3.6391475603711743`*^9}, {3.639147658985815*^9, 3.6391478801844664`*^9}, {
   3.6391479282482157`*^9, 3.6391479789141135`*^9}, {3.6391480720354395`*^9, 
   3.6391481223343167`*^9}, 3.6391481574003224`*^9, {3.639148250332638*^9, 
   3.639148335048483*^9}, {3.639148382633205*^9, 3.639148421027401*^9}, {
   3.6391487324022107`*^9, 3.6391487337302866`*^9}, {3.639148770046364*^9, 
   3.6391487984189863`*^9}, {3.639150847149167*^9, 3.639150887550478*^9}, 
   3.6391509261286845`*^9, {3.6391509989578505`*^9, 3.639150999509882*^9}, {
   3.6391512162412777`*^9, 3.6391512673612022`*^9}, {3.6391513311318493`*^9, 
   3.639151383152825*^9}, {3.639151446240433*^9, 3.6391514690197363`*^9}, {
   3.639153728161952*^9, 3.6391539121174736`*^9}, {3.639153964001441*^9, 
   3.639154043407983*^9}, {3.639956956381693*^9, 3.639957001351265*^9}, {
   3.639957042739632*^9, 3.639957244406167*^9}, {3.6400687828450565`*^9, 
   3.640068871518128*^9}, {3.6400689192198563`*^9, 3.6400689346817408`*^9}, {
   3.640068997488333*^9, 3.640069001522564*^9}, {3.6400690442520075`*^9, 
   3.6400690471831756`*^9}, {3.640069084486309*^9, 3.6400691412355547`*^9}, {
   3.64006921999506*^9, 3.6400692240752935`*^9}, {3.6400692838967147`*^9, 
   3.640069322265909*^9}, {3.6400693542647395`*^9, 3.6400694527153707`*^9}, {
   3.6400695023292084`*^9, 3.6400696204399643`*^9}, {3.640069685183667*^9, 
   3.6400697323523645`*^9}, 3.640069774449773*^9, {3.6404103613442726`*^9, 
   3.640410365181492*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`l$$ = 3, $CellContext`m$$ = 
    5, $CellContext`n$$ = 6, $CellContext`x$$ = 0, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`l$$], 4}}, {{
       Hold[$CellContext`m$$], 5}, 1, 10, 1}, {
      Hold[$CellContext`x$$], 0, 
      Dynamic[-1 + $CellContext`m$$], 1}, {{
       Hold[$CellContext`n$$], 6}, 1, 10, 1}, {
      Hold[
       Row[{
         Manipulate`Place[1], 
         Manipulate`Place[2], 
         Manipulate`Place[3]}]], Manipulate`Dump`ThisIsNotAControl}}, 
    Typeset`size$$ = {899., {251., 258.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = False, $CellContext`m$356$$ =
     0, $CellContext`x$361$$ = 0, $CellContext`n$362$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`l$$ = 4, $CellContext`m$$ = 
        5, $CellContext`n$$ = 6, $CellContext`x$$ = 0}, "ControllerVariables" :> {
        Hold[$CellContext`m$$, $CellContext`m$356$$, 0], 
        Hold[$CellContext`x$$, $CellContext`x$361$$, 0], 
        Hold[$CellContext`n$$, $CellContext`n$362$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Multicolumn[
        ({
         $CellContext`DFAPlot[#, ImageSize -> Scaled[0.69]], 
         Column[{
           SetterBar[
            Dynamic[$CellContext`l$$], 
            Range[0, 5]], 
           Pane[
            Flatten[
             Table[
              $CellContext`DFAAcceptedWords[#, $CellContext`n$$], \
{$CellContext`n$$, 0, $CellContext`l$$}]], {
             Scaled[0.3], 500}, Scrollbars -> {False, True}]}, Center]}& )[
         $CellContext`ModMxN[$CellContext`m$$, $CellContext`x$$, \
$CellContext`n$$]], {1, Automatic}], 
      "Specifications" :> {{{$CellContext`l$$, 4}, ControlType -> 
         None}, {{$CellContext`m$$, 5}, 1, 10, 1, Appearance -> "Labeled", 
         ControlPlacement -> 1}, {$CellContext`x$$, 0, 
         Dynamic[-1 + $CellContext`m$$], 1, Appearance -> "Labeled", 
         ControlPlacement -> 2}, {{$CellContext`n$$, 6}, 1, 10, 1, Appearance -> 
         "Labeled", ControlPlacement -> 3}, 
        Row[{
          Manipulate`Place[1], 
          Manipulate`Place[2], 
          Manipulate`Place[3]}]}, "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{940., {292., 299.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({
      Attributes[Multicolumn] = {ReadProtected}, 
       Options[Multicolumn] := (Options[Multicolumn] = Sort[
          Flatten[{
            DeleteCases[
             Options[Grid], 
             Blank[][Alignment, 
              Blank[]]], Alignment -> {Left, Baseline}, Appearance -> 
            Automatic}]]), $CellContext`DFAPlot[
         Pattern[$CellContext`M, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          
          OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`DFA\[Delta]Edges, Identity, 
         GraphPlot, $CellContext`opts], $CellContext`DFACustomPlot[{
          Pattern[$CellContext`Q, 
           Blank[]], 
          Pattern[$CellContext`\[CapitalSigma], 
           Blank[]], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`F, 
           Blank[]]}, 
         Pattern[$CellContext`Edges, 
          Blank[]], 
         Pattern[$CellContext`PrePlot, 
          Blank[]], 
         Pattern[Plot, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          OptionsPattern[]]] := 
       With[{$CellContext`Qf = 
          If[Null =!= $CellContext`Q, Part[$CellContext`Q, #]& , 
            Identity], $CellContext`\[CapitalSigma]f = 
          If[Null =!= $CellContext`\[CapitalSigma], 
            Part[$CellContext`\[CapitalSigma], #]& , Characters[
             FromCharacterCode[96 + #]]& ]}, 
         Apply[Plot, 
          $CellContext`PrePlot[{
            If[
             
             OptionValue[$CellContext`EdgeCollapsing], \
$CellContext`DFACollapseEdges, Identity][
             $CellContext`Edges[$CellContext`\[Delta]]], 
            Apply[Sequence, 
             FilterRules[
              FilterRules[{$CellContext`opts}, 
               Options[Plot]], 
              Except[{VertexRenderingFunction, EdgeRenderingFunction}]]], 
            VertexRenderingFunction -> Replace[
              OptionValue[VertexRenderingFunction], 
              Automatic -> ($CellContext`DFARenderState[#2, 
                Replace[$CellContext`s, Null -> 1], $CellContext`F, #, 
                VertexLabeling -> $CellContext`Qf, 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderState]]]]& )], 
            EdgeRenderingFunction -> Replace[
              OptionValue[EdgeRenderingFunction], 
              Automatic -> ($CellContext`DFARenderTransition[#3, #, 
                EdgeLabeling -> If[Null =!= $CellContext`\[CapitalSigma], 
                  Function[$CellContext`l, 
                   If[
                   Length[$CellContext`l] == 
                    Length[$CellContext`\[CapitalSigma]], "\[CapitalSigma]", 
                    If[
                    Length[$CellContext`l] > 
                    Length[$CellContext`\[CapitalSigma]]/2., 
                    Row[{"\[CapitalSigma]", "\[Backslash]", 
                    $CellContext`\[CapitalSigma]f[
                    Complement[
                    Range[
                    Length[$CellContext`\[CapitalSigma]]], $CellContext`l]]}], 
                    $CellContext`\[CapitalSigma]f[$CellContext`l]]]], 
                  FromCharacterCode[# + 96]& ], 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderTransition]]]]& )]}]]], 
       Options[$CellContext`DFACustomPlot] = {
        AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> False, 
         AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, 
         Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, 
         ColorOutput -> Automatic, ContentSelectable -> Automatic, 
         CoordinatesToolOptions -> Automatic, DataRange -> Automatic, 
         DirectedEdges -> False, DisplayFunction :> $DisplayFunction, 
         EdgeLabeling -> True, EdgeRenderingFunction -> Automatic, 
         Epilog -> {}, FormatType :> TraditionalForm, Frame -> False, 
         FrameLabel -> None, FrameStyle -> {}, FrameTicks -> None, 
         FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, 
         ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, 
         ImageSizeRaw -> Automatic, LabelStyle -> {}, Method -> Automatic, 
         MultiedgeStyle -> Automatic, PackingMethod -> Automatic, PlotLabel -> 
         None, PlotRange -> All, PlotRangeClipping -> False, PlotRangePadding -> 
         Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, 
         PreserveImageOptions -> Automatic, Prolog -> {}, RotateLabel -> True,
          SelfLoopStyle -> Automatic, Ticks -> Automatic, TicksStyle -> {}, 
         VertexCoordinateRules -> Automatic, VertexRenderingFunction -> 
         Automatic, $CellContext`EdgeCollapsing -> 
         True, $CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`FinalColor -> GrayLevel[0.85], 
         VertexSize -> 0.1, VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}, $CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFACollapseEdges[
         Pattern[$CellContext`e, 
          Blank[]]] := MapAt[Replace[#, Pattern[$CellContext`l, 
            Blank[List]] :> Flatten[$CellContext`l]]& , {All, 2}][
         ReplaceRepeated[$CellContext`e, {
            Pattern[$CellContext`h, 
             BlankNullSequence[]], {
             Pattern[$CellContext`x, 
              Blank[]], 
             Pattern[$CellContext`l1, 
              Blank[]]}, 
            Pattern[$CellContext`u, 
             BlankNullSequence[]], {
             Pattern[$CellContext`x, 
              Blank[]], 
             Pattern[$CellContext`l2, 
              Blank[]]}, 
            Pattern[$CellContext`t, 
             
             BlankNullSequence[]]} :> {$CellContext`h, {$CellContext`x, \
{$CellContext`l1, $CellContext`l2}}, $CellContext`u, $CellContext`t}]], \
$CellContext`DFARenderState[
         Pattern[$CellContext`q, 
          Blank[]], 
         Pattern[$CellContext`s, 
          Blank[]], 
         Pattern[$CellContext`F, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {
         If[$CellContext`q === $CellContext`s, 
          OptionValue[$CellContext`StartColor], 
          OptionValue[$CellContext`FinalColor]], 
         EdgeForm[Black], 
         Disk[$CellContext`p, 
          OptionValue[VertexSize]], 
         If[
          MemberQ[$CellContext`F, $CellContext`q], 
          Disk[$CellContext`p, 0.7 OptionValue[VertexSize]]], 
         Text[
          Replace[
           OptionValue[VertexLabeling], Automatic -> 
           Identity][$CellContext`q], $CellContext`p, BaseStyle -> 
          OptionValue[VertexLabelStyle]]}, 
       Options[$CellContext`DFARenderState] = {$CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`FinalColor -> GrayLevel[0.85], 
         VertexSize -> 0.1, VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFARenderTransition[
         Pattern[$CellContext`t, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {Black, 
         Arrowheads[{{
            OptionValue[$CellContext`ArrowSize], 
            OptionValue[$CellContext`ArrowPosition]}}], 
         Arrow[
          
          BSplineCurve[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1]], 
         Text[
          Style[
           Replace[
            OptionValue[EdgeLabeling], Automatic -> Identity][$CellContext`t], 
           Apply[Sequence, 
            OptionValue[EdgeLabelStyle]]], 
          
          BSplineFunction[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1][
           OptionValue[$CellContext`EdgeLabelPosition]], Background -> 
          White]}, 
       Options[$CellContext`DFARenderTransition] = {$CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $DisplayFunction = 
       Identity, $CellContext`DFA\[Delta]Edges[
         Pattern[$CellContext`\[Delta], 
          Blank[]]] := With[{$CellContext`rd = Map[Range, 
            Dimensions[$CellContext`\[Delta], 2]]}, 
         Flatten[
          Inner[
           Composition[Reverse, List], 
           Part[$CellContext`rd, 2], 
           Inner[Rule, 
            Part[$CellContext`rd, 1], $CellContext`\[Delta], List], List], 
          1]], $CellContext`DFAAcceptedWords[
         Pattern[$CellContext`M, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]]] := Replace[
         Map[StringJoin, 
          Map[Part[
            Evaluate[
             Map[ToString, 
              Part[$CellContext`M, 2]]], #]& , 
           $CellContext`DFAAcceptedWordsIndex[$CellContext`M, \
$CellContext`n]]], "" -> {}], $CellContext`DFAAcceptedWordsIndex[{
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`F, 
           Blank[]]}, 0] := If[
         MemberQ[$CellContext`F, $CellContext`s], {{}}, {}], \
$CellContext`DFAAcceptedWordsIndex[
         Pattern[$CellContext`M, {
           Blank[], 
           Blank[], 
           Pattern[$CellContext`\[Delta], 
            Blank[]], 
           Pattern[$CellContext`s, 
            Blank[]], 
           Blank[]}], 
         Pattern[$CellContext`n, 
          
          Blank[]]] := ($CellContext`DFAAcceptedWordsIndex[$CellContext`M, \
$CellContext`n] = 
        Module[{$CellContext`w, $CellContext`ans = {}}, $CellContext`w = 
           Map[$CellContext`DFAAcceptedWordsIndex[
              ReplacePart[$CellContext`M, 4 -> #], $CellContext`n - 1]& , 
             Part[$CellContext`\[Delta], $CellContext`s]]; Do[
            If[Length[
               Part[$CellContext`w, $CellContext`i]] > 0, 
             AppendTo[$CellContext`ans, 
              Map[Flatten[
                Prepend[#, $CellContext`i]]& , 
               Part[$CellContext`w, $CellContext`i]]]], {$CellContext`i, 
             Length[$CellContext`w]}]; 
          Flatten[$CellContext`ans, 1]]), $CellContext`ModMxN[
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`x, 
          Blank[]], 
         Pattern[$CellContext`n, 
          Blank[]]] := 
       With[{$CellContext`Q = Range[$CellContext`n]}, {$CellContext`Q, 
          Part[
           Join[
            Range[0, 9], 
            CharacterRange["a", "z"]], 
           Span[1, $CellContext`m]], 
          Partition[
           Flatten[
            ConstantArray[$CellContext`Q, $CellContext`m]], $CellContext`m], 
          1, {1 + $CellContext`x}}]}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.6391480830420694`*^9, 3.6391481227553406`*^9}, 
   3.639148158157366*^9, {3.639148370758526*^9, 3.639148421723441*^9}, 
   3.639148735227372*^9, 3.639148800609112*^9, {3.6391508640361333`*^9, 
   3.6391508884695306`*^9}, 3.639150928216804*^9, 3.6391510003329287`*^9, {
   3.639151234324312*^9, 3.6391512683472586`*^9}, {3.639151350004929*^9, 
   3.6391513838208632`*^9}, {3.6391514486165695`*^9, 
   3.6391514698867855`*^9}, {3.6391537306980968`*^9, 
   3.6391538048873405`*^9}, {3.639153967921665*^9, 3.6391540275160737`*^9}, 
   3.6391548892723637`*^9, 3.639155089435812*^9, {3.639956932493326*^9, 
   3.639956958501814*^9}, {3.6399571126256294`*^9, 3.6399572450292025`*^9}, 
   3.6399707467829905`*^9, {3.6400688219312916`*^9, 3.6400688722451696`*^9}, {
   3.640068919491872*^9, 3.640068937061877*^9}, 3.6400690020435934`*^9, 
   3.640069047712206*^9, {3.640069133070088*^9, 3.640069141552573*^9}, 
   3.640069224451315*^9, {3.64006928730991*^9, 3.640069322827942*^9}, {
   3.6400693738838615`*^9, 3.640069452978386*^9}, {3.6400695341340275`*^9, 
   3.640069559861499*^9}, {3.640069608535283*^9, 3.640069620996996*^9}, {
   3.6400696979693985`*^9, 3.640069732907397*^9}, 3.640069782725246*^9, 
   3.640076332888894*^9, 3.640410773110824*^9}]
}, {2}]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["\:041c\:0456\:043d\:0456\:043c\:0456\:0437\:0430\:0446\:0456\:044f", \
"Section",
 CellChangeTimes->{{3.640427506371912*^9, 3.6404275380777254`*^9}, {
  3.6404276181993084`*^9, 3.6404276193403735`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Row", "@", 
    RowBox[{"Through", "@", 
     RowBox[{
      RowBox[{
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"DFAPlot", "[", 
           RowBox[{"#", ",", 
            RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], "&"}], ",", 
         RowBox[{
          RowBox[{"TableForm", "[", 
           RowBox[{
            RowBox[{
            "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], ",", 
            RowBox[{"TableHeadings", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"MapAt", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Row", "@", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\[Rule] \>\"", ",", "#"}], "}"}]}], "&"}], 
                  ",", 
                  RowBox[{
                  "#", "\[LeftDoubleBracket]", "4", 
                   "\[RightDoubleBracket]"}]}], "]"}], "[", 
                RowBox[{
                 RowBox[{"MapAt", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Row", "@", 
                    RowBox[{"{", 
                    RowBox[{"\"\<* \>\"", ",", "#"}], "}"}]}], "&"}], ",", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "5", 
                    "\[RightDoubleBracket]"}], "}"}], "\[Transpose]"}]}], 
                  "]"}], "@", 
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "1", 
                  "\[RightDoubleBracket]"}]}], "]"}], ",", 
               RowBox[{
               "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
              "}"}]}], ",", 
            RowBox[{"TableAlignments", "\[Rule]", "Right"}]}], "]"}], "&"}]}],
         "}"}], "\[IndentingNewLine]", "\[LeftDoubleBracket]", 
       "\:0412\:0438\:0432\:0456\:0434", "\[RightDoubleBracket]"}], "@", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
        "\:041c\:0456\:043d\:0456\:043c\:0456\:0437\:0443\:0432\:0430\:0442\
\:0438", ",", 
         RowBox[{
          RowBox[{"MapAt", "[", 
           RowBox[{
            RowBox[{"Range", "@*", "Length"}], ",", "1"}], "]"}], "@*", 
          "DFAMinimize"}], ",", 
         RowBox[{"#", "&"}]}], "]"}], "@", 
       RowBox[{"DFA", "@", "\:0414\:0421\:0410"}]}]}]}]}], ",", 
   RowBox[{"Row", "@", 
    RowBox[{"Riffle", "[", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Control", "@", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"\:0412\:0438\:0432\:0456\:0434", ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "2"}], "}"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
             "1", "\[Rule]", 
              "\"\<\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430\>\""}], 
             ",", 
             RowBox[{
             "2", "\[Rule]", 
              "\"\<\:0422\:0430\:0431\:043b\:0438\:0446\:044f\>\""}]}], "}"}],
            ",", 
           RowBox[{"ControlType", "\[Rule]", "TogglerBar"}]}], "}"}]}], ",", 
        RowBox[{"Control", "@", 
         RowBox[{"{", 
          RowBox[{"\:0414\:0421\:0410", ",", 
           RowBox[{"Keys", "@", "DFA"}]}], "}"}]}], ",", 
        RowBox[{"Control", "@", 
         RowBox[{"{", 
          RowBox[{
          "\:041c\:0456\:043d\:0456\:043c\:0456\:0437\:0443\:0432\:0430\:0442\
\:0438", ",", 
           RowBox[{"{", 
            RowBox[{"False", ",", "True"}], "}"}]}], "}"}]}]}], "}"}], ",", 
      RowBox[{"Spacer", "[", "20", "]"}]}], "]"}]}], ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6391527098357067`*^9, 3.63915286514459*^9}, {
   3.6391528973094296`*^9, 3.639152924155965*^9}, {3.6391529794021254`*^9, 
   3.6391529875795927`*^9}, {3.6391530612808084`*^9, 
   3.6391530689132447`*^9}, {3.639153103237208*^9, 3.639153344962034*^9}, {
   3.6391534402054815`*^9, 3.6391535744281588`*^9}, {3.6391536229009314`*^9, 
   3.639153639626888*^9}, {3.639957390705535*^9, 3.6399574372281957`*^9}, {
   3.6399575742110305`*^9, 3.6399576264250174`*^9}, {3.6399576931618342`*^9, 
   3.639957860068381*^9}, {3.6399579248240843`*^9, 3.6399579318504868`*^9}, {
   3.639958021205597*^9, 3.639958024994814*^9}, {3.639958084354209*^9, 
   3.6399585432954593`*^9}, {3.639958574098221*^9, 3.6399585849628425`*^9}, {
   3.6399594145702934`*^9, 3.6399594428679113`*^9}, {3.6400720833838363`*^9, 
   3.640072084566904*^9}, 3.6400764550458813`*^9, 3.640410370535798*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`\:0414\:0421\:0410$$ = 
    "1 b", $CellContext`\:0412\:0438\:0432\:0456\:0434$$ = {1, 
    2}, $CellContext`\:041c\:0456\:043d\:0456\:043c\:0456\:0437\:0443\:0432\
\:0430\:0442\:0438$$ = True, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`\:0412\:0438\:0432\:0456\:0434$$], {1, 2}}, {
      1 -> "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430", 2 -> 
       "\:0422\:0430\:0431\:043b\:0438\:0446\:044f"}}, {
      Hold[$CellContext`\:0414\:0421\:0410$$], {
      "Odd a", "2nd b", "Substr aa", "1 b", "Dif ab", "Even both ab", 
       "\!\(\*SubscriptBox[\(w\), \(2\)]\) \[Congruent] 1 (mod 5)", 
       "Even both ab but any c", "Dif abc"}}, {
      Hold[$CellContext`\:041c\:0456\:043d\:0456\:043c\:0456\:0437\:0443\:0432\
\:0430\:0442\:0438$$], {False, True}}, {
      Hold[
       Row[{
         Manipulate`Place[1], 
         Spacer[20], 
         Manipulate`Place[2], 
         Spacer[20], 
         Manipulate`Place[3]}]], Manipulate`Dump`ThisIsNotAControl}}, 
    Typeset`size$$ = {875., {95., 97.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = 
    False, $CellContext`\:0412\:0438\:0432\:0456\:0434$492$$ = 
    False, $CellContext`\:0414\:0421\:0410$493$$ = 
    0, $CellContext`\:041c\:0456\:043d\:0456\:043c\:0456\:0437\:0443\:0432\
\:0430\:0442\:0438$494$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`\:0414\:0421\:0410$$ = 
        "Odd a", $CellContext`\:0412\:0438\:0432\:0456\:0434$$ = {1, 
         2}, $CellContext`\:041c\:0456\:043d\:0456\:043c\:0456\:0437\:0443\
\:0432\:0430\:0442\:0438$$ = False}, "ControllerVariables" :> {
        Hold[$CellContext`\:0412\:0438\:0432\:0456\:0434$$, $CellContext`\
\:0412\:0438\:0432\:0456\:0434$492$$, False], 
        Hold[$CellContext`\:0414\:0421\:0410$$, $CellContext`\:0414\:0421\
\:0410$493$$, 0], 
        Hold[$CellContext`\:041c\:0456\:043d\:0456\:043c\:0456\:0437\:0443\
\:0432\:0430\:0442\:0438$$, $CellContext`\:041c\:0456\:043d\:0456\:043c\:0456\
\:0437\:0443\:0432\:0430\:0442\:0438$494$$, False]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Row[
        Through[
         Part[{$CellContext`DFAPlot[#, ImageSize -> Large]& , TableForm[
            Part[#, 3], TableHeadings -> {
              MapAt[Row[{"\[Rule] ", #}]& , 
               Part[#, 4]][
               MapAt[Row[{"* ", #}]& , 
                Transpose[{
                  Part[#, 5]}]][
                Part[#, 1]]], 
              Part[#, 2]}, TableAlignments -> 
            Right]& }, $CellContext`\:0412\:0438\:0432\:0456\:0434$$][
          
          If[$CellContext`\:041c\:0456\:043d\:0456\:043c\:0456\:0437\:0443\
\:0432\:0430\:0442\:0438$$, 
           Composition[
            MapAt[
             Composition[Range, Length], 1], $CellContext`DFAMinimize], #& ][
           $CellContext`DFA[$CellContext`\:0414\:0421\:0410$$]]]]], 
      "Specifications" :> {{{$CellContext`\:0412\:0438\:0432\:0456\:0434$$, {
          1, 2}}, {
         1 -> "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430", 2 -> 
          "\:0422\:0430\:0431\:043b\:0438\:0446\:044f"}, ControlType -> 
         TogglerBar, ControlPlacement -> 
         1}, {$CellContext`\:0414\:0421\:0410$$, {
         "Odd a", "2nd b", "Substr aa", "1 b", "Dif ab", "Even both ab", 
          "\!\(\*SubscriptBox[\(w\), \(2\)]\) \[Congruent] 1 (mod 5)", 
          "Even both ab but any c", "Dif abc"}, ControlPlacement -> 
         2}, {$CellContext`\:041c\:0456\:043d\:0456\:043c\:0456\:0437\:0443\
\:0432\:0430\:0442\:0438$$, {False, True}, ControlPlacement -> 3}, 
        Row[{
          Manipulate`Place[1], 
          Spacer[20], 
          Manipulate`Place[2], 
          Spacer[20], 
          Manipulate`Place[3]}]}, "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{916., {136., 143.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`DFAPlot[
         Pattern[$CellContext`M, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          
          OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`DFA\[Delta]Edges, Identity, 
         GraphPlot, $CellContext`opts], $CellContext`DFACustomPlot[{
          Pattern[$CellContext`Q, 
           Blank[]], 
          Pattern[$CellContext`\[CapitalSigma], 
           Blank[]], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`F, 
           Blank[]]}, 
         Pattern[$CellContext`Edges, 
          Blank[]], 
         Pattern[$CellContext`PrePlot, 
          Blank[]], 
         Pattern[Plot, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          OptionsPattern[]]] := 
       With[{$CellContext`Qf = 
          If[Null =!= $CellContext`Q, Part[$CellContext`Q, #]& , 
            Identity], $CellContext`\[CapitalSigma]f = 
          If[Null =!= $CellContext`\[CapitalSigma], 
            Part[$CellContext`\[CapitalSigma], #]& , Characters[
             FromCharacterCode[96 + #]]& ]}, 
         Apply[Plot, 
          $CellContext`PrePlot[{
            If[
             
             OptionValue[$CellContext`EdgeCollapsing], \
$CellContext`DFACollapseEdges, Identity][
             $CellContext`Edges[$CellContext`\[Delta]]], 
            Apply[Sequence, 
             FilterRules[
              FilterRules[{$CellContext`opts}, 
               Options[Plot]], 
              Except[{VertexRenderingFunction, EdgeRenderingFunction}]]], 
            VertexRenderingFunction -> Replace[
              OptionValue[VertexRenderingFunction], 
              Automatic -> ($CellContext`DFARenderState[#2, 
                Replace[$CellContext`s, Null -> 1], $CellContext`F, #, 
                VertexLabeling -> $CellContext`Qf, 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderState]]]]& )], 
            EdgeRenderingFunction -> Replace[
              OptionValue[EdgeRenderingFunction], 
              Automatic -> ($CellContext`DFARenderTransition[#3, #, 
                EdgeLabeling -> If[Null =!= $CellContext`\[CapitalSigma], 
                  Function[$CellContext`l, 
                   If[
                   Length[$CellContext`l] == 
                    Length[$CellContext`\[CapitalSigma]], "\[CapitalSigma]", 
                    If[
                    Length[$CellContext`l] > 
                    Length[$CellContext`\[CapitalSigma]]/2., 
                    Row[{"\[CapitalSigma]", "\[Backslash]", 
                    $CellContext`\[CapitalSigma]f[
                    Complement[
                    Range[
                    Length[$CellContext`\[CapitalSigma]]], $CellContext`l]]}], 
                    $CellContext`\[CapitalSigma]f[$CellContext`l]]]], 
                  FromCharacterCode[# + 96]& ], 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderTransition]]]]& )]}]]], 
       Options[$CellContext`DFACustomPlot] = {
        AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> False, 
         AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, 
         Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, 
         ColorOutput -> Automatic, ContentSelectable -> Automatic, 
         CoordinatesToolOptions -> Automatic, DataRange -> Automatic, 
         DirectedEdges -> False, DisplayFunction :> $DisplayFunction, 
         EdgeLabeling -> True, EdgeRenderingFunction -> Automatic, 
         Epilog -> {}, FormatType :> TraditionalForm, Frame -> False, 
         FrameLabel -> None, FrameStyle -> {}, FrameTicks -> None, 
         FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, 
         ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, 
         ImageSizeRaw -> Automatic, LabelStyle -> {}, Method -> Automatic, 
         MultiedgeStyle -> Automatic, PackingMethod -> Automatic, PlotLabel -> 
         None, PlotRange -> All, PlotRangeClipping -> False, PlotRangePadding -> 
         Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, 
         PreserveImageOptions -> Automatic, Prolog -> {}, RotateLabel -> True,
          SelfLoopStyle -> Automatic, Ticks -> Automatic, TicksStyle -> {}, 
         VertexCoordinateRules -> Automatic, VertexRenderingFunction -> 
         Automatic, $CellContext`EdgeCollapsing -> 
         True, $CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`FinalColor -> GrayLevel[0.85], 
         VertexSize -> 0.1, VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}, $CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFACollapseEdges[
         Pattern[$CellContext`e, 
          Blank[]]] := MapAt[Replace[#, Pattern[$CellContext`l, 
            Blank[List]] :> Flatten[$CellContext`l]]& , {All, 2}][
         ReplaceRepeated[$CellContext`e, {
            Pattern[$CellContext`h, 
             BlankNullSequence[]], {
             Pattern[$CellContext`x, 
              Blank[]], 
             Pattern[$CellContext`l1, 
              Blank[]]}, 
            Pattern[$CellContext`u, 
             BlankNullSequence[]], {
             Pattern[$CellContext`x, 
              Blank[]], 
             Pattern[$CellContext`l2, 
              Blank[]]}, 
            Pattern[$CellContext`t, 
             
             BlankNullSequence[]]} :> {$CellContext`h, {$CellContext`x, \
{$CellContext`l1, $CellContext`l2}}, $CellContext`u, $CellContext`t}]], \
$CellContext`DFARenderState[
         Pattern[$CellContext`q, 
          Blank[]], 
         Pattern[$CellContext`s, 
          Blank[]], 
         Pattern[$CellContext`F, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {
         If[$CellContext`q === $CellContext`s, 
          OptionValue[$CellContext`StartColor], 
          OptionValue[$CellContext`FinalColor]], 
         EdgeForm[Black], 
         Disk[$CellContext`p, 
          OptionValue[VertexSize]], 
         If[
          MemberQ[$CellContext`F, $CellContext`q], 
          Disk[$CellContext`p, 0.7 OptionValue[VertexSize]]], 
         Text[
          Replace[
           OptionValue[VertexLabeling], Automatic -> 
           Identity][$CellContext`q], $CellContext`p, BaseStyle -> 
          OptionValue[VertexLabelStyle]]}, 
       Options[$CellContext`DFARenderState] = {$CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`FinalColor -> GrayLevel[0.85], 
         VertexSize -> 0.1, VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFARenderTransition[
         Pattern[$CellContext`t, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {Black, 
         Arrowheads[{{
            OptionValue[$CellContext`ArrowSize], 
            OptionValue[$CellContext`ArrowPosition]}}], 
         Arrow[
          
          BSplineCurve[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1]], 
         Text[
          Style[
           Replace[
            OptionValue[EdgeLabeling], Automatic -> Identity][$CellContext`t], 
           Apply[Sequence, 
            OptionValue[EdgeLabelStyle]]], 
          
          BSplineFunction[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1][
           OptionValue[$CellContext`EdgeLabelPosition]], Background -> 
          White]}, 
       Options[$CellContext`DFARenderTransition] = {$CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $DisplayFunction = 
       Identity, $CellContext`DFA\[Delta]Edges[
         Pattern[$CellContext`\[Delta], 
          Blank[]]] := With[{$CellContext`rd = Map[Range, 
            Dimensions[$CellContext`\[Delta], 2]]}, 
         Flatten[
          Inner[
           Composition[Reverse, List], 
           Part[$CellContext`rd, 2], 
           Inner[Rule, 
            Part[$CellContext`rd, 1], $CellContext`\[Delta], List], List], 
          1]], $CellContext`DFAMinimize[{
          Pattern[$CellContext`Q, 
           Blank[]], 
          Pattern[$CellContext`\[CapitalSigma], 
           Blank[]], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`F, 
           Blank[]]}] := 
       Module[{$CellContext`M, 
          C}, $CellContext`M = \
$CellContext`DFADeleteInaccesibleStates[{$CellContext`Q, $CellContext`\
\[CapitalSigma], $CellContext`\[Delta], $CellContext`s, $CellContext`F}]; 
         C = $CellContext`DFAEquivalenceClasses[$CellContext`M]; Join[{
            Map[
            Part[$CellContext`M, 1, #]& , C], $CellContext`\[CapitalSigma]}, 
           MapAt[Union, -1][
            ReplaceAll[{
              Part[$CellContext`M, 3, 
               Part[C, All, 1]], $CellContext`s, 
              Part[$CellContext`M, 5]}, 
             Flatten[
              MapThread[
               Composition[Thread, Rule], {C, 
                Range[
                 Length[C]]}]]]]]], $CellContext`DFADeleteInaccesibleStates[{
          Pattern[$CellContext`Q, 
           Blank[]], 
          Pattern[$CellContext`\[CapitalSigma], 
           Blank[]], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`F, 
           Blank[]]}] := (Join[{
          Part[$CellContext`Q, #], $CellContext`\[CapitalSigma]}, 
         Insert[$CellContext`s, 2][
          ReplaceAll[{
            Part[$CellContext`\[Delta], #], 
            Intersection[$CellContext`F, #]}, 
           Thread[# -> Range[
              Length[#]]]]]]& )[
         VertexOutComponent[
          Graph[
           Flatten[
            Inner[DirectedEdge, 
             Range[
              Length[$CellContext`\[Delta]]], $CellContext`\[Delta], 
             List]]], $CellContext`s]], $CellContext`DFAEquivalenceClasses[{
          Blank[], 
          Blank[], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Blank[], 
          Pattern[$CellContext`F, 
           Blank[]]}] := 
       Module[{$CellContext`Q, $CellContext`\[CapitalSigma], $CellContext`P, 
          C}, {$CellContext`Q, $CellContext`\[CapitalSigma]} = Map[Range, 
            Dimensions[$CellContext`\[Delta], 2]]; $CellContext`P = Flatten[
            Append[
             Transpose[{$CellContext`Q, $CellContext`Q}]][
             Map[Subsets[
               Sort[#], {2}]& , {
               Complement[$CellContext`Q, $CellContext`F], $CellContext`F}]], 
            1]; $CellContext`P = FixedPoint[DeleteCases[#, 
             Condition[
              Pattern[$CellContext`p, 
               Blank[]], 
              MemberQ[$CellContext`\[CapitalSigma], 
               Condition[
                Pattern[$CellContext`a, 
                 Blank[]], 
                FreeQ[#, 
                 Sort[
                  
                  Part[$CellContext`\[Delta], $CellContext`p, \
$CellContext`a]]]]]]]& , $CellContext`P, SameTest -> (Equal[
              Map[Length, 
               Unevaluated[
                SlotSequence[1]]]]& )]; C = ReplaceRepeated[$CellContext`P, {
              Pattern[$CellContext`h, 
               BlankNullSequence[]], {
               Pattern[$CellContext`a, 
                BlankNullSequence[]], 
               Pattern[$CellContext`x, 
                Blank[]], 
               Pattern[$CellContext`b, 
                BlankNullSequence[]]}, 
              Pattern[$CellContext`u, 
               BlankNullSequence[]], {
               Pattern[$CellContext`p, 
                BlankNullSequence[]], 
               Pattern[$CellContext`x, 
                Blank[]], 
               Pattern[$CellContext`q, 
                BlankNullSequence[]]}, 
              Pattern[$CellContext`t, 
               
               BlankNullSequence[]]} :> {$CellContext`h, {$CellContext`a, \
$CellContext`x, $CellContext`b, $CellContext`p, $CellContext`q}, \
$CellContext`u, $CellContext`t}]; C = ((SortBy[First][
            Map[Union, #, {1}]]& )[
            Join[#, 
             (If[# != {}, 
              ArrayReshape[#, {
                Length[#], 1}], #]& )[
              Complement[$CellContext`Q, 
               Flatten[#]]]]]& )[C]], $CellContext`DFA = 
       Association["Odd a" -> {{
            Tooltip["E", "even"], 
            Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}}, 
         "2nd b" -> {{1, 2, 3, 4}, {"a", "b"}, {{2, 2}, {4, 3}, {3, 3}, {4, 
           4}}, 1, {3}}, 
         "Substr aa" -> {{
           "\!\(\*SubscriptBox[\(A\), \(0\)]\)", 
            "\!\(\*SubscriptBox[\(A\), \(1\)]\)", 
            "\!\(\*SubscriptBox[\(A\), \(2\)]\)"}, {"a", "b"}, {{2, 1}, {3, 
           1}, {3, 3}}, 1, {3}}, 
         "1 b" -> {{1, 2, 3, 4, 5, 6}, {"a", "b"}, {{2, 3}, {1, 4}, {5, 6}, {
           5, 6}, {5, 6}, {6, 6}}, 1, {3, 4, 5}}, 
         "Dif ab" -> {{1, 2, 3, 4}, {"a", "b"}, {{2, 3}, {4, 3}, {2, 4}, {4, 
           4}}, 1, {1, 2, 3}}, 
         "Even both ab" -> {{1, 2, 3, 4}, {"a", "b"}, {{4, 2}, {3, 1}, {2, 
           4}, {1, 3}}, 1, {1}}, 
         "\!\(\*SubscriptBox[\(w\), \(2\)]\) \[Congruent] 1 (mod 5)" -> {{1, 
           2, 3, 4, 5}, {0, 1}, {{1, 2}, {3, 4}, {5, 1}, {2, 3}, {4, 5}}, 1, {
           2}}, "Even both ab but any c" -> {{1, 2, 3, 4}, {"a", "b", "c"}, {{
           4, 2, 1}, {3, 1, 2}, {2, 4, 3}, {1, 3, 4}}, 1, {1}}, 
         "Dif abc" -> {{0, 1, 2, 3, 4}, {"a", "b", "c"}, {{2, 3, 4}, {5, 3, 
           4}, {2, 5, 4}, {2, 3, 5}, {5, 5, 5}}, 1, {1, 2, 3, 4}}]}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.639152849269682*^9, 3.6391528662906556`*^9}, {
   3.639152915724483*^9, 3.6391529246649942`*^9}, 3.6391529881846275`*^9, 
   3.6391530693832717`*^9, {3.639153129270697*^9, 3.639153151278956*^9}, {
   3.63915319366338*^9, 3.639153243746245*^9}, {3.6391532811653852`*^9, 
   3.639153338624672*^9}, {3.639153456982441*^9, 3.6391535149757586`*^9}, 
   3.639153575651229*^9, {3.6391536289862795`*^9, 3.639153645944249*^9}, 
   3.63995728450146*^9, 3.639957438680279*^9, {3.639957585998705*^9, 
   3.639957630021223*^9}, {3.6399577661640096`*^9, 3.6399577796247797`*^9}, 
   3.6399578203261075`*^9, 3.6399578615864677`*^9, 3.6399579334405775`*^9, 
   3.6399580253888364`*^9, {3.639958079183913*^9, 3.6399581114017563`*^9}, 
   3.6399581708921585`*^9, {3.6399582373939624`*^9, 3.639958293729185*^9}, 
   3.6399583422439594`*^9, {3.639958381567209*^9, 3.6399583909057426`*^9}, 
   3.639958421065468*^9, 3.639958544456526*^9, {3.6399594320442924`*^9, 
   3.6399594434019423`*^9}, 3.639970753228359*^9, 3.640069789186616*^9, {
   3.6400719365894403`*^9, 3.640071944611899*^9}, 3.6400720019701796`*^9, {
   3.6400720804346676`*^9, 3.640072084950926*^9}, 3.640076339780288*^9, 
   3.640076483058483*^9, 3.6404107738298655`*^9}]
}, {2}]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["\:0414\:043e\:043f\:043e\:0432\:043d\:0435\:043d\:043d\:044f", "Section",
 CellChangeTimes->{{3.6404275716156435`*^9, 3.6404276098978333`*^9}, {
  3.64042766071974*^9, 3.640427664978984*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"DFAPlot", "[", 
    RowBox[{
     RowBox[{"DFAComplement", "[", "A", "]"}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"A", ",", 
       RowBox[{"DFA", "@", "\"\<Odd a\>\""}]}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Dynamic", "@", 
    RowBox[{"Evaluate", "@", 
     RowBox[{"OverBar", "[", 
      RowBox[{"PopupMenu", "[", 
       RowBox[{
        RowBox[{"Dynamic", "[", "A", "]"}], ",", 
        RowBox[{"Reverse", "/@", 
         RowBox[{"Normal", "@", "DFA"}]}], ",", ",", 
        RowBox[{"Panel", "[", 
         RowBox[{
          RowBox[{"DFAPlot", "[", 
           RowBox[{"A", ",", 
            RowBox[{"ImageSize", "\[Rule]", "Medium"}], ",", 
            RowBox[{"Background", "\[Rule]", "White"}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"ImageMargins", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"Automatic", ",", "Automatic"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"Automatic", ",", "20"}], "}"}]}], "}"}]}]}], "]"}]}], 
       "]"}], "]"}]}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"ControlPlacement", "\[Rule]", "Left"}], ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6403288596813145`*^9, 3.6403289665844297`*^9}, {
   3.640328998316244*^9, 3.6403290180943756`*^9}, {3.640329057405624*^9, 
   3.6403295823696504`*^9}, 3.6403296257131295`*^9, 3.6403296666854725`*^9, 
   3.640329738185562*^9, 3.6404103749200487`*^9, {3.6404276440427866`*^9, 
   3.640427650365148*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`A$$ = {{1, 2, 3, 4}, {"a", "b"}, {{2, 2}, {
     4, 3}, {3, 3}, {4, 4}}, 1, {3}}, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`A$$], {{
         Tooltip["E", "even"], 
         Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}}}}, {
      Hold[
       Dynamic[
        OverBar[
         PopupMenu[
          Dynamic[$CellContext`A$$], {{{
              Tooltip["E", "even"], 
              Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}} -> 
           "Odd a", {{1, 2, 3, 4}, {"a", "b"}, {{2, 2}, {4, 3}, {3, 3}, {4, 
             4}}, 1, {3}} -> 
           "2nd b", {{
             "\!\(\*SubscriptBox[\(A\), \(0\)]\)", 
              "\!\(\*SubscriptBox[\(A\), \(1\)]\)", 
              "\!\(\*SubscriptBox[\(A\), \(2\)]\)"}, {"a", "b"}, {{2, 1}, {3, 
             1}, {3, 3}}, 1, {3}} -> 
           "Substr aa", {{1, 2, 3, 4, 5, 6}, {"a", "b"}, {{2, 3}, {1, 4}, {5, 
             6}, {5, 6}, {5, 6}, {6, 6}}, 1, {3, 4, 5}} -> 
           "1 b", {{1, 2, 3, 4}, {"a", "b"}, {{2, 3}, {4, 3}, {2, 4}, {4, 4}},
              1, {1, 2, 3}} -> 
           "Dif ab", {{1, 2, 3, 4}, {"a", "b"}, {{4, 2}, {3, 1}, {2, 4}, {1, 
             3}}, 1, {1}} -> 
           "Even both ab", {{1, 2, 3, 4, 5}, {0, 1}, {{1, 2}, {3, 4}, {5, 
             1}, {2, 3}, {4, 5}}, 1, {2}} -> 
           "\!\(\*SubscriptBox[\(w\), \(2\)]\) \[Congruent] 1 (mod 5)", {{1, 
             2, 3, 4}, {"a", "b", "c"}, {{4, 2, 1}, {3, 1, 2}, {2, 4, 3}, {1, 
             3, 4}}, 1, {1}} -> 
           "Even both ab but any c", {{0, 1, 2, 3, 4}, {"a", "b", "c"}, {{2, 
             3, 4}, {5, 3, 4}, {2, 5, 4}, {2, 3, 5}, {5, 5, 5}}, 1, {1, 2, 3, 
             4}} -> "Dif abc"}, Null, 
          Panel[
           $CellContext`DFACustomPlot[$CellContext`A$$, $CellContext`DFA\
\[Delta]Edges, Identity, GraphPlot, ImageSize -> Medium, Background -> 
            GrayLevel[1]], 
           ImageMargins -> {{Automatic, Automatic}, {Automatic, 20}}]]]]], 
      Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = {
    432., {222., 224.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`A$$ = {{
           Tooltip["E", "even"], 
           Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}}}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> $CellContext`DFAPlot[
        $CellContext`DFAComplement[$CellContext`A$$], ImageSize -> Large], 
      "Specifications" :> {{{$CellContext`A$$, {{
            Tooltip["E", "even"], 
            Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}}}, 
         ControlType -> None}, 
        Dynamic[
         OverBar[
          PopupMenu[
           Dynamic[$CellContext`A$$], {{{
               Tooltip["E", "even"], 
               Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}} -> 
            "Odd a", {{1, 2, 3, 4}, {"a", "b"}, {{2, 2}, {4, 3}, {3, 3}, {4, 
              4}}, 1, {3}} -> 
            "2nd b", {{
              "\!\(\*SubscriptBox[\(A\), \(0\)]\)", 
               "\!\(\*SubscriptBox[\(A\), \(1\)]\)", 
               "\!\(\*SubscriptBox[\(A\), \(2\)]\)"}, {"a", "b"}, {{2, 1}, {3,
               1}, {3, 3}}, 1, {3}} -> 
            "Substr aa", {{1, 2, 3, 4, 5, 6}, {"a", "b"}, {{2, 3}, {1, 4}, {5,
               6}, {5, 6}, {5, 6}, {6, 6}}, 1, {3, 4, 5}} -> 
            "1 b", {{1, 2, 3, 4}, {"a", "b"}, {{2, 3}, {4, 3}, {2, 4}, {4, 
              4}}, 1, {1, 2, 3}} -> 
            "Dif ab", {{1, 2, 3, 4}, {"a", "b"}, {{4, 2}, {3, 1}, {2, 4}, {1, 
              3}}, 1, {1}} -> 
            "Even both ab", {{1, 2, 3, 4, 5}, {0, 1}, {{1, 2}, {3, 4}, {5, 
              1}, {2, 3}, {4, 5}}, 1, {2}} -> 
            "\!\(\*SubscriptBox[\(w\), \(2\)]\) \[Congruent] 1 (mod 5)", {{1, 
              2, 3, 4}, {"a", "b", "c"}, {{4, 2, 1}, {3, 1, 2}, {2, 4, 3}, {1,
               3, 4}}, 1, {1}} -> 
            "Even both ab but any c", {{0, 1, 2, 3, 4}, {"a", "b", "c"}, {{2, 
              3, 4}, {5, 3, 4}, {2, 5, 4}, {2, 3, 5}, {5, 5, 5}}, 1, {1, 2, 3,
               4}} -> "Dif abc"}, Null, 
           Panel[
            $CellContext`DFACustomPlot[$CellContext`A$$, $CellContext`DFA\
\[Delta]Edges, Identity, GraphPlot, ImageSize -> Medium, Background -> 
             GrayLevel[1]], 
            ImageMargins -> {{Automatic, Automatic}, {Automatic, 20}}]]]]}, 
      "Options" :> {ControlPlacement -> Left}, "DefaultOptions" :> {}],
     ImageSizeCache->{760., {247., 254.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`DFAPlot[
         Pattern[$CellContext`M, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          
          OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`DFA\[Delta]Edges, Identity, 
         GraphPlot, $CellContext`opts], $CellContext`DFACustomPlot[{
          Pattern[$CellContext`Q, 
           Blank[]], 
          Pattern[$CellContext`\[CapitalSigma], 
           Blank[]], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`F, 
           Blank[]]}, 
         Pattern[$CellContext`Edges, 
          Blank[]], 
         Pattern[$CellContext`PrePlot, 
          Blank[]], 
         Pattern[Plot, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          OptionsPattern[]]] := 
       With[{$CellContext`Qf = 
          If[Null =!= $CellContext`Q, Part[$CellContext`Q, #]& , 
            Identity], $CellContext`\[CapitalSigma]f = 
          If[Null =!= $CellContext`\[CapitalSigma], 
            Part[$CellContext`\[CapitalSigma], #]& , Characters[
             FromCharacterCode[96 + #]]& ]}, 
         Apply[Plot, 
          $CellContext`PrePlot[{
            If[
             
             OptionValue[$CellContext`EdgeCollapsing], \
$CellContext`DFACollapseEdges, Identity][
             $CellContext`Edges[$CellContext`\[Delta]]], 
            Apply[Sequence, 
             FilterRules[
              FilterRules[{$CellContext`opts}, 
               Options[Plot]], 
              Except[{VertexRenderingFunction, EdgeRenderingFunction}]]], 
            VertexRenderingFunction -> Replace[
              OptionValue[VertexRenderingFunction], 
              Automatic -> ($CellContext`DFARenderState[#2, 
                Replace[$CellContext`s, Null -> 1], $CellContext`F, #, 
                VertexLabeling -> $CellContext`Qf, 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderState]]]]& )], 
            EdgeRenderingFunction -> Replace[
              OptionValue[EdgeRenderingFunction], 
              Automatic -> ($CellContext`DFARenderTransition[#3, #, 
                EdgeLabeling -> If[Null =!= $CellContext`\[CapitalSigma], 
                  Function[$CellContext`l, 
                   If[
                   Length[$CellContext`l] == 
                    Length[$CellContext`\[CapitalSigma]], "\[CapitalSigma]", 
                    If[
                    Length[$CellContext`l] > 
                    Length[$CellContext`\[CapitalSigma]]/2., 
                    Row[{"\[CapitalSigma]", "\[Backslash]", 
                    $CellContext`\[CapitalSigma]f[
                    Complement[
                    Range[
                    Length[$CellContext`\[CapitalSigma]]], $CellContext`l]]}], 
                    $CellContext`\[CapitalSigma]f[$CellContext`l]]]], 
                  FromCharacterCode[# + 96]& ], 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderTransition]]]]& )]}]]], 
       Options[$CellContext`DFACustomPlot] = {
        AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> False, 
         AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, 
         Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, 
         ColorOutput -> Automatic, ContentSelectable -> Automatic, 
         CoordinatesToolOptions -> Automatic, DataRange -> Automatic, 
         DirectedEdges -> False, DisplayFunction :> $DisplayFunction, 
         EdgeLabeling -> True, EdgeRenderingFunction -> Automatic, 
         Epilog -> {}, FormatType :> TraditionalForm, Frame -> False, 
         FrameLabel -> None, FrameStyle -> {}, FrameTicks -> None, 
         FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, 
         ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, 
         ImageSizeRaw -> Automatic, LabelStyle -> {}, Method -> Automatic, 
         MultiedgeStyle -> Automatic, PackingMethod -> Automatic, PlotLabel -> 
         None, PlotRange -> All, PlotRangeClipping -> False, PlotRangePadding -> 
         Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, 
         PreserveImageOptions -> Automatic, Prolog -> {}, RotateLabel -> True,
          SelfLoopStyle -> Automatic, Ticks -> Automatic, TicksStyle -> {}, 
         VertexCoordinateRules -> Automatic, VertexRenderingFunction -> 
         Automatic, $CellContext`EdgeCollapsing -> 
         True, $CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`FinalColor -> GrayLevel[0.85], 
         VertexSize -> 0.1, VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}, $CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFACollapseEdges[
         Pattern[$CellContext`e, 
          Blank[]]] := MapAt[Replace[#, Pattern[$CellContext`l, 
            Blank[List]] :> Flatten[$CellContext`l]]& , {All, 2}][
         ReplaceRepeated[$CellContext`e, {
            Pattern[$CellContext`h, 
             BlankNullSequence[]], {
             Pattern[$CellContext`x, 
              Blank[]], 
             Pattern[$CellContext`l1, 
              Blank[]]}, 
            Pattern[$CellContext`u, 
             BlankNullSequence[]], {
             Pattern[$CellContext`x, 
              Blank[]], 
             Pattern[$CellContext`l2, 
              Blank[]]}, 
            Pattern[$CellContext`t, 
             
             BlankNullSequence[]]} :> {$CellContext`h, {$CellContext`x, \
{$CellContext`l1, $CellContext`l2}}, $CellContext`u, $CellContext`t}]], \
$CellContext`DFARenderState[
         Pattern[$CellContext`q, 
          Blank[]], 
         Pattern[$CellContext`s, 
          Blank[]], 
         Pattern[$CellContext`F, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {
         If[$CellContext`q === $CellContext`s, 
          OptionValue[$CellContext`StartColor], 
          OptionValue[$CellContext`FinalColor]], 
         EdgeForm[Black], 
         Disk[$CellContext`p, 
          OptionValue[VertexSize]], 
         If[
          MemberQ[$CellContext`F, $CellContext`q], 
          Disk[$CellContext`p, 0.7 OptionValue[VertexSize]]], 
         Text[
          Replace[
           OptionValue[VertexLabeling], Automatic -> 
           Identity][$CellContext`q], $CellContext`p, BaseStyle -> 
          OptionValue[VertexLabelStyle]]}, 
       Options[$CellContext`DFARenderState] = {$CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`FinalColor -> GrayLevel[0.85], 
         VertexSize -> 0.1, VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFARenderTransition[
         Pattern[$CellContext`t, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {Black, 
         Arrowheads[{{
            OptionValue[$CellContext`ArrowSize], 
            OptionValue[$CellContext`ArrowPosition]}}], 
         Arrow[
          
          BSplineCurve[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1]], 
         Text[
          Style[
           Replace[
            OptionValue[EdgeLabeling], Automatic -> Identity][$CellContext`t], 
           Apply[Sequence, 
            OptionValue[EdgeLabelStyle]]], 
          
          BSplineFunction[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1][
           OptionValue[$CellContext`EdgeLabelPosition]], Background -> 
          White]}, 
       Options[$CellContext`DFARenderTransition] = {$CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $DisplayFunction = 
       Identity, $CellContext`DFA\[Delta]Edges[
         Pattern[$CellContext`\[Delta], 
          Blank[]]] := With[{$CellContext`rd = Map[Range, 
            Dimensions[$CellContext`\[Delta], 2]]}, 
         Flatten[
          Inner[
           Composition[Reverse, List], 
           Part[$CellContext`rd, 2], 
           Inner[Rule, 
            Part[$CellContext`rd, 1], $CellContext`\[Delta], List], List], 
          1]], $CellContext`DFAComplement[
         Pattern[$CellContext`A, 
          Blank[]]] := With[{$CellContext`Qi = Range[
            Length[
             Part[$CellContext`A, 1]]]}, 
         MapAt[Complement[$CellContext`Qi, #]& , $CellContext`A, 5]]}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.640329636581751*^9, 3.640329667421515*^9, 
  3.64032973989266*^9, 3.6404107740068755`*^9}]
}, {2}]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["\:041e\:0431\[CloseCurlyQuote]\:0454\:0434\:043d\:0430\:043d\:043d\:044f\
", "Section",
 CellChangeTimes->{{3.6404276707573147`*^9, 3.64042767295944*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"DFAPlot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"MapAt", "[", 
       RowBox[{
        RowBox[{"Range", "@*", "Length"}], ",", "1"}], "]"}], "@", 
      RowBox[{"DFAUnion", "[", 
       RowBox[{"A", ",", "B"}], "]"}]}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"A", ",", 
       RowBox[{"DFA", "@", "\"\<Dif ab\>\""}]}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"B", ",", 
       RowBox[{"DFA", "@", "\"\<Substr aa\>\""}]}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Dynamic", "@", 
    RowBox[{"Evaluate", "@", 
     RowBox[{"Row", "@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"Riffle", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"PopupMenu", "[", 
             RowBox[{
              RowBox[{"Dynamic", "[", "#", "]"}], ",", 
              RowBox[{"Reverse", "/@", 
               RowBox[{"Normal", "@", "DFA"}]}], ",", ",", 
              "\[IndentingNewLine]", 
              RowBox[{"Panel", "@", 
               RowBox[{"DFAPlot", "[", 
                RowBox[{"#", ",", 
                 RowBox[{"ImageSize", "\[Rule]", "Medium"}], ",", 
                 RowBox[{"Background", "\[Rule]", "White"}]}], "]"}]}]}], 
             "]"}], "&"}], "/@", 
           RowBox[{"{", 
            RowBox[{"A", ",", "B"}], "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"Style", "[", 
           RowBox[{"\"\<\[Union]\>\"", ",", "30"}], "]"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Spacer", "[", "20", "]"}]}], "]"}]}]}]}], ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6391554968061123`*^9, 3.6391555381004744`*^9}, {
   3.6391865689747715`*^9, 3.639186579600379*^9}, {3.639186621017748*^9, 
   3.6391867093988028`*^9}, {3.639186931301495*^9, 3.6391869983073273`*^9}, {
   3.639187135320164*^9, 3.6391871503790255`*^9}, {3.6399565563498125`*^9, 
   3.639956583594371*^9}, {3.6399567386702404`*^9, 3.639956740026318*^9}, {
   3.639956828290366*^9, 3.639956829522437*^9}, {3.6399590707496276`*^9, 
   3.6399593424191666`*^9}, {3.6399595074626064`*^9, 3.639959507650617*^9}, {
   3.639959545780798*^9, 3.639959563349803*^9}, {3.6399595980117855`*^9, 
   3.639959622830205*^9}, {3.639959663969558*^9, 3.639959674174142*^9}, {
   3.6399597276512003`*^9, 3.6399597902657814`*^9}, {3.639959824198723*^9, 
   3.6399599015821486`*^9}, {3.6399599537131305`*^9, 3.639959957530349*^9}, {
   3.639970848129441*^9, 3.639970862473261*^9}, {3.639970990481405*^9, 
   3.639971009989521*^9}, {3.6399713613832645`*^9, 3.63997138422757*^9}, {
   3.63997142182872*^9, 3.6399714956808205`*^9}, {3.639971570239085*^9, 
   3.6399715982316866`*^9}, {3.639971862445446*^9, 3.6399718659456463`*^9}, {
   3.640070172268527*^9, 3.6400701878064156`*^9}, {3.640070230496857*^9, 
   3.6400702719902306`*^9}, {3.640070316543779*^9, 3.6400703805144377`*^9}, {
   3.640070413491324*^9, 3.640070419333658*^9}, {3.640076443592226*^9, 
   3.6400764482204905`*^9}, {3.6403337363592453`*^9, 3.640333744649719*^9}, 
   3.640410377404191*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`A$$ = {{1, 2, 3, 4}, {"a", "b"}, {{2, 3}, {
     4, 3}, {2, 4}, {4, 4}}, 1, {1, 2, 3}}, $CellContext`B$$ = {{
     "\!\(\*SubscriptBox[\(A\), \(0\)]\)", 
      "\!\(\*SubscriptBox[\(A\), \(1\)]\)", 
      "\!\(\*SubscriptBox[\(A\), \(2\)]\)"}, {"a", "b"}, {{2, 1}, {3, 1}, {3, 
     3}}, 1, {3}}, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`A$$], {{1, 2, 3, 4}, {"a", "b"}, {{2, 3}, {4, 3}, {2,
         4}, {4, 4}}, 1, {1, 2, 3}}}}, {{
       Hold[$CellContext`B$$], {{
        "\!\(\*SubscriptBox[\(A\), \(0\)]\)", 
         "\!\(\*SubscriptBox[\(A\), \(1\)]\)", 
         "\!\(\*SubscriptBox[\(A\), \(2\)]\)"}, {"a", "b"}, {{2, 1}, {3, 1}, {
        3, 3}}, 1, {3}}}}, {
      Hold[
       Dynamic[
        Row[{
          PopupMenu[
           Dynamic[$CellContext`A$$], {{{
               Tooltip["E", "even"], 
               Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}} -> 
            "Odd a", {{1, 2, 3, 4}, {"a", "b"}, {{2, 2}, {4, 3}, {3, 3}, {4, 
              4}}, 1, {3}} -> 
            "2nd b", {{
              "\!\(\*SubscriptBox[\(A\), \(0\)]\)", 
               "\!\(\*SubscriptBox[\(A\), \(1\)]\)", 
               "\!\(\*SubscriptBox[\(A\), \(2\)]\)"}, {"a", "b"}, {{2, 1}, {3,
               1}, {3, 3}}, 1, {3}} -> 
            "Substr aa", {{1, 2, 3, 4, 5, 6}, {"a", "b"}, {{2, 3}, {1, 4}, {5,
               6}, {5, 6}, {5, 6}, {6, 6}}, 1, {3, 4, 5}} -> 
            "1 b", {{1, 2, 3, 4}, {"a", "b"}, {{2, 3}, {4, 3}, {2, 4}, {4, 
              4}}, 1, {1, 2, 3}} -> 
            "Dif ab", {{1, 2, 3, 4}, {"a", "b"}, {{4, 2}, {3, 1}, {2, 4}, {1, 
              3}}, 1, {1}} -> 
            "Even both ab", {{1, 2, 3, 4, 5}, {0, 1}, {{1, 2}, {3, 4}, {5, 
              1}, {2, 3}, {4, 5}}, 1, {2}} -> 
            "\!\(\*SubscriptBox[\(w\), \(2\)]\) \[Congruent] 1 (mod 5)", {{1, 
              2, 3, 4}, {"a", "b", "c"}, {{4, 2, 1}, {3, 1, 2}, {2, 4, 3}, {1,
               3, 4}}, 1, {1}} -> 
            "Even both ab but any c", {{0, 1, 2, 3, 4}, {"a", "b", "c"}, {{2, 
              3, 4}, {5, 3, 4}, {2, 5, 4}, {2, 3, 5}, {5, 5, 5}}, 1, {1, 2, 3,
               4}} -> "Dif abc"}, Null, 
           Panel[
            $CellContext`DFACustomPlot[$CellContext`A$$, $CellContext`DFA\
\[Delta]Edges, Identity, GraphPlot, ImageSize -> Medium, Background -> 
             GrayLevel[1]]]], 
          Spacer[20], 
          Style["\[Union]", 30], 
          Spacer[20], 
          PopupMenu[
           Dynamic[$CellContext`B$$], {{{
               Tooltip["E", "even"], 
               Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}} -> 
            "Odd a", {{1, 2, 3, 4}, {"a", "b"}, {{2, 2}, {4, 3}, {3, 3}, {4, 
              4}}, 1, {3}} -> 
            "2nd b", {{
              "\!\(\*SubscriptBox[\(A\), \(0\)]\)", 
               "\!\(\*SubscriptBox[\(A\), \(1\)]\)", 
               "\!\(\*SubscriptBox[\(A\), \(2\)]\)"}, {"a", "b"}, {{2, 1}, {3,
               1}, {3, 3}}, 1, {3}} -> 
            "Substr aa", {{1, 2, 3, 4, 5, 6}, {"a", "b"}, {{2, 3}, {1, 4}, {5,
               6}, {5, 6}, {5, 6}, {6, 6}}, 1, {3, 4, 5}} -> 
            "1 b", {{1, 2, 3, 4}, {"a", "b"}, {{2, 3}, {4, 3}, {2, 4}, {4, 
              4}}, 1, {1, 2, 3}} -> 
            "Dif ab", {{1, 2, 3, 4}, {"a", "b"}, {{4, 2}, {3, 1}, {2, 4}, {1, 
              3}}, 1, {1}} -> 
            "Even both ab", {{1, 2, 3, 4, 5}, {0, 1}, {{1, 2}, {3, 4}, {5, 
              1}, {2, 3}, {4, 5}}, 1, {2}} -> 
            "\!\(\*SubscriptBox[\(w\), \(2\)]\) \[Congruent] 1 (mod 5)", {{1, 
              2, 3, 4}, {"a", "b", "c"}, {{4, 2, 1}, {3, 1, 2}, {2, 4, 3}, {1,
               3, 4}}, 1, {1}} -> 
            "Even both ab but any c", {{0, 1, 2, 3, 4}, {"a", "b", "c"}, {{2, 
              3, 4}, {5, 3, 4}, {2, 5, 4}, {2, 3, 5}, {5, 5, 5}}, 1, {1, 2, 3,
               4}} -> "Dif abc"}, Null, 
           Panel[
            $CellContext`DFACustomPlot[$CellContext`B$$, $CellContext`DFA\
\[Delta]Edges, Identity, GraphPlot, ImageSize -> Medium, Background -> 
             GrayLevel[1]]]]}]]], Manipulate`Dump`ThisIsNotAControl}}, 
    Typeset`size$$ = {432., {196., 198.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`A$$ = {{1, 2, 3, 4}, {"a", "b"}, {{2, 3}, {
          4, 3}, {2, 4}, {4, 4}}, 1, {1, 2, 3}}, $CellContext`B$$ = {{
          "\!\(\*SubscriptBox[\(A\), \(0\)]\)", 
           "\!\(\*SubscriptBox[\(A\), \(1\)]\)", 
           "\!\(\*SubscriptBox[\(A\), \(2\)]\)"}, {"a", "b"}, {{2, 1}, {3, 
          1}, {3, 3}}, 1, {3}}}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> $CellContext`DFAPlot[
        MapAt[
         Composition[Range, Length], 1][
         $CellContext`DFAUnion[$CellContext`A$$, $CellContext`B$$]], 
        ImageSize -> Large], 
      "Specifications" :> {{{$CellContext`A$$, {{1, 2, 3, 4}, {"a", "b"}, {{2,
            3}, {4, 3}, {2, 4}, {4, 4}}, 1, {1, 2, 3}}}, ControlType -> 
         None}, {{$CellContext`B$$, {{
           "\!\(\*SubscriptBox[\(A\), \(0\)]\)", 
            "\!\(\*SubscriptBox[\(A\), \(1\)]\)", 
            "\!\(\*SubscriptBox[\(A\), \(2\)]\)"}, {"a", "b"}, {{2, 1}, {3, 
           1}, {3, 3}}, 1, {3}}}, ControlType -> None}, 
        Dynamic[
         Row[{
           PopupMenu[
            Dynamic[$CellContext`A$$], {{{
                Tooltip["E", "even"], 
                Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}} -> 
             "Odd a", {{1, 2, 3, 4}, {"a", "b"}, {{2, 2}, {4, 3}, {3, 3}, {4, 
               4}}, 1, {3}} -> 
             "2nd b", {{
               "\!\(\*SubscriptBox[\(A\), \(0\)]\)", 
                "\!\(\*SubscriptBox[\(A\), \(1\)]\)", 
                "\!\(\*SubscriptBox[\(A\), \(2\)]\)"}, {"a", "b"}, {{2, 1}, {
               3, 1}, {3, 3}}, 1, {3}} -> 
             "Substr aa", {{1, 2, 3, 4, 5, 6}, {"a", "b"}, {{2, 3}, {1, 4}, {
               5, 6}, {5, 6}, {5, 6}, {6, 6}}, 1, {3, 4, 5}} -> 
             "1 b", {{1, 2, 3, 4}, {"a", "b"}, {{2, 3}, {4, 3}, {2, 4}, {4, 
               4}}, 1, {1, 2, 3}} -> 
             "Dif ab", {{1, 2, 3, 4}, {"a", "b"}, {{4, 2}, {3, 1}, {2, 4}, {1,
                3}}, 1, {1}} -> 
             "Even both ab", {{1, 2, 3, 4, 5}, {0, 1}, {{1, 2}, {3, 4}, {5, 
               1}, {2, 3}, {4, 5}}, 1, {2}} -> 
             "\!\(\*SubscriptBox[\(w\), \(2\)]\) \[Congruent] 1 (mod 5)", {{1,
                2, 3, 4}, {"a", "b", "c"}, {{4, 2, 1}, {3, 1, 2}, {2, 4, 3}, {
               1, 3, 4}}, 1, {1}} -> 
             "Even both ab but any c", {{0, 1, 2, 3, 4}, {"a", "b", "c"}, {{2,
                3, 4}, {5, 3, 4}, {2, 5, 4}, {2, 3, 5}, {5, 5, 5}}, 1, {1, 2, 
               3, 4}} -> "Dif abc"}, Null, 
            Panel[
             $CellContext`DFACustomPlot[$CellContext`A$$, $CellContext`DFA\
\[Delta]Edges, Identity, GraphPlot, ImageSize -> Medium, Background -> 
              GrayLevel[1]]]], 
           Spacer[20], 
           Style["\[Union]", 30], 
           Spacer[20], 
           PopupMenu[
            Dynamic[$CellContext`B$$], {{{
                Tooltip["E", "even"], 
                Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}} -> 
             "Odd a", {{1, 2, 3, 4}, {"a", "b"}, {{2, 2}, {4, 3}, {3, 3}, {4, 
               4}}, 1, {3}} -> 
             "2nd b", {{
               "\!\(\*SubscriptBox[\(A\), \(0\)]\)", 
                "\!\(\*SubscriptBox[\(A\), \(1\)]\)", 
                "\!\(\*SubscriptBox[\(A\), \(2\)]\)"}, {"a", "b"}, {{2, 1}, {
               3, 1}, {3, 3}}, 1, {3}} -> 
             "Substr aa", {{1, 2, 3, 4, 5, 6}, {"a", "b"}, {{2, 3}, {1, 4}, {
               5, 6}, {5, 6}, {5, 6}, {6, 6}}, 1, {3, 4, 5}} -> 
             "1 b", {{1, 2, 3, 4}, {"a", "b"}, {{2, 3}, {4, 3}, {2, 4}, {4, 
               4}}, 1, {1, 2, 3}} -> 
             "Dif ab", {{1, 2, 3, 4}, {"a", "b"}, {{4, 2}, {3, 1}, {2, 4}, {1,
                3}}, 1, {1}} -> 
             "Even both ab", {{1, 2, 3, 4, 5}, {0, 1}, {{1, 2}, {3, 4}, {5, 
               1}, {2, 3}, {4, 5}}, 1, {2}} -> 
             "\!\(\*SubscriptBox[\(w\), \(2\)]\) \[Congruent] 1 (mod 5)", {{1,
                2, 3, 4}, {"a", "b", "c"}, {{4, 2, 1}, {3, 1, 2}, {2, 4, 3}, {
               1, 3, 4}}, 1, {1}} -> 
             "Even both ab but any c", {{0, 1, 2, 3, 4}, {"a", "b", "c"}, {{2,
                3, 4}, {5, 3, 4}, {2, 5, 4}, {2, 3, 5}, {5, 5, 5}}, 1, {1, 2, 
               3, 4}} -> "Dif abc"}, Null, 
            Panel[
             $CellContext`DFACustomPlot[$CellContext`B$$, $CellContext`DFA\
\[Delta]Edges, Identity, GraphPlot, ImageSize -> Medium, Background -> 
              GrayLevel[1]]]]}]]}, "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{638., {295., 302.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`DFAPlot[
         Pattern[$CellContext`M, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          
          OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`DFA\[Delta]Edges, Identity, 
         GraphPlot, $CellContext`opts], $CellContext`DFACustomPlot[{
          Pattern[$CellContext`Q, 
           Blank[]], 
          Pattern[$CellContext`\[CapitalSigma], 
           Blank[]], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`F, 
           Blank[]]}, 
         Pattern[$CellContext`Edges, 
          Blank[]], 
         Pattern[$CellContext`PrePlot, 
          Blank[]], 
         Pattern[Plot, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          OptionsPattern[]]] := 
       With[{$CellContext`Qf = 
          If[Null =!= $CellContext`Q, Part[$CellContext`Q, #]& , 
            Identity], $CellContext`\[CapitalSigma]f = 
          If[Null =!= $CellContext`\[CapitalSigma], 
            Part[$CellContext`\[CapitalSigma], #]& , Characters[
             FromCharacterCode[96 + #]]& ]}, 
         Apply[Plot, 
          $CellContext`PrePlot[{
            If[
             
             OptionValue[$CellContext`EdgeCollapsing], \
$CellContext`DFACollapseEdges, Identity][
             $CellContext`Edges[$CellContext`\[Delta]]], 
            Apply[Sequence, 
             FilterRules[
              FilterRules[{$CellContext`opts}, 
               Options[Plot]], 
              Except[{VertexRenderingFunction, EdgeRenderingFunction}]]], 
            VertexRenderingFunction -> Replace[
              OptionValue[VertexRenderingFunction], 
              Automatic -> ($CellContext`DFARenderState[#2, 
                Replace[$CellContext`s, Null -> 1], $CellContext`F, #, 
                VertexLabeling -> $CellContext`Qf, 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderState]]]]& )], 
            EdgeRenderingFunction -> Replace[
              OptionValue[EdgeRenderingFunction], 
              Automatic -> ($CellContext`DFARenderTransition[#3, #, 
                EdgeLabeling -> If[Null =!= $CellContext`\[CapitalSigma], 
                  Function[$CellContext`l, 
                   If[
                   Length[$CellContext`l] == 
                    Length[$CellContext`\[CapitalSigma]], "\[CapitalSigma]", 
                    If[
                    Length[$CellContext`l] > 
                    Length[$CellContext`\[CapitalSigma]]/2., 
                    Row[{"\[CapitalSigma]", "\[Backslash]", 
                    $CellContext`\[CapitalSigma]f[
                    Complement[
                    Range[
                    Length[$CellContext`\[CapitalSigma]]], $CellContext`l]]}], 
                    $CellContext`\[CapitalSigma]f[$CellContext`l]]]], 
                  FromCharacterCode[# + 96]& ], 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderTransition]]]]& )]}]]], 
       Options[$CellContext`DFACustomPlot] = {
        AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> False, 
         AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, 
         Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, 
         ColorOutput -> Automatic, ContentSelectable -> Automatic, 
         CoordinatesToolOptions -> Automatic, DataRange -> Automatic, 
         DirectedEdges -> False, DisplayFunction :> $DisplayFunction, 
         EdgeLabeling -> True, EdgeRenderingFunction -> Automatic, 
         Epilog -> {}, FormatType :> TraditionalForm, Frame -> False, 
         FrameLabel -> None, FrameStyle -> {}, FrameTicks -> None, 
         FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, 
         ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, 
         ImageSizeRaw -> Automatic, LabelStyle -> {}, Method -> Automatic, 
         MultiedgeStyle -> Automatic, PackingMethod -> Automatic, PlotLabel -> 
         None, PlotRange -> All, PlotRangeClipping -> False, PlotRangePadding -> 
         Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, 
         PreserveImageOptions -> Automatic, Prolog -> {}, RotateLabel -> True,
          SelfLoopStyle -> Automatic, Ticks -> Automatic, TicksStyle -> {}, 
         VertexCoordinateRules -> Automatic, VertexRenderingFunction -> 
         Automatic, $CellContext`EdgeCollapsing -> 
         True, $CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`FinalColor -> GrayLevel[0.85], 
         VertexSize -> 0.1, VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}, $CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFACollapseEdges[
         Pattern[$CellContext`e, 
          Blank[]]] := MapAt[Replace[#, Pattern[$CellContext`l, 
            Blank[List]] :> Flatten[$CellContext`l]]& , {All, 2}][
         ReplaceRepeated[$CellContext`e, {
            Pattern[$CellContext`h, 
             BlankNullSequence[]], {
             Pattern[$CellContext`x, 
              Blank[]], 
             Pattern[$CellContext`l1, 
              Blank[]]}, 
            Pattern[$CellContext`u, 
             BlankNullSequence[]], {
             Pattern[$CellContext`x, 
              Blank[]], 
             Pattern[$CellContext`l2, 
              Blank[]]}, 
            Pattern[$CellContext`t, 
             
             BlankNullSequence[]]} :> {$CellContext`h, {$CellContext`x, \
{$CellContext`l1, $CellContext`l2}}, $CellContext`u, $CellContext`t}]], \
$CellContext`DFARenderState[
         Pattern[$CellContext`q, 
          Blank[]], 
         Pattern[$CellContext`s, 
          Blank[]], 
         Pattern[$CellContext`F, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {
         If[$CellContext`q === $CellContext`s, 
          OptionValue[$CellContext`StartColor], 
          OptionValue[$CellContext`FinalColor]], 
         EdgeForm[Black], 
         Disk[$CellContext`p, 
          OptionValue[VertexSize]], 
         If[
          MemberQ[$CellContext`F, $CellContext`q], 
          Disk[$CellContext`p, 0.7 OptionValue[VertexSize]]], 
         Text[
          Replace[
           OptionValue[VertexLabeling], Automatic -> 
           Identity][$CellContext`q], $CellContext`p, BaseStyle -> 
          OptionValue[VertexLabelStyle]]}, 
       Options[$CellContext`DFARenderState] = {$CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`FinalColor -> GrayLevel[0.85], 
         VertexSize -> 0.1, VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFARenderTransition[
         Pattern[$CellContext`t, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {Black, 
         Arrowheads[{{
            OptionValue[$CellContext`ArrowSize], 
            OptionValue[$CellContext`ArrowPosition]}}], 
         Arrow[
          
          BSplineCurve[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1]], 
         Text[
          Style[
           Replace[
            OptionValue[EdgeLabeling], Automatic -> Identity][$CellContext`t], 
           Apply[Sequence, 
            OptionValue[EdgeLabelStyle]]], 
          
          BSplineFunction[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1][
           OptionValue[$CellContext`EdgeLabelPosition]], Background -> 
          White]}, 
       Options[$CellContext`DFARenderTransition] = {$CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $DisplayFunction = 
       Identity, $CellContext`DFA\[Delta]Edges[
         Pattern[$CellContext`\[Delta], 
          Blank[]]] := With[{$CellContext`rd = Map[Range, 
            Dimensions[$CellContext`\[Delta], 2]]}, 
         Flatten[
          Inner[
           Composition[Reverse, List], 
           Part[$CellContext`rd, 2], 
           Inner[Rule, 
            Part[$CellContext`rd, 1], $CellContext`\[Delta], List], List], 
          1]], $CellContext`DFAUnion[
         Pattern[$CellContext`A, 
          Blank[]], 
         Pattern[$CellContext`B, 
          Blank[]]] := 
       Module[{$CellContext`f, $CellContext`s, $CellContext`Q, $CellContext`\
\[CapitalSigma], $CellContext`PA, $CellContext`PB, $CellContext`\[Delta]A, \
$CellContext`\[Delta]B, $CellContext`\[Delta]q, $CellContext`m = {}, \
$CellContext`rlQ}, $CellContext`\[CapitalSigma] = DeleteDuplicates[
            Join[
             Part[$CellContext`A, 2], 
             Part[$CellContext`B, 2]]]; $CellContext`PA = Flatten[
            ReplaceAll[
             Map[FirstPosition[
               Part[$CellContext`A, 2], #]& , $CellContext`\[CapitalSigma]], 
             Blank[Missing] -> Length[
                Part[$CellContext`A, 2]] + 1]]; $CellContext`PB = Flatten[
            ReplaceAll[
             Map[FirstPosition[
               Part[$CellContext`B, 2], #]& , $CellContext`\[CapitalSigma]], 
             Blank[Missing] -> Length[
                Part[$CellContext`B, 2]] + 1]]; $CellContext`\[Delta]A = Part[
            If[Length[$CellContext`\[CapitalSigma]] > Length[
               Part[$CellContext`A, 2]], 
             ArrayPad[
              Part[$CellContext`A, 3], {{0, 1}, {0, 1}}, Length[
                Part[$CellContext`A, 1]] + 1], 
             Part[$CellContext`A, 3]], 
            All, $CellContext`PA]; $CellContext`\[Delta]B = Part[
            If[Length[$CellContext`\[CapitalSigma]] > Length[
               Part[$CellContext`B, 2]], 
             ArrayPad[
              Part[$CellContext`B, 3], {{0, 1}, {0, 1}}, Length[
                Part[$CellContext`B, 1]] + 1], 
             Part[$CellContext`B, 3]], 
            All, $CellContext`PB]; $CellContext`Q = {{
             Part[$CellContext`A, 4], 
             Part[$CellContext`B, 4]}}; 
         While[$CellContext`Q != {}, {$CellContext`f, $CellContext`s} = 
            Part[$CellContext`Q, 1]; $CellContext`\[Delta]q = Thread[{
               Part[$CellContext`\[Delta]A, $CellContext`f], 
               Part[$CellContext`\[Delta]B, $CellContext`s]}]; 
           AppendTo[$CellContext`m, {{$CellContext`f, $CellContext`s}, \
$CellContext`\[Delta]q}]; $CellContext`Q = Complement[
              Join[$CellContext`Q, $CellContext`\[Delta]q], 
              Part[$CellContext`m, All, 1]]]; $CellContext`Q = 
          Part[$CellContext`m, All, 1]; $CellContext`rlQ = Range[
            Length[$CellContext`Q]]; $CellContext`DFAMinimize[
           ReplaceAll[
            Join[{$CellContext`rlQ, 
              DeleteDuplicates[
               Join[
                Part[$CellContext`A, 2], 
                Part[$CellContext`B, 2]]]}, {
              Part[$CellContext`m, All, 2], 
              Part[$CellContext`Q, 1], 
              Select[$CellContext`Q, Or[
                MemberQ[
                 Part[$CellContext`A, 5], 
                 Part[#, 1]], 
                MemberQ[
                 Part[$CellContext`B, 5], 
                 Part[#, 2]]]& ]}], 
            
            Thread[$CellContext`Q -> $CellContext`rlQ]]]], \
$CellContext`DFAMinimize[{
          Pattern[$CellContext`Q, 
           Blank[]], 
          Pattern[$CellContext`\[CapitalSigma], 
           Blank[]], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`F, 
           Blank[]]}] := 
       Module[{$CellContext`M, 
          C}, $CellContext`M = \
$CellContext`DFADeleteInaccesibleStates[{$CellContext`Q, $CellContext`\
\[CapitalSigma], $CellContext`\[Delta], $CellContext`s, $CellContext`F}]; 
         C = $CellContext`DFAEquivalenceClasses[$CellContext`M]; Join[{
            Map[
            Part[$CellContext`M, 1, #]& , C], $CellContext`\[CapitalSigma]}, 
           MapAt[Union, -1][
            ReplaceAll[{
              Part[$CellContext`M, 3, 
               Part[C, All, 1]], $CellContext`s, 
              Part[$CellContext`M, 5]}, 
             Flatten[
              MapThread[
               Composition[Thread, Rule], {C, 
                Range[
                 Length[C]]}]]]]]], $CellContext`DFADeleteInaccesibleStates[{
          Pattern[$CellContext`Q, 
           Blank[]], 
          Pattern[$CellContext`\[CapitalSigma], 
           Blank[]], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`F, 
           Blank[]]}] := (Join[{
          Part[$CellContext`Q, #], $CellContext`\[CapitalSigma]}, 
         Insert[$CellContext`s, 2][
          ReplaceAll[{
            Part[$CellContext`\[Delta], #], 
            Intersection[$CellContext`F, #]}, 
           Thread[# -> Range[
              Length[#]]]]]]& )[
         VertexOutComponent[
          Graph[
           Flatten[
            Inner[DirectedEdge, 
             Range[
              Length[$CellContext`\[Delta]]], $CellContext`\[Delta], 
             List]]], $CellContext`s]], $CellContext`DFAEquivalenceClasses[{
          Blank[], 
          Blank[], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Blank[], 
          Pattern[$CellContext`F, 
           Blank[]]}] := 
       Module[{$CellContext`Q, $CellContext`\[CapitalSigma], $CellContext`P, 
          C}, {$CellContext`Q, $CellContext`\[CapitalSigma]} = Map[Range, 
            Dimensions[$CellContext`\[Delta], 2]]; $CellContext`P = Flatten[
            Append[
             Transpose[{$CellContext`Q, $CellContext`Q}]][
             Map[Subsets[
               Sort[#], {2}]& , {
               Complement[$CellContext`Q, $CellContext`F], $CellContext`F}]], 
            1]; $CellContext`P = FixedPoint[DeleteCases[#, 
             Condition[
              Pattern[$CellContext`p, 
               Blank[]], 
              MemberQ[$CellContext`\[CapitalSigma], 
               Condition[
                Pattern[$CellContext`a, 
                 Blank[]], 
                FreeQ[#, 
                 Sort[
                  
                  Part[$CellContext`\[Delta], $CellContext`p, \
$CellContext`a]]]]]]]& , $CellContext`P, SameTest -> (Equal[
              Map[Length, 
               Unevaluated[
                SlotSequence[1]]]]& )]; C = ReplaceRepeated[$CellContext`P, {
              Pattern[$CellContext`h, 
               BlankNullSequence[]], {
               Pattern[$CellContext`a, 
                BlankNullSequence[]], 
               Pattern[$CellContext`x, 
                Blank[]], 
               Pattern[$CellContext`b, 
                BlankNullSequence[]]}, 
              Pattern[$CellContext`u, 
               BlankNullSequence[]], {
               Pattern[$CellContext`p, 
                BlankNullSequence[]], 
               Pattern[$CellContext`x, 
                Blank[]], 
               Pattern[$CellContext`q, 
                BlankNullSequence[]]}, 
              Pattern[$CellContext`t, 
               
               BlankNullSequence[]]} :> {$CellContext`h, {$CellContext`a, \
$CellContext`x, $CellContext`b, $CellContext`p, $CellContext`q}, \
$CellContext`u, $CellContext`t}]; C = ((SortBy[First][
            Map[Union, #, {1}]]& )[
            Join[#, 
             (If[# != {}, 
              ArrayReshape[#, {
                Length[#], 1}], #]& )[
              Complement[$CellContext`Q, 
               Flatten[#]]]]]& )[C]]}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.639971250456922*^9, 3.6399713870697327`*^9, {3.639971435614509*^9, 
   3.6399714963858614`*^9}, {3.639971573204255*^9, 3.639971601430869*^9}, 
   3.639971869194832*^9, 3.640068290958922*^9, 3.640068572660034*^9, 
   3.6400697931768436`*^9, {3.6400701786288905`*^9, 3.640070188165436*^9}, {
   3.6400702308688784`*^9, 3.640070272528261*^9}, {3.640070317559837*^9, 
   3.6400704263360586`*^9}, 3.640076380601623*^9, 3.6400764498275824`*^9, 
   3.640076490016881*^9, 3.6403297433238564`*^9, 3.640333544690282*^9, 
   3.6403335889508133`*^9, 3.640333745729781*^9, 3.6404107741748853`*^9}]
}, {2}]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["\:041f\:0435\:0440\:0435\:0442\:0438\:043d", "Section",
 CellChangeTimes->{{3.640427695441726*^9, 3.6404277069843864`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"DFAPlot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"MapAt", "[", 
       RowBox[{
        RowBox[{"Range", "@*", "Length"}], ",", "1"}], "]"}], "@", 
      RowBox[{"DFAIntersection", "[", 
       RowBox[{"A", ",", "B"}], "]"}]}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"A", ",", 
       RowBox[{"DFA", "@", "\"\<Odd a\>\""}]}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"B", ",", 
       RowBox[{"DFA", "@", "\"\<1 b\>\""}]}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Dynamic", "@", 
    RowBox[{"Evaluate", "@", 
     RowBox[{"Row", "@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"Riffle", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"PopupMenu", "[", 
             RowBox[{
              RowBox[{"Dynamic", "[", "#", "]"}], ",", 
              RowBox[{"Reverse", "/@", 
               RowBox[{"Normal", "@", "DFA"}]}], ",", ",", 
              "\[IndentingNewLine]", 
              RowBox[{"Panel", "@", 
               RowBox[{"DFAPlot", "[", 
                RowBox[{"#", ",", 
                 RowBox[{"ImageSize", "\[Rule]", "Medium"}], ",", 
                 RowBox[{"Background", "\[Rule]", "White"}]}], "]"}]}]}], 
             "]"}], "&"}], "/@", 
           RowBox[{"{", 
            RowBox[{"A", ",", "B"}], "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"Style", "[", 
           RowBox[{"\"\<\[Intersection]\>\"", ",", "30"}], "]"}]}], "]"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"Spacer", "[", "20", "]"}]}], "]"}]}]}]}], ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.640329755380546*^9, 3.6403297645710716`*^9}, 
   3.640410379704323*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`A$$ = {{
      Tooltip["E", "even"], 
      Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {
     2}}, $CellContext`B$$ = {{1, 2, 3, 4, 5, 6}, {"a", "b"}, {{2, 3}, {1, 
     4}, {5, 6}, {5, 6}, {5, 6}, {6, 6}}, 1, {3, 4, 5}}, Typeset`show$$ = 
    True, Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`A$$], {{
         Tooltip["E", "even"], 
         Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}}}}, {{
       Hold[$CellContext`B$$], {{1, 2, 3, 4, 5, 6}, {"a", "b"}, {{2, 3}, {1, 
        4}, {5, 6}, {5, 6}, {5, 6}, {6, 6}}, 1, {3, 4, 5}}}}, {
      Hold[
       Dynamic[
        Row[{
          PopupMenu[
           Dynamic[$CellContext`A$$], {{{
               Tooltip["E", "even"], 
               Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}} -> 
            "Odd a", {{1, 2, 3, 4}, {"a", "b"}, {{2, 2}, {4, 3}, {3, 3}, {4, 
              4}}, 1, {3}} -> 
            "2nd b", {{
              "\!\(\*SubscriptBox[\(A\), \(0\)]\)", 
               "\!\(\*SubscriptBox[\(A\), \(1\)]\)", 
               "\!\(\*SubscriptBox[\(A\), \(2\)]\)"}, {"a", "b"}, {{2, 1}, {3,
               1}, {3, 3}}, 1, {3}} -> 
            "Substr aa", {{1, 2, 3, 4, 5, 6}, {"a", "b"}, {{2, 3}, {1, 4}, {5,
               6}, {5, 6}, {5, 6}, {6, 6}}, 1, {3, 4, 5}} -> 
            "1 b", {{1, 2, 3, 4}, {"a", "b"}, {{2, 3}, {4, 3}, {2, 4}, {4, 
              4}}, 1, {1, 2, 3}} -> 
            "Dif ab", {{1, 2, 3, 4}, {"a", "b"}, {{4, 2}, {3, 1}, {2, 4}, {1, 
              3}}, 1, {1}} -> 
            "Even both ab", {{1, 2, 3, 4, 5}, {0, 1}, {{1, 2}, {3, 4}, {5, 
              1}, {2, 3}, {4, 5}}, 1, {2}} -> 
            "\!\(\*SubscriptBox[\(w\), \(2\)]\) \[Congruent] 1 (mod 5)", {{1, 
              2, 3, 4}, {"a", "b", "c"}, {{4, 2, 1}, {3, 1, 2}, {2, 4, 3}, {1,
               3, 4}}, 1, {1}} -> 
            "Even both ab but any c", {{0, 1, 2, 3, 4}, {"a", "b", "c"}, {{2, 
              3, 4}, {5, 3, 4}, {2, 5, 4}, {2, 3, 5}, {5, 5, 5}}, 1, {1, 2, 3,
               4}} -> "Dif abc"}, Null, 
           Panel[
            $CellContext`DFACustomPlot[$CellContext`A$$, $CellContext`DFA\
\[Delta]Edges, Identity, GraphPlot, ImageSize -> Medium, Background -> 
             GrayLevel[1]]]], 
          Spacer[20], 
          Style["\[Intersection]", 30], 
          Spacer[20], 
          PopupMenu[
           Dynamic[$CellContext`B$$], {{{
               Tooltip["E", "even"], 
               Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}} -> 
            "Odd a", {{1, 2, 3, 4}, {"a", "b"}, {{2, 2}, {4, 3}, {3, 3}, {4, 
              4}}, 1, {3}} -> 
            "2nd b", {{
              "\!\(\*SubscriptBox[\(A\), \(0\)]\)", 
               "\!\(\*SubscriptBox[\(A\), \(1\)]\)", 
               "\!\(\*SubscriptBox[\(A\), \(2\)]\)"}, {"a", "b"}, {{2, 1}, {3,
               1}, {3, 3}}, 1, {3}} -> 
            "Substr aa", {{1, 2, 3, 4, 5, 6}, {"a", "b"}, {{2, 3}, {1, 4}, {5,
               6}, {5, 6}, {5, 6}, {6, 6}}, 1, {3, 4, 5}} -> 
            "1 b", {{1, 2, 3, 4}, {"a", "b"}, {{2, 3}, {4, 3}, {2, 4}, {4, 
              4}}, 1, {1, 2, 3}} -> 
            "Dif ab", {{1, 2, 3, 4}, {"a", "b"}, {{4, 2}, {3, 1}, {2, 4}, {1, 
              3}}, 1, {1}} -> 
            "Even both ab", {{1, 2, 3, 4, 5}, {0, 1}, {{1, 2}, {3, 4}, {5, 
              1}, {2, 3}, {4, 5}}, 1, {2}} -> 
            "\!\(\*SubscriptBox[\(w\), \(2\)]\) \[Congruent] 1 (mod 5)", {{1, 
              2, 3, 4}, {"a", "b", "c"}, {{4, 2, 1}, {3, 1, 2}, {2, 4, 3}, {1,
               3, 4}}, 1, {1}} -> 
            "Even both ab but any c", {{0, 1, 2, 3, 4}, {"a", "b", "c"}, {{2, 
              3, 4}, {5, 3, 4}, {2, 5, 4}, {2, 3, 5}, {5, 5, 5}}, 1, {1, 2, 3,
               4}} -> "Dif abc"}, Null, 
           Panel[
            $CellContext`DFACustomPlot[$CellContext`B$$, $CellContext`DFA\
\[Delta]Edges, Identity, GraphPlot, ImageSize -> Medium, Background -> 
             GrayLevel[1]]]]}]]], Manipulate`Dump`ThisIsNotAControl}}, 
    Typeset`size$$ = {432., {99., 102.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`A$$ = {{
           Tooltip["E", "even"], 
           Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {
          2}}, $CellContext`B$$ = {{1, 2, 3, 4, 5, 6}, {"a", "b"}, {{2, 3}, {
          1, 4}, {5, 6}, {5, 6}, {5, 6}, {6, 6}}, 1, {3, 4, 5}}}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> $CellContext`DFAPlot[
        MapAt[
         Composition[Range, Length], 1][
         $CellContext`DFAIntersection[$CellContext`A$$, $CellContext`B$$]], 
        ImageSize -> Large], "Specifications" :> {{{$CellContext`A$$, {{
            Tooltip["E", "even"], 
            Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}}}, 
         ControlType -> 
         None}, {{$CellContext`B$$, {{1, 2, 3, 4, 5, 6}, {"a", "b"}, {{2, 
           3}, {1, 4}, {5, 6}, {5, 6}, {5, 6}, {6, 6}}, 1, {3, 4, 5}}}, 
         ControlType -> None}, 
        Dynamic[
         Row[{
           PopupMenu[
            Dynamic[$CellContext`A$$], {{{
                Tooltip["E", "even"], 
                Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}} -> 
             "Odd a", {{1, 2, 3, 4}, {"a", "b"}, {{2, 2}, {4, 3}, {3, 3}, {4, 
               4}}, 1, {3}} -> 
             "2nd b", {{
               "\!\(\*SubscriptBox[\(A\), \(0\)]\)", 
                "\!\(\*SubscriptBox[\(A\), \(1\)]\)", 
                "\!\(\*SubscriptBox[\(A\), \(2\)]\)"}, {"a", "b"}, {{2, 1}, {
               3, 1}, {3, 3}}, 1, {3}} -> 
             "Substr aa", {{1, 2, 3, 4, 5, 6}, {"a", "b"}, {{2, 3}, {1, 4}, {
               5, 6}, {5, 6}, {5, 6}, {6, 6}}, 1, {3, 4, 5}} -> 
             "1 b", {{1, 2, 3, 4}, {"a", "b"}, {{2, 3}, {4, 3}, {2, 4}, {4, 
               4}}, 1, {1, 2, 3}} -> 
             "Dif ab", {{1, 2, 3, 4}, {"a", "b"}, {{4, 2}, {3, 1}, {2, 4}, {1,
                3}}, 1, {1}} -> 
             "Even both ab", {{1, 2, 3, 4, 5}, {0, 1}, {{1, 2}, {3, 4}, {5, 
               1}, {2, 3}, {4, 5}}, 1, {2}} -> 
             "\!\(\*SubscriptBox[\(w\), \(2\)]\) \[Congruent] 1 (mod 5)", {{1,
                2, 3, 4}, {"a", "b", "c"}, {{4, 2, 1}, {3, 1, 2}, {2, 4, 3}, {
               1, 3, 4}}, 1, {1}} -> 
             "Even both ab but any c", {{0, 1, 2, 3, 4}, {"a", "b", "c"}, {{2,
                3, 4}, {5, 3, 4}, {2, 5, 4}, {2, 3, 5}, {5, 5, 5}}, 1, {1, 2, 
               3, 4}} -> "Dif abc"}, Null, 
            Panel[
             $CellContext`DFACustomPlot[$CellContext`A$$, $CellContext`DFA\
\[Delta]Edges, Identity, GraphPlot, ImageSize -> Medium, Background -> 
              GrayLevel[1]]]], 
           Spacer[20], 
           Style["\[Intersection]", 30], 
           Spacer[20], 
           PopupMenu[
            Dynamic[$CellContext`B$$], {{{
                Tooltip["E", "even"], 
                Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}} -> 
             "Odd a", {{1, 2, 3, 4}, {"a", "b"}, {{2, 2}, {4, 3}, {3, 3}, {4, 
               4}}, 1, {3}} -> 
             "2nd b", {{
               "\!\(\*SubscriptBox[\(A\), \(0\)]\)", 
                "\!\(\*SubscriptBox[\(A\), \(1\)]\)", 
                "\!\(\*SubscriptBox[\(A\), \(2\)]\)"}, {"a", "b"}, {{2, 1}, {
               3, 1}, {3, 3}}, 1, {3}} -> 
             "Substr aa", {{1, 2, 3, 4, 5, 6}, {"a", "b"}, {{2, 3}, {1, 4}, {
               5, 6}, {5, 6}, {5, 6}, {6, 6}}, 1, {3, 4, 5}} -> 
             "1 b", {{1, 2, 3, 4}, {"a", "b"}, {{2, 3}, {4, 3}, {2, 4}, {4, 
               4}}, 1, {1, 2, 3}} -> 
             "Dif ab", {{1, 2, 3, 4}, {"a", "b"}, {{4, 2}, {3, 1}, {2, 4}, {1,
                3}}, 1, {1}} -> 
             "Even both ab", {{1, 2, 3, 4, 5}, {0, 1}, {{1, 2}, {3, 4}, {5, 
               1}, {2, 3}, {4, 5}}, 1, {2}} -> 
             "\!\(\*SubscriptBox[\(w\), \(2\)]\) \[Congruent] 1 (mod 5)", {{1,
                2, 3, 4}, {"a", "b", "c"}, {{4, 2, 1}, {3, 1, 2}, {2, 4, 3}, {
               1, 3, 4}}, 1, {1}} -> 
             "Even both ab but any c", {{0, 1, 2, 3, 4}, {"a", "b", "c"}, {{2,
                3, 4}, {5, 3, 4}, {2, 5, 4}, {2, 3, 5}, {5, 5, 5}}, 1, {1, 2, 
               3, 4}} -> "Dif abc"}, Null, 
            Panel[
             $CellContext`DFACustomPlot[$CellContext`B$$, $CellContext`DFA\
\[Delta]Edges, Identity, GraphPlot, ImageSize -> Medium, Background -> 
              GrayLevel[1]]]]}]]}, "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{638., {217., 224.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`DFAPlot[
         Pattern[$CellContext`M, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          
          OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`DFA\[Delta]Edges, Identity, 
         GraphPlot, $CellContext`opts], $CellContext`DFACustomPlot[{
          Pattern[$CellContext`Q, 
           Blank[]], 
          Pattern[$CellContext`\[CapitalSigma], 
           Blank[]], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`F, 
           Blank[]]}, 
         Pattern[$CellContext`Edges, 
          Blank[]], 
         Pattern[$CellContext`PrePlot, 
          Blank[]], 
         Pattern[Plot, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          OptionsPattern[]]] := 
       With[{$CellContext`Qf = 
          If[Null =!= $CellContext`Q, Part[$CellContext`Q, #]& , 
            Identity], $CellContext`\[CapitalSigma]f = 
          If[Null =!= $CellContext`\[CapitalSigma], 
            Part[$CellContext`\[CapitalSigma], #]& , Characters[
             FromCharacterCode[96 + #]]& ]}, 
         Apply[Plot, 
          $CellContext`PrePlot[{
            If[
             
             OptionValue[$CellContext`EdgeCollapsing], \
$CellContext`DFACollapseEdges, Identity][
             $CellContext`Edges[$CellContext`\[Delta]]], 
            Apply[Sequence, 
             FilterRules[
              FilterRules[{$CellContext`opts}, 
               Options[Plot]], 
              Except[{VertexRenderingFunction, EdgeRenderingFunction}]]], 
            VertexRenderingFunction -> Replace[
              OptionValue[VertexRenderingFunction], 
              Automatic -> ($CellContext`DFARenderState[#2, 
                Replace[$CellContext`s, Null -> 1], $CellContext`F, #, 
                VertexLabeling -> $CellContext`Qf, 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderState]]]]& )], 
            EdgeRenderingFunction -> Replace[
              OptionValue[EdgeRenderingFunction], 
              Automatic -> ($CellContext`DFARenderTransition[#3, #, 
                EdgeLabeling -> If[Null =!= $CellContext`\[CapitalSigma], 
                  Function[$CellContext`l, 
                   If[
                   Length[$CellContext`l] == 
                    Length[$CellContext`\[CapitalSigma]], "\[CapitalSigma]", 
                    If[
                    Length[$CellContext`l] > 
                    Length[$CellContext`\[CapitalSigma]]/2., 
                    Row[{"\[CapitalSigma]", "\[Backslash]", 
                    $CellContext`\[CapitalSigma]f[
                    Complement[
                    Range[
                    Length[$CellContext`\[CapitalSigma]]], $CellContext`l]]}], 
                    $CellContext`\[CapitalSigma]f[$CellContext`l]]]], 
                  FromCharacterCode[# + 96]& ], 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderTransition]]]]& )]}]]], 
       Options[$CellContext`DFACustomPlot] = {
        AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> False, 
         AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, 
         Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, 
         ColorOutput -> Automatic, ContentSelectable -> Automatic, 
         CoordinatesToolOptions -> Automatic, DataRange -> Automatic, 
         DirectedEdges -> False, DisplayFunction :> $DisplayFunction, 
         EdgeLabeling -> True, EdgeRenderingFunction -> Automatic, 
         Epilog -> {}, FormatType :> TraditionalForm, Frame -> False, 
         FrameLabel -> None, FrameStyle -> {}, FrameTicks -> None, 
         FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, 
         ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, 
         ImageSizeRaw -> Automatic, LabelStyle -> {}, Method -> Automatic, 
         MultiedgeStyle -> Automatic, PackingMethod -> Automatic, PlotLabel -> 
         None, PlotRange -> All, PlotRangeClipping -> False, PlotRangePadding -> 
         Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, 
         PreserveImageOptions -> Automatic, Prolog -> {}, RotateLabel -> True,
          SelfLoopStyle -> Automatic, Ticks -> Automatic, TicksStyle -> {}, 
         VertexCoordinateRules -> Automatic, VertexRenderingFunction -> 
         Automatic, $CellContext`EdgeCollapsing -> 
         True, $CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`FinalColor -> GrayLevel[0.85], 
         VertexSize -> 0.1, VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}, $CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFACollapseEdges[
         Pattern[$CellContext`e, 
          Blank[]]] := MapAt[Replace[#, Pattern[$CellContext`l, 
            Blank[List]] :> Flatten[$CellContext`l]]& , {All, 2}][
         ReplaceRepeated[$CellContext`e, {
            Pattern[$CellContext`h, 
             BlankNullSequence[]], {
             Pattern[$CellContext`x, 
              Blank[]], 
             Pattern[$CellContext`l1, 
              Blank[]]}, 
            Pattern[$CellContext`u, 
             BlankNullSequence[]], {
             Pattern[$CellContext`x, 
              Blank[]], 
             Pattern[$CellContext`l2, 
              Blank[]]}, 
            Pattern[$CellContext`t, 
             
             BlankNullSequence[]]} :> {$CellContext`h, {$CellContext`x, \
{$CellContext`l1, $CellContext`l2}}, $CellContext`u, $CellContext`t}]], \
$CellContext`DFARenderState[
         Pattern[$CellContext`q, 
          Blank[]], 
         Pattern[$CellContext`s, 
          Blank[]], 
         Pattern[$CellContext`F, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {
         If[$CellContext`q === $CellContext`s, 
          OptionValue[$CellContext`StartColor], 
          OptionValue[$CellContext`FinalColor]], 
         EdgeForm[Black], 
         Disk[$CellContext`p, 
          OptionValue[VertexSize]], 
         If[
          MemberQ[$CellContext`F, $CellContext`q], 
          Disk[$CellContext`p, 0.7 OptionValue[VertexSize]]], 
         Text[
          Replace[
           OptionValue[VertexLabeling], Automatic -> 
           Identity][$CellContext`q], $CellContext`p, BaseStyle -> 
          OptionValue[VertexLabelStyle]]}, 
       Options[$CellContext`DFARenderState] = {$CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`FinalColor -> GrayLevel[0.85], 
         VertexSize -> 0.1, VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFARenderTransition[
         Pattern[$CellContext`t, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {Black, 
         Arrowheads[{{
            OptionValue[$CellContext`ArrowSize], 
            OptionValue[$CellContext`ArrowPosition]}}], 
         Arrow[
          
          BSplineCurve[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1]], 
         Text[
          Style[
           Replace[
            OptionValue[EdgeLabeling], Automatic -> Identity][$CellContext`t], 
           Apply[Sequence, 
            OptionValue[EdgeLabelStyle]]], 
          
          BSplineFunction[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1][
           OptionValue[$CellContext`EdgeLabelPosition]], Background -> 
          White]}, 
       Options[$CellContext`DFARenderTransition] = {$CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $DisplayFunction = 
       Identity, $CellContext`DFA\[Delta]Edges[
         Pattern[$CellContext`\[Delta], 
          Blank[]]] := With[{$CellContext`rd = Map[Range, 
            Dimensions[$CellContext`\[Delta], 2]]}, 
         Flatten[
          Inner[
           Composition[Reverse, List], 
           Part[$CellContext`rd, 2], 
           Inner[Rule, 
            Part[$CellContext`rd, 1], $CellContext`\[Delta], List], List], 
          1]], $CellContext`DFAIntersection[
         Pattern[$CellContext`A, 
          Blank[]], 
         Pattern[$CellContext`B, 
          Blank[]]] := $CellContext`DFAComplement[
         $CellContext`DFAUnion[
          $CellContext`DFAComplement[$CellContext`A], 
          $CellContext`DFAComplement[$CellContext`B]]], \
$CellContext`DFAComplement[
         Pattern[$CellContext`A, 
          Blank[]]] := With[{$CellContext`Qi = Range[
            Length[
             Part[$CellContext`A, 1]]]}, 
         MapAt[
         Complement[$CellContext`Qi, #]& , $CellContext`A, 
          5]], $CellContext`DFAUnion[
         Pattern[$CellContext`A, 
          Blank[]], 
         Pattern[$CellContext`B, 
          Blank[]]] := 
       Module[{$CellContext`f, $CellContext`s, $CellContext`Q, $CellContext`\
\[CapitalSigma], $CellContext`PA, $CellContext`PB, $CellContext`\[Delta]A, \
$CellContext`\[Delta]B, $CellContext`\[Delta]q, $CellContext`m = {}, \
$CellContext`rlQ}, $CellContext`\[CapitalSigma] = DeleteDuplicates[
            Join[
             Part[$CellContext`A, 2], 
             Part[$CellContext`B, 2]]]; $CellContext`PA = Flatten[
            ReplaceAll[
             Map[FirstPosition[
               Part[$CellContext`A, 2], #]& , $CellContext`\[CapitalSigma]], 
             Blank[Missing] -> Length[
                Part[$CellContext`A, 2]] + 1]]; $CellContext`PB = Flatten[
            ReplaceAll[
             Map[FirstPosition[
               Part[$CellContext`B, 2], #]& , $CellContext`\[CapitalSigma]], 
             Blank[Missing] -> Length[
                Part[$CellContext`B, 2]] + 1]]; $CellContext`\[Delta]A = Part[
            If[Length[$CellContext`\[CapitalSigma]] > Length[
               Part[$CellContext`A, 2]], 
             ArrayPad[
              Part[$CellContext`A, 3], {{0, 1}, {0, 1}}, Length[
                Part[$CellContext`A, 1]] + 1], 
             Part[$CellContext`A, 3]], 
            All, $CellContext`PA]; $CellContext`\[Delta]B = Part[
            If[Length[$CellContext`\[CapitalSigma]] > Length[
               Part[$CellContext`B, 2]], 
             ArrayPad[
              Part[$CellContext`B, 3], {{0, 1}, {0, 1}}, Length[
                Part[$CellContext`B, 1]] + 1], 
             Part[$CellContext`B, 3]], 
            All, $CellContext`PB]; $CellContext`Q = {{
             Part[$CellContext`A, 4], 
             Part[$CellContext`B, 4]}}; 
         While[$CellContext`Q != {}, {$CellContext`f, $CellContext`s} = 
            Part[$CellContext`Q, 1]; $CellContext`\[Delta]q = Thread[{
               Part[$CellContext`\[Delta]A, $CellContext`f], 
               Part[$CellContext`\[Delta]B, $CellContext`s]}]; 
           AppendTo[$CellContext`m, {{$CellContext`f, $CellContext`s}, \
$CellContext`\[Delta]q}]; $CellContext`Q = Complement[
              Join[$CellContext`Q, $CellContext`\[Delta]q], 
              Part[$CellContext`m, All, 1]]]; $CellContext`Q = 
          Part[$CellContext`m, All, 1]; $CellContext`rlQ = Range[
            Length[$CellContext`Q]]; $CellContext`DFAMinimize[
           ReplaceAll[
            Join[{$CellContext`rlQ, 
              DeleteDuplicates[
               Join[
                Part[$CellContext`A, 2], 
                Part[$CellContext`B, 2]]]}, {
              Part[$CellContext`m, All, 2], 
              Part[$CellContext`Q, 1], 
              Select[$CellContext`Q, Or[
                MemberQ[
                 Part[$CellContext`A, 5], 
                 Part[#, 1]], 
                MemberQ[
                 Part[$CellContext`B, 5], 
                 Part[#, 2]]]& ]}], 
            
            Thread[$CellContext`Q -> $CellContext`rlQ]]]], \
$CellContext`DFAMinimize[{
          Pattern[$CellContext`Q, 
           Blank[]], 
          Pattern[$CellContext`\[CapitalSigma], 
           Blank[]], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`F, 
           Blank[]]}] := 
       Module[{$CellContext`M, 
          C}, $CellContext`M = \
$CellContext`DFADeleteInaccesibleStates[{$CellContext`Q, $CellContext`\
\[CapitalSigma], $CellContext`\[Delta], $CellContext`s, $CellContext`F}]; 
         C = $CellContext`DFAEquivalenceClasses[$CellContext`M]; Join[{
            Map[
            Part[$CellContext`M, 1, #]& , C], $CellContext`\[CapitalSigma]}, 
           MapAt[Union, -1][
            ReplaceAll[{
              Part[$CellContext`M, 3, 
               Part[C, All, 1]], $CellContext`s, 
              Part[$CellContext`M, 5]}, 
             Flatten[
              MapThread[
               Composition[Thread, Rule], {C, 
                Range[
                 Length[C]]}]]]]]], $CellContext`DFADeleteInaccesibleStates[{
          Pattern[$CellContext`Q, 
           Blank[]], 
          Pattern[$CellContext`\[CapitalSigma], 
           Blank[]], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`F, 
           Blank[]]}] := (Join[{
          Part[$CellContext`Q, #], $CellContext`\[CapitalSigma]}, 
         Insert[$CellContext`s, 2][
          ReplaceAll[{
            Part[$CellContext`\[Delta], #], 
            Intersection[$CellContext`F, #]}, 
           Thread[# -> Range[
              Length[#]]]]]]& )[
         VertexOutComponent[
          Graph[
           Flatten[
            Inner[DirectedEdge, 
             Range[
              Length[$CellContext`\[Delta]]], $CellContext`\[Delta], 
             List]]], $CellContext`s]], $CellContext`DFAEquivalenceClasses[{
          Blank[], 
          Blank[], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Blank[], 
          Pattern[$CellContext`F, 
           Blank[]]}] := 
       Module[{$CellContext`Q, $CellContext`\[CapitalSigma], $CellContext`P, 
          C}, {$CellContext`Q, $CellContext`\[CapitalSigma]} = Map[Range, 
            Dimensions[$CellContext`\[Delta], 2]]; $CellContext`P = Flatten[
            Append[
             Transpose[{$CellContext`Q, $CellContext`Q}]][
             Map[Subsets[
               Sort[#], {2}]& , {
               Complement[$CellContext`Q, $CellContext`F], $CellContext`F}]], 
            1]; $CellContext`P = FixedPoint[DeleteCases[#, 
             Condition[
              Pattern[$CellContext`p, 
               Blank[]], 
              MemberQ[$CellContext`\[CapitalSigma], 
               Condition[
                Pattern[$CellContext`a, 
                 Blank[]], 
                FreeQ[#, 
                 Sort[
                  
                  Part[$CellContext`\[Delta], $CellContext`p, \
$CellContext`a]]]]]]]& , $CellContext`P, SameTest -> (Equal[
              Map[Length, 
               Unevaluated[
                SlotSequence[1]]]]& )]; C = ReplaceRepeated[$CellContext`P, {
              Pattern[$CellContext`h, 
               BlankNullSequence[]], {
               Pattern[$CellContext`a, 
                BlankNullSequence[]], 
               Pattern[$CellContext`x, 
                Blank[]], 
               Pattern[$CellContext`b, 
                BlankNullSequence[]]}, 
              Pattern[$CellContext`u, 
               BlankNullSequence[]], {
               Pattern[$CellContext`p, 
                BlankNullSequence[]], 
               Pattern[$CellContext`x, 
                Blank[]], 
               Pattern[$CellContext`q, 
                BlankNullSequence[]]}, 
              Pattern[$CellContext`t, 
               
               BlankNullSequence[]]} :> {$CellContext`h, {$CellContext`a, \
$CellContext`x, $CellContext`b, $CellContext`p, $CellContext`q}, \
$CellContext`u, $CellContext`t}]; C = ((SortBy[First][
            Map[Union, #, {1}]]& )[
            Join[#, 
             (If[# != {}, 
              ArrayReshape[#, {
                Length[#], 1}], #]& )[
              Complement[$CellContext`Q, 
               Flatten[#]]]]]& )[C]]}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.6403297655261264`*^9, 3.6403339192977085`*^9, 
  3.640410774445901*^9}]
}, {2}]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["\:0420\:0456\:0437\:043d\:0438\:0446\:044f", "Section",
 CellChangeTimes->{{3.6404277187580595`*^9, 3.640427721153197*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"DFAPlot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"MapAt", "[", 
       RowBox[{
        RowBox[{"Range", "@*", "Length"}], ",", "1"}], "]"}], "@", 
      RowBox[{"DFADifference", "[", 
       RowBox[{"A", ",", "B"}], "]"}]}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"A", ",", 
       RowBox[{"DFA", "@", "\"\<Odd a\>\""}]}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"B", ",", 
       RowBox[{"DFA", "@", "\"\<1 b\>\""}]}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Dynamic", "@", 
    RowBox[{"Evaluate", "@", 
     RowBox[{"Row", "@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"Riffle", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"PopupMenu", "[", 
             RowBox[{
              RowBox[{"Dynamic", "[", "#", "]"}], ",", 
              RowBox[{"Reverse", "/@", 
               RowBox[{"Normal", "@", "DFA"}]}], ",", ",", 
              "\[IndentingNewLine]", 
              RowBox[{"Panel", "@", 
               RowBox[{"DFAPlot", "[", 
                RowBox[{"#", ",", 
                 RowBox[{"ImageSize", "\[Rule]", "Medium"}], ",", 
                 RowBox[{"Background", "\[Rule]", "White"}]}], "]"}]}]}], 
             "]"}], "&"}], "/@", 
           RowBox[{"{", 
            RowBox[{"A", ",", "B"}], "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"Style", "[", 
           RowBox[{"\"\<\[Backslash]\>\"", ",", "30"}], "]"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Spacer", "[", "20", "]"}]}], "]"}]}]}]}], ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6403299620623674`*^9, 3.640329968468734*^9}, 
   3.6404103826884937`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`A$$ = {{
      Tooltip["E", "even"], 
      Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {
     2}}, $CellContext`B$$ = {{1, 2, 3, 4, 5, 6}, {"a", "b"}, {{2, 3}, {1, 
     4}, {5, 6}, {5, 6}, {5, 6}, {6, 6}}, 1, {3, 4, 5}}, Typeset`show$$ = 
    True, Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`A$$], {{
         Tooltip["E", "even"], 
         Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}}}}, {{
       Hold[$CellContext`B$$], {{1, 2, 3, 4, 5, 6}, {"a", "b"}, {{2, 3}, {1, 
        4}, {5, 6}, {5, 6}, {5, 6}, {6, 6}}, 1, {3, 4, 5}}}}, {
      Hold[
       Dynamic[
        Row[{
          PopupMenu[
           Dynamic[$CellContext`A$$], {{{
               Tooltip["E", "even"], 
               Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}} -> 
            "Odd a", {{1, 2, 3, 4}, {"a", "b"}, {{2, 2}, {4, 3}, {3, 3}, {4, 
              4}}, 1, {3}} -> 
            "2nd b", {{
              "\!\(\*SubscriptBox[\(A\), \(0\)]\)", 
               "\!\(\*SubscriptBox[\(A\), \(1\)]\)", 
               "\!\(\*SubscriptBox[\(A\), \(2\)]\)"}, {"a", "b"}, {{2, 1}, {3,
               1}, {3, 3}}, 1, {3}} -> 
            "Substr aa", {{1, 2, 3, 4, 5, 6}, {"a", "b"}, {{2, 3}, {1, 4}, {5,
               6}, {5, 6}, {5, 6}, {6, 6}}, 1, {3, 4, 5}} -> 
            "1 b", {{1, 2, 3, 4}, {"a", "b"}, {{2, 3}, {4, 3}, {2, 4}, {4, 
              4}}, 1, {1, 2, 3}} -> 
            "Dif ab", {{1, 2, 3, 4}, {"a", "b"}, {{4, 2}, {3, 1}, {2, 4}, {1, 
              3}}, 1, {1}} -> 
            "Even both ab", {{1, 2, 3, 4, 5}, {0, 1}, {{1, 2}, {3, 4}, {5, 
              1}, {2, 3}, {4, 5}}, 1, {2}} -> 
            "\!\(\*SubscriptBox[\(w\), \(2\)]\) \[Congruent] 1 (mod 5)", {{1, 
              2, 3, 4}, {"a", "b", "c"}, {{4, 2, 1}, {3, 1, 2}, {2, 4, 3}, {1,
               3, 4}}, 1, {1}} -> 
            "Even both ab but any c", {{0, 1, 2, 3, 4}, {"a", "b", "c"}, {{2, 
              3, 4}, {5, 3, 4}, {2, 5, 4}, {2, 3, 5}, {5, 5, 5}}, 1, {1, 2, 3,
               4}} -> "Dif abc"}, Null, 
           Panel[
            $CellContext`DFACustomPlot[$CellContext`A$$, $CellContext`DFA\
\[Delta]Edges, Identity, GraphPlot, ImageSize -> Medium, Background -> 
             GrayLevel[1]]]], 
          Spacer[20], 
          Style["\[Backslash]", 30], 
          Spacer[20], 
          PopupMenu[
           Dynamic[$CellContext`B$$], {{{
               Tooltip["E", "even"], 
               Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}} -> 
            "Odd a", {{1, 2, 3, 4}, {"a", "b"}, {{2, 2}, {4, 3}, {3, 3}, {4, 
              4}}, 1, {3}} -> 
            "2nd b", {{
              "\!\(\*SubscriptBox[\(A\), \(0\)]\)", 
               "\!\(\*SubscriptBox[\(A\), \(1\)]\)", 
               "\!\(\*SubscriptBox[\(A\), \(2\)]\)"}, {"a", "b"}, {{2, 1}, {3,
               1}, {3, 3}}, 1, {3}} -> 
            "Substr aa", {{1, 2, 3, 4, 5, 6}, {"a", "b"}, {{2, 3}, {1, 4}, {5,
               6}, {5, 6}, {5, 6}, {6, 6}}, 1, {3, 4, 5}} -> 
            "1 b", {{1, 2, 3, 4}, {"a", "b"}, {{2, 3}, {4, 3}, {2, 4}, {4, 
              4}}, 1, {1, 2, 3}} -> 
            "Dif ab", {{1, 2, 3, 4}, {"a", "b"}, {{4, 2}, {3, 1}, {2, 4}, {1, 
              3}}, 1, {1}} -> 
            "Even both ab", {{1, 2, 3, 4, 5}, {0, 1}, {{1, 2}, {3, 4}, {5, 
              1}, {2, 3}, {4, 5}}, 1, {2}} -> 
            "\!\(\*SubscriptBox[\(w\), \(2\)]\) \[Congruent] 1 (mod 5)", {{1, 
              2, 3, 4}, {"a", "b", "c"}, {{4, 2, 1}, {3, 1, 2}, {2, 4, 3}, {1,
               3, 4}}, 1, {1}} -> 
            "Even both ab but any c", {{0, 1, 2, 3, 4}, {"a", "b", "c"}, {{2, 
              3, 4}, {5, 3, 4}, {2, 5, 4}, {2, 3, 5}, {5, 5, 5}}, 1, {1, 2, 3,
               4}} -> "Dif abc"}, Null, 
           Panel[
            $CellContext`DFACustomPlot[$CellContext`B$$, $CellContext`DFA\
\[Delta]Edges, Identity, GraphPlot, ImageSize -> Medium, Background -> 
             GrayLevel[1]]]]}]]], Manipulate`Dump`ThisIsNotAControl}}, 
    Typeset`size$$ = {432., {142., 145.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`A$$ = {{
           Tooltip["E", "even"], 
           Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {
          2}}, $CellContext`B$$ = {{1, 2, 3, 4, 5, 6}, {"a", "b"}, {{2, 3}, {
          1, 4}, {5, 6}, {5, 6}, {5, 6}, {6, 6}}, 1, {3, 4, 5}}}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> $CellContext`DFAPlot[
        MapAt[
         Composition[Range, Length], 1][
         $CellContext`DFADifference[$CellContext`A$$, $CellContext`B$$]], 
        ImageSize -> Large], "Specifications" :> {{{$CellContext`A$$, {{
            Tooltip["E", "even"], 
            Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}}}, 
         ControlType -> 
         None}, {{$CellContext`B$$, {{1, 2, 3, 4, 5, 6}, {"a", "b"}, {{2, 
           3}, {1, 4}, {5, 6}, {5, 6}, {5, 6}, {6, 6}}, 1, {3, 4, 5}}}, 
         ControlType -> None}, 
        Dynamic[
         Row[{
           PopupMenu[
            Dynamic[$CellContext`A$$], {{{
                Tooltip["E", "even"], 
                Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}} -> 
             "Odd a", {{1, 2, 3, 4}, {"a", "b"}, {{2, 2}, {4, 3}, {3, 3}, {4, 
               4}}, 1, {3}} -> 
             "2nd b", {{
               "\!\(\*SubscriptBox[\(A\), \(0\)]\)", 
                "\!\(\*SubscriptBox[\(A\), \(1\)]\)", 
                "\!\(\*SubscriptBox[\(A\), \(2\)]\)"}, {"a", "b"}, {{2, 1}, {
               3, 1}, {3, 3}}, 1, {3}} -> 
             "Substr aa", {{1, 2, 3, 4, 5, 6}, {"a", "b"}, {{2, 3}, {1, 4}, {
               5, 6}, {5, 6}, {5, 6}, {6, 6}}, 1, {3, 4, 5}} -> 
             "1 b", {{1, 2, 3, 4}, {"a", "b"}, {{2, 3}, {4, 3}, {2, 4}, {4, 
               4}}, 1, {1, 2, 3}} -> 
             "Dif ab", {{1, 2, 3, 4}, {"a", "b"}, {{4, 2}, {3, 1}, {2, 4}, {1,
                3}}, 1, {1}} -> 
             "Even both ab", {{1, 2, 3, 4, 5}, {0, 1}, {{1, 2}, {3, 4}, {5, 
               1}, {2, 3}, {4, 5}}, 1, {2}} -> 
             "\!\(\*SubscriptBox[\(w\), \(2\)]\) \[Congruent] 1 (mod 5)", {{1,
                2, 3, 4}, {"a", "b", "c"}, {{4, 2, 1}, {3, 1, 2}, {2, 4, 3}, {
               1, 3, 4}}, 1, {1}} -> 
             "Even both ab but any c", {{0, 1, 2, 3, 4}, {"a", "b", "c"}, {{2,
                3, 4}, {5, 3, 4}, {2, 5, 4}, {2, 3, 5}, {5, 5, 5}}, 1, {1, 2, 
               3, 4}} -> "Dif abc"}, Null, 
            Panel[
             $CellContext`DFACustomPlot[$CellContext`A$$, $CellContext`DFA\
\[Delta]Edges, Identity, GraphPlot, ImageSize -> Medium, Background -> 
              GrayLevel[1]]]], 
           Spacer[20], 
           Style["\[Backslash]", 30], 
           Spacer[20], 
           PopupMenu[
            Dynamic[$CellContext`B$$], {{{
                Tooltip["E", "even"], 
                Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}} -> 
             "Odd a", {{1, 2, 3, 4}, {"a", "b"}, {{2, 2}, {4, 3}, {3, 3}, {4, 
               4}}, 1, {3}} -> 
             "2nd b", {{
               "\!\(\*SubscriptBox[\(A\), \(0\)]\)", 
                "\!\(\*SubscriptBox[\(A\), \(1\)]\)", 
                "\!\(\*SubscriptBox[\(A\), \(2\)]\)"}, {"a", "b"}, {{2, 1}, {
               3, 1}, {3, 3}}, 1, {3}} -> 
             "Substr aa", {{1, 2, 3, 4, 5, 6}, {"a", "b"}, {{2, 3}, {1, 4}, {
               5, 6}, {5, 6}, {5, 6}, {6, 6}}, 1, {3, 4, 5}} -> 
             "1 b", {{1, 2, 3, 4}, {"a", "b"}, {{2, 3}, {4, 3}, {2, 4}, {4, 
               4}}, 1, {1, 2, 3}} -> 
             "Dif ab", {{1, 2, 3, 4}, {"a", "b"}, {{4, 2}, {3, 1}, {2, 4}, {1,
                3}}, 1, {1}} -> 
             "Even both ab", {{1, 2, 3, 4, 5}, {0, 1}, {{1, 2}, {3, 4}, {5, 
               1}, {2, 3}, {4, 5}}, 1, {2}} -> 
             "\!\(\*SubscriptBox[\(w\), \(2\)]\) \[Congruent] 1 (mod 5)", {{1,
                2, 3, 4}, {"a", "b", "c"}, {{4, 2, 1}, {3, 1, 2}, {2, 4, 3}, {
               1, 3, 4}}, 1, {1}} -> 
             "Even both ab but any c", {{0, 1, 2, 3, 4}, {"a", "b", "c"}, {{2,
                3, 4}, {5, 3, 4}, {2, 5, 4}, {2, 3, 5}, {5, 5, 5}}, 1, {1, 2, 
               3, 4}} -> "Dif abc"}, Null, 
            Panel[
             $CellContext`DFACustomPlot[$CellContext`B$$, $CellContext`DFA\
\[Delta]Edges, Identity, GraphPlot, ImageSize -> Medium, Background -> 
              GrayLevel[1]]]]}]]}, "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{630., {260., 267.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`DFAPlot[
         Pattern[$CellContext`M, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          
          OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`DFA\[Delta]Edges, Identity, 
         GraphPlot, $CellContext`opts], $CellContext`DFACustomPlot[{
          Pattern[$CellContext`Q, 
           Blank[]], 
          Pattern[$CellContext`\[CapitalSigma], 
           Blank[]], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`F, 
           Blank[]]}, 
         Pattern[$CellContext`Edges, 
          Blank[]], 
         Pattern[$CellContext`PrePlot, 
          Blank[]], 
         Pattern[Plot, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          OptionsPattern[]]] := 
       With[{$CellContext`Qf = 
          If[Null =!= $CellContext`Q, Part[$CellContext`Q, #]& , 
            Identity], $CellContext`\[CapitalSigma]f = 
          If[Null =!= $CellContext`\[CapitalSigma], 
            Part[$CellContext`\[CapitalSigma], #]& , Characters[
             FromCharacterCode[96 + #]]& ]}, 
         Apply[Plot, 
          $CellContext`PrePlot[{
            If[
             
             OptionValue[$CellContext`EdgeCollapsing], \
$CellContext`DFACollapseEdges, Identity][
             $CellContext`Edges[$CellContext`\[Delta]]], 
            Apply[Sequence, 
             FilterRules[
              FilterRules[{$CellContext`opts}, 
               Options[Plot]], 
              Except[{VertexRenderingFunction, EdgeRenderingFunction}]]], 
            VertexRenderingFunction -> Replace[
              OptionValue[VertexRenderingFunction], 
              Automatic -> ($CellContext`DFARenderState[#2, 
                Replace[$CellContext`s, Null -> 1], $CellContext`F, #, 
                VertexLabeling -> $CellContext`Qf, 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderState]]]]& )], 
            EdgeRenderingFunction -> Replace[
              OptionValue[EdgeRenderingFunction], 
              Automatic -> ($CellContext`DFARenderTransition[#3, #, 
                EdgeLabeling -> If[Null =!= $CellContext`\[CapitalSigma], 
                  Function[$CellContext`l, 
                   If[
                   Length[$CellContext`l] == 
                    Length[$CellContext`\[CapitalSigma]], "\[CapitalSigma]", 
                    If[
                    Length[$CellContext`l] > 
                    Length[$CellContext`\[CapitalSigma]]/2., 
                    Row[{"\[CapitalSigma]", "\[Backslash]", 
                    $CellContext`\[CapitalSigma]f[
                    Complement[
                    Range[
                    Length[$CellContext`\[CapitalSigma]]], $CellContext`l]]}], 
                    $CellContext`\[CapitalSigma]f[$CellContext`l]]]], 
                  FromCharacterCode[# + 96]& ], 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderTransition]]]]& )]}]]], 
       Options[$CellContext`DFACustomPlot] = {
        AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> False, 
         AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, 
         Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, 
         ColorOutput -> Automatic, ContentSelectable -> Automatic, 
         CoordinatesToolOptions -> Automatic, DataRange -> Automatic, 
         DirectedEdges -> False, DisplayFunction :> $DisplayFunction, 
         EdgeLabeling -> True, EdgeRenderingFunction -> Automatic, 
         Epilog -> {}, FormatType :> TraditionalForm, Frame -> False, 
         FrameLabel -> None, FrameStyle -> {}, FrameTicks -> None, 
         FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, 
         ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, 
         ImageSizeRaw -> Automatic, LabelStyle -> {}, Method -> Automatic, 
         MultiedgeStyle -> Automatic, PackingMethod -> Automatic, PlotLabel -> 
         None, PlotRange -> All, PlotRangeClipping -> False, PlotRangePadding -> 
         Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, 
         PreserveImageOptions -> Automatic, Prolog -> {}, RotateLabel -> True,
          SelfLoopStyle -> Automatic, Ticks -> Automatic, TicksStyle -> {}, 
         VertexCoordinateRules -> Automatic, VertexRenderingFunction -> 
         Automatic, $CellContext`EdgeCollapsing -> 
         True, $CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`FinalColor -> GrayLevel[0.85], 
         VertexSize -> 0.1, VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}, $CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFACollapseEdges[
         Pattern[$CellContext`e, 
          Blank[]]] := MapAt[Replace[#, Pattern[$CellContext`l, 
            Blank[List]] :> Flatten[$CellContext`l]]& , {All, 2}][
         ReplaceRepeated[$CellContext`e, {
            Pattern[$CellContext`h, 
             BlankNullSequence[]], {
             Pattern[$CellContext`x, 
              Blank[]], 
             Pattern[$CellContext`l1, 
              Blank[]]}, 
            Pattern[$CellContext`u, 
             BlankNullSequence[]], {
             Pattern[$CellContext`x, 
              Blank[]], 
             Pattern[$CellContext`l2, 
              Blank[]]}, 
            Pattern[$CellContext`t, 
             
             BlankNullSequence[]]} :> {$CellContext`h, {$CellContext`x, \
{$CellContext`l1, $CellContext`l2}}, $CellContext`u, $CellContext`t}]], \
$CellContext`DFARenderState[
         Pattern[$CellContext`q, 
          Blank[]], 
         Pattern[$CellContext`s, 
          Blank[]], 
         Pattern[$CellContext`F, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {
         If[$CellContext`q === $CellContext`s, 
          OptionValue[$CellContext`StartColor], 
          OptionValue[$CellContext`FinalColor]], 
         EdgeForm[Black], 
         Disk[$CellContext`p, 
          OptionValue[VertexSize]], 
         If[
          MemberQ[$CellContext`F, $CellContext`q], 
          Disk[$CellContext`p, 0.7 OptionValue[VertexSize]]], 
         Text[
          Replace[
           OptionValue[VertexLabeling], Automatic -> 
           Identity][$CellContext`q], $CellContext`p, BaseStyle -> 
          OptionValue[VertexLabelStyle]]}, 
       Options[$CellContext`DFARenderState] = {$CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`FinalColor -> GrayLevel[0.85], 
         VertexSize -> 0.1, VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFARenderTransition[
         Pattern[$CellContext`t, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {Black, 
         Arrowheads[{{
            OptionValue[$CellContext`ArrowSize], 
            OptionValue[$CellContext`ArrowPosition]}}], 
         Arrow[
          
          BSplineCurve[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1]], 
         Text[
          Style[
           Replace[
            OptionValue[EdgeLabeling], Automatic -> Identity][$CellContext`t], 
           Apply[Sequence, 
            OptionValue[EdgeLabelStyle]]], 
          
          BSplineFunction[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1][
           OptionValue[$CellContext`EdgeLabelPosition]], Background -> 
          White]}, 
       Options[$CellContext`DFARenderTransition] = {$CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $DisplayFunction = 
       Identity, $CellContext`DFA\[Delta]Edges[
         Pattern[$CellContext`\[Delta], 
          Blank[]]] := With[{$CellContext`rd = Map[Range, 
            Dimensions[$CellContext`\[Delta], 2]]}, 
         Flatten[
          Inner[
           Composition[Reverse, List], 
           Part[$CellContext`rd, 2], 
           Inner[Rule, 
            Part[$CellContext`rd, 1], $CellContext`\[Delta], List], List], 
          1]], $CellContext`DFADifference[
         Pattern[$CellContext`A, 
          Blank[]], 
         Pattern[$CellContext`B, 
          Blank[]]] := $CellContext`DFAIntersection[$CellContext`A, 
         $CellContext`DFAComplement[$CellContext`B]], \
$CellContext`DFAIntersection[
         Pattern[$CellContext`A, 
          Blank[]], 
         Pattern[$CellContext`B, 
          Blank[]]] := $CellContext`DFAComplement[
         $CellContext`DFAUnion[
          $CellContext`DFAComplement[$CellContext`A], 
          $CellContext`DFAComplement[$CellContext`B]]], \
$CellContext`DFAComplement[
         Pattern[$CellContext`A, 
          Blank[]]] := With[{$CellContext`Qi = Range[
            Length[
             Part[$CellContext`A, 1]]]}, 
         MapAt[
         Complement[$CellContext`Qi, #]& , $CellContext`A, 
          5]], $CellContext`DFAUnion[
         Pattern[$CellContext`A, 
          Blank[]], 
         Pattern[$CellContext`B, 
          Blank[]]] := 
       Module[{$CellContext`f, $CellContext`s, $CellContext`Q, $CellContext`\
\[CapitalSigma], $CellContext`PA, $CellContext`PB, $CellContext`\[Delta]A, \
$CellContext`\[Delta]B, $CellContext`\[Delta]q, $CellContext`m = {}, \
$CellContext`rlQ}, $CellContext`\[CapitalSigma] = DeleteDuplicates[
            Join[
             Part[$CellContext`A, 2], 
             Part[$CellContext`B, 2]]]; $CellContext`PA = Flatten[
            ReplaceAll[
             Map[FirstPosition[
               Part[$CellContext`A, 2], #]& , $CellContext`\[CapitalSigma]], 
             Blank[Missing] -> Length[
                Part[$CellContext`A, 2]] + 1]]; $CellContext`PB = Flatten[
            ReplaceAll[
             Map[FirstPosition[
               Part[$CellContext`B, 2], #]& , $CellContext`\[CapitalSigma]], 
             Blank[Missing] -> Length[
                Part[$CellContext`B, 2]] + 1]]; $CellContext`\[Delta]A = Part[
            If[Length[$CellContext`\[CapitalSigma]] > Length[
               Part[$CellContext`A, 2]], 
             ArrayPad[
              Part[$CellContext`A, 3], {{0, 1}, {0, 1}}, Length[
                Part[$CellContext`A, 1]] + 1], 
             Part[$CellContext`A, 3]], 
            All, $CellContext`PA]; $CellContext`\[Delta]B = Part[
            If[Length[$CellContext`\[CapitalSigma]] > Length[
               Part[$CellContext`B, 2]], 
             ArrayPad[
              Part[$CellContext`B, 3], {{0, 1}, {0, 1}}, Length[
                Part[$CellContext`B, 1]] + 1], 
             Part[$CellContext`B, 3]], 
            All, $CellContext`PB]; $CellContext`Q = {{
             Part[$CellContext`A, 4], 
             Part[$CellContext`B, 4]}}; 
         While[$CellContext`Q != {}, {$CellContext`f, $CellContext`s} = 
            Part[$CellContext`Q, 1]; $CellContext`\[Delta]q = Thread[{
               Part[$CellContext`\[Delta]A, $CellContext`f], 
               Part[$CellContext`\[Delta]B, $CellContext`s]}]; 
           AppendTo[$CellContext`m, {{$CellContext`f, $CellContext`s}, \
$CellContext`\[Delta]q}]; $CellContext`Q = Complement[
              Join[$CellContext`Q, $CellContext`\[Delta]q], 
              Part[$CellContext`m, All, 1]]]; $CellContext`Q = 
          Part[$CellContext`m, All, 1]; $CellContext`rlQ = Range[
            Length[$CellContext`Q]]; $CellContext`DFAMinimize[
           ReplaceAll[
            Join[{$CellContext`rlQ, 
              DeleteDuplicates[
               Join[
                Part[$CellContext`A, 2], 
                Part[$CellContext`B, 2]]]}, {
              Part[$CellContext`m, All, 2], 
              Part[$CellContext`Q, 1], 
              Select[$CellContext`Q, Or[
                MemberQ[
                 Part[$CellContext`A, 5], 
                 Part[#, 1]], 
                MemberQ[
                 Part[$CellContext`B, 5], 
                 Part[#, 2]]]& ]}], 
            
            Thread[$CellContext`Q -> $CellContext`rlQ]]]], \
$CellContext`DFAMinimize[{
          Pattern[$CellContext`Q, 
           Blank[]], 
          Pattern[$CellContext`\[CapitalSigma], 
           Blank[]], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`F, 
           Blank[]]}] := 
       Module[{$CellContext`M, 
          C}, $CellContext`M = \
$CellContext`DFADeleteInaccesibleStates[{$CellContext`Q, $CellContext`\
\[CapitalSigma], $CellContext`\[Delta], $CellContext`s, $CellContext`F}]; 
         C = $CellContext`DFAEquivalenceClasses[$CellContext`M]; Join[{
            Map[
            Part[$CellContext`M, 1, #]& , C], $CellContext`\[CapitalSigma]}, 
           MapAt[Union, -1][
            ReplaceAll[{
              Part[$CellContext`M, 3, 
               Part[C, All, 1]], $CellContext`s, 
              Part[$CellContext`M, 5]}, 
             Flatten[
              MapThread[
               Composition[Thread, Rule], {C, 
                Range[
                 Length[C]]}]]]]]], $CellContext`DFADeleteInaccesibleStates[{
          Pattern[$CellContext`Q, 
           Blank[]], 
          Pattern[$CellContext`\[CapitalSigma], 
           Blank[]], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`F, 
           Blank[]]}] := (Join[{
          Part[$CellContext`Q, #], $CellContext`\[CapitalSigma]}, 
         Insert[$CellContext`s, 2][
          ReplaceAll[{
            Part[$CellContext`\[Delta], #], 
            Intersection[$CellContext`F, #]}, 
           Thread[# -> Range[
              Length[#]]]]]]& )[
         VertexOutComponent[
          Graph[
           Flatten[
            Inner[DirectedEdge, 
             Range[
              Length[$CellContext`\[Delta]]], $CellContext`\[Delta], 
             List]]], $CellContext`s]], $CellContext`DFAEquivalenceClasses[{
          Blank[], 
          Blank[], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Blank[], 
          Pattern[$CellContext`F, 
           Blank[]]}] := 
       Module[{$CellContext`Q, $CellContext`\[CapitalSigma], $CellContext`P, 
          C}, {$CellContext`Q, $CellContext`\[CapitalSigma]} = Map[Range, 
            Dimensions[$CellContext`\[Delta], 2]]; $CellContext`P = Flatten[
            Append[
             Transpose[{$CellContext`Q, $CellContext`Q}]][
             Map[Subsets[
               Sort[#], {2}]& , {
               Complement[$CellContext`Q, $CellContext`F], $CellContext`F}]], 
            1]; $CellContext`P = FixedPoint[DeleteCases[#, 
             Condition[
              Pattern[$CellContext`p, 
               Blank[]], 
              MemberQ[$CellContext`\[CapitalSigma], 
               Condition[
                Pattern[$CellContext`a, 
                 Blank[]], 
                FreeQ[#, 
                 Sort[
                  
                  Part[$CellContext`\[Delta], $CellContext`p, \
$CellContext`a]]]]]]]& , $CellContext`P, SameTest -> (Equal[
              Map[Length, 
               Unevaluated[
                SlotSequence[1]]]]& )]; C = ReplaceRepeated[$CellContext`P, {
              Pattern[$CellContext`h, 
               BlankNullSequence[]], {
               Pattern[$CellContext`a, 
                BlankNullSequence[]], 
               Pattern[$CellContext`x, 
                Blank[]], 
               Pattern[$CellContext`b, 
                BlankNullSequence[]]}, 
              Pattern[$CellContext`u, 
               BlankNullSequence[]], {
               Pattern[$CellContext`p, 
                BlankNullSequence[]], 
               Pattern[$CellContext`x, 
                Blank[]], 
               Pattern[$CellContext`q, 
                BlankNullSequence[]]}, 
              Pattern[$CellContext`t, 
               
               BlankNullSequence[]]} :> {$CellContext`h, {$CellContext`a, \
$CellContext`x, $CellContext`b, $CellContext`p, $CellContext`q}, \
$CellContext`u, $CellContext`t}]; C = ((SortBy[First][
            Map[Union, #, {1}]]& )[
            Join[#, 
             (If[# != {}, 
              ArrayReshape[#, {
                Length[#], 1}], #]& )[
              Complement[$CellContext`Q, 
               Flatten[#]]]]]& )[C]]}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.6403299692677794`*^9, 3.6404107747209167`*^9}]
}, {2}]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["\:041a\:043e\:043d\:043a\:0430\:0442\:0435\:043d\:0430\:0446\:0456\:044f\
", "Section",
 CellChangeTimes->{{3.640427726833522*^9, 3.6404277323728385`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"DFAPlot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"MapAt", "[", 
       RowBox[{
        RowBox[{"Range", "@*", "Length"}], ",", "1"}], "]"}], "@", 
      RowBox[{"DFAConcatenation", "[", 
       RowBox[{"A", ",", "B"}], "]"}]}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"A", ",", 
       RowBox[{"DFA", "@", "\"\<Odd a\>\""}]}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"B", ",", 
       RowBox[{"DFA", "@", "\"\<Dif ab\>\""}]}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Dynamic", "@", 
    RowBox[{"Evaluate", "@", 
     RowBox[{"Row", "@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"Riffle", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"PopupMenu", "[", 
             RowBox[{
              RowBox[{"Dynamic", "[", "#", "]"}], ",", 
              RowBox[{"Reverse", "/@", 
               RowBox[{"Normal", "@", "DFA"}]}], ",", ",", 
              "\[IndentingNewLine]", 
              RowBox[{"Panel", "@", 
               RowBox[{"DFAPlot", "[", 
                RowBox[{"#", ",", 
                 RowBox[{"ImageSize", "\[Rule]", "Medium"}], ",", 
                 RowBox[{"Background", "\[Rule]", "White"}]}], "]"}]}]}], 
             "]"}], "&"}], "/@", 
           RowBox[{"{", 
            RowBox[{"A", ",", "B"}], "}"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"Style", "[", 
           RowBox[{"\"\<o\>\"", ",", "30"}], "]"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Spacer", "[", "20", "]"}]}], "]"}]}]}]}], ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.640068392277717*^9, {3.6400685559920807`*^9, 3.640068562689464*^9}, {
   3.6400698092737646`*^9, 3.6400698116649017`*^9}, {3.640070428946208*^9, 
   3.6400704297492537`*^9}, {3.640076390467187*^9, 3.640076396020505*^9}, 
   3.6404103846626062`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`A$$ = {{
      Tooltip["E", "even"], 
      Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {
     2}}, $CellContext`B$$ = {{1, 2, 3, 4}, {"a", "b"}, {{2, 3}, {4, 3}, {2, 
     4}, {4, 4}}, 1, {1, 2, 3}}, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`A$$], {{
         Tooltip["E", "even"], 
         Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}}}}, {{
       Hold[$CellContext`B$$], {{1, 2, 3, 4}, {"a", "b"}, {{2, 3}, {4, 3}, {2,
         4}, {4, 4}}, 1, {1, 2, 3}}}}, {
      Hold[
       Dynamic[
        Row[{
          PopupMenu[
           Dynamic[$CellContext`A$$], {{{
               Tooltip["E", "even"], 
               Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}} -> 
            "Odd a", {{1, 2, 3, 4}, {"a", "b"}, {{2, 2}, {4, 3}, {3, 3}, {4, 
              4}}, 1, {3}} -> 
            "2nd b", {{
              "\!\(\*SubscriptBox[\(A\), \(0\)]\)", 
               "\!\(\*SubscriptBox[\(A\), \(1\)]\)", 
               "\!\(\*SubscriptBox[\(A\), \(2\)]\)"}, {"a", "b"}, {{2, 1}, {3,
               1}, {3, 3}}, 1, {3}} -> 
            "Substr aa", {{1, 2, 3, 4, 5, 6}, {"a", "b"}, {{2, 3}, {1, 4}, {5,
               6}, {5, 6}, {5, 6}, {6, 6}}, 1, {3, 4, 5}} -> 
            "1 b", {{1, 2, 3, 4}, {"a", "b"}, {{2, 3}, {4, 3}, {2, 4}, {4, 
              4}}, 1, {1, 2, 3}} -> 
            "Dif ab", {{1, 2, 3, 4}, {"a", "b"}, {{4, 2}, {3, 1}, {2, 4}, {1, 
              3}}, 1, {1}} -> 
            "Even both ab", {{1, 2, 3, 4, 5}, {0, 1}, {{1, 2}, {3, 4}, {5, 
              1}, {2, 3}, {4, 5}}, 1, {2}} -> 
            "\!\(\*SubscriptBox[\(w\), \(2\)]\) \[Congruent] 1 (mod 5)", {{1, 
              2, 3, 4}, {"a", "b", "c"}, {{4, 2, 1}, {3, 1, 2}, {2, 4, 3}, {1,
               3, 4}}, 1, {1}} -> 
            "Even both ab but any c", {{0, 1, 2, 3, 4}, {"a", "b", "c"}, {{2, 
              3, 4}, {5, 3, 4}, {2, 5, 4}, {2, 3, 5}, {5, 5, 5}}, 1, {1, 2, 3,
               4}} -> "Dif abc"}, Null, 
           Panel[
            $CellContext`DFACustomPlot[$CellContext`A$$, $CellContext`DFA\
\[Delta]Edges, Identity, GraphPlot, ImageSize -> Medium, Background -> 
             GrayLevel[1]]]], 
          Spacer[20], 
          Style["o", 30], 
          Spacer[20], 
          PopupMenu[
           Dynamic[$CellContext`B$$], {{{
               Tooltip["E", "even"], 
               Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}} -> 
            "Odd a", {{1, 2, 3, 4}, {"a", "b"}, {{2, 2}, {4, 3}, {3, 3}, {4, 
              4}}, 1, {3}} -> 
            "2nd b", {{
              "\!\(\*SubscriptBox[\(A\), \(0\)]\)", 
               "\!\(\*SubscriptBox[\(A\), \(1\)]\)", 
               "\!\(\*SubscriptBox[\(A\), \(2\)]\)"}, {"a", "b"}, {{2, 1}, {3,
               1}, {3, 3}}, 1, {3}} -> 
            "Substr aa", {{1, 2, 3, 4, 5, 6}, {"a", "b"}, {{2, 3}, {1, 4}, {5,
               6}, {5, 6}, {5, 6}, {6, 6}}, 1, {3, 4, 5}} -> 
            "1 b", {{1, 2, 3, 4}, {"a", "b"}, {{2, 3}, {4, 3}, {2, 4}, {4, 
              4}}, 1, {1, 2, 3}} -> 
            "Dif ab", {{1, 2, 3, 4}, {"a", "b"}, {{4, 2}, {3, 1}, {2, 4}, {1, 
              3}}, 1, {1}} -> 
            "Even both ab", {{1, 2, 3, 4, 5}, {0, 1}, {{1, 2}, {3, 4}, {5, 
              1}, {2, 3}, {4, 5}}, 1, {2}} -> 
            "\!\(\*SubscriptBox[\(w\), \(2\)]\) \[Congruent] 1 (mod 5)", {{1, 
              2, 3, 4}, {"a", "b", "c"}, {{4, 2, 1}, {3, 1, 2}, {2, 4, 3}, {1,
               3, 4}}, 1, {1}} -> 
            "Even both ab but any c", {{0, 1, 2, 3, 4}, {"a", "b", "c"}, {{2, 
              3, 4}, {5, 3, 4}, {2, 5, 4}, {2, 3, 5}, {5, 5, 5}}, 1, {1, 2, 3,
               4}} -> "Dif abc"}, Null, 
           Panel[
            $CellContext`DFACustomPlot[$CellContext`B$$, $CellContext`DFA\
\[Delta]Edges, Identity, GraphPlot, ImageSize -> Medium, Background -> 
             GrayLevel[1]]]]}]]], Manipulate`Dump`ThisIsNotAControl}}, 
    Typeset`size$$ = {432., {128., 130.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`A$$ = {{
           Tooltip["E", "even"], 
           Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {
          2}}, $CellContext`B$$ = {{1, 2, 3, 4}, {"a", "b"}, {{2, 3}, {4, 
          3}, {2, 4}, {4, 4}}, 1, {1, 2, 3}}}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> $CellContext`DFAPlot[
        MapAt[
         Composition[Range, Length], 1][
         $CellContext`DFAConcatenation[$CellContext`A$$, $CellContext`B$$]], 
        ImageSize -> Large], "Specifications" :> {{{$CellContext`A$$, {{
            Tooltip["E", "even"], 
            Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}}}, 
         ControlType -> 
         None}, {{$CellContext`B$$, {{1, 2, 3, 4}, {"a", "b"}, {{2, 3}, {4, 
           3}, {2, 4}, {4, 4}}, 1, {1, 2, 3}}}, ControlType -> None}, 
        Dynamic[
         Row[{
           PopupMenu[
            Dynamic[$CellContext`A$$], {{{
                Tooltip["E", "even"], 
                Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}} -> 
             "Odd a", {{1, 2, 3, 4}, {"a", "b"}, {{2, 2}, {4, 3}, {3, 3}, {4, 
               4}}, 1, {3}} -> 
             "2nd b", {{
               "\!\(\*SubscriptBox[\(A\), \(0\)]\)", 
                "\!\(\*SubscriptBox[\(A\), \(1\)]\)", 
                "\!\(\*SubscriptBox[\(A\), \(2\)]\)"}, {"a", "b"}, {{2, 1}, {
               3, 1}, {3, 3}}, 1, {3}} -> 
             "Substr aa", {{1, 2, 3, 4, 5, 6}, {"a", "b"}, {{2, 3}, {1, 4}, {
               5, 6}, {5, 6}, {5, 6}, {6, 6}}, 1, {3, 4, 5}} -> 
             "1 b", {{1, 2, 3, 4}, {"a", "b"}, {{2, 3}, {4, 3}, {2, 4}, {4, 
               4}}, 1, {1, 2, 3}} -> 
             "Dif ab", {{1, 2, 3, 4}, {"a", "b"}, {{4, 2}, {3, 1}, {2, 4}, {1,
                3}}, 1, {1}} -> 
             "Even both ab", {{1, 2, 3, 4, 5}, {0, 1}, {{1, 2}, {3, 4}, {5, 
               1}, {2, 3}, {4, 5}}, 1, {2}} -> 
             "\!\(\*SubscriptBox[\(w\), \(2\)]\) \[Congruent] 1 (mod 5)", {{1,
                2, 3, 4}, {"a", "b", "c"}, {{4, 2, 1}, {3, 1, 2}, {2, 4, 3}, {
               1, 3, 4}}, 1, {1}} -> 
             "Even both ab but any c", {{0, 1, 2, 3, 4}, {"a", "b", "c"}, {{2,
                3, 4}, {5, 3, 4}, {2, 5, 4}, {2, 3, 5}, {5, 5, 5}}, 1, {1, 2, 
               3, 4}} -> "Dif abc"}, Null, 
            Panel[
             $CellContext`DFACustomPlot[$CellContext`A$$, $CellContext`DFA\
\[Delta]Edges, Identity, GraphPlot, ImageSize -> Medium, Background -> 
              GrayLevel[1]]]], 
           Spacer[20], 
           Style["o", 30], 
           Spacer[20], 
           PopupMenu[
            Dynamic[$CellContext`B$$], {{{
                Tooltip["E", "even"], 
                Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}} -> 
             "Odd a", {{1, 2, 3, 4}, {"a", "b"}, {{2, 2}, {4, 3}, {3, 3}, {4, 
               4}}, 1, {3}} -> 
             "2nd b", {{
               "\!\(\*SubscriptBox[\(A\), \(0\)]\)", 
                "\!\(\*SubscriptBox[\(A\), \(1\)]\)", 
                "\!\(\*SubscriptBox[\(A\), \(2\)]\)"}, {"a", "b"}, {{2, 1}, {
               3, 1}, {3, 3}}, 1, {3}} -> 
             "Substr aa", {{1, 2, 3, 4, 5, 6}, {"a", "b"}, {{2, 3}, {1, 4}, {
               5, 6}, {5, 6}, {5, 6}, {6, 6}}, 1, {3, 4, 5}} -> 
             "1 b", {{1, 2, 3, 4}, {"a", "b"}, {{2, 3}, {4, 3}, {2, 4}, {4, 
               4}}, 1, {1, 2, 3}} -> 
             "Dif ab", {{1, 2, 3, 4}, {"a", "b"}, {{4, 2}, {3, 1}, {2, 4}, {1,
                3}}, 1, {1}} -> 
             "Even both ab", {{1, 2, 3, 4, 5}, {0, 1}, {{1, 2}, {3, 4}, {5, 
               1}, {2, 3}, {4, 5}}, 1, {2}} -> 
             "\!\(\*SubscriptBox[\(w\), \(2\)]\) \[Congruent] 1 (mod 5)", {{1,
                2, 3, 4}, {"a", "b", "c"}, {{4, 2, 1}, {3, 1, 2}, {2, 4, 3}, {
               1, 3, 4}}, 1, {1}} -> 
             "Even both ab but any c", {{0, 1, 2, 3, 4}, {"a", "b", "c"}, {{2,
                3, 4}, {5, 3, 4}, {2, 5, 4}, {2, 3, 5}, {5, 5, 5}}, 1, {1, 2, 
               3, 4}} -> "Dif abc"}, Null, 
            Panel[
             $CellContext`DFACustomPlot[$CellContext`B$$, $CellContext`DFA\
\[Delta]Edges, Identity, GraphPlot, ImageSize -> Medium, Background -> 
              GrayLevel[1]]]]}]]}, "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{635., {227., 234.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`DFAPlot[
         Pattern[$CellContext`M, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          
          OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`DFA\[Delta]Edges, Identity, 
         GraphPlot, $CellContext`opts], $CellContext`DFACustomPlot[{
          Pattern[$CellContext`Q, 
           Blank[]], 
          Pattern[$CellContext`\[CapitalSigma], 
           Blank[]], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`F, 
           Blank[]]}, 
         Pattern[$CellContext`Edges, 
          Blank[]], 
         Pattern[$CellContext`PrePlot, 
          Blank[]], 
         Pattern[Plot, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          OptionsPattern[]]] := 
       With[{$CellContext`Qf = 
          If[Null =!= $CellContext`Q, Part[$CellContext`Q, #]& , 
            Identity], $CellContext`\[CapitalSigma]f = 
          If[Null =!= $CellContext`\[CapitalSigma], 
            Part[$CellContext`\[CapitalSigma], #]& , Characters[
             FromCharacterCode[96 + #]]& ]}, 
         Apply[Plot, 
          $CellContext`PrePlot[{
            If[
             
             OptionValue[$CellContext`EdgeCollapsing], \
$CellContext`DFACollapseEdges, Identity][
             $CellContext`Edges[$CellContext`\[Delta]]], 
            Apply[Sequence, 
             FilterRules[
              FilterRules[{$CellContext`opts}, 
               Options[Plot]], 
              Except[{VertexRenderingFunction, EdgeRenderingFunction}]]], 
            VertexRenderingFunction -> Replace[
              OptionValue[VertexRenderingFunction], 
              Automatic -> ($CellContext`DFARenderState[#2, 
                Replace[$CellContext`s, Null -> 1], $CellContext`F, #, 
                VertexLabeling -> $CellContext`Qf, 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderState]]]]& )], 
            EdgeRenderingFunction -> Replace[
              OptionValue[EdgeRenderingFunction], 
              Automatic -> ($CellContext`DFARenderTransition[#3, #, 
                EdgeLabeling -> If[Null =!= $CellContext`\[CapitalSigma], 
                  Function[$CellContext`l, 
                   If[
                   Length[$CellContext`l] == 
                    Length[$CellContext`\[CapitalSigma]], "\[CapitalSigma]", 
                    If[
                    Length[$CellContext`l] > 
                    Length[$CellContext`\[CapitalSigma]]/2., 
                    Row[{"\[CapitalSigma]", "\[Backslash]", 
                    $CellContext`\[CapitalSigma]f[
                    Complement[
                    Range[
                    Length[$CellContext`\[CapitalSigma]]], $CellContext`l]]}], 
                    $CellContext`\[CapitalSigma]f[$CellContext`l]]]], 
                  FromCharacterCode[# + 96]& ], 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderTransition]]]]& )]}]]], 
       Options[$CellContext`DFACustomPlot] = {
        AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> False, 
         AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, 
         Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, 
         ColorOutput -> Automatic, ContentSelectable -> Automatic, 
         CoordinatesToolOptions -> Automatic, DataRange -> Automatic, 
         DirectedEdges -> False, DisplayFunction :> $DisplayFunction, 
         EdgeLabeling -> True, EdgeRenderingFunction -> Automatic, 
         Epilog -> {}, FormatType :> TraditionalForm, Frame -> False, 
         FrameLabel -> None, FrameStyle -> {}, FrameTicks -> None, 
         FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, 
         ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, 
         ImageSizeRaw -> Automatic, LabelStyle -> {}, Method -> Automatic, 
         MultiedgeStyle -> Automatic, PackingMethod -> Automatic, PlotLabel -> 
         None, PlotRange -> All, PlotRangeClipping -> False, PlotRangePadding -> 
         Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, 
         PreserveImageOptions -> Automatic, Prolog -> {}, RotateLabel -> True,
          SelfLoopStyle -> Automatic, Ticks -> Automatic, TicksStyle -> {}, 
         VertexCoordinateRules -> Automatic, VertexRenderingFunction -> 
         Automatic, $CellContext`EdgeCollapsing -> 
         True, $CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`FinalColor -> GrayLevel[0.85], 
         VertexSize -> 0.1, VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}, $CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFACollapseEdges[
         Pattern[$CellContext`e, 
          Blank[]]] := MapAt[Replace[#, Pattern[$CellContext`l, 
            Blank[List]] :> Flatten[$CellContext`l]]& , {All, 2}][
         ReplaceRepeated[$CellContext`e, {
            Pattern[$CellContext`h, 
             BlankNullSequence[]], {
             Pattern[$CellContext`x, 
              Blank[]], 
             Pattern[$CellContext`l1, 
              Blank[]]}, 
            Pattern[$CellContext`u, 
             BlankNullSequence[]], {
             Pattern[$CellContext`x, 
              Blank[]], 
             Pattern[$CellContext`l2, 
              Blank[]]}, 
            Pattern[$CellContext`t, 
             
             BlankNullSequence[]]} :> {$CellContext`h, {$CellContext`x, \
{$CellContext`l1, $CellContext`l2}}, $CellContext`u, $CellContext`t}]], \
$CellContext`DFARenderState[
         Pattern[$CellContext`q, 
          Blank[]], 
         Pattern[$CellContext`s, 
          Blank[]], 
         Pattern[$CellContext`F, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {
         If[$CellContext`q === $CellContext`s, 
          OptionValue[$CellContext`StartColor], 
          OptionValue[$CellContext`FinalColor]], 
         EdgeForm[Black], 
         Disk[$CellContext`p, 
          OptionValue[VertexSize]], 
         If[
          MemberQ[$CellContext`F, $CellContext`q], 
          Disk[$CellContext`p, 0.7 OptionValue[VertexSize]]], 
         Text[
          Replace[
           OptionValue[VertexLabeling], Automatic -> 
           Identity][$CellContext`q], $CellContext`p, BaseStyle -> 
          OptionValue[VertexLabelStyle]]}, 
       Options[$CellContext`DFARenderState] = {$CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`FinalColor -> GrayLevel[0.85], 
         VertexSize -> 0.1, VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFARenderTransition[
         Pattern[$CellContext`t, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {Black, 
         Arrowheads[{{
            OptionValue[$CellContext`ArrowSize], 
            OptionValue[$CellContext`ArrowPosition]}}], 
         Arrow[
          
          BSplineCurve[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1]], 
         Text[
          Style[
           Replace[
            OptionValue[EdgeLabeling], Automatic -> Identity][$CellContext`t], 
           Apply[Sequence, 
            OptionValue[EdgeLabelStyle]]], 
          
          BSplineFunction[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1][
           OptionValue[$CellContext`EdgeLabelPosition]], Background -> 
          White]}, 
       Options[$CellContext`DFARenderTransition] = {$CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $DisplayFunction = 
       Identity, $CellContext`DFA\[Delta]Edges[
         Pattern[$CellContext`\[Delta], 
          Blank[]]] := With[{$CellContext`rd = Map[Range, 
            Dimensions[$CellContext`\[Delta], 2]]}, 
         Flatten[
          Inner[
           Composition[Reverse, List], 
           Part[$CellContext`rd, 2], 
           Inner[Rule, 
            Part[$CellContext`rd, 1], $CellContext`\[Delta], List], List], 
          1]], $CellContext`DFAConcatenation[
         Pattern[$CellContext`A, 
          Blank[]], 
         Pattern[$CellContext`B, 
          Blank[]]] := 
       Module[{$CellContext`\[Delta]1, $CellContext`F1, \
$CellContext`\[Delta]2, $CellContext`F2, $CellContext`Qn, $CellContext`\
\[Delta], $CellContext`M = {}, $CellContext`Q, $CellContext`x}, \
{{$CellContext`\[Delta]1, $CellContext`F1}, {$CellContext`\[Delta]2, \
$CellContext`F2}} = 
          Part[{$CellContext`A, $CellContext`B}, All, {3, 
            5}]; $CellContext`Qn = 
          Length[$CellContext`\[Delta]1]; {$CellContext`\[Delta]2, \
$CellContext`F2} = {$CellContext`\[Delta]2, $CellContext`F2} + \
$CellContext`Qn; {$CellContext`\[Delta]1, $CellContext`\[Delta]2} = 
          ReplaceAll[{$CellContext`\[Delta]1, $CellContext`\[Delta]2}, 
            Pattern[$CellContext`x, 
              Blank[Integer]] -> {$CellContext`x}]; $CellContext`\[Delta]1 = 
          ReplaceAll[$CellContext`\[Delta]1, 
            
            Map[{#} -> {#, $CellContext`Qn + 
               1}& , $CellContext`F1]]; $CellContext`\[Delta] = 
          Join[$CellContext`\[Delta]1, $CellContext`\[Delta]2]; \
$CellContext`Q = {
            If[
             MemberQ[$CellContext`F1, 1], {1, $CellContext`Qn + 1}, {1}]}; 
         While[$CellContext`Q != {}, $CellContext`Q = Part[$CellContext`Q, 1]; 
           AppendTo[$CellContext`M, 
             Join[{$CellContext`Q}, 
              Sow[
               Map[Apply[Union, #]& , 
                Thread[
                 
                 Part[$CellContext`\[Delta], $CellContext`Q]]]]]]; \
$CellContext`Q = Select[
              Sow[
               Flatten[$CellContext`M, 1]], FreeQ[
               Part[$CellContext`M, All, 1], #]& , 1]]; $CellContext`Q = 
          Select[
            Part[$CellContext`M, All, 1], 
            Intersection[#, $CellContext`F2] != {}& ]; \
{$CellContext`\[Delta]1, $CellContext`Q} = ReplaceAll[{
             Map[Rest, $CellContext`M], $CellContext`Q}, 
            Thread[Part[$CellContext`M, All, 1] -> Range[
               Length[$CellContext`M]]]]; $CellContext`DFAMinimize[{
            Range[
             Length[$CellContext`\[Delta]1]], 
            DeleteDuplicates[
             Join[
              Part[$CellContext`A, 2], 
              Part[$CellContext`B, 2]]], $CellContext`\[Delta]1, 
            1, $CellContext`Q}]], $CellContext`DFAMinimize[{
          Pattern[$CellContext`Q, 
           Blank[]], 
          Pattern[$CellContext`\[CapitalSigma], 
           Blank[]], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`F, 
           Blank[]]}] := 
       Module[{$CellContext`M, 
          C}, $CellContext`M = \
$CellContext`DFADeleteInaccesibleStates[{$CellContext`Q, $CellContext`\
\[CapitalSigma], $CellContext`\[Delta], $CellContext`s, $CellContext`F}]; 
         C = $CellContext`DFAEquivalenceClasses[$CellContext`M]; Join[{
            Map[
            Part[$CellContext`M, 1, #]& , C], $CellContext`\[CapitalSigma]}, 
           MapAt[Union, -1][
            ReplaceAll[{
              Part[$CellContext`M, 3, 
               Part[C, All, 1]], $CellContext`s, 
              Part[$CellContext`M, 5]}, 
             Flatten[
              MapThread[
               Composition[Thread, Rule], {C, 
                Range[
                 Length[C]]}]]]]]], $CellContext`DFADeleteInaccesibleStates[{
          Pattern[$CellContext`Q, 
           Blank[]], 
          Pattern[$CellContext`\[CapitalSigma], 
           Blank[]], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`F, 
           Blank[]]}] := (Join[{
          Part[$CellContext`Q, #], $CellContext`\[CapitalSigma]}, 
         Insert[$CellContext`s, 2][
          ReplaceAll[{
            Part[$CellContext`\[Delta], #], 
            Intersection[$CellContext`F, #]}, 
           Thread[# -> Range[
              Length[#]]]]]]& )[
         VertexOutComponent[
          Graph[
           Flatten[
            Inner[DirectedEdge, 
             Range[
              Length[$CellContext`\[Delta]]], $CellContext`\[Delta], 
             List]]], $CellContext`s]], $CellContext`DFAEquivalenceClasses[{
          Blank[], 
          Blank[], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Blank[], 
          Pattern[$CellContext`F, 
           Blank[]]}] := 
       Module[{$CellContext`Q, $CellContext`\[CapitalSigma], $CellContext`P, 
          C}, {$CellContext`Q, $CellContext`\[CapitalSigma]} = Map[Range, 
            Dimensions[$CellContext`\[Delta], 2]]; $CellContext`P = Flatten[
            Append[
             Transpose[{$CellContext`Q, $CellContext`Q}]][
             Map[Subsets[
               Sort[#], {2}]& , {
               Complement[$CellContext`Q, $CellContext`F], $CellContext`F}]], 
            1]; $CellContext`P = FixedPoint[DeleteCases[#, 
             Condition[
              Pattern[$CellContext`p, 
               Blank[]], 
              MemberQ[$CellContext`\[CapitalSigma], 
               Condition[
                Pattern[$CellContext`a, 
                 Blank[]], 
                FreeQ[#, 
                 Sort[
                  
                  Part[$CellContext`\[Delta], $CellContext`p, \
$CellContext`a]]]]]]]& , $CellContext`P, SameTest -> (Equal[
              Map[Length, 
               Unevaluated[
                SlotSequence[1]]]]& )]; C = ReplaceRepeated[$CellContext`P, {
              Pattern[$CellContext`h, 
               BlankNullSequence[]], {
               Pattern[$CellContext`a, 
                BlankNullSequence[]], 
               Pattern[$CellContext`x, 
                Blank[]], 
               Pattern[$CellContext`b, 
                BlankNullSequence[]]}, 
              Pattern[$CellContext`u, 
               BlankNullSequence[]], {
               Pattern[$CellContext`p, 
                BlankNullSequence[]], 
               Pattern[$CellContext`x, 
                Blank[]], 
               Pattern[$CellContext`q, 
                BlankNullSequence[]]}, 
              Pattern[$CellContext`t, 
               
               BlankNullSequence[]]} :> {$CellContext`h, {$CellContext`a, \
$CellContext`x, $CellContext`b, $CellContext`p, $CellContext`q}, \
$CellContext`u, $CellContext`t}]; C = ((SortBy[First][
            Map[Union, #, {1}]]& )[
            Join[#, 
             (If[# != {}, 
              ArrayReshape[#, {
                Length[#], 1}], #]& )[
              Complement[$CellContext`Q, 
               Flatten[#]]]]]& )[C]]}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6400685635585136`*^9, {3.64006979538497*^9, 3.6400698129299736`*^9}, 
   3.640070430083273*^9, 3.640076397040563*^9, 3.6400764349517317`*^9, 
   3.6400764972022924`*^9, 3.640410775077937*^9}]
}, {2}]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["\:0417\:0430\:043c\:0438\:043a\:0430\:043d\:043d\:044f", "Section",
 CellChangeTimes->{{3.640427772169115*^9, 3.6404277737342043`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"DFAPlot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"MapAt", "[", 
       RowBox[{
        RowBox[{"Range", "@*", "Length"}], ",", "1"}], "]"}], "@", 
      RowBox[{"DFAClosure", "[", "A", "]"}]}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"A", ",", 
       RowBox[{"DFA", "@", "\"\<Substr aa\>\""}]}], "}"}], ",", 
     RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Dynamic", "@", 
    RowBox[{"Evaluate", "@", 
     RowBox[{"Row", "@", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"PopupMenu", "[", 
         RowBox[{
          RowBox[{"Dynamic", "[", "A", "]"}], ",", 
          RowBox[{"Reverse", "/@", 
           RowBox[{"Normal", "@", "DFA"}]}], ",", ",", "\[IndentingNewLine]", 
          RowBox[{"Panel", "@", 
           RowBox[{"DFAPlot", "[", 
            RowBox[{"A", ",", 
             RowBox[{"ImageSize", "\[Rule]", "Medium"}], ",", 
             RowBox[{"Background", "\[Rule]", "White"}]}], "]"}]}]}], "]"}], 
        ",", 
        RowBox[{"Style", "[", 
         RowBox[{
          SuperscriptBox[
           RowBox[{"Spacer", "[", "5", "]"}], "*"], ",", "70"}], "]"}]}], 
       "}"}]}]}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"ControlPlacement", "\[Rule]", "Left"}], ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.639187226824398*^9, 3.6391872632434807`*^9}, {
   3.639187293496211*^9, 3.6391873004346085`*^9}, {3.6391878583825207`*^9, 
   3.6391879296625977`*^9}, 3.6391879701097565`*^9, {3.639188118638485*^9, 
   3.639188140988763*^9}, {3.6399716054701004`*^9, 3.6399716600370455`*^9}, 
   3.639971873199061*^9, {3.6399720308789034`*^9, 3.639972262956825*^9}, 
   3.639972296189726*^9, {3.639972356088152*^9, 3.6399724610561533`*^9}, {
   3.6399724984472923`*^9, 3.639972498619302*^9}, {3.640070433635476*^9, 
   3.640070434442522*^9}, {3.6400765363155293`*^9, 3.6400765399687386`*^9}, 
   3.6404103863267016`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`A$$ = {{
     "\!\(\*SubscriptBox[\(A\), \(0\)]\)", 
      "\!\(\*SubscriptBox[\(A\), \(1\)]\)", 
      "\!\(\*SubscriptBox[\(A\), \(2\)]\)"}, {"a", "b"}, {{2, 1}, {3, 1}, {3, 
     3}}, 1, {3}}, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`A$$], {{
        "\!\(\*SubscriptBox[\(A\), \(0\)]\)", 
         "\!\(\*SubscriptBox[\(A\), \(1\)]\)", 
         "\!\(\*SubscriptBox[\(A\), \(2\)]\)"}, {"a", "b"}, {{2, 1}, {3, 1}, {
        3, 3}}, 1, {3}}}}, {
      Hold[
       Dynamic[
        Row[{
          PopupMenu[
           Dynamic[$CellContext`A$$], {{{
               Tooltip["E", "even"], 
               Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}} -> 
            "Odd a", {{1, 2, 3, 4}, {"a", "b"}, {{2, 2}, {4, 3}, {3, 3}, {4, 
              4}}, 1, {3}} -> 
            "2nd b", {{
              "\!\(\*SubscriptBox[\(A\), \(0\)]\)", 
               "\!\(\*SubscriptBox[\(A\), \(1\)]\)", 
               "\!\(\*SubscriptBox[\(A\), \(2\)]\)"}, {"a", "b"}, {{2, 1}, {3,
               1}, {3, 3}}, 1, {3}} -> 
            "Substr aa", {{1, 2, 3, 4, 5, 6}, {"a", "b"}, {{2, 3}, {1, 4}, {5,
               6}, {5, 6}, {5, 6}, {6, 6}}, 1, {3, 4, 5}} -> 
            "1 b", {{1, 2, 3, 4}, {"a", "b"}, {{2, 3}, {4, 3}, {2, 4}, {4, 
              4}}, 1, {1, 2, 3}} -> 
            "Dif ab", {{1, 2, 3, 4}, {"a", "b"}, {{4, 2}, {3, 1}, {2, 4}, {1, 
              3}}, 1, {1}} -> 
            "Even both ab", {{1, 2, 3, 4, 5}, {0, 1}, {{1, 2}, {3, 4}, {5, 
              1}, {2, 3}, {4, 5}}, 1, {2}} -> 
            "\!\(\*SubscriptBox[\(w\), \(2\)]\) \[Congruent] 1 (mod 5)", {{1, 
              2, 3, 4}, {"a", "b", "c"}, {{4, 2, 1}, {3, 1, 2}, {2, 4, 3}, {1,
               3, 4}}, 1, {1}} -> 
            "Even both ab but any c", {{0, 1, 2, 3, 4}, {"a", "b", "c"}, {{2, 
              3, 4}, {5, 3, 4}, {2, 5, 4}, {2, 3, 5}, {5, 5, 5}}, 1, {1, 2, 3,
               4}} -> "Dif abc"}, Null, 
           Panel[
            $CellContext`DFACustomPlot[$CellContext`A$$, $CellContext`DFA\
\[Delta]Edges, Identity, GraphPlot, ImageSize -> Medium, Background -> 
             GrayLevel[1]]]], 
          Style[
           SuperStar[
            Spacer[5]], 70]}]]], Manipulate`Dump`ThisIsNotAControl}}, 
    Typeset`size$$ = {432., {103., 106.}}, Typeset`update$$ = 0, 
    Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`A$$ = {{
          "\!\(\*SubscriptBox[\(A\), \(0\)]\)", 
           "\!\(\*SubscriptBox[\(A\), \(1\)]\)", 
           "\!\(\*SubscriptBox[\(A\), \(2\)]\)"}, {"a", "b"}, {{2, 1}, {3, 
          1}, {3, 3}}, 1, {3}}}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> $CellContext`DFAPlot[
        MapAt[
         Composition[Range, Length], 1][
         $CellContext`DFAClosure[$CellContext`A$$]], ImageSize -> Large], 
      "Specifications" :> {{{$CellContext`A$$, {{
           "\!\(\*SubscriptBox[\(A\), \(0\)]\)", 
            "\!\(\*SubscriptBox[\(A\), \(1\)]\)", 
            "\!\(\*SubscriptBox[\(A\), \(2\)]\)"}, {"a", "b"}, {{2, 1}, {3, 
           1}, {3, 3}}, 1, {3}}}, ControlType -> None}, 
        Dynamic[
         Row[{
           PopupMenu[
            Dynamic[$CellContext`A$$], {{{
                Tooltip["E", "even"], 
                Tooltip["O", "odd"]}, {"a", "b"}, {{2, 1}, {1, 2}}, 1, {2}} -> 
             "Odd a", {{1, 2, 3, 4}, {"a", "b"}, {{2, 2}, {4, 3}, {3, 3}, {4, 
               4}}, 1, {3}} -> 
             "2nd b", {{
               "\!\(\*SubscriptBox[\(A\), \(0\)]\)", 
                "\!\(\*SubscriptBox[\(A\), \(1\)]\)", 
                "\!\(\*SubscriptBox[\(A\), \(2\)]\)"}, {"a", "b"}, {{2, 1}, {
               3, 1}, {3, 3}}, 1, {3}} -> 
             "Substr aa", {{1, 2, 3, 4, 5, 6}, {"a", "b"}, {{2, 3}, {1, 4}, {
               5, 6}, {5, 6}, {5, 6}, {6, 6}}, 1, {3, 4, 5}} -> 
             "1 b", {{1, 2, 3, 4}, {"a", "b"}, {{2, 3}, {4, 3}, {2, 4}, {4, 
               4}}, 1, {1, 2, 3}} -> 
             "Dif ab", {{1, 2, 3, 4}, {"a", "b"}, {{4, 2}, {3, 1}, {2, 4}, {1,
                3}}, 1, {1}} -> 
             "Even both ab", {{1, 2, 3, 4, 5}, {0, 1}, {{1, 2}, {3, 4}, {5, 
               1}, {2, 3}, {4, 5}}, 1, {2}} -> 
             "\!\(\*SubscriptBox[\(w\), \(2\)]\) \[Congruent] 1 (mod 5)", {{1,
                2, 3, 4}, {"a", "b", "c"}, {{4, 2, 1}, {3, 1, 2}, {2, 4, 3}, {
               1, 3, 4}}, 1, {1}} -> 
             "Even both ab but any c", {{0, 1, 2, 3, 4}, {"a", "b", "c"}, {{2,
                3, 4}, {5, 3, 4}, {2, 5, 4}, {2, 3, 5}, {5, 5, 5}}, 1, {1, 2, 
               3, 4}} -> "Dif abc"}, Null, 
            Panel[
             $CellContext`DFACustomPlot[$CellContext`A$$, $CellContext`DFA\
\[Delta]Edges, Identity, GraphPlot, ImageSize -> Medium, Background -> 
              GrayLevel[1]]]], 
           Style[
            SuperStar[
             Spacer[5]], 70]}]]}, "Options" :> {ControlPlacement -> Left}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{779., {129., 136.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`DFAPlot[
         Pattern[$CellContext`M, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          
          OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`DFA\[Delta]Edges, Identity, 
         GraphPlot, $CellContext`opts], $CellContext`DFACustomPlot[{
          Pattern[$CellContext`Q, 
           Blank[]], 
          Pattern[$CellContext`\[CapitalSigma], 
           Blank[]], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`F, 
           Blank[]]}, 
         Pattern[$CellContext`Edges, 
          Blank[]], 
         Pattern[$CellContext`PrePlot, 
          Blank[]], 
         Pattern[Plot, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          OptionsPattern[]]] := 
       With[{$CellContext`Qf = 
          If[Null =!= $CellContext`Q, Part[$CellContext`Q, #]& , 
            Identity], $CellContext`\[CapitalSigma]f = 
          If[Null =!= $CellContext`\[CapitalSigma], 
            Part[$CellContext`\[CapitalSigma], #]& , Characters[
             FromCharacterCode[96 + #]]& ]}, 
         Apply[Plot, 
          $CellContext`PrePlot[{
            If[
             
             OptionValue[$CellContext`EdgeCollapsing], \
$CellContext`DFACollapseEdges, Identity][
             $CellContext`Edges[$CellContext`\[Delta]]], 
            Apply[Sequence, 
             FilterRules[
              FilterRules[{$CellContext`opts}, 
               Options[Plot]], 
              Except[{VertexRenderingFunction, EdgeRenderingFunction}]]], 
            VertexRenderingFunction -> Replace[
              OptionValue[VertexRenderingFunction], 
              Automatic -> ($CellContext`DFARenderState[#2, 
                Replace[$CellContext`s, Null -> 1], $CellContext`F, #, 
                VertexLabeling -> $CellContext`Qf, 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderState]]]]& )], 
            EdgeRenderingFunction -> Replace[
              OptionValue[EdgeRenderingFunction], 
              Automatic -> ($CellContext`DFARenderTransition[#3, #, 
                EdgeLabeling -> If[Null =!= $CellContext`\[CapitalSigma], 
                  Function[$CellContext`l, 
                   If[
                   Length[$CellContext`l] == 
                    Length[$CellContext`\[CapitalSigma]], "\[CapitalSigma]", 
                    If[
                    Length[$CellContext`l] > 
                    Length[$CellContext`\[CapitalSigma]]/2., 
                    Row[{"\[CapitalSigma]", "\[Backslash]", 
                    $CellContext`\[CapitalSigma]f[
                    Complement[
                    Range[
                    Length[$CellContext`\[CapitalSigma]]], $CellContext`l]]}], 
                    $CellContext`\[CapitalSigma]f[$CellContext`l]]]], 
                  FromCharacterCode[# + 96]& ], 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderTransition]]]]& )]}]]], 
       Options[$CellContext`DFACustomPlot] = {
        AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> False, 
         AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, 
         Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, 
         ColorOutput -> Automatic, ContentSelectable -> Automatic, 
         CoordinatesToolOptions -> Automatic, DataRange -> Automatic, 
         DirectedEdges -> False, DisplayFunction :> $DisplayFunction, 
         EdgeLabeling -> True, EdgeRenderingFunction -> Automatic, 
         Epilog -> {}, FormatType :> TraditionalForm, Frame -> False, 
         FrameLabel -> None, FrameStyle -> {}, FrameTicks -> None, 
         FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, 
         ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, 
         ImageSizeRaw -> Automatic, LabelStyle -> {}, Method -> Automatic, 
         MultiedgeStyle -> Automatic, PackingMethod -> Automatic, PlotLabel -> 
         None, PlotRange -> All, PlotRangeClipping -> False, PlotRangePadding -> 
         Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, 
         PreserveImageOptions -> Automatic, Prolog -> {}, RotateLabel -> True,
          SelfLoopStyle -> Automatic, Ticks -> Automatic, TicksStyle -> {}, 
         VertexCoordinateRules -> Automatic, VertexRenderingFunction -> 
         Automatic, $CellContext`EdgeCollapsing -> 
         True, $CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`FinalColor -> GrayLevel[0.85], 
         VertexSize -> 0.1, VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}, $CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFACollapseEdges[
         Pattern[$CellContext`e, 
          Blank[]]] := MapAt[Replace[#, Pattern[$CellContext`l, 
            Blank[List]] :> Flatten[$CellContext`l]]& , {All, 2}][
         ReplaceRepeated[$CellContext`e, {
            Pattern[$CellContext`h, 
             BlankNullSequence[]], {
             Pattern[$CellContext`x, 
              Blank[]], 
             Pattern[$CellContext`l1, 
              Blank[]]}, 
            Pattern[$CellContext`u, 
             BlankNullSequence[]], {
             Pattern[$CellContext`x, 
              Blank[]], 
             Pattern[$CellContext`l2, 
              Blank[]]}, 
            Pattern[$CellContext`t, 
             
             BlankNullSequence[]]} :> {$CellContext`h, {$CellContext`x, \
{$CellContext`l1, $CellContext`l2}}, $CellContext`u, $CellContext`t}]], \
$CellContext`DFARenderState[
         Pattern[$CellContext`q, 
          Blank[]], 
         Pattern[$CellContext`s, 
          Blank[]], 
         Pattern[$CellContext`F, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {
         If[$CellContext`q === $CellContext`s, 
          OptionValue[$CellContext`StartColor], 
          OptionValue[$CellContext`FinalColor]], 
         EdgeForm[Black], 
         Disk[$CellContext`p, 
          OptionValue[VertexSize]], 
         If[
          MemberQ[$CellContext`F, $CellContext`q], 
          Disk[$CellContext`p, 0.7 OptionValue[VertexSize]]], 
         Text[
          Replace[
           OptionValue[VertexLabeling], Automatic -> 
           Identity][$CellContext`q], $CellContext`p, BaseStyle -> 
          OptionValue[VertexLabelStyle]]}, 
       Options[$CellContext`DFARenderState] = {$CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`FinalColor -> GrayLevel[0.85], 
         VertexSize -> 0.1, VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFARenderTransition[
         Pattern[$CellContext`t, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {Black, 
         Arrowheads[{{
            OptionValue[$CellContext`ArrowSize], 
            OptionValue[$CellContext`ArrowPosition]}}], 
         Arrow[
          
          BSplineCurve[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1]], 
         Text[
          Style[
           Replace[
            OptionValue[EdgeLabeling], Automatic -> Identity][$CellContext`t], 
           Apply[Sequence, 
            OptionValue[EdgeLabelStyle]]], 
          
          BSplineFunction[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1][
           OptionValue[$CellContext`EdgeLabelPosition]], Background -> 
          White]}, 
       Options[$CellContext`DFARenderTransition] = {$CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $DisplayFunction = 
       Identity, $CellContext`DFA\[Delta]Edges[
         Pattern[$CellContext`\[Delta], 
          Blank[]]] := With[{$CellContext`rd = Map[Range, 
            Dimensions[$CellContext`\[Delta], 2]]}, 
         Flatten[
          Inner[
           Composition[Reverse, List], 
           Part[$CellContext`rd, 2], 
           Inner[Rule, 
            Part[$CellContext`rd, 1], $CellContext`\[Delta], List], List], 
          1]], $CellContext`DFAClosure[
         Pattern[$CellContext`m, 
          Blank[]]] := 
       Module[{$CellContext`\[Delta], $CellContext`F, $CellContext`newM = {}, \
$CellContext`newRow, $CellContext`s = {{
           1}}, $CellContext`x}, {$CellContext`\[Delta], $CellContext`F} = 
          Part[$CellContext`m, {3, 5}]; $CellContext`F = 
          Select[$CellContext`F, # > 1& ]; $CellContext`\[Delta] = 
          ReplaceAll[$CellContext`\[Delta], Pattern[$CellContext`x, 
              Blank[Integer]] -> {$CellContext`x}]; $CellContext`\[Delta] = 
          ReplaceAll[$CellContext`\[Delta], 
            Map[{#} -> {#, 1}& , $CellContext`F]]; 
         While[$CellContext`s != {}, $CellContext`s = First[$CellContext`s]; 
           AppendTo[$CellContext`newM, 
             Join[{$CellContext`s}, 
              Map[Union[
                Flatten[#]]& , 
               Thread[
                
                Part[$CellContext`\[Delta], $CellContext`s]]]]]; \
$CellContext`s = Select[
              Flatten[$CellContext`newM, 1], FreeQ[
               Part[$CellContext`newM, All, 1], #]& , 1]]; $CellContext`s = 
          Select[
            Part[$CellContext`newM, All, 1], 
            Intersection[#, $CellContext`F] != {}& ]; {$CellContext`\[Delta], \
$CellContext`s} = ReplaceAll[{
             Map[Rest, $CellContext`newM], $CellContext`s}, 
            Thread[
             (# -> #2& )[
              Part[$CellContext`newM, All, 1], 
              Range[
               Length[$CellContext`newM]]]]]; If[
           FreeQ[
            Part[$CellContext`m, 5], 
            Part[$CellContext`m, 4]], {$CellContext`\[Delta], $CellContext`s} = 
            ReplaceAll[{$CellContext`\[Delta], $CellContext`s}, 
              Pattern[$CellContext`x, 
                Blank[Integer]] -> $CellContext`x + 1]; 
           PrependTo[$CellContext`\[Delta], 
             Part[$CellContext`\[Delta], 1]]]; $CellContext`DFAMinimize[{
            Range[
             Length[$CellContext`\[Delta]]], 
            Part[$CellContext`m, 2], $CellContext`\[Delta], 
            Part[$CellContext`m, 4], 
            Join[{
              
              Part[$CellContext`m, 
               4]}, $CellContext`s]}]], $CellContext`DFAMinimize[{
          Pattern[$CellContext`Q, 
           Blank[]], 
          Pattern[$CellContext`\[CapitalSigma], 
           Blank[]], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`F, 
           Blank[]]}] := 
       Module[{$CellContext`M, 
          C}, $CellContext`M = \
$CellContext`DFADeleteInaccesibleStates[{$CellContext`Q, $CellContext`\
\[CapitalSigma], $CellContext`\[Delta], $CellContext`s, $CellContext`F}]; 
         C = $CellContext`DFAEquivalenceClasses[$CellContext`M]; Join[{
            Map[
            Part[$CellContext`M, 1, #]& , C], $CellContext`\[CapitalSigma]}, 
           MapAt[Union, -1][
            ReplaceAll[{
              Part[$CellContext`M, 3, 
               Part[C, All, 1]], $CellContext`s, 
              Part[$CellContext`M, 5]}, 
             Flatten[
              MapThread[
               Composition[Thread, Rule], {C, 
                Range[
                 Length[C]]}]]]]]], $CellContext`DFADeleteInaccesibleStates[{
          Pattern[$CellContext`Q, 
           Blank[]], 
          Pattern[$CellContext`\[CapitalSigma], 
           Blank[]], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`F, 
           Blank[]]}] := (Join[{
          Part[$CellContext`Q, #], $CellContext`\[CapitalSigma]}, 
         Insert[$CellContext`s, 2][
          ReplaceAll[{
            Part[$CellContext`\[Delta], #], 
            Intersection[$CellContext`F, #]}, 
           Thread[# -> Range[
              Length[#]]]]]]& )[
         VertexOutComponent[
          Graph[
           Flatten[
            Inner[DirectedEdge, 
             Range[
              Length[$CellContext`\[Delta]]], $CellContext`\[Delta], 
             List]]], $CellContext`s]], $CellContext`DFAEquivalenceClasses[{
          Blank[], 
          Blank[], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Blank[], 
          Pattern[$CellContext`F, 
           Blank[]]}] := 
       Module[{$CellContext`Q, $CellContext`\[CapitalSigma], $CellContext`P, 
          C}, {$CellContext`Q, $CellContext`\[CapitalSigma]} = Map[Range, 
            Dimensions[$CellContext`\[Delta], 2]]; $CellContext`P = Flatten[
            Append[
             Transpose[{$CellContext`Q, $CellContext`Q}]][
             Map[Subsets[
               Sort[#], {2}]& , {
               Complement[$CellContext`Q, $CellContext`F], $CellContext`F}]], 
            1]; $CellContext`P = FixedPoint[DeleteCases[#, 
             Condition[
              Pattern[$CellContext`p, 
               Blank[]], 
              MemberQ[$CellContext`\[CapitalSigma], 
               Condition[
                Pattern[$CellContext`a, 
                 Blank[]], 
                FreeQ[#, 
                 Sort[
                  
                  Part[$CellContext`\[Delta], $CellContext`p, \
$CellContext`a]]]]]]]& , $CellContext`P, SameTest -> (Equal[
              Map[Length, 
               Unevaluated[
                SlotSequence[1]]]]& )]; C = ReplaceRepeated[$CellContext`P, {
              Pattern[$CellContext`h, 
               BlankNullSequence[]], {
               Pattern[$CellContext`a, 
                BlankNullSequence[]], 
               Pattern[$CellContext`x, 
                Blank[]], 
               Pattern[$CellContext`b, 
                BlankNullSequence[]]}, 
              Pattern[$CellContext`u, 
               BlankNullSequence[]], {
               Pattern[$CellContext`p, 
                BlankNullSequence[]], 
               Pattern[$CellContext`x, 
                Blank[]], 
               Pattern[$CellContext`q, 
                BlankNullSequence[]]}, 
              Pattern[$CellContext`t, 
               
               BlankNullSequence[]]} :> {$CellContext`h, {$CellContext`a, \
$CellContext`x, $CellContext`b, $CellContext`p, $CellContext`q}, \
$CellContext`u, $CellContext`t}]; C = ((SortBy[First][
            Map[Union, #, {1}]]& )[
            Join[#, 
             (If[# != {}, 
              ArrayReshape[#, {
                Length[#], 1}], #]& )[
              Complement[$CellContext`Q, 
               Flatten[#]]]]]& )[C]]}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.639187930202629*^9, 3.6391879917283106`*^9}, 
   3.639188064042693*^9, {3.6391881041756573`*^9, 3.6391881435479097`*^9}, 
   3.639971661314118*^9, 3.6399718749661617`*^9, {3.639972179387222*^9, 
   3.6399722253068485`*^9}, {3.639972267258071*^9, 3.6399722966807537`*^9}, {
   3.6399723770373497`*^9, 3.6399724614641767`*^9}, 3.6399724994593496`*^9, 
   3.6400698210184364`*^9, 3.640070434722538*^9, {3.640076516076372*^9, 
   3.6400765405717726`*^9}, 3.6404107753399515`*^9}]
}, {2}]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["\:0406\:043d\:0442\:0435\:0440\:0430\:043a\:0438\:0432\:043d\:0430 \
\:043f\:043e\:0431\:0443\:0434\:043e\:0432\:0430 \:0430\:0432\:0442\:043e\
\:043c\:0430\:0442\:0430", "Section",
 CellChangeTimes->{{3.6404278063810716`*^9, 3.6404278207358923`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NFAManipulate", "[", 
  RowBox[{"NFA", "@", "\"\<Real short\>\""}], "]"}]], "Input"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`arrowPosition$$ = 
    0.8160000000000001, $CellContext`arrowSize$$ = 
    0.024, $CellContext`edgeLabelPosition$$ = 0.5, $CellContext`F$$ = {1, 2, 
    5, 6, 9}, $CellContext`FSel$$ = {
    True, True, False, False, True, True, False, False, 
     True}, $CellContext`headingsQ\[CapitalSigma]$$ = 
    False, $CellContext`imageSize$$ = Large, $CellContext`lay$$ = 
    Left, $CellContext`out$$ = {
    "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, \
$CellContext`outForm$$ = 
    Column, $CellContext`plot$$ = $CellContext`NFAPlot, \
$CellContext`plotLabel$$ = 
    "\:0414\:0456\:0439\:0441\:043d\:0435 \:0447\:0438\:0441\:043b\:043e", \
$CellContext`Q$$ = {
    "S", "+-", "D", ".", "D.", "F", "E", "E+-", "ED"}, $CellContext`s$$ = 
    6, $CellContext`sSel$$ = {
    False, False, False, False, False, True, False, False, 
     False}, $CellContext`type$$ = 2, $CellContext`vertexSize$$ = 
    0.156, $CellContext`\[Delta]$$ = {{{}, {2}, {2}, {3}, {
      4}, {}}, {{}, {}, {}, {3}, {4}, {}}, {{}, {}, {}, {3}, {
      5}, {}}, {{}, {}, {}, {6}, {}, {}}, {{}, {}, {}, {6}, {}, {
      7}}, {{}, {}, {}, {6}, {}, {7}}, {{}, {8}, {8}, {
      9}, {}, {}}, {{}, {}, {}, {9}, {}, {}}, {{}, {}, {}, {
      9}, {}, {}}}, $CellContext`\[Delta]Elements$$ = 
    "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", \
$CellContext`\[Delta]Output$$ = MatrixForm, $CellContext`\[CapitalSigma]$$ = {
    "", "+", "-", "D", ".", "E"}, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`Q$$], {
       "S", "+-", "D", ".", "D.", "F", "E", "E+-", "ED"}}}, {{
       Hold[$CellContext`\[CapitalSigma]$$], {
       "", "+", "-", "D", ".", "E"}}}, {{
       Hold[$CellContext`\[Delta]$$], {{{}, {2}, {2}, {3}, {
         4}, {}}, {{}, {}, {}, {3}, {4}, {}}, {{}, {}, {}, {3}, {
         5}, {}}, {{}, {}, {}, {6}, {}, {}}, {{}, {}, {}, {6}, {}, {
         7}}, {{}, {}, {}, {6}, {}, {7}}, {{}, {8}, {8}, {
         9}, {}, {}}, {{}, {}, {}, {9}, {}, {}}, {{}, {}, {}, {
         9}, {}, {}}}}}, {{
       Hold[$CellContext`sSel$$], {
       True, False, False, False, False, False, False, False, False}}}, {{
       Hold[$CellContext`FSel$$], {
       False, False, True, False, True, True, False, False, True}}}, {{
       Hold[$CellContext`s$$], 1}}, {{
       Hold[$CellContext`F$$], {3, 5, 6, 9}}}, {{
       Hold[$CellContext`type$$], 2}}, {
      Hold[
       OpenerView[{
        "\:0412\:0438\:0437\:043d\:0430\:0447\:0435\:043d\:043d\:044f", 
         Dynamic[
          Grid[
           ArrayFlatten[{{
              Transpose[{
                Join[{SetterBar[
                    Dynamic[$CellContext`type$$], 
                    
                    Thread[{1, 2} -> {
                    "\:0414\:0421\:0410", "\:041d\:0421\:0410"}], Enabled -> 
                    False]; Null, "s"}, 
                 Array[Toggler[
                   Dynamic[
                    Part[$CellContext`sSel$$, #], 
                    Function[$CellContext`v$, Part[$CellContext`sSel$$, 
                    Part[
                    FirstPosition[$CellContext`sSel$$, True], 1]] = False; 
                    Part[$CellContext`sSel$$, #] = 
                    True; $CellContext`s$$ = #]], 
                   
                   Thread[{True, False} -> 
                    Map[Style[#, Bold]& , {"\[Rule]", " "}]]]& , 
                  Length[$CellContext`Q$$]], {Null}]}], 
              Transpose[{
                Join[{$CellContext`\[SpanFromLeft], "F"}, 
                 Array[Toggler[
                   Dynamic[
                    Part[$CellContext`FSel$$, #], 
                    
                    Function[$CellContext`v$, 
                    Part[$CellContext`FSel$$, #] = $CellContext`v$; \
$CellContext`F$$ = Pick[
                    Range[
                    Length[$CellContext`Q$$]], $CellContext`FSel$$]]], 
                   
                   Thread[{True, False} -> 
                    Map[Style[#, 15]& , {"*", " "}]]]& , 
                  Length[$CellContext`Q$$]], {Null}]}], 
              
              ArrayFlatten[{{{{$CellContext`\[SpanFromLeft], 
                   "\[CapitalSigma]"}, {"Q", "\[Delta]"}}, 
                 Transpose[
                  Prepend[{"\[CurlyEpsilon]", Null}][
                   Array[{
                    Function[Null, 
                    InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                    HoldAll}][
                    Dynamic[
                    Part[$CellContext`\[CapitalSigma]$$, #], 
                    Function[$CellContext`v$, 
                    If[
                    FreeQ[
                    
                    ReplacePart[$CellContext`\[CapitalSigma]$$, # -> 
                    ""], $CellContext`v$], 
                    Part[$CellContext`\[CapitalSigma]$$, #] = $CellContext`v$, 
                    Beep[]]]]], 
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["-", 
                    Catch[
                    If[
                    Length[$CellContext`\[CapitalSigma]$$] > 
                    1, {$CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$} = {
                    Drop[$CellContext`\[CapitalSigma]$$, {#}], 
                    Drop[$CellContext`\[Delta]$$, {}, {#}]}, 
                    Throw[
                    Beep[]]]]]}& , Length[$CellContext`\[CapitalSigma]$$] - 1,
                     2]]], {{
                   Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["+", 
                    
                    Catch[{$CellContext`\[CapitalSigma]$$, $CellContext`\
\[Delta]$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`\[CapitalSigma]$$, $CellContext`\
\[Placeholder] :> Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    ArrayFlatten[{{$CellContext`\[Delta]$$, {}}}]}]]}, {
                  Null}}}, {
                 MapAt[Null& , {$CellContext`s$$, 2}][
                  Array[
                   Function[$CellContext`qi$, {
                    Function[Null, 
                    InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                    HoldAll}][
                    Dynamic[
                    Part[$CellContext`Q$$, $CellContext`qi$], 
                    Function[$CellContext`v$, 
                    
                    Catch[{$CellContext`s$$, $CellContext`F$$} = 
                    ReplaceAll[{$CellContext`s$$, $CellContext`F$$}, 
                    Part[$CellContext`Q$$, $CellContext`qi$] -> If[
                    FreeQ[$CellContext`Q$$, $CellContext`v$], 
                    Part[$CellContext`Q$$, $CellContext`qi$] = \
$CellContext`v$, 
                    Throw[
                    Beep[]]]]]]]], 
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["-", 
                    Catch[
                    If[
                    Length[$CellContext`Q$$] > 
                    1, $CellContext`Q$$ = 
                    Drop[$CellContext`Q$$, {$CellContext`qi$}]; $CellContext`\
\[Delta]$$ = ReplaceAll[
                    DeleteCases[
                    
                    Drop[$CellContext`\[Delta]$$, {$CellContext`qi$}, {}], \
$CellContext`qi$, {3}], Pattern[$CellContext`q$, 
                    Blank[]] :> 
                    Condition[$CellContext`q$ - 
                    1, $CellContext`q$ > $CellContext`qi$]]; \
$CellContext`sSel$$ = 
                    Drop[$CellContext`sSel$$, {$CellContext`qi$}]; \
$CellContext`FSel$$ = 
                    Drop[$CellContext`FSel$$, {$CellContext`qi$}]; \
$CellContext`s$$ = Part[
                    FirstPosition[$CellContext`sSel$$, True], 
                    1]; $CellContext`F$$ = Pick[
                    Range[
                    Length[$CellContext`Q$$]], $CellContext`FSel$$], 
                    Throw[
                    Beep[]]]]]}], 
                   Length[$CellContext`Q$$]]], 
                 Outer[Function[Null, 
                   InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                   HoldAll}][
                   Dynamic[
                    Part[$CellContext`Q$$, 
                    Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]]], 
                    Function[$CellContext`v$, 
                    Catch[
                    If[
                    Head[$CellContext`v$] === List, 
                    Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]] = Map[Replace[
                    Part[
                    FirstPosition[$CellContext`Q$$, #], 1], "NotFound" :> 
                    Throw[
                    Beep[]]]& , $CellContext`v$], 
                    Throw[
                    Beep[]]]]]]]& , 
                  Apply[Sequence, 
                   Map[Range, 
                    Dimensions[$CellContext`\[Delta]$$]]]], 
                 Transpose[{
                   ConstantArray[Null, 
                    Length[$CellContext`Q$$]]}]}, {{{
                   Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["+", 
                    
                    Catch[{$CellContext`Q$$, $CellContext`\[Delta]$$, \
$CellContext`sSel$$, $CellContext`FSel$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`Q$$, $CellContext`\[Placeholder] :> 
                    Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    Append[$CellContext`\[Delta]$$, 
                    ConstantArray[{}, 
                    Length[$CellContext`\[CapitalSigma]$$]]], 
                    Append[$CellContext`sSel$$, False], 
                    Append[$CellContext`FSel$$, False]}]], Null}}, {
                  ConstantArray[Null, 
                   Length[$CellContext`\[CapitalSigma]$$]]}, Null}}]}}], 
           Alignment -> {Null, Null, {{1, 1} -> {Center, Center}}}, 
           ReplaceAll[
           Dividers -> {{
              False, True, True, True, True, {False}, True, False}, {
              False, True, True, {False}, True, False}}, True -> Gray]]]}, 
        True]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`out$$], {
       "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, 
       "\:0412\:0438\:0432\:0456\:0434 \:0414\:0421\:0410"}, {
      "\:0422\:0430\:0431\:043b\:0438\:0446\:044f", 
       "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}}, {{
       Hold[$CellContext`outForm$$], Column, 
       "\:0424\:043e\:0440\:043c\:0430\:0442"}, {Column, Row, InputForm}}, {{
       Hold[$CellContext`\[Delta]Elements$$], 
       "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
       "\:0415\:043b\:0435\:043c\:0435\:043d\:0442\:0438"}, {
      "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
       "\:0421\:0442\:0430\:043d\:0438"}}, {{
       Hold[$CellContext`\[Delta]Output$$], MatrixForm, 
       "\:0424\:043e\:0440\:043c\:0430 \
\:0432\:0438\:0432\:043e\:0434\:0443"}, {MatrixForm, TableForm}}, {{
       Hold[$CellContext`headingsQ\[CapitalSigma]$$], False, 
       "\:0417\:0430\:0433\:043e\:043b\:043e\:0432\:043a\:0438"}, {
      True, False}}, {{
       Hold[$CellContext`plot$$], $CellContext`NFAPlot, 
       "\:0424\:0443\:043d\:043a\:0446\:0456\:044f"}, {$CellContext`NFAPlot, \
$CellContext`NFALayeredPlot}}, {{
       Hold[$CellContext`lay$$], Left, 
       "\:041e\:0440\:0456\:0454\:043d\:0442\:0430\:0446\:0456\:044f"}, {
      Left, Right, Top, Bottom}}, {{
       Hold[$CellContext`imageSize$$], Medium, "ImageSize"}, {
      Tiny, Small, Medium, Large, Full, Automatic}}, {{
       Hold[$CellContext`plotLabel$$], None, "PlotLabel"}, ""}, {{
       Hold[$CellContext`arrowSize$$], Automatic, "ArrowSize"}, 0., 1.}, {{
       Hold[$CellContext`arrowPosition$$], 0.8, "ArrowPosition"}, 0., 1.}, {{
       Hold[$CellContext`edgeLabelPosition$$], 0.5, "EdgeLabelPosition"}, 0., 
      1.}, {{
       Hold[$CellContext`vertexSize$$], 0.1, "VertexSize"}, 0., 1.}, {
      Hold[
       Dynamic[
        Column[
         ReplaceAll[$CellContext`out$$, {
          "\:0422\:0430\:0431\:043b\:0438\:0446\:044f" -> 
           OpenerView[{
             "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0442\:0430\:0431\:043b\:0438\:0446\:0456 \:043f\:0435\:0440\
\:0435\:0445\:043e\:0434\:0456\:0432", 
              Column[{
                Manipulate`Place[1], 
                Manipulate`Place[2], 
                Manipulate`Place[3]}]}], 
           "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430" -> 
           OpenerView[{
             "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0434\:0456\:0430\:0433\:0440\:0430\:043c\:0438 \:043f\:0435\
\:0440\:0435\:0445\:043e\:0434\:0456\:0432", 
              Column[{
                Manipulate`Place[4], 
                Manipulate`Place[5], 
                Manipulate`Place[6], 
                Manipulate`Place[7], 
                Manipulate`Place[8], 
                Manipulate`Place[9], 
                Manipulate`Place[10], 
                Manipulate`Place[11]}]}]}]]]], 
      Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = {
    432., {85.5, 92.5}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`out$43603$$ = 
    False, $CellContext`outForm$43604$$ = 
    0, $CellContext`\[Delta]Elements$43605$$ = 
    False, $CellContext`\[Delta]Output$43606$$ = 
    False, $CellContext`headingsQ\[CapitalSigma]$43607$$ = 
    False, $CellContext`plot$43608$$ = False, $CellContext`lay$43609$$ = 
    0, $CellContext`imageSize$43610$$ = 0, $CellContext`arrowSize$43611$$ = 
    0, $CellContext`arrowPosition$43612$$ = 
    0, $CellContext`edgeLabelPosition$43613$$ = 
    0, $CellContext`vertexSize$43614$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`arrowPosition$$ = 
        0.8, $CellContext`arrowSize$$ = 
        Automatic, $CellContext`edgeLabelPosition$$ = 
        0.5, $CellContext`F$$ = {3, 5, 6, 9}, $CellContext`FSel$$ = {
         False, False, True, False, True, True, False, False, 
          True}, $CellContext`headingsQ\[CapitalSigma]$$ = 
        False, $CellContext`imageSize$$ = Medium, $CellContext`lay$$ = 
        Left, $CellContext`out$$ = {
         "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, \
$CellContext`outForm$$ = 
        Column, $CellContext`plot$$ = $CellContext`NFAPlot, \
$CellContext`plotLabel$$ = 
        None, $CellContext`Q$$ = {
         "S", "+-", "D", ".", "D.", "F", "E", "E+-", "ED"}, $CellContext`s$$ = 
        1, $CellContext`sSel$$ = {
         True, False, False, False, False, False, False, False, 
          False}, $CellContext`type$$ = 2, $CellContext`vertexSize$$ = 
        0.1, $CellContext`\[Delta]$$ = {{{}, {2}, {2}, {3}, {
           4}, {}}, {{}, {}, {}, {3}, {4}, {}}, {{}, {}, {}, {3}, {
           5}, {}}, {{}, {}, {}, {6}, {}, {}}, {{}, {}, {}, {6}, {}, {
           7}}, {{}, {}, {}, {6}, {}, {7}}, {{}, {8}, {8}, {
           9}, {}, {}}, {{}, {}, {}, {9}, {}, {}}, {{}, {}, {}, {
           9}, {}, {}}}, $CellContext`\[Delta]Elements$$ = 
        "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", \
$CellContext`\[Delta]Output$$ = 
        MatrixForm, $CellContext`\[CapitalSigma]$$ = {
         "", "+", "-", "D", ".", "E"}}, "ControllerVariables" :> {
        Hold[$CellContext`out$$, $CellContext`out$43603$$, False], 
        Hold[$CellContext`outForm$$, $CellContext`outForm$43604$$, 0], 
        Hold[$CellContext`\[Delta]Elements$$, \
$CellContext`\[Delta]Elements$43605$$, False], 
        Hold[$CellContext`\[Delta]Output$$, \
$CellContext`\[Delta]Output$43606$$, False], 
        Hold[$CellContext`headingsQ\[CapitalSigma]$$, $CellContext`headingsQ\
\[CapitalSigma]$43607$$, False], 
        Hold[$CellContext`plot$$, $CellContext`plot$43608$$, False], 
        Hold[$CellContext`lay$$, $CellContext`lay$43609$$, 0], 
        Hold[$CellContext`imageSize$$, $CellContext`imageSize$43610$$, 0], 
        Hold[$CellContext`arrowSize$$, $CellContext`arrowSize$43611$$, 0], 
        Hold[$CellContext`arrowPosition$$, $CellContext`arrowPosition$43612$$,
          0], 
        Hold[$CellContext`edgeLabelPosition$$, \
$CellContext`edgeLabelPosition$43613$$, 0], 
        Hold[$CellContext`vertexSize$$, $CellContext`vertexSize$43614$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      ReplaceAll[$CellContext`outForm$$, {Column -> (Column[#, Center]& )}][
        ReplaceAll[$CellContext`out$$, {
         "\:0422\:0430\:0431\:043b\:0438\:0446\:044f" :> 
          Replace[$CellContext`\[Delta]Output$$, Blank[] :> 
            Condition[$CellContext`\[Delta]Output$$[#, 
               TableHeadings -> {$CellContext`Q$$, $CellContext`\
\[CapitalSigma]$$}]& , $CellContext`headingsQ\[CapitalSigma]$$]][
            
            ReplaceAll[$CellContext`\[Delta]Elements$$, {
             "\:0406\:043d\:0434\:0435\:043a\:0441\:0438" -> Identity, 
              "\:0421\:0442\:0430\:043d\:0438" -> 
              ReplaceAll[Pattern[$CellContext`q$, 
                  Blank[Integer]] :> 
                Part[$CellContext`Q$$, $CellContext`q$]]}][$CellContext`\
\[Delta]$$]], "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430" :> 
          Replace[$CellContext`plot$$, {$CellContext`DFALayeredPlot -> \
($CellContext`DFALayeredPlot[#, $CellContext`lay$$, 
               SlotSequence[
               2]]& ), $CellContext`NFALayeredPlot -> \
($CellContext`NFALayeredPlot[#, $CellContext`lay$$, 
               SlotSequence[
               2]]& )}][{$CellContext`Q$$, $CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$, $CellContext`s$$, $CellContext`F$$}, 
            ImageSize -> $CellContext`imageSize$$, 
            PlotLabel -> $CellContext`plotLabel$$, $CellContext`ArrowSize -> \
$CellContext`arrowSize$$, $CellContext`ArrowPosition -> \
$CellContext`arrowPosition$$, $CellContext`EdgeLabelPosition -> \
$CellContext`edgeLabelPosition$$, VertexSize -> $CellContext`vertexSize$$]}]],
       "Specifications" :> {{{$CellContext`Q$$, {
          "S", "+-", "D", ".", "D.", "F", "E", "E+-", "ED"}}, ControlType -> 
         None}, {{$CellContext`\[CapitalSigma]$$, {
          "", "+", "-", "D", ".", "E"}}, ControlType -> 
         None}, {{$CellContext`\[Delta]$$, {{{}, {2}, {2}, {3}, {
            4}, {}}, {{}, {}, {}, {3}, {4}, {}}, {{}, {}, {}, {3}, {
            5}, {}}, {{}, {}, {}, {6}, {}, {}}, {{}, {}, {}, {6}, {}, {
            7}}, {{}, {}, {}, {6}, {}, {7}}, {{}, {8}, {8}, {
            9}, {}, {}}, {{}, {}, {}, {9}, {}, {}}, {{}, {}, {}, {
            9}, {}, {}}}}, ControlType -> 
         None}, {{$CellContext`sSel$$, {
          True, False, False, False, False, False, False, False, False}}, 
         ControlType -> 
         None}, {{$CellContext`FSel$$, {
          False, False, True, False, True, True, False, False, True}}, 
         ControlType -> None}, {{$CellContext`s$$, 1}, ControlType -> 
         None}, {{$CellContext`F$$, {3, 5, 6, 9}}, ControlType -> 
         None}, {{$CellContext`type$$, 2}, ControlType -> None}, 
        OpenerView[{
         "\:0412\:0438\:0437\:043d\:0430\:0447\:0435\:043d\:043d\:044f", 
          Dynamic[
           Grid[
            ArrayFlatten[{{
               Transpose[{
                 Join[{SetterBar[
                    Dynamic[$CellContext`type$$], 
                    
                    Thread[{1, 2} -> {
                    "\:0414\:0421\:0410", "\:041d\:0421\:0410"}], Enabled -> 
                    False]; Null, "s"}, 
                  Array[Toggler[
                    Dynamic[
                    Part[$CellContext`sSel$$, #], 
                    Function[$CellContext`v$, Part[$CellContext`sSel$$, 
                    Part[
                    FirstPosition[$CellContext`sSel$$, True], 1]] = False; 
                    Part[$CellContext`sSel$$, #] = 
                    True; $CellContext`s$$ = #]], 
                    
                    Thread[{True, False} -> 
                    Map[Style[#, Bold]& , {"\[Rule]", " "}]]]& , 
                   Length[$CellContext`Q$$]], {Null}]}], 
               Transpose[{
                 Join[{$CellContext`\[SpanFromLeft], "F"}, 
                  Array[Toggler[
                    Dynamic[
                    Part[$CellContext`FSel$$, #], 
                    
                    Function[$CellContext`v$, 
                    Part[$CellContext`FSel$$, #] = $CellContext`v$; \
$CellContext`F$$ = Pick[
                    Range[
                    Length[$CellContext`Q$$]], $CellContext`FSel$$]]], 
                    
                    Thread[{True, False} -> 
                    Map[Style[#, 15]& , {"*", " "}]]]& , 
                   Length[$CellContext`Q$$]], {Null}]}], 
               
               ArrayFlatten[{{{{$CellContext`\[SpanFromLeft], 
                    "\[CapitalSigma]"}, {"Q", "\[Delta]"}}, 
                  Transpose[
                   Prepend[{"\[CurlyEpsilon]", Null}][
                    Array[{
                    Function[Null, 
                    InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                    HoldAll}][
                    Dynamic[
                    Part[$CellContext`\[CapitalSigma]$$, #], 
                    Function[$CellContext`v$, 
                    If[
                    FreeQ[
                    
                    ReplacePart[$CellContext`\[CapitalSigma]$$, # -> 
                    ""], $CellContext`v$], 
                    Part[$CellContext`\[CapitalSigma]$$, #] = $CellContext`v$, 
                    Beep[]]]]], 
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["-", 
                    Catch[
                    If[
                    Length[$CellContext`\[CapitalSigma]$$] > 
                    1, {$CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$} = {
                    Drop[$CellContext`\[CapitalSigma]$$, {#}], 
                    Drop[$CellContext`\[Delta]$$, {}, {#}]}, 
                    Throw[
                    Beep[]]]]]}& , Length[$CellContext`\[CapitalSigma]$$] - 1,
                     2]]], {{
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["+", 
                    
                    Catch[{$CellContext`\[CapitalSigma]$$, $CellContext`\
\[Delta]$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`\[CapitalSigma]$$, $CellContext`\
\[Placeholder] :> Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    ArrayFlatten[{{$CellContext`\[Delta]$$, {}}}]}]]}, {
                   Null}}}, {
                  MapAt[Null& , {$CellContext`s$$, 2}][
                   Array[
                    Function[$CellContext`qi$, {
                    Function[Null, 
                    InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                    HoldAll}][
                    Dynamic[
                    Part[$CellContext`Q$$, $CellContext`qi$], 
                    Function[$CellContext`v$, 
                    
                    Catch[{$CellContext`s$$, $CellContext`F$$} = 
                    ReplaceAll[{$CellContext`s$$, $CellContext`F$$}, 
                    Part[$CellContext`Q$$, $CellContext`qi$] -> If[
                    FreeQ[$CellContext`Q$$, $CellContext`v$], 
                    Part[$CellContext`Q$$, $CellContext`qi$] = \
$CellContext`v$, 
                    Throw[
                    Beep[]]]]]]]], 
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["-", 
                    Catch[
                    If[
                    Length[$CellContext`Q$$] > 
                    1, $CellContext`Q$$ = 
                    Drop[$CellContext`Q$$, {$CellContext`qi$}]; $CellContext`\
\[Delta]$$ = ReplaceAll[
                    DeleteCases[
                    
                    Drop[$CellContext`\[Delta]$$, {$CellContext`qi$}, {}], \
$CellContext`qi$, {3}], Pattern[$CellContext`q$, 
                    Blank[]] :> 
                    Condition[$CellContext`q$ - 
                    1, $CellContext`q$ > $CellContext`qi$]]; \
$CellContext`sSel$$ = 
                    Drop[$CellContext`sSel$$, {$CellContext`qi$}]; \
$CellContext`FSel$$ = 
                    Drop[$CellContext`FSel$$, {$CellContext`qi$}]; \
$CellContext`s$$ = Part[
                    FirstPosition[$CellContext`sSel$$, True], 
                    1]; $CellContext`F$$ = Pick[
                    Range[
                    Length[$CellContext`Q$$]], $CellContext`FSel$$], 
                    Throw[
                    Beep[]]]]]}], 
                    Length[$CellContext`Q$$]]], 
                  Outer[Function[Null, 
                    InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                    HoldAll}][
                    Dynamic[
                    Part[$CellContext`Q$$, 
                    Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]]], 
                    Function[$CellContext`v$, 
                    Catch[
                    If[
                    Head[$CellContext`v$] === List, 
                    Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]] = Map[Replace[
                    Part[
                    FirstPosition[$CellContext`Q$$, #], 1], "NotFound" :> 
                    Throw[
                    Beep[]]]& , $CellContext`v$], 
                    Throw[
                    Beep[]]]]]]]& , 
                   Apply[Sequence, 
                    Map[Range, 
                    Dimensions[$CellContext`\[Delta]$$]]]], 
                  Transpose[{
                    ConstantArray[Null, 
                    Length[$CellContext`Q$$]]}]}, {{{
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["+", 
                    
                    Catch[{$CellContext`Q$$, $CellContext`\[Delta]$$, \
$CellContext`sSel$$, $CellContext`FSel$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`Q$$, $CellContext`\[Placeholder] :> 
                    Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    Append[$CellContext`\[Delta]$$, 
                    ConstantArray[{}, 
                    Length[$CellContext`\[CapitalSigma]$$]]], 
                    Append[$CellContext`sSel$$, False], 
                    Append[$CellContext`FSel$$, False]}]], Null}}, {
                   ConstantArray[Null, 
                    Length[$CellContext`\[CapitalSigma]$$]]}, Null}}]}}], 
            Alignment -> {Null, Null, {{1, 1} -> {Center, Center}}}, 
            ReplaceAll[
            Dividers -> {{
               False, True, True, True, True, {False}, True, False}, {
               False, True, True, {False}, True, False}}, True -> Gray]]]}, 
         True], Delimiter, {{$CellContext`out$$, {
          "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, 
          "\:0412\:0438\:0432\:0456\:0434 \:0414\:0421\:0410"}, {
         "\:0422\:0430\:0431\:043b\:0438\:0446\:044f", 
          "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, ControlType -> 
         TogglerBar}, {{$CellContext`outForm$$, Column, 
          "\:0424\:043e\:0440\:043c\:0430\:0442"}, {
         Column, Row, InputForm}}, {{$CellContext`\[Delta]Elements$$, 
          "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
          "\:0415\:043b\:0435\:043c\:0435\:043d\:0442\:0438"}, {
         "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
          "\:0421\:0442\:0430\:043d\:0438"}, ControlPlacement -> 
         1}, {{$CellContext`\[Delta]Output$$, MatrixForm, 
          "\:0424\:043e\:0440\:043c\:0430 \
\:0432\:0438\:0432\:043e\:0434\:0443"}, {MatrixForm, TableForm}, 
         ControlPlacement -> 
         2}, {{$CellContext`headingsQ\[CapitalSigma]$$, False, 
          "\:0417\:0430\:0433\:043e\:043b\:043e\:0432\:043a\:0438"}, {
         True, False}, ControlPlacement -> 
         3}, {{$CellContext`plot$$, $CellContext`NFAPlot, 
          
          "\:0424\:0443\:043d\:043a\:0446\:0456\:044f"}, \
{$CellContext`NFAPlot, $CellContext`NFALayeredPlot}, ControlPlacement -> 
         4}, {{$CellContext`lay$$, Left, 
          "\:041e\:0440\:0456\:0454\:043d\:0442\:0430\:0446\:0456\:044f"}, {
         Left, Right, Top, Bottom}, ControlPlacement -> 
         5}, {{$CellContext`imageSize$$, Medium, "ImageSize"}, {
         Tiny, Small, Medium, Large, Full, Automatic}, ControlPlacement -> 
         6}, {{$CellContext`plotLabel$$, None, "PlotLabel"}, "", 
         FieldSize -> {{6, 15}, {1, 
            DirectedInfinity[1]}}, ControlPlacement -> 
         7}, {{$CellContext`arrowSize$$, Automatic, "ArrowSize"}, 0., 1., 
         ControlPlacement -> 
         8}, {{$CellContext`arrowPosition$$, 0.8, "ArrowPosition"}, 0., 1., 
         ControlPlacement -> 
         9}, {{$CellContext`edgeLabelPosition$$, 0.5, "EdgeLabelPosition"}, 
         0., 1., ControlPlacement -> 
         10}, {{$CellContext`vertexSize$$, 0.1, "VertexSize"}, 0., 1., 
         ControlPlacement -> 11}, 
        Dynamic[
         Column[
          
          ReplaceAll[$CellContext`out$$, {
           "\:0422\:0430\:0431\:043b\:0438\:0446\:044f" -> 
            OpenerView[{
              "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0442\:0430\:0431\:043b\:0438\:0446\:0456 \:043f\:0435\:0440\
\:0435\:0445\:043e\:0434\:0456\:0432", 
               Column[{
                 Manipulate`Place[1], 
                 Manipulate`Place[2], 
                 Manipulate`Place[3]}]}], 
            "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430" -> 
            OpenerView[{
              "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0434\:0456\:0430\:0433\:0440\:0430\:043c\:0438 \:043f\:0435\
\:0440\:0435\:0445\:043e\:0434\:0456\:0432", 
               Column[{
                 Manipulate`Place[4], 
                 Manipulate`Place[5], 
                 Manipulate`Place[6], 
                 Manipulate`Place[7], 
                 Manipulate`Place[8], 
                 Manipulate`Place[9], 
                 Manipulate`Place[10], 
                 Manipulate`Place[11]}]}]}]]]}, 
      "Options" :> {ControlPlacement -> Left}, "DefaultOptions" :> {}],
     ImageSizeCache->{796., {174., 181.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`DFALayeredPlot[
         Pattern[$CellContext`M, 
          Blank[]], 
         Pattern[$CellContext`pos, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          
          OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`DFA\[Delta]Edges, 
         Insert[$CellContext`pos, 2], 
         LayeredGraphPlot, $CellContext`opts], $CellContext`DFACustomPlot[{
          Pattern[$CellContext`Q, 
           Blank[]], 
          Pattern[$CellContext`\[CapitalSigma], 
           Blank[]], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`F, 
           Blank[]]}, 
         Pattern[$CellContext`Edges, 
          Blank[]], 
         Pattern[$CellContext`PrePlot, 
          Blank[]], 
         Pattern[Plot, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          OptionsPattern[]]] := 
       With[{$CellContext`Qf = 
          If[Null =!= $CellContext`Q, Part[$CellContext`Q, #]& , 
            Identity], $CellContext`\[CapitalSigma]f = 
          If[Null =!= $CellContext`\[CapitalSigma], 
            Part[$CellContext`\[CapitalSigma], #]& , Characters[
             FromCharacterCode[96 + #]]& ]}, 
         Apply[Plot, 
          $CellContext`PrePlot[{
            If[
             
             OptionValue[$CellContext`EdgeCollapsing], \
$CellContext`DFACollapseEdges, Identity][
             $CellContext`Edges[$CellContext`\[Delta]]], 
            Apply[Sequence, 
             FilterRules[
              FilterRules[{$CellContext`opts}, 
               Options[Plot]], 
              Except[{VertexRenderingFunction, EdgeRenderingFunction}]]], 
            VertexRenderingFunction -> Replace[
              OptionValue[VertexRenderingFunction], 
              Automatic -> ($CellContext`DFARenderState[#2, 
                Replace[$CellContext`s, Null -> 1], $CellContext`F, #, 
                VertexLabeling -> $CellContext`Qf, 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderState]]]]& )], 
            EdgeRenderingFunction -> Replace[
              OptionValue[EdgeRenderingFunction], 
              Automatic -> ($CellContext`DFARenderTransition[#3, #, 
                EdgeLabeling -> If[Null =!= $CellContext`\[CapitalSigma], 
                  Function[$CellContext`l, 
                   If[
                   Length[$CellContext`l] == 
                    Length[$CellContext`\[CapitalSigma]], "\[CapitalSigma]", 
                    If[
                    Length[$CellContext`l] > 
                    Length[$CellContext`\[CapitalSigma]]/2., 
                    Row[{"\[CapitalSigma]", "\[Backslash]", 
                    $CellContext`\[CapitalSigma]f[
                    Complement[
                    Range[
                    Length[$CellContext`\[CapitalSigma]]], $CellContext`l]]}], 
                    $CellContext`\[CapitalSigma]f[$CellContext`l]]]], 
                  FromCharacterCode[# + 96]& ], 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderTransition]]]]& )]}]]], 
       Options[$CellContext`DFACustomPlot] = {
        AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> False, 
         AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, 
         Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, 
         ColorOutput -> Automatic, ContentSelectable -> Automatic, 
         CoordinatesToolOptions -> Automatic, DataRange -> Automatic, 
         DirectedEdges -> False, DisplayFunction :> $DisplayFunction, 
         EdgeLabeling -> True, EdgeRenderingFunction -> Automatic, 
         Epilog -> {}, FormatType :> TraditionalForm, Frame -> False, 
         FrameLabel -> None, FrameStyle -> {}, FrameTicks -> None, 
         FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, 
         ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, 
         ImageSizeRaw -> Automatic, LabelStyle -> {}, Method -> Automatic, 
         MultiedgeStyle -> Automatic, PackingMethod -> Automatic, PlotLabel -> 
         None, PlotRange -> All, PlotRangeClipping -> False, PlotRangePadding -> 
         Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, 
         PreserveImageOptions -> Automatic, Prolog -> {}, RotateLabel -> True,
          SelfLoopStyle -> Automatic, Ticks -> Automatic, TicksStyle -> {}, 
         VertexCoordinateRules -> Automatic, VertexRenderingFunction -> 
         Automatic, $CellContext`EdgeCollapsing -> 
         True, $CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`FinalColor -> GrayLevel[0.85], 
         VertexSize -> 0.1, VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}, $CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFACollapseEdges[
         Pattern[$CellContext`e, 
          Blank[]]] := MapAt[Replace[#, Pattern[$CellContext`l, 
            Blank[List]] :> Flatten[$CellContext`l]]& , {All, 2}][
         ReplaceRepeated[$CellContext`e, {
            Pattern[$CellContext`h, 
             BlankNullSequence[]], {
             Pattern[$CellContext`x, 
              Blank[]], 
             Pattern[$CellContext`l1, 
              Blank[]]}, 
            Pattern[$CellContext`u, 
             BlankNullSequence[]], {
             Pattern[$CellContext`x, 
              Blank[]], 
             Pattern[$CellContext`l2, 
              Blank[]]}, 
            Pattern[$CellContext`t, 
             
             BlankNullSequence[]]} :> {$CellContext`h, {$CellContext`x, \
{$CellContext`l1, $CellContext`l2}}, $CellContext`u, $CellContext`t}]], \
$CellContext`t = {False, False, False}, $CellContext`DFARenderState[
         Pattern[$CellContext`q, 
          Blank[]], 
         Pattern[$CellContext`s, 
          Blank[]], 
         Pattern[$CellContext`F, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {
         If[$CellContext`q === $CellContext`s, 
          OptionValue[$CellContext`StartColor], 
          OptionValue[$CellContext`FinalColor]], 
         EdgeForm[Black], 
         Disk[$CellContext`p, 
          OptionValue[VertexSize]], 
         If[
          MemberQ[$CellContext`F, $CellContext`q], 
          Disk[$CellContext`p, 0.7 OptionValue[VertexSize]]], 
         Text[
          Replace[
           OptionValue[VertexLabeling], Automatic -> 
           Identity][$CellContext`q], $CellContext`p, BaseStyle -> 
          OptionValue[VertexLabelStyle]]}, 
       Options[$CellContext`DFARenderState] = {$CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`FinalColor -> GrayLevel[0.85], 
         VertexSize -> 0.1, VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFARenderTransition[
         Pattern[$CellContext`t, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {Black, 
         Arrowheads[{{
            OptionValue[$CellContext`ArrowSize], 
            OptionValue[$CellContext`ArrowPosition]}}], 
         Arrow[
          
          BSplineCurve[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1]], 
         Text[
          Style[
           Replace[
            OptionValue[EdgeLabeling], Automatic -> Identity][$CellContext`t], 
           Apply[Sequence, 
            OptionValue[EdgeLabelStyle]]], 
          
          BSplineFunction[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1][
           OptionValue[$CellContext`EdgeLabelPosition]], Background -> 
          White]}, 
       Options[$CellContext`DFARenderTransition] = {$CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $DisplayFunction = 
       Identity, $CellContext`DFA\[Delta]Edges[
         Pattern[$CellContext`\[Delta], 
          Blank[]]] := With[{$CellContext`rd = Map[Range, 
            Dimensions[$CellContext`\[Delta], 2]]}, 
         Flatten[
          Inner[
           Composition[Reverse, List], 
           Part[$CellContext`rd, 2], 
           Inner[Rule, 
            Part[$CellContext`rd, 1], $CellContext`\[Delta], List], List], 
          1]], $CellContext`NFALayeredPlot[
         Pattern[$CellContext`M, 
          Blank[]], 
         Pattern[$CellContext`pos, Left], 
         Pattern[$CellContext`opts, 
          
          OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`NFA\[Delta]Edges, 
         Insert[$CellContext`pos, 2], 
         LayeredGraphPlot, $CellContext`opts], $CellContext`NFALayeredPlot[
         Pattern[$CellContext`M, 
          Blank[]], 
         Pattern[$CellContext`pos, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          
          OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`NFA\[Delta]Edges, 
         Insert[$CellContext`pos, 2], 
         LayeredGraphPlot, $CellContext`opts], $CellContext`NFALayeredPlot[
         Pattern[$CellContext`M, 
          Blank[]], 
         Optional[
          Pattern[$CellContext`pos, 
           Blank[]], Left], 
         Pattern[$CellContext`opts, 
          
          OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`NFA\[Delta]Edges, 
         Insert[$CellContext`pos, 2], 
         LayeredGraphPlot, $CellContext`opts], $CellContext`NFA\[Delta]Edges[
         Pattern[$CellContext`\[Delta], 
          Blank[]]] := With[{$CellContext`rl = Map[Range, 
            Dimensions[$CellContext`\[Delta]]]}, 
         Flatten[
          Inner[
           Composition[Thread, Reverse, List], 
           Part[$CellContext`rl, 2], 
           Inner[
            Composition[Thread, Rule], 
            Part[$CellContext`rl, 1], $CellContext`\[Delta], 
            Composition[Flatten, List]], List], 1]], 
       Attributes[$CellContext`qi$] = {Temporary}, 
       Attributes[$CellContext`v$] = {Temporary}, 
       Attributes[$CellContext`q$] = {Temporary}, $CellContext`NFAPlot[
         Pattern[$CellContext`M, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          
          OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`NFA\[Delta]Edges, Identity, GraphPlot, $CellContext`opts]}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.6404271420400734`*^9}]
}, {2}]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell[CellGroupData[{

Cell["\:0410\:0432\:0442\:043e\:043c\:0430\:0442 \:0441\:043a\:0456\:043d\
\:0447\:0435\:043d\:043d\:043e\:0457 \:043c\:043e\:0432\:0438", "Section",
 CellChangeTimes->{{3.640428319448417*^9, 3.6404283241696873`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"input", "=", 
      RowBox[{"Function", "[", 
       RowBox[{",", 
        RowBox[{"InputField", "[", 
         RowBox[{"#", ",", "String", ",", 
          RowBox[{"FieldSize", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"4", ",", "\[Infinity]"}], "}"}], ",", "1"}], "}"}]}]}],
          "]"}], ",", 
        RowBox[{"{", "HoldAll", "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"button", "=", 
      RowBox[{"Function", "[", 
       RowBox[{",", 
        RowBox[{"Button", "[", 
         RowBox[{
          RowBox[{"Style", "[", 
           RowBox[{"#1", ",", "Gray", ",", "16"}], "]"}], ",", "#2", ",", 
          RowBox[{"Appearance", "\[Rule]", "\"\<Frameless\>\""}]}], "]"}], 
        ",", 
        RowBox[{"{", "HoldAll", "}"}]}], "]"}]}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"DynamicModule", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"W", "=", 
        RowBox[{
        "StringSplit", "@", 
         "\"\<\:043e\:0434\:0438\:043d \:0434\:0432\:0430 \:0442\:0440\:0438 \
\:0447\:043e\:0442\:0438\:0440\:0438 \:043f'\:044f\:0442\:044c\>\""}]}], ",", 
       "A", ",", 
       RowBox[{"w", "=", "\"\<\>\""}], ",", 
       RowBox[{"showPlot", "=", "False"}]}], "}"}], ",", 
     RowBox[{"Column", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Dynamic", "@", 
          RowBox[{"Row", "@", 
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"\"\<\:0421\:043b\:043e\:0432\:0430:\>\"", ",", 
               RowBox[{"Spacer", "[", "10", "]"}]}], "}"}], ",", 
             RowBox[{"Array", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Superscript", "[", 
                 RowBox[{
                  RowBox[{"input", "[", 
                   RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    "W", "\[LeftDoubleBracket]", "#", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"v", "\[Function]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringLength", "@", "v"}], ">", "0"}], ",", 
                    RowBox[{
                    RowBox[{
                    "W", "\[LeftDoubleBracket]", "#", 
                    "\[RightDoubleBracket]"}], "=", "v"}], ",", 
                    RowBox[{"Beep", "[", "]"}]}], "]"}]}]}], "]"}], "]"}], 
                  ",", 
                  RowBox[{"button", "[", 
                   RowBox[{"\"\<\[Times]\>\"", ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "@", "W"}], ">", "1"}], ",", 
                    RowBox[{"W", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"W", ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}]}], ",", 
                    RowBox[{"Beep", "[", "]"}]}], "]"}]}], "]"}]}], "]"}], 
                "&"}], ",", 
               RowBox[{"Length", "@", "W"}]}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Spacer", "[", "10", "]"}], ",", 
               RowBox[{"Superscript", "[", 
                RowBox[{
                 RowBox[{"input", "@", 
                  RowBox[{"Dynamic", "@", "w"}]}], ",", 
                 RowBox[{"button", "[", 
                  RowBox[{"\"\<+\>\"", ",", 
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"w", "=!=", "\"\<\>\""}], "&&", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"W", ",", "w"}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"AppendTo", "[", 
                    RowBox[{"W", ",", "w"}], "]"}], 
                    RowBox[{"(", 
                    RowBox[{"w", "=", "\"\<\>\""}], ")"}]}], ",", 
                    RowBox[{"Beep", "[", "]"}]}], "]"}]}], "]"}]}], "]"}]}], 
              "}"}]}], "]"}]}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"Dynamic", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"TableForm", "[", 
             RowBox[{
              RowBox[{
              "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
              ",", 
              RowBox[{"TableHeadings", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"MapAt", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Row", "@", 
                    RowBox[{"{", 
                    RowBox[{"\"\<*\>\"", ",", 
                    RowBox[{"Spacer", "@", "5"}], ",", "#"}], "}"}]}], "&"}], 
                    ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ArrayReshape", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Length", "@", "#"}], ",", "1"}], "}"}]}], "]"}], 
                    "&"}], "@", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "5", 
                    "\[RightDoubleBracket]"}]}]}], "]"}], "@", 
                  RowBox[{
                   RowBox[{"MapAt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Row", "@", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\[Rule]\>\"", ",", 
                    RowBox[{"Spacer", "@", "5"}], ",", "#"}], "}"}]}], "&"}], 
                    ",", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "4", 
                    "\[RightDoubleBracket]"}]}], "]"}], "@", 
                   RowBox[{"Range", "@", 
                    RowBox[{"Length", "@", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}]}]}]}]}], ",", 
                 RowBox[{
                 "#", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}]}], "}"}]}], ",", 
              RowBox[{"TableAlignments", "\[Rule]", 
               RowBox[{"{", "Right", "}"}]}]}], "]"}], "&"}], "[", 
           RowBox[{"A", "=", 
            RowBox[{"TreeDFA", "[", 
             RowBox[{"W", ",", 
              RowBox[{"DeleteDuplicates", "@", 
               RowBox[{"Flatten", "@", 
                RowBox[{"Characters", "@", "W"}]}]}]}], "]"}]}], "]"}], 
          "]"}]}], "}"}], ",", "Center"}], "]"}], ",", 
     RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
    "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.638798291859585*^9, 3.6387983669258785`*^9}, {
   3.6387984046590366`*^9, 3.6387984181138062`*^9}, {3.638798448546547*^9, 
   3.6387987535479918`*^9}, {3.6387987870309067`*^9, 
   3.6387988877556677`*^9}, {3.638798931986198*^9, 3.638798966619179*^9}, 
   3.6387990130708356`*^9, {3.6387990437125883`*^9, 3.6387990956575594`*^9}, 
   3.638799129863516*^9, {3.6387991777802563`*^9, 3.6387991780252705`*^9}, {
   3.638799306551622*^9, 3.6387993382264338`*^9}, {3.6388001536800747`*^9, 
   3.638800159904431*^9}, {3.6388002017308235`*^9, 3.638800461637689*^9}, {
   3.6388005519898567`*^9, 3.6388005594232817`*^9}, {3.6388006049498863`*^9, 
   3.6388006267081304`*^9}, {3.638800665585354*^9, 3.6388007006653605`*^9}, {
   3.6388008326499095`*^9, 3.638800839729315*^9}, {3.63880089209931*^9, 
   3.6388009685866847`*^9}, {3.63880102602997*^9, 3.638801471805467*^9}, {
   3.6388015438325872`*^9, 3.638801728827168*^9}, {3.638801769750509*^9, 
   3.638801802186364*^9}, {3.6388018398775196`*^9, 3.638801982246663*^9}, {
   3.638802043600172*^9, 3.6388020780811443`*^9}, {3.638802133102291*^9, 
   3.638802367589703*^9}, {3.6388024005655894`*^9, 3.6388024201467094`*^9}, {
   3.6388024561807704`*^9, 3.6388025104748755`*^9}, {3.6388026442265263`*^9, 
   3.6388027058650513`*^9}, {3.6388028501093016`*^9, 3.63880301599679*^9}, {
   3.638964381463552*^9, 3.638964386267827*^9}, {3.640428197144422*^9, 
   3.6404281980584745`*^9}, {3.640428243512074*^9, 3.6404282497114286`*^9}, {
   3.6404282912318034`*^9, 3.640428292253862*^9}, {3.640428434863019*^9, 
   3.640428438343218*^9}, {3.640428482037717*^9, 3.6404285236760983`*^9}}],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`W$$ = {
  "\:043e\:0434\:0438\:043d", "\:0434\:0432\:0430", "\:0442\:0440\:0438", 
   "\:0447\:043e\:0442\:0438\:0440\:0438", 
   "\:043f'\:044f\:0442\:044c"}, $CellContext`A$$ = {{{1}, {2}, {4}, {3}, {
    5}, {6}, {7}, {16}, {8}, {9}, {10}, {11}, {17}, {12, 18}, {13}, {14}, {
    15}}, {"\:043e", "\:0434", "\:0438", "\:043d", "\:0432", "\:0430", 
    "\:0442", "\:0440", "\:0447", "\:043f", "'", "\:044f", "\:044c"}, {{2, 3, 
   4, 4, 4, 4, 5, 4, 6, 7, 4, 4, 4}, {4, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 
   4}, {4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4}, {4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
    4, 4, 4}, {4, 4, 4, 4, 4, 4, 4, 10, 4, 4, 4, 4, 4}, {11, 4, 4, 4, 4, 4, 4,
    4, 4, 4, 4, 4, 4}, {4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 12, 4, 4}, {4, 4, 13, 4,
    4, 4, 4, 4, 4, 4, 4, 4, 4}, {4, 4, 4, 4, 4, 14, 4, 4, 4, 4, 4, 4, 4}, {4, 
   4, 14, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4}, {4, 4, 4, 4, 4, 4, 15, 4, 4, 4, 4, 4,
    4}, {4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 16, 4}, {4, 4, 4, 14, 4, 4, 4, 4, 4,
    4, 4, 4, 4}, {4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4}, {4, 4, 5, 4, 4, 4, 
   4, 4, 4, 4, 4, 4, 4}, {4, 4, 4, 4, 4, 4, 17, 4, 4, 4, 4, 4, 4}, {4, 4, 4, 
   4, 4, 4, 4, 4, 4, 4, 4, 4, 14}}, 1, {14}}, $CellContext`w$$ = 
  "", $CellContext`showPlot$$ = False}, 
  TagBox[GridBox[{
     {
      DynamicBox[ToBoxes[
        Row[
         Join[{"\:0421\:043b\:043e\:0432\:0430:", 
           Spacer[10]}, 
          Array[Superscript[
            Function[Null, 
             InputField[#, String, FieldSize -> {{4, Infinity}, 1}], {
             HoldAll}][
             Dynamic[
              Part[$CellContext`W$$, #], 
              Function[$CellContext`v$, 
               If[
               StringLength[$CellContext`v$] > 0, 
                Part[$CellContext`W$$, #] = $CellContext`v$, 
                Beep[]]]]], 
            Function[Null, 
             Button[
              Style[#, Gray, 16], #2, Appearance -> "Frameless"], {HoldAll}][
            "\[Times]", 
             If[
             Length[$CellContext`W$$] > 1, $CellContext`W$$ = 
              Drop[$CellContext`W$$, {#}], 
              Beep[]]]]& , 
           Length[$CellContext`W$$]], {
           Spacer[10], 
           Superscript[
            Function[Null, 
             InputField[#, String, FieldSize -> {{4, Infinity}, 1}], {
             HoldAll}][
             Dynamic[$CellContext`w$$]], 
            Function[Null, 
             Button[
              Style[#, Gray, 16], #2, Appearance -> "Frameless"], {HoldAll}][
            "+", 
             If[
              And[$CellContext`w$$ =!= "", 
               FreeQ[$CellContext`W$$, $CellContext`w$$]], 
              AppendTo[$CellContext`W$$, $CellContext`w$$] ($CellContext`w$$ = 
               ""), 
              Beep[]]]]}]], StandardForm],
       ImageSizeCache->{568., {7., 22.}}]},
     {
      DynamicBox[ToBoxes[
        (TableForm[
         Part[#, 3], TableHeadings -> {
           MapAt[Row[{"*", 
              Spacer[5], #}]& , 
            (ArrayReshape[#, {
              Length[#], 1}]& )[
             Part[#, 5]]][
            MapAt[Row[{"\[Rule]", 
               Spacer[5], #}]& , 
             Part[#, 4]][
             Range[
              Length[
               Part[#, 1]]]]], 
           Part[#, 2]}, 
         TableAlignments -> {
          Right}]& )[$CellContext`A$$ = $CellContext`TreeDFA[$CellContext`W$$, 
           DeleteDuplicates[
            Flatten[
             Characters[$CellContext`W$$]]]]], StandardForm],
       ImageSizeCache->{633., {156., 163.}}]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Center}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"],
  DynamicModuleValues:>{},
  Initialization:>{
   Attributes[Superscript] = {NHoldRest, ReadProtected}, 
    Attributes[$CellContext`v$] = {Temporary}, $CellContext`TreeDFA[{}, 
      Pattern[N, 
       Blank[Integer]]] := {
      ConstantArray[1, N], {}}, $CellContext`TreeDFA[{
       Alternatives["", "\[CurlyEpsilon]"]}, 
      Pattern[N, 
       Blank[Integer]]] := {
      ConstantArray[2, {2, N}], {1}}, $CellContext`TreeDFA[{
       Pattern[$CellContext`a, 
        Blank[String]], 
       Pattern[$CellContext`b, 
        BlankSequence[]]}, 
      Pattern[N, 
       Blank[Integer]]] := $CellContext`DFAUnion[
      $CellContext`TreeDFA[{$CellContext`a}, N], 
      $CellContext`TreeDFA[{$CellContext`b}, N]], $CellContext`TreeDFA[{
       Pattern[$CellContext`a, 
        Blank[String]]}, 
      Pattern[N, 
       Blank[Integer]]] := 
    Module[{$CellContext`Qn = 
       StringLength[$CellContext`a] + 2, $CellContext`c = 
       Characters[$CellContext`a], $CellContext`m}, $CellContext`m = 
       ConstantArray[$CellContext`Qn, {$CellContext`Qn, N}]; 
      Do[Part[$CellContext`m, $CellContext`i, ToCharacterCode[
            Part[$CellContext`c, $CellContext`i]] - 96] = $CellContext`i + 
         1, {$CellContext`i, 
         Length[$CellContext`c]}]; $CellContext`DFAMinimize[{
         Range[
          Length[$CellContext`m]], 
         CharacterRange["a", 
          FromCharacterCode[96 + Length[
             Part[$CellContext`m, 1]]]], $CellContext`m, 
         1, {$CellContext`Qn - 1}}]], $CellContext`TreeDFA[{}, 
      Pattern[$CellContext`\[CapitalSigma], 
       Blank[List]]] := {
      ConstantArray[1, 
       Length[$CellContext`\[CapitalSigma]]], {}}, $CellContext`TreeDFA[{
       Alternatives["", "\[CurlyEpsilon]"]}, 
      Pattern[$CellContext`\[CapitalSigma], 
       Blank[List]]] := {
      ConstantArray[2, {2, 
        Length[$CellContext`\[CapitalSigma]]}], {1}}, $CellContext`TreeDFA[{
       Pattern[$CellContext`a, 
        Blank[String]], 
       Pattern[$CellContext`b, 
        BlankSequence[]]}, 
      Pattern[$CellContext`\[CapitalSigma], 
       Blank[List]]] := $CellContext`DFAUnion[
      $CellContext`TreeDFA[{$CellContext`a}, $CellContext`\[CapitalSigma]], 
      $CellContext`TreeDFA[{$CellContext`b}, $CellContext`\[CapitalSigma]]], \
$CellContext`TreeDFA[{
       Pattern[$CellContext`a, 
        Blank[String]]}, 
      Pattern[$CellContext`\[CapitalSigma], 
       Blank[List]]] := 
    Module[{$CellContext`Qn = 
       StringLength[$CellContext`a] + 2, $CellContext`c = 
       Characters[$CellContext`a], $CellContext`m}, $CellContext`m = 
       ConstantArray[$CellContext`Qn, {$CellContext`Qn, 
          Length[$CellContext`\[CapitalSigma]]}]; 
      Do[Part[$CellContext`m, $CellContext`i, 
          First[
           FirstPosition[$CellContext`\[CapitalSigma], 
            Part[$CellContext`c, $CellContext`i]]]] = $CellContext`i + 
         1, {$CellContext`i, 
         Length[$CellContext`c]}]; $CellContext`DFAMinimize[{
         Range[
          
          Length[$CellContext`m]], $CellContext`\[CapitalSigma], \
$CellContext`m, 1, {$CellContext`Qn - 1}}]], $CellContext`DFAUnion[
      Pattern[$CellContext`A, 
       Blank[]], 
      Pattern[$CellContext`B, 
       Blank[]]] := 
    Module[{$CellContext`f, $CellContext`s, $CellContext`Q, $CellContext`\
\[CapitalSigma], $CellContext`PA, $CellContext`PB, $CellContext`\[Delta]A, \
$CellContext`\[Delta]B, $CellContext`\[Delta]q, $CellContext`m = {}, \
$CellContext`rlQ}, $CellContext`\[CapitalSigma] = DeleteDuplicates[
         Join[
          Part[$CellContext`A, 2], 
          Part[$CellContext`B, 2]]]; $CellContext`PA = Flatten[
         ReplaceAll[
          Map[FirstPosition[
            Part[$CellContext`A, 2], #]& , $CellContext`\[CapitalSigma]], 
          Blank[Missing] -> Length[
             Part[$CellContext`A, 2]] + 1]]; $CellContext`PB = Flatten[
         ReplaceAll[
          Map[FirstPosition[
            Part[$CellContext`B, 2], #]& , $CellContext`\[CapitalSigma]], 
          Blank[Missing] -> Length[
             Part[$CellContext`B, 2]] + 1]]; $CellContext`\[Delta]A = Part[
         If[Length[$CellContext`\[CapitalSigma]] > Length[
            Part[$CellContext`A, 2]], 
          ArrayPad[
           Part[$CellContext`A, 3], {{0, 1}, {0, 1}}, Length[
             Part[$CellContext`A, 1]] + 1], 
          Part[$CellContext`A, 3]], 
         All, $CellContext`PA]; $CellContext`\[Delta]B = Part[
         If[Length[$CellContext`\[CapitalSigma]] > Length[
            Part[$CellContext`B, 2]], 
          ArrayPad[
           Part[$CellContext`B, 3], {{0, 1}, {0, 1}}, Length[
             Part[$CellContext`B, 1]] + 1], 
          Part[$CellContext`B, 3]], All, $CellContext`PB]; $CellContext`Q = {{
          Part[$CellContext`A, 4], 
          Part[$CellContext`B, 4]}}; 
      While[$CellContext`Q != {}, {$CellContext`f, $CellContext`s} = 
         Part[$CellContext`Q, 1]; $CellContext`\[Delta]q = Thread[{
            Part[$CellContext`\[Delta]A, $CellContext`f], 
            Part[$CellContext`\[Delta]B, $CellContext`s]}]; 
        AppendTo[$CellContext`m, {{$CellContext`f, $CellContext`s}, \
$CellContext`\[Delta]q}]; $CellContext`Q = Complement[
           Join[$CellContext`Q, $CellContext`\[Delta]q], 
           Part[$CellContext`m, All, 1]]]; $CellContext`Q = 
       Part[$CellContext`m, All, 1]; $CellContext`rlQ = Range[
         Length[$CellContext`Q]]; $CellContext`DFAMinimize[
        ReplaceAll[
         Join[{$CellContext`rlQ, 
           DeleteDuplicates[
            Join[
             Part[$CellContext`A, 2], 
             Part[$CellContext`B, 2]]]}, {
           Part[$CellContext`m, All, 2], 
           Part[$CellContext`Q, 1], 
           Select[$CellContext`Q, Or[
             MemberQ[
              Part[$CellContext`A, 5], 
              Part[#, 1]], 
             MemberQ[
              Part[$CellContext`B, 5], 
              Part[#, 2]]]& ]}], 
         Thread[$CellContext`Q -> $CellContext`rlQ]]]], \
$CellContext`DFAMinimize[{
       Pattern[$CellContext`Q, 
        Blank[]], 
       Pattern[$CellContext`\[CapitalSigma], 
        Blank[]], 
       Pattern[$CellContext`\[Delta], 
        Blank[]], 
       Pattern[$CellContext`s, 
        Blank[]], 
       Pattern[$CellContext`F, 
        Blank[]]}] := 
    Module[{$CellContext`M, 
       C}, $CellContext`M = \
$CellContext`DFADeleteInaccesibleStates[{$CellContext`Q, $CellContext`\
\[CapitalSigma], $CellContext`\[Delta], $CellContext`s, $CellContext`F}]; 
      C = $CellContext`DFAEquivalenceClasses[$CellContext`M]; Join[{
         Map[Part[$CellContext`M, 1, #]& , C], $CellContext`\[CapitalSigma]}, 
        MapAt[Union, -1][
         ReplaceAll[{
           Part[$CellContext`M, 3, 
            Part[C, All, 1]], $CellContext`s, 
           Part[$CellContext`M, 5]}, 
          Flatten[
           MapThread[
            Composition[Thread, Rule], {C, 
             Range[
              Length[C]]}]]]]]], $CellContext`DFADeleteInaccesibleStates[{
       Pattern[$CellContext`Q, 
        Blank[]], 
       Pattern[$CellContext`\[CapitalSigma], 
        Blank[]], 
       Pattern[$CellContext`\[Delta], 
        Blank[]], 
       Pattern[$CellContext`s, 
        Blank[]], 
       Pattern[$CellContext`F, 
        Blank[]]}] := (Join[{
       Part[$CellContext`Q, #], $CellContext`\[CapitalSigma]}, 
      Insert[$CellContext`s, 2][
       ReplaceAll[{
         Part[$CellContext`\[Delta], #], 
         Intersection[$CellContext`F, #]}, 
        Thread[# -> Range[
           Length[#]]]]]]& )[
      VertexOutComponent[
       Graph[
        Flatten[
         Inner[DirectedEdge, 
          Range[
           Length[$CellContext`\[Delta]]], $CellContext`\[Delta], 
          List]]], $CellContext`s]], $CellContext`DFAEquivalenceClasses[{
       Blank[], 
       Blank[], 
       Pattern[$CellContext`\[Delta], 
        Blank[]], 
       Blank[], 
       Pattern[$CellContext`F, 
        Blank[]]}] := 
    Module[{$CellContext`Q, $CellContext`\[CapitalSigma], $CellContext`P, 
       C}, {$CellContext`Q, $CellContext`\[CapitalSigma]} = Map[Range, 
         Dimensions[$CellContext`\[Delta], 2]]; $CellContext`P = Flatten[
         Append[
          Transpose[{$CellContext`Q, $CellContext`Q}]][
          Map[Subsets[
            Sort[#], {2}]& , {
            Complement[$CellContext`Q, $CellContext`F], $CellContext`F}]], 
         1]; $CellContext`P = FixedPoint[DeleteCases[#, 
          Condition[
           Pattern[$CellContext`p, 
            Blank[]], 
           MemberQ[$CellContext`\[CapitalSigma], 
            Condition[
             Pattern[$CellContext`a, 
              Blank[]], 
             FreeQ[#, 
              Sort[
               
               Part[$CellContext`\[Delta], $CellContext`p, \
$CellContext`a]]]]]]]& , $CellContext`P, SameTest -> (Equal[
           Map[Length, 
            Unevaluated[
             SlotSequence[1]]]]& )]; C = ReplaceRepeated[$CellContext`P, {
           Pattern[$CellContext`h, 
            BlankNullSequence[]], {
            Pattern[$CellContext`a, 
             BlankNullSequence[]], 
            Pattern[$CellContext`x, 
             Blank[]], 
            Pattern[$CellContext`b, 
             BlankNullSequence[]]}, 
           Pattern[$CellContext`u, 
            BlankNullSequence[]], {
            Pattern[$CellContext`p, 
             BlankNullSequence[]], 
            Pattern[$CellContext`x, 
             Blank[]], 
            Pattern[$CellContext`q, 
             BlankNullSequence[]]}, 
           Pattern[$CellContext`t, 
            
            BlankNullSequence[]]} :> {$CellContext`h, {$CellContext`a, \
$CellContext`x, $CellContext`b, $CellContext`p, $CellContext`q}, \
$CellContext`u, $CellContext`t}]; C = ((SortBy[First][
         Map[Union, #, {1}]]& )[
         Join[#, 
          (If[# != {}, 
           ArrayReshape[#, {
             Length[#], 1}], #]& )[
           Complement[$CellContext`Q, 
            Flatten[#]]]]]& )[C]], $CellContext`t = {
     False, False, False}}]], "Output",
 CellChangeTimes->{{3.640428173276057*^9, 3.640428198524501*^9}, 
   3.6404282503204637`*^9, 3.640428292665886*^9, 3.640428439116262*^9, 
   3.640428490395195*^9, 3.6404285240671206`*^9}]
}, {2}]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],

Cell["\:0414\:044f\:043a\:0443\:044e.", "Section",
 CellChangeTimes->{{3.6405016783789034`*^9, 3.6405017016072316`*^9}}]
}, Open  ]]
},
ScreenStyleEnvironment->"SlideShow",
WindowSize->{Full, Full},
WindowMargins->{{-4, Automatic}, {Automatic, -4}},
DefaultNewCellStyle->"Input",
Magnification:>0.75 Inherited,
FrontEndVersion->"10.0 for Microsoft Windows (64-bit) (December 4, 2014)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> 
     FrontEnd`FileName[{"SlideShow"}, "Earth.nb", CharacterEncoding -> 
       "WindowsANSI"]]], 
   Cell[
    StyleData["Output"], TextAlignment -> Center]}, WindowSize -> {546, 406}, 
  WindowMargins -> {{0, Automatic}, {Automatic, 0}}, Visible -> False, 
  FrontEndVersion -> "10.0 for Microsoft Windows (64-bit) (December 4, 2014)",
   StyleDefinitions -> "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "SlideShowHeader"->{
  Cell[580, 22, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[1461, 47, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[21435, 492, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[41693, 949, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[66951, 1514, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[83491, 1877, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[113452, 2521, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[141848, 3150, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[170451, 3784, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[197755, 4388, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[221719, 4925, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[265486, 5856, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"],
  Cell[288366, 6405, 64, 1, 1, "SlideShowNavigationBar",
   CellTags->"SlideShowHeader"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"SlideShowHeader", 289412, 6435}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[647, 25, 419, 8, 350, "Title"],
Cell[1069, 35, 355, 7, 115, "Subsubtitle"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1461, 47, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[1550, 52, 174, 2, 90, "Section"],
Cell[CellGroupData[{
Cell[1749, 58, 5026, 109, 295, "Input"],
Cell[6778, 169, 14599, 316, 589, "Output"]
}, {2}]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[21435, 492, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[21524, 497, 271, 4, 90, "Section"],
Cell[CellGroupData[{
Cell[21820, 505, 4282, 96, 143, "Input"],
Cell[26105, 603, 15530, 339, 609, "Output"]
}, {2}]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[41693, 949, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[41782, 954, 208, 3, 90, "Section"],
Cell[CellGroupData[{
Cell[42015, 961, 4748, 113, 230, "Input"],
Cell[46766, 1076, 20127, 431, 297, "Output"]
}, {2}]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[66951, 1514, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[67040, 1519, 197, 2, 90, "Section"],
Cell[CellGroupData[{
Cell[67262, 1525, 1817, 44, 165, "Input"],
Cell[69082, 1571, 14351, 299, 519, "Output"]
}, {2}]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[83491, 1877, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[83580, 1882, 160, 2, 90, "Section"],
Cell[CellGroupData[{
Cell[83765, 1888, 3410, 73, 143, "Input"],
Cell[87178, 1963, 26216, 551, 615, "Output"]
}, {2}]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[113452, 2521, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[113541, 2526, 129, 1, 90, "Section"],
Cell[CellGroupData[{
Cell[113695, 2531, 2057, 55, 143, "Input"],
Cell[115755, 2588, 26035, 555, 459, "Output"]
}, {2}]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[141848, 3150, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[141937, 3155, 129, 1, 90, "Section"],
Cell[CellGroupData[{
Cell[142091, 3160, 2054, 55, 143, "Input"],
Cell[144148, 3217, 26245, 560, 545, "Output"]
}, {2}]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[170451, 3784, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[170540, 3789, 161, 2, 90, "Section"],
Cell[CellGroupData[{
Cell[170726, 3795, 2226, 58, 143, "Input"],
Cell[172955, 3855, 24742, 526, 479, "Output"]
}, {2}]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[197755, 4388, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[197844, 4393, 141, 1, 90, "Section"],
Cell[CellGroupData[{
Cell[198010, 4398, 2142, 50, 129, "Input"],
Cell[200155, 4450, 21506, 468, 283, "Output"]
}, {2}]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[221719, 4925, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[221808, 4930, 257, 3, 90, "Section"],
Cell[CellGroupData[{
Cell[222090, 4937, 108, 2, 33, "Input"],
Cell[222201, 4941, 43227, 908, 373, "Output"]
}, {2}]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[265486, 5856, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[CellGroupData[{
Cell[265575, 5861, 217, 2, 90, "Section"],
Cell[CellGroupData[{
Cell[265817, 5867, 8498, 191, 447, "Input"],
Cell[274318, 6060, 13990, 338, 372, "Output"]
}, {2}]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[288366, 6405, 64, 1, 1, "SlideShowNavigationBar",
 CellTags->"SlideShowHeader"],
Cell[288433, 6408, 120, 1, 90, "Section"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)

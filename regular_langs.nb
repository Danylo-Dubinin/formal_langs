(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   2673935,      51577]
NotebookOptionsPosition[   2660426,      51144]
NotebookOutlinePosition[   2660772,      51159]
CellTagsIndexPosition[   2660729,      51156]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Finite automata", "Chapter",
 CellChangeTimes->{{3.640071159249979*^9, 3.6400711666944046`*^9}}],

Cell[CellGroupData[{

Cell["Test automata", "Subchapter",
 CellChangeTimes->{{3.6400706537800674`*^9, 3.640070656321213*^9}}],

Cell[CellGroupData[{

Cell["Deterministic", "Section",
 CellChangeTimes->{{3.6400761353155937`*^9, 3.6400761635322075`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"DFA", "=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<Odd a\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Tooltip", "[", 
           RowBox[{"\"\<E\>\"", ",", "\"\<even\>\""}], "]"}], ",", 
          RowBox[{"Tooltip", "[", 
           RowBox[{"\"\<O\>\"", ",", "\"\<odd\>\""}], "]"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<a\>\"", ",", "\"\<b\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"2", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}]}], "}"}], ",", "1", ",", 
        RowBox[{"{", "2", "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<2nd b\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Range", "[", "4", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<a\>\"", ",", "\"\<b\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"2", ",", "2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"4", ",", "3"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"3", ",", "3"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"4", ",", "4"}], "}"}]}], "}"}], ",", "1", ",", 
        RowBox[{"{", "3", "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Substr aa\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "\"\<\!\(\*SubscriptBox[\(A\), \(0\)]\)\>\"", ",", 
          "\"\<\!\(\*SubscriptBox[\(A\), \(1\)]\)\>\"", ",", 
          "\"\<\!\(\*SubscriptBox[\(A\), \(2\)]\)\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<a\>\"", ",", "\"\<b\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"2", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"3", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"3", ",", "3"}], "}"}]}], "}"}], ",", "1", ",", 
        RowBox[{"{", "3", "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<1 b\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Range", "[", "6", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<a\>\"", ",", "\"\<b\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"2", ",", "3"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "4"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"5", ",", "6"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"5", ",", "6"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"5", ",", "6"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"6", ",", "6"}], "}"}]}], "}"}], ",", "1", ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "4", ",", "5"}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Dif ab\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Range", "[", "4", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<a\>\"", ",", "\"\<b\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"2", ",", "3"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"4", ",", "3"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", "4"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"4", ",", "4"}], "}"}]}], "}"}], ",", "1", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Even both ab\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<a\>\"", ",", "\"\<b\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"4", ",", "2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"3", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", "4"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "3"}], "}"}]}], "}"}], ",", "1", ",", 
        RowBox[{"{", "1", "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{
     "\"\<\!\(\*SubscriptBox[\(w\), \(2\)]\) \[Congruent] 1 (mod 5)\>\"", 
      "\[Rule]", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Range", "[", "5", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"3", ",", "4"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"5", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", "3"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"4", ",", "5"}], "}"}]}], "}"}], ",", "1", ",", 
        RowBox[{"{", "2", "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Even both ab but any c\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Range", "[", "4", "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\""}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"4", ",", "2", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"3", ",", "1", ",", "2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", "4", ",", "3"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "3", ",", "4"}], "}"}]}], "}"}], ",", "1", ",", 
        RowBox[{"{", "1", "}"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Dif abc\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\""}], "}"}], 
        ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"2", ",", "3", ",", "4"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"5", ",", "3", ",", "4"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", "5", ",", "4"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", "3", ",", "5"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"5", ",", "5", ",", "5"}], "}"}]}], "}"}], ",", "1", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], "}"}]}]}], 
    "\[IndentingNewLine]", "|>"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGCQAmIQXeJ8zeuA9GvHa8KnvUH0JtGJ/mC6fnYDiDY7sbwF
RLu4NbSC6MVTnkofBNLLhF+A6b3BJz4cAdI1H0+Daa+Y1eJHgfS6AE4pEK2V
96PqHZB+sNG0E0QXPY19KCnz2jFkzz0wrTbx965HckD+obW3QLTV2j9PQXT7
/aTnIPrcTP3XIFpt730wfciA8yOIfhIVCaYFZr/8DaL//6rjfwykd0w8ogai
r2n46oHokoeHLEC0UOZDMB3r4m0LosXWvgTTG05tdwHRFR9U3UH0OR5NPxBd
r90WBKIbmjTCQXSeeFMJiOZyzqwF0SG1a5pB9Km5G7tAtJy/7xQQvYqDYSZY
vDBhIYjmcxURewqk53b+EgfR5yeuvbNV4bXjtuIbYFo8avIjEM3g+AdMOx2d
9w9EZ81ZBqYBRYjasw==
  "]],

Cell[BoxData[
 RowBox[{
  RowBox[{"ModMxN", "[", 
   RowBox[{"m_", ",", "x_", ",", "n_"}], "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"Q", "=", 
      RowBox[{"Range", "[", "n", "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"Q", ",", 
      RowBox[{
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"Range", "[", 
          RowBox[{"0", ",", "9"}], "]"}], ",", 
         RowBox[{"CharacterRange", "[", 
          RowBox[{"\"\<a\>\"", ",", "\"\<z\>\""}], "]"}]}], "]"}], 
       "\[LeftDoubleBracket]", 
       RowBox[{";;", "m"}], "\[RightDoubleBracket]"}], ",", 
      RowBox[{"Partition", "[", 
       RowBox[{
        RowBox[{"Flatten", "@", 
         RowBox[{"ConstantArray", "[", 
          RowBox[{"Q", ",", "m"}], "]"}]}], ",", "m"}], "]"}], ",", "1", ",", 
      RowBox[{"{", 
       RowBox[{"1", "+", "x"}], "}"}]}], "}"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6384292376524134`*^9, 3.6384292707863083`*^9}, {
  3.6384293173659725`*^9, 3.6384293274225483`*^9}, {3.6384294004167233`*^9, 
  3.6384294374708424`*^9}, {3.6384294762360597`*^9, 3.6384295593998165`*^9}, {
  3.6384296390633726`*^9, 3.638429639135377*^9}, {3.638429798552495*^9, 
  3.638429798597498*^9}, {3.6384429119318514`*^9, 3.6384429119868546`*^9}, {
  3.6386118087091646`*^9, 3.6386118256221323`*^9}, {3.640073517913887*^9, 
  3.6400735240022345`*^9}}],

Cell[CellGroupData[{

Cell["Buffalo buffalo", "Subsection",
 CellChangeTimes->{{3.641028637984926*^9, 3.6410286485275292`*^9}}],

Cell[CellGroupData[{

Cell[TextData[Cell[BoxData[
 TagBox[
  ButtonBox[
   PaneSelectorBox[{
    False->"\<\"Buffalo buffalo Buffalo buffalo buffalo buffalo Buffalo \
buffalo.\"\>", True->
    StyleBox["\<\"Buffalo buffalo Buffalo buffalo buffalo buffalo Buffalo \
buffalo.\"\>", "HyperlinkActive"]}, Dynamic[
     CurrentValue["MouseOver"]],
    BaseStyle->{"Hyperlink"},
    FrameMargins->0,
    ImageSize->Automatic],
   BaseStyle->"Hyperlink",
   ButtonData->{
     URL["http://en.wikipedia.org/wiki/Buffalo_buffalo_Buffalo_buffalo_\
buffalo_buffalo_Buffalo_buffalo"], None},
   ButtonNote->
    "http://en.wikipedia.org/wiki/Buffalo_buffalo_Buffalo_buffalo_buffalo_\
buffalo_Buffalo_buffalo"],
  Annotation[#, 
   "http://en.wikipedia.org/wiki/Buffalo_buffalo_Buffalo_buffalo_buffalo_\
buffalo_Buffalo_buffalo", "Hyperlink"]& ]]]], "Item",
 CellChangeTimes->{3.6410286579030657`*^9, 3.6410289041251483`*^9, 
  3.6410290657433925`*^9}],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJxsved2I1t256k1Mx/6w7zEvIQ0Ri21SmqpjOravOlIJr333hvQewMQ3nvC
Et7bABDwIJl5S9PdTzP/fQ4zS6qetfaKFQQBEIg4Z+/ftvw/BmZ/Gvlf/uqv
/mrxP+HwU//qPyws9K///L/hh9+sLw0P/K84+U/4/f+OEzq/TQ1dRPtvksPy
zKQsNS5Njiky48rsmC63ZCyu2sqbdmHXXT4KN6TJJ0OyZYi2Zb7q6UNpz17a
NOeXDblFU2HVWtrAj+7qYbB5GWnLoi1FqC4LVm4fS9c+4cSR27Ok1w2pOVV8
UpkYV6YmFMlxWbz3Ltp1HX1/E/twHeu5jnddxN9eJt+cRX4ncf+XnYe/PXD/
l1Pvby/8P1z53t8F+m4DQ9f+AWloVJWYNWaXbcKGTVhzihuuypqtOG/MT+nz
46rU4G2k+zz4/iL04TLy6TLSfR3tvop0XQd7ZLERXWbRlN+0FnbMuS1DZsuY
3Tbndw3ZDW1qRZdeVcdXdek1VXJBmZxVpGcU6WlFdgYiTc3LMtPSzIgsPSjP
jBsqK5bqhqG0oqlOyQrD93kSZWFIlvkkz/ZIUx9kybd3MRJp6qMi26fKDylz
w4rskDTde5/tl+c+yTLd95lu/EpTHDNWZsyVaau4ZBbXTJVVU2XZUlu21tbw
J+z1XYu4ZSpvmMV1S2XZKMzp85Pa7KguOwPR52a16VlVYlqdWMDn1yRX1Nll
g7BlLu+ZSrt0LG/phSVNflaZm8THlmdH1fkpY3HJJm55GieBznXk8330szTy
chNon3sahw+NHVt901xbN5TXzdUtc2UTr71PDStTI3iVXdz11E699TNv7QLi
a5x7G+eOyr4xt6HNTGtSM/rskrW46SxLHOUta3HVXFhwlOkGWfPL9uKqBYsk
M28rLJuzC3jEWVpzVTYfyhsPpS2PeOCrHmNFPYr73orEI+66xS0IfusobjgK
69bsCgQn7uKmq7Dhyq27cpvu/FZAOIyWz9LidaGmFFum9pP75XPo1z/Ffv0S
/fI58vIcbLc9tbat3NKnqtKwcOErHj7kdqyZNUt2zZBZMWY2LJldc0piTu46
kvu+9GkwexXKXQfz1778lbdw5cpeegs3ntKNU7iyFU+spUNb+cAi7OqL65rc
kjq/oCktaSqLiuKsvDCjFOZwp4zlVUt5zVrZdIr7j83ryJMq1NY8duT+ttTT
vHTVjx2NfbqnlTWTuG4oLePJNnHDUd1z1g4c4sFD7cTXvn5sXwU6t4G2zN+U
BdrK8LMm+lkXedEGsa2e1eGOFu8ZedIFOwpv49pdw12QuBpHjvqRvXZoqe4b
y7tYALbqgbV2YKvTI9aqBH/a0zz31C8gviY/Xj22pIG2PPSkjj7r8YbhljzW
0SSeDYlnEyT5Ykw86xJP6kRLmWyrUi1VsqlMd5TJljzRvE+3FNmOhkumrU5D
nlWJJyUk+qIIde78jSu+WnDy2LwNtKSRlgrvT1/h6f6xdempHT2IO47K+kNt
19M4xnLCp3JVzx7E44fqoau276ytW4QVi7DqrO7gRzwH6xbirElwxbAg8cVx
nR+qB3g+xFM7hvgaJ/7m6WPrHJ8BfyjUufc2j3ytM/rWjRP8LWd1015Zt2GR
i3u0zsU1s7hiLK/gXjiq+57mqbt2ik/ib13iJe76Ma7tQ2PP3dp7qG17mvve
ziHE3Tx0Ng9wN+nYPHK2D11Px56nE2/rwFWFttz2ljb9FTp6hXW/sPFY2gqV
dqPlg4R4Gq1eRcWbeE2aaChiDTn0aqB+46meP1QObMUdc3HNVFwwCTMGYVJf
HNcVxtSFaV1xXi/gwWVjYd6Un4e6c5YX8EUealuu+o6rvueuH/ja549P1772
Jb4+uwhngfZFsHMJCT2RxJ7vok+3kc5NsHP92DrDR3U3dlyNTUd93dnYsFQW
jZUFY2VOU5hU5ydUuXGoLEVmWFOYxkI1CGv64iqWN5aurjSnEaaU+XGNMKEr
T6qLYxph3CBOGypjpvIEtJm9Ou+sLzvFFUdllfRzY9NambdWZizlGVtlxVnd
ousvLtjEOUt52lyasopTlsq4URjSFwYMwoChOIwT/Ihzbb4XR3NlGEeNMKAq
9Ckz3ep8t7HUbyj06nI9xuKAMddnzo9DpfhqB4HmMSTYOA41TwL102DjLNg6
C3fOQs+n/haW0A4E9xHiqm/T12/uOOtb1tqGpbpqri7o8XUKg8r8J0WuS579
qMj14FyW+/ku8/Nd6o009U6R7lKku9WZPn1hBNqb6fZ+fKS7+E9Xkd9fBv/l
PPCPx96/P/X+5sL/2+vA93fhX2SRD8pEry41oEv1aZP92uSgNjGkTY8ZcpPG
Ignutbk0yy7RPN33whSOlsq8pbREwrYAlit2wUMVC37voX6IxW+t7lprm1i9
utKCpjijLU0by0v8DhrK0/9OZnXCtL40oxNmcSthArTFGX1pzlBahGV3VHZd
tSOs88f2TaB1429CsZ9iLdkqO5YyrgmJvrQCXacs4J3XIObqBv3dyqa1ug2B
0sMRFortoFWbSNsZu9VVO/Q2T7ztU2/rDHvqoXniqJ/Ya8ck9QNoJFgoq3jo
BEhUL1y1K0/tGhoPGomkeQfxN279dSkk0lSGGopA7d5Xu4N4sVlq1w/iubNy
ZK8cWkv7ppIEGs8kbhvKqzphWVtY1BWXDIVFQ3EeosvP4kifrbIHsZS28NXY
pSMNrCstqfIzyty0Mjcry05eJ0Yu4n0X8U9nsa6b5OBlrA9ynRiQZcevE0N3
6VFmTCcV6UkYR+xKU3EDYivtOsv7XvEEezkOFdrShhrX+BGMZCmsmXJLpsKy
RVgnKaw5K7tQjKHmHZ4crEkD5RufcO4Tzh4Kh478jiW7okvNwZ5qs3MQZXpI
kRq4T3ySpXqlqX7IXar7Ov32Kvbdkf+fDn3/eOr/l+vQD3ehd3fBbmVkSB2f
VsdnYd0shQ38IU9d4qnvPjb33NVVu7CAJafPjqnTQwy9em5jvdJE/12iFyKL
993HB0EUVmELZh123C7sgZSshT27sG8ubBuy67D1xuwukEmXXdNmljX5BXVu
XpWbV2bnpOlpXD1FbgyiLszi2trqpFr1lWlVYUxVGFXmR1TFYXmuTwH+SXeB
kaTxd7eJ93fJD/fpT8rcILSNPDMIRgJH3Wd7IKApVX4Au0xfmjKVp+y1FXuD
tipf51DaWJxYjfhbDJxWTSXc8VltbgKMBD0JMeTnXhkptYjPrM9uaHIrnJHM
5X3OSFgq2sICPrMqPwXRFqCUVmFi/O3z0LM0+gXm7D70dAODwhhpDyvHKGKZ
repLa9CKuuKiOjOhSo8bCktkPhgjQZlDcALzYS/vGXNroDV9Foy6YhO2cF84
I1mKy2Bma3HdVlhxCGvAJJwQ9girrtKWV9z2VXdw9Iq7j7XDQJ0Umk/c91X3
wEgPIt6HCMopbDqLG1zoVSUYnV1PYdtb3PEJu6HyaVy8ytfvS00dWKjz7Pny
a+T//W9JMNLnl3Cn7W+0nGLTUqhrEpXbYOHMWzhw5XftuQ0wkjmzbstt2/P7
1syBNfHKSIHMJeQRaJS5cGVPHakTZ+7cmb8w5471GYk+u2PIbRryG9r8qiq3
qMjPq7C/SosApPv8NEgJygTkDDtiLq1by9ue+lmwcx9qKwJP9/72nbtxRsqt
LuGMRKtI3HLUdnA7IDDEbgAAoKJx7m9dBzrS0JMcABNsKcMdMIw29qJjgIET
Q+zZxBnJ17wBUUAdESM1CIdMlT2IpSIBLzmax/bGEZFABWBwCEYCF+HNwWA4
wWs5I4HB6M1fDPioobYq2tbGOjqQUvJFHwfPAJyaMi5AIwBSvCGDpJry3JMW
AkZKt1SptiLZUcTwbi1Z5FkebN9yRgJL48TfuAEmhZpS/BbQAm2MXz1U9rFC
bKVVh7jNNCqRCZDPVT3B0oKihiU1F5c5I+FHzkhQ6fbyjq20zYQwiTESCV2H
2qG7fkTE1TyFFxB6vofiZa89AfmAo/C3HIBSccNe2YAvAKVKO44JyBaXkTCD
Lg5hKq4VkVsDmHTgaR+ARjzNPW9nH+fu1r6jsccZ6aF1yBnJDXZq7ZMtA/yX
NzyVTU9p3VVcdRcga97CZrC4Fy7thysXkcp1rHqXqMtjtXv4kpyR3NUjB5Sq
sA5GgqHUQ4oTICUGSHBXmdrPLXBGcpQWGSDB0O8SuQEJni4Dzzf+zhVjJGxV
YNIFtjYjpYvwywXoiAMSHvG3jvF1HNU1W2UJDpqtugxjygRmdEyVG1XlR/4D
I31d2zCFsLB4UJGBz0XqS1ea0IKRKtBjE8bSpKk8DVtvF5cBSABgMBKOluK8
tTRjK8/jR3cNtn6T8Km+aK3MgpHM5QlTadQojICLzOURQ2lIVxwwlAYhmkKP
Tug1Vgb0pT5taVBd7NPke7X5Hl3hky7Xq8/3m4QhS3HQJky5xU3QUah9Hm6R
RNqXkdZ1tHNF8gwBBhx5G3u+JlkNCK4bBIz00Nh2NElM4jy+jrowDDUuz3ZD
wEigMnn+gzQDh/fdfaZLlf2kzvVrc8C5EX6J5JleearrJvrTRfD354//fOr7
xzP/PwGQbkLfSSNvAUjyWI8qOaBPDwOTcNSnRgzpcX12gjHStEmYsgjTEGtp
jjCpvGgpLUDohOjoVaylNaxYh7hJUtuB6rDiqlY3YBpAO6BWfXn+LxgJ3wXC
TmZwZ3EEHeHGAZa+MRK2EjYFFjkxUhsr58wLZ6pxaAf2lFaZmlrTl5e1xSUN
1kBlBQIDgT/KaRlCXqG4xewUfMM1O3H7Lt+tsDIQoDswydU6f2ieORunjJQO
reI+AMleO3XVsb+u/a1b6CI/uIjJnxmJCQCJpHn/2JAFGERBd7lrl2AkiEMk
UrLV4AnugtyghLl2NeOktEiBhcIcMVJlmRyr6jYACU+DBbfUN/BdIMw+zkDu
c1M3ydGr+CAxUrSbQxHkJjmMX0mTY7LUKGFAZlyVndYL8HA36E8L0GMHLvHY
X7sI1e+iLUW8qQo2r3kcyZhd1qfnGSOtGourhtwibKJLPAw0rqAPg7Vbf+XK
X7qAeEpnbuHQUdwxwY7nFo157PclXX5Smx9TZ4chyuwI5D7bK818vI5/fxb6
/UXwX28jP93H3stjvYrwoDY+BdNmy2+5ywde8chfO8GOeGxKAi2Ju7psF2ZM
hUlDfkyTGQZ3QVSZYVVmSJkexLkyOahJT1gKKy7xAIbeXz/2Vg/xPg+VI3w1
R0liLWxDHOVTR/kYmGQsbOLrADAggCVFdoroKD/B1QWus7O+bYPfUZ4zEuFM
Q0XoSmOa4hAEW0aW/giRpkjASIrsgDw7JEsPgJGk6R5Zppu5J71wWPBCbXEC
K9lSW8YmtdU3TZVlrHNDZQmrUV9eNIrL5ORWFrCw6XKBkXIToCMIMAlkok7P
ajILMNz4zJrcmqG4DagGI8FKmso7usIKoFpTXNAKQOt5fHgKIrVOgk93kc+K
6GdV+IWZM/KXj2CpsXiIw9m3ZjS+qM3NqNKTBuBNlS4dxF09cZFdPsIjsFNg
JGOebij8X/zoKO9AKHyEfV0kbCZyBuowcVd2IN7Kgb968FgnIoLgJFA/eqwd
40EvGKm6TYxE4cFNiAfPF3cJn8T9AF5VOXwsHwQqh0HxCM54uiETWhqxba53
HE/P/l//FP3v/yP9659izy/BZstbbTrKTXOuqooIV/7CsTu368ruODKb5tSK
Kb1mz+4C3e3ZA2ts1xGXeJLHvuQZxJ04cSYOHYlDc2Lflj225A71qT1VYl2R
XFVlKFinyi0rMvP32XlFcQFyn5+VZqdluSllYR6iKc6pC/Pa/DJ8Fk/zEnT0
2JH62teu+jHbyNu4yNjF0G/ATnfzGLeDAxJBAouTMAMtDT/JQUehtgYSfdbH
PxvTX6zJF3PmV1vqVxsxUluGZzpFYgPQFxgJOGQs75gqcDApduRoHtnqB/gR
K8EhHgDSGCDd4FWgEe9X1QQ0ijzhr6jCHSUTNX6kCNKLJtqRBxt3oep1ULyK
1G/jrXvQUbQG406MlGqpiI6aSjpvK1JPSjASNn6oIyOftHEFQOKM5Ktfemt0
hBAyYb1Vj+ylbawZc3GFKWrCGCDiq9B1OGaMtAJhEEVxJLATVDo8HUtxE4IT
vBaeNQQeMT9hAjf2yN+6xDrHd2SvpTfHgwAYJww0YdIm0/Zsu5XnzWWKr+Iu
4CXBJxmE+KpzCxfbB0e4cehtHxMgtSSeNomrueto7gCTnE0JGOkBaNRm0tp1
1Lbg9cOowR2wF5fshUVbfsGRW3LmVjyFTX9pL1g6C5UuY1VZoqaMVuXhqjRQ
v/VXrwCHQD5raYMYKT+jz03rCzNQ8oy6CbwpxARlW1y2Ckt4Z2cNPvsWPpWv
fehvnwWfr0LPt49Pt8HOJbN3AKRLCGek0PN56OmKS4DMFpCPlBgLH81AdICx
0gQEPp08NwBVDMUFWKKwg7DEAYlZ5GVY2K/WdhpcgdeSoyfOWqtzFnHWUpkH
d4G+cJ1d1W1ORPYyFMi6C5+2vutrHrhrew9kTKGOAAazFGKqTJrLY6bSMBjJ
WB7WCwRIhnK/ttgNASBBlPlPACRdsV9f7Kf4UmHALIw74GCWxp3lBW9tB2gU
e7qGxJ/uki9ySOqzIvkiS7zcxl9uI2DIzmnw6SzQOSZeojDa7kNjB8qcM5K5
ipUwrSmOKHP9wCQITqClVcIneb4HP4KX8FtdATIGfNUUxmGzcJWUmV44xdeR
H6+Cf7wI/A7CIkhv7qMfyXjF+lUJoNGYNjloSI+ac1MQABIJhYymzEUSMJKt
tIgLBbGWVm3ltX/PSGZhEWItL9tFitWARuDtwu5j3YJ2sIYp+yAuMVkwV2Zg
lb4JqIndpjlGSnMQ7hRglbLtsw/3AescgOSpwSAeYLthscFA477DajCEmINm
0wrzuhJMCak4zu1YDGBmeNZADlxGCBxtbBasxsDTBaD9sXPhI0y6hLjbF8Ak
MBIjJZyccUDyNm9IEbUZHZHXJoNAuQGHIDiJQEGR3AfpcSme6W1cPoinDxUK
IGPX4OisHcB+2Zj7aRM3AJAmYdkAv7Uwo81N6fLTptI8ZUlEQB1hnrWxCUYy
VNcgmuIMviNEnp++S4+DiK4TA5fxTziRZcfl+UkccQXu0xNyll9TZid0OXDs
DgDJVb14EM9dlXO3eIEtDOYJN6SRphwIBEpxFLcASJrUDEykSVjR55d1WYDK
srMswfYMQ/cyTHqsXj2Kt4/itV+8dJeP7MKutbjJNzsFQwpTusI4SX4SR1W2
T5r6cB35HoB0E/5RHqcopTo2pA6PGxKzD7kdr3AYrl0F65CLYOPUV93x1Tad
lVlHecZSmjAWRkH46vSQJoNlPA7U12GPZ0d0mXE4X87KNtaAv3ZGcNU4AWVB
fNVjwJJd2LMVd1ziJb6yTTg0g+WKG8Akk7CGo6YwCV2hyY3igpuZ2wsFi+UK
58giYIPPGgrjBgG7ZlQrDCuyFA0GBcmzPbJUD48jQe4zg9Jktyzddf+VkVT5
AVJKwiTTMIvW2gZuorW2ZqoCkJaIarCYq/MQ6CIQGoSuUn6aJ9qIkQpz6vQM
GEmbX9UXNzXZdX1hyyjsWSoHAHVYRjyuyS2BeUA+XMvZwRutM+j/yIsaEn5W
wBzDaFJQSJQYS5va4grQCIxELywsarP0J0yFVdgX2DUAMMDSUdlnsgufl2Va
AUjYyOtgJGw62D6WBuWyhR+dlV1XmcQjgoIOH2sUNQIX+WsSjkkQAqEaMZLr
KyM5AUjVbTwn2DhmchquQ84itbNo/TLevIalzjZV5bah9mRtPDnbL/6XP0V+
/W/x53+LtD7760+eascuNA3JiixUPPflDzz5PTCSM7tlzWxY0htgJFfu4CF7
aIvvgZFc8UPIQ+zAEZGAmizRbUN825SRGDJ7yviaNLp4F5u7T80rswsAJFlm
TpqZk2XnZfm5u+zMXWbqLjMhzY3fZcfgd9ymRrChcCUBKlAIgBMYX3v9wFzZ
NpbWIcAke30XHhDFdqA9WHiEh0G8TWIk6IFQ5x6sAhaKdSj5BUDKfrGT/OrI
ECNpoEBg98FI0HLALXp/cc8A8BD3wEhAI0tVYq7uGCtb5sou8RijL2ASO95S
qOqZUlHBlhyYhCNR2VfB49jCwcbtI8CmcuYpnQCTYk1pDI5S7S7ZuAcXJZr3
JHUZfkx3lOlnVaxzH2rekR6DGwUuYnEkSsvWLtwiXNQTT+0YR4rnM9T5C0by
sgQuxXzqFByjXVaCpXjV5CxGRHDuYGsMagQLzF7Zwn7EEWgBnQ/XmHvHeD7W
OYAQ6pQzEt6ZEKu2y4JIxDDm6hI38XB2YGvg++A5uCyRZwVdBLY1cLnAWnRT
WscAJM5I7tbeKyMxcTUlICV7cwdia2xD9/K8ubmwAIHmseTmrfkFe375QSDm
fyydMka6+zMjVW/81WvKHZT34G/CGpqKcIJoj0O7wl3FXuN5FkcZGwobbRXi
FNdAGn9mpKeb8Avo7i78fBvq4C7cQgBLYKRHuhQnICVI4OnM38HC23M2Nuy1
FZhUQ2VKX57UClBfo6ri4H225y718Tb1HlqLBbrBSAuwLOxLLeMc6gguG1QW
LuC3a2ipzduqi3g3ikpVVnCFcfuc1S3KPAKTxC0Wwznwt44BKt7GITDJVVtz
injmgr0yxzHJVBoFI5nFUWKkcr+h3AtA0hS6dEIvGIkDklkcoVhTcdhUHLOW
ZuzC3EN51l1ZeawdRjtXREdPd6mn+8yLOvdFk/9Vi2P6izL1+T72fBfpXMWe
b2Ivl+GXC3wMT3PfWWdMS+m2TWAGhZLKkwAhoBGTYVwBTWkY53gQv6K4mTBp
KE5DQImwmIrMMDxxWaLrNvr2JvzzVfB7HFmKrUse7VPEBpWxEXVizJCe1CVH
jZkJS37WWpgz5mb0mSmYP3Np2pybsBambOV5OxZheQV3FreYovGlNQ5LuJ5Y
ElgPJmGGYk3iEsiWyTIXsK6jvo676aiv2mtLttq8RaQSDsCShbEribgAfDWX
FyB4iVVcYVGpbRaJpZ2FLfkgUv0M9hEDjHmAEG60Kj+lzE2DH5S5SXWBjors
BLiC4lG0MJZMLHzEAQn7CwsV+wV0FOhcQyhq3b70ti5crXMeR3I2zrnAhQQg
+f4jIwWhkZiESGSQrxoJ1HQHxYJNSt5E+RAfGCYJQowk7tPuELdJA3BGKi3C
XusBGPlJWHAsYxYnnMMn15fnTdUVQ21FV1nRlpfxBfG9AH6KwowsO8liR8MQ
KVR6ZgIPasoLlI7JzajxzPwUzK6ZbhAu17m7CtfvhkS8gmAjh5t3EF/11FXa
N+fXOSNR+FdYMRbBSFPY0fiQ0IHYntCWgfpNoHYdblA8mcJKtQsKQLEYO4WU
C0ukB4rTXHS5MWXqkzT29jr03WXgO2nkF0W8W5sY0sXH9JEpS3LRk98PVs7j
LRkk2ryKQHHVNj3isqM8YSmNGfJDuuwASW7UUJgwFictpSkIEB0wA5uLHRps
nQUoQ33CMQnnwCTwnrO87yjtPVQuWATvxF6WWIrb5sKGtbwNwaLS4zpnRrCk
rcKKk6pNNmyFRbbaZ2zClC47RH89PwhRpSk9rcp+UmZ65CkSOBqQ+3TfV0bq
YgRF9UjQTgbi/Bmz+ErjtuaGpQ7QXSZGEucM4pyuPKUujgPSwEhw3yA80Yaj
Lj+rSk0rgEm5JV1hTZffZHGkXUtFYqvCIu8CnOhxYdUgUO4MdxYgBJch9CQH
IIWelDiBywxDAFeCnl/a0BYpxaYrrOiLcCVWdLl5TWbWmIch2yNurxyAjnB9
bKVdcngLy/rsPC0Alm+l9cmTIMIWBLaM6Eg8cLNakdeio/p5qHEZbl2Emmdf
MYkiRRB3bZ80Z50KP5h23fbVJIHGQaR9weQy1rqGJFp3qY4s3VFk2spsRyN0
DNVna/PzQ+uLu/3F1/k10PjsgdRfHqrP9nxTG6tc+wuH3oLEV9x35XedBRJH
foczkjt/7ExIIMAke2zPFt01R7bM0Q1jdFUZWdIk1hSx5ZvQzEVg4jw0fhWb
uEtNSdNTt+mpm+T0TXrmNjN7m5m+hfeRGrvODF2m+s5jPZCb5KAqP0OBXxj6
6q69LrHVdqBMKGchQKVse1pHDzWw0xmVCTVPoaNYaQ3UCwVAoAoCFOFRxZ/0
FDv6bM39as89O7KfnZnPtsSzIdpR+hs3vHSHapmq+zbGRYbyJrjIWt8DGpnE
bRwhFnEHT3DVjwEM3wAp/CKPPMvxV/yNW+6yUT1AmwIvlCYD1bCAIcVaiwcQ
v3gaa96CkWJ1KQDpNb/WkgOQQEqptjzZkUda0scaPvkdPhvVrdXPuFD4UXz1
UtlioCAk1g9D69WvjEQJMi5fGYngh+MBS6UdkSavnWJRMUai/D7sCFQ6HG2q
1YHGLi7Bi6EYuCih0Bw0c/0UL+cv5Lk2GB2YHgsllGcM3NcuzcLlgY7F1oBy
5owU+Z8Yydfeh/zPjPTQ2LE3tq2ws8w5tdTXzDUWoSrMU2VRcYHDElQH9J6r
vO0vH0OP4TImGopITR6o3j3WoGMvmdrZxFYCIJmFeSIlnBdWoZpw0Xz4OmA8
cQ++noOoaZ1HZsAe/jZM0jkYKfQsxXYOP0nDT3C6cU9vHluX/uaZr3nkZd79
Y+cUQOXCx2Ym1VID58xRDLw0qhaG1MKAovBJlv1wk/zlOvETGImSaOVZilSU
l/4c0Cb3c8pWhWle/ha4gBV2VFeYrPFsJrYwWcwalRd6xN1A8xTqFxJqn+Pc
Xz/2N3Y91S1nacUqLIB2zFDXlUkKKInjhtIQoIgx0kd1/qO2+MlQGtQLw8by
qLU2aatOW8vTgCuXuPJQXvXV1v213UjjjOjoWYojliKIvfBFV/w3AwSklP6i
TjzfxzpSQFT06RoCXPS1Tj0NXA2Jo7GHO8hKkpYoLPZKjBTkpzh/mbuxs7hc
/ArwCwJCgN1U5SbhPgOTqGgk9vEu8vY+3iWP9fDwkToxoUlO6jNz5uyCMTNl
zs7BcEBAzoYsWT242KbCJHxtfB1HZdleXmOAtMGwH2t7DbRpF1ctJQot4vmW
8pytAgpdsovLXEBQuOYP9Q0AkrOx4mwuORqLthq46JWOgExcOMGy1CpQao2p
WR6GpaI+V5VKSW0Cxa+wlQAYLDhAhaz3mRGKqGQp04QjlbYWJzXMGBnKVOoD
zsRldDdfM91Uy/F0xRkJAkaCioP+cTaOWdkkVSVhYxIjtVjSv03BW2/95s+h
pI4UgjXMHK5b6EMSViII/UCOUmUfe4Hrk6+MRG47rhtPRL4yUnGC545xH3Ul
dl4Y05am9ZVZdWlWWZyG3AM8ipMqgaXb0hOvObXshDwzDVFjF1dhE+e1hTkY
XH0etLNG1pACWRfe2jVlBhsyf/UWbg4YKViHXHnFE2dxz5xfBSNp07Mwo5Qo
LyxpcxP4VFA+0G9wHuGBAoogYCQIxZTwhvVzD/ME6V4UVrBUjPkpU2EaR216
RB7/cBf+6Sr4x6tHSuaq4726+IgxPmmKzzozq77iIXRLoskZ6SLY3AcgubA9
K6CXfnW6W5XqBiOZhXG242bJy6jMMT5f8dR3Ax1yYeBSBZqHj40jMBLP2sN8
g0WdZQm+tbt2DrsD39wq7EC4aw8iMhfm9ECv/JitOOuqrLnKq3YwUnbGmp+0
5Ma1yV5Dtk+f6dWn+7XJfmWqW5XuwVGeIFGkPylSfbSDEh/kqY8kWcDSR3mm
1yhOQ0dh69nq6w7mh1ob6+basqGyoC8v6quESerypDI/osgN87g3dihzMxfI
sxAWNFkwEtyZOVVukYJIpW1Tecci7rG0jgQ/GoQtXlxkLK1z2+GpX2ARhjvq
x9Y9X42UsqkeUm5OWFcTIy0ZhA16n9IW0JfVGi2BGLEwuACQuDIHHWHZ6HIL
LNdGoSQr6IhhEq4e5d1Keyy/efxal1K7CDZug83LEBiJVOUxKAj6kwv5BfUD
d0PCxVOXPDYOgo1jXlQQ69wm2tIko6Pss/qb5J915WdT9Yu1/idn7ctD9bOz
9GyvfHZUv9iFZ2O6fh8snXmLe+7itleQgI4einuu0qGzuO/I7TvzB57CyUNq
z5HatSf2bPFdc2wTdKQPL2rC87ePk7LI7E14+sw/duwfPg4MnYYHL2IjV4mR
y/jwRXzsMjF+nZq8yUwCkK6SBEhnie6jyNvj8Nsr3G7cMqxqYRFcZKFCR148
sIK7QCVhT1AR52AkqqamRNsJpczImh/4WmeUKGnehlvy+JM2/WLKfrHlP9vS
HXP22Zrq6KMtRbglA4SA7Sna3Dh6qFNGHjikK28axG1LbRtsZmQlNziCkXDf
H74WZ3JGAiDBkvrq157qJZAGYMNXAo9ds4DhgaMksRV3HcWdB0ECRoo0LsFI
8YaUxZGUjJHu8eOrtGRwi2iPN2/xtvh4LDl7/C1F66a3PYBAIUObgZGgK6CQ
saIo4M+0KyclXnfEnNzdr1k2Bkg8jsReay6uYXECjUgZCgtMg01C/+ARa2XT
Lu7impBaZuXf9MLqCfY1VCgZHVazDUNvgHdWohJZMBIuPpYoWJFVess4ZuBy
PTJjyhjpEMJzbVTC3d6jzBor+rU3qLwBaAQBI1lqyxRjKS5bSksUcC4t8cIq
qpIt73grh7iY0cZdrCmD8/hYu4N2dYsXtsoe1C9l0lnVLjY4XoIN5a7sQ1kF
m+fAJBgyMBJV61U3XbUNd33b15Q8tk9glXj9FWxN9EUJwHv1uynddu7Hh28e
AKX8nSM3PnN93VxdYJpnHkdNaVhZGAAgqYQ+eb7rLvfuKvXzZfKHPzMSq3Ux
iYuspmVKVxgDJn0zuI76MqXYxBnK/dU3SGpbX4vJWT25uOmrHUQ6V1QN1Tx/
ZSQKJh/5qnsuuJyAgdKitQJrO0NV3JVJQ2lELwzoS584I+mK/cbyMI+KOGoL
JOIivj4oy9/YC0HqR/CeAEjZl/vM813mWZ5ljFT6N6PwJzCSjqJJz8pY5z7a
voMmYeXrVJeFO+ttH7vaB86mxFJdByaZxHmQM+wpq+eh8mZW5LPAVPRrsoaa
aKhYlNxJLDxW9DKlzo6oUoPKVJ86M6BODTJAGtMkp7WpGUN23ppfgtgKy/bi
Cvu+LA0B4BEXYKFISouMfFZZLniTBUVpodKP1TWsIk7OrNZrFULZzNo6HcU1
FlHE+QqVytcXnXVconmbOMtk7hsv2aqLnGwBSFgDrjrVrjMHREJV1tVdrCtA
GpYrr31VZIZlyYG7ZL80NSDNDkE4IIGUVIUJCEgJvAHrT/0OtR1Wqk37lPcL
UIEcEyxOYiSmphwN0lQ44S4Mr/3jGsnbvP0LRmLKitpSvI1zygayAieuKgmH
WJ6d22imPEmrUC6D4SWMIy/mYTVj/Tybw06G1cUxdXFcmR+9z4P9RvG9FIUJ
4qXc9FdGGueMBEDSl5epbEmYYT1TC4bCCswfIAFq0y2S5qTIeeMuUJfSsXrj
x4Piuady7BR2iZGy85r0lDY3g9dSwCE3qsmOG/OL+PAsCHbiFc981XPQUah+
95WRLj3igaO4QWW9hRVDdlaXGTfkJnWZUWWiXxb65S743eXj7859v7sL/KwM
d+uiQ4bYlCUx58qt+4r7fuEoXL2kdFv12IMbWpyyFgZNQr8+/0md/ghMMhQG
rOVJW3mWSuBKc7y3Aj4XZyRKQzdhKQ48dRjuIyhw2AKW5jhirTRH3IHF1WZh
k31ywajd5gCr2lKYMOWGrPkJpzDvFJbt2XlLFn7BuCE1qI591CW79YkuQ6LH
kOhVp3tAa4rER0W8G8JJSRbrBiPdJ6nrTZH5IE1RObe5Bt9k3lpfsjc2eKAe
OtYgUgGeobKkF1e1lUUVtZCMyGl9DrOY4RwF8IusqK9CVUaq7KwiA5kHDgGK
jKVNEI65ss1q2PDjtr64CgEmcUaCsaDQQVOBNQl0f+2NEg/wTG1xTS1QBAmA
ZK/s48nwygFCPFIE7MHyYIxElSSGHFUrUbYXTyhQ6T4e/IpJu1Zhlz8fphYr
gRWi3HiqV/jTxEtNYACF3NnG3H4Qd9w8IUKtEMckdJuOWIvKabR9A7UWf5IB
kFJPBEi5Zx0k86KC3ss8qfLPmtKLrvzZKHwxFj8b8k+m4oul9GLKt1Wx2nWg
fOQt7bpKG+6SxEmAtP9QObIXD+15wiSS1LY9uWVNbpqTm8bEqi66qAhOSX0j
F56Bm8D4eWD00Dt46B84eOw7CPQchXpPwt3H4U8nkcGT2Mh5cvwmA1IaPo/1
nid7TmLvDwI/HgS/P4+9uwEYZ4aUOeqAgONpqiwbSsvm0grcnIf6vq9D7R4k
DADY8YArK3LEoGRaNwChBGOk3GdzBrzXMqbb+kRLHW3dB5vXAA8iGYBl89jZ
PLIAiRkjactroGKgkU5Y1RZXqEuxsmktb+MW8+LMR0qHcUsq5zEfarJoSaGp
wM/fAtdUGl3csRa27YVNV1niE48eq2eR+jUwieXXFOAilnq7jVRvIvXbcBMW
8DrAKrS/MRIPhnNM4n1nVBQEVsGblzetpVUWwNn/i4prnm6DxmOMxBpkmqCU
M3IhqWhnFxREOFGglgQYKXVhGuqap+yhG3GFqeutylKQouQv4kjfarYBV6bS
vKkEpwNGas3FGAkX5xsjUcYKjvDT5SsjMeF9bRBXR8IZCYDEGi4ofERlIfUV
asGAg19+jaiwyNUaTwLiw1PGWTyios3GLYsgXUHfwkGzVXaoaAHOb37cWJzE
p7KX1kkLVY8JLVoXASprp765B5FID2aRcm1U4XNEC6ZzG36hFGH8ixqC+8sL
wzgjeRv75Oa3KMUGQDKJs1A+5vqcsTqjLY9wRlIIfdL8R8ZIP4KRFNkBMBJD
BeIEVoY0pSmMa/IDmtwQLz0yl+fs9QVmgqd5QIMM99c4Ehe3uO6vH8ZfpLFn
Gb5IsHX2WupQPfaJh57ynqu8DT8Udp90WnkOpGQqjRuEAV2hW5vv0uZ7DMVB
c3kCZv2huelqbALDAEje2o6/vg8VEWmeRBrniRbQSJb7LMt+vks/3QKToBaK
v+oh+c/a3Bct1EWifQ+STzzfJ1/kwKRg5/IrIx05WhJKtxEjLbIusEljZQ6g
i0cYO607Wzvup30KN9W2bY1de3PPWt2Gy6MXlswAyNK8jjUdU5kHnNn0iCY1
qklOApB0qTljdpG39/IGFhfLRFDdEetlAyYRH/JSbXEJAANhubAN3rpIS6iy
gp1CSUwAEuUx2a+qfA2su8QVCNXJ15a+MZIdUCRSKQg7zuDEXp3HEwilauu4
jGAkDrGMbYiRYCgBb7gL2BT64gRw4j49IE3132cGgRPSzMhdevg+A4d9TJkf
J0aiFBXgYQGM5KzvcgcH/t3XhsqLx845XeHmCdaeq3Hw2pFKBb27eMTToipB
WB9PneyCv33vb1NJNgck3jRBdSC1U2Ya6H24nnzVTl97Xr4xEh6E887izxtw
MQhcC6M8iSPP9cmTvbJ4jzLdry4Mg5dkmT4uYCR8O3l+knW3Tcszk/LUhDIz
pczOsUQAdXZgtZvL1FiK93dWjrg5g5YLtZjSq782pICRPCWqTIBTST2q+VVd
Zg6MpMvPGotLwCRVZkiVHgUswUrCMrrEY6+IvXAGQIo0ZRBe3gC3CIyEBWPO
L+vS01hL+tSINjEkD3fdPv54G/jDmfefz1z/fO374T7QpQ7168MT5visO7f+
WDr0FQ8fy2ePlRPsLEdxwZAZ0GW6dPkufaEbmKTP9xmLg5bShLU0Q9HL8hK2
EoRn7eFDkRvY3PfUJaRnKL9PdTWs6vWI5WSPuC9PvypLoNtZpPqCYl/VbXtp
2pIfNGUHbdkJe3bWkpoxpsb1ySF1rFsRfKOO/KIOvdVGPugi3br0J02yWx3v
gSgTPYRJsa776EdZ4j0Y6S7+Rp5+f5d8L8/0WupznJGo2b+2aa5uGMVlfWWW
9Sks6iqrmtISGElRHKNVistbmKD6UsZI2FBmypPOqfJzKtaCpy8SHekKa9o8
9eoCkBgjbeoKKyx3tsoKG+CHHoFVfLU7T+PGXb3iTZS2sgSvhUlVFZcpGAUW
qhwCk/ASA4WJqMnCXNgC9nBGMhVWtdk5TXZak53kjEROPcMkzki20h4HKthx
N1EZeegUmWzIvtq7E1rt1R0eKwAU0S5onQEe/E+nlD5on1B8njFS/OkOmg2A
lH5WgY7yL8YctajfM3CSpzuKHJGSOveiIXk2gJQKL/p0Sx6tXgQqhz5Ae3kD
C89TOWRhwxNn6RiY5Cgc2LMSW2LTktgwQZJr+sSyKjwDQLpy9R4/fDrzDR57
+yWe3n1/r8Tfs+v9sOd7L3n8ZT/wXhLsOQwPnCVGr9NjV8mBs2g3AOko8kby
+EfISfinq9jHu2QfyBb7jhW+LgBowUhQEWAkgA3WGzO+1GzL1RQxEmHSIUwe
rHOkDUZSZ571AKRkW5d9Miab6iQl4OTYmCyNRfEW7p2BkfRgpMo6KFedX9AW
aToBRCcsm8obltIWbjErzrzCXYBGYukkOQ9lc7Zx1S55EJXcsfKmubABsRSp
8sdd2SPLXj4OVVkoqSZN1OWgIw5IYfEajwfrVwyQKEHvrV39R0Y6/lab9Moq
PCpeJgf5qydIYMZhiceLcDVYoo3ScBRbY14kXg41C/VoLK9S4RxVyE/DDZTn
xzVFaqzAdaaoXXXXIu5xYW9yiBfymm1WjES5NtwLKsygTqIlPAinCURBNaLP
VPzAjt8YiYJIbIkecYb3PR3x4ANjpA2Irb7Ow0dUFgJTVV1iyabtVxtHMYEt
/gV5jgCKET6jT4Q3ShMPnNVT7DVWBzJtLE5wRnKUN/DMx9pxuHURbl+G2q+0
A/uIzwxzBq8fvARw8jVOQb+8ESP+WQuJfVYB81hDN8zQPjwRLDx7dRPGl0JD
lSnQEcQgTusqVIakKQ1yRrrNvgUgXST/CAWFS8oKJuegdnTCrDqPKzwmT3XB
0JgrMI4zAAMzTS+ZpBQYL9WurZN8nUvgrG/bi0seURJ9kkY6d4EGlYP665R5
D9XOgUme8v5DaQfflDrgqmsw9JQFEMbh7epyPdDtulyvsTBMnq+48dDYcTPx
NQG0e4+Ng3DnLNm5SrRuUh1Z9uUegJR6ukw0L+L1q2xHVXjREiC9aHDMflZD
gUBdJJ4VUB34PI+URQUjnTJGOgD/UFlvdYmFj2YASyx2tM2rlR7ae56nI2d7
H8986NC0Bwo9sZYuR22TtfDQxAYjv31Yh5kpfWZGn5kzZBZMuSXYO2Kk/Jq9
sE7dKDUshjWgkbk0C77iZUKM2Oep0KhGE2Co6J0wZptjNkcj3m4AoaJ3hklA
UMo5Vpa/MdJD4z9gEqUmiZFmbOIcZyRApru59e8ZiWZiVKjJ1FJcxEeiO1sY
Z4zUd5f6JEsPyHJDAKSb5CCOvMWbBclnIfA1eBwJCo3acl+bBc7BSH7Kmx+R
fmscPDT28Bx4N8xP3AAmUa8KBXjPWCibGMnXuqNoUovLtbdxSb2uXwPI2Dts
B0koRVjZxrtxRuKukK2yB/NEFTIsQG3IwzzR/Arqmk92yzKfpLHuu2gXSEmd
HaTvlejC49J0z11mAIxEGbccVSXB7VJlpyGawiLoCIxkrKzB2lL8uQzzR4kY
XpOAj4ctDI812lJE6/fxpgJej7t8xAEJatOUW9GmZ9WpSRrXk59lDVBU2MxA
egKqz1HecpQkrgqF2VnogA3VEU/gyLuEPYgzv2hKTOniY7rEkIaa197dPX5/
6f7nU9vfHVv+7tz+2xvXT8pAry4ypo9O2tKLD/lNZ27Dnl9xFJfswoylMKLJ
dMkTb5SZX+Br6HODlsKErThrF+ac5QU8AY7GY1Pig59V3yFp7fnbu+46PC8Y
iz1q0a3tUr0lle1R4SU3UtQgwwAJH5iqqjp3odrJo7jjxlXKj5hSvYZEjzk5
aEuPG1IjyvAnReCDKvhWGfhFGXijDL5Vhd5pIh80kR5ddEAfG8T3Ukbe3wff
SINv7mPv72Pv5JG3iug7ZbKL0oKlKQut4VVsRjih4CKtME90VCIHGdYNHItz
mnGUnVBkRlW5cbhyetYXjD2FFxpKy3RP2YwCTX4Bfg3vxSMiwv5ljKRnIyMA
TjphXS9s8U5wSkOUDx8IEfdoVgz19i7jmaApa3mXC55J4JSnSQhUpCSs64RV
+mwCNTsoslOUsU1NYQEY8iRUTJ6dN+fXKUFTOrCWty0lXOQjV/3U3bjwta9Z
7Q3vQId2OoIFec2nVE9o1bWlgSdZ4Pnu8en2sX0F4TNqYB2iT7fQabEneeqL
BpL8rE5+Vn2b98IhKvVEEJV6osgStCKF1lsg/FM/bLQoIT3MeZiY7QgMbxf2
LPltY2bDmFrWJhd1qSVNal4WnbwJDl8EBo89PRLPh31Pt8RLsuvt2nb/suH5
YcPzPU52vG92A78cRLpOE0On8ZHjWN9++P1+7M1W4Lt1z+93fH88Cv18Hnt3
m+xi0x564blooTmFua/zQw55ZIPjInWXi8x0VrEy973VQ3jZ4fZ18kWZetEm
25pUR5t9MWU6ukRLGW1Ig/UbP6sXYjGfAxCXrUYCTDKUNzWlVVVxQZ6b5RWG
QAhaVMISr9gnR6B6xnvbudB1pgFZx1zVAGsB0hAgsSG7bspvPhR33SUJbBlP
EgVqDIdql/AdfNVT7gfhPFC/oSa4pvSbAiEsqRLF8QhhoHHx2LzmTZS49fYq
lVZikZCPid1Xpy2J9cDnwLCCTAa0rOkm+HSDD0kkSU/bspRhkpZwPfkkHzoW
qNiAQnbCmkUkVWylITxU10HBzOoBLjiQkvUdHLCqnl2edIPLaS9tsqEluOa3
WGMUZOjcR1pSMGr8mc16YlUQWI1Ad1aVJPF2Dn2dExoI0Nx1t7edjQ0KcbS2
cOKsb+FBfCNqo8bih8+FO17f4eUf+PzMR6MbTaUUlX36PJV9amapbBoKi/rc
tAGuUGGCGAlUUNsNt04j7Yvo03WkcwXTg4sAK2DML7FG+ymK5FTWYYYCnevo
i5KmQ3w2Q6IvhtCTEvcCCwx/lMXN5llSbEpfHtWXx821aXN9XFvqU5e7VKWP
ymKPovRJLvTc5d5dpr47T/zhPtNN7bfCgLrYr8z1q7J96kyfGhYn/p08+UGT
GdbnJ/E59YURvTBsKk/YBaqocbKAhr1GOTibSNhgKyxCDyc61/HmdbROWQC4
24/ibYAqXS/dZViEQ5gVVoq/ySvSrYUZY3ZQn/lELnCuzyiM4ZM/VFc9REcH
FDdrHcP+Yo/gBrFdD+9JnvtVkfksTbSuIvXTcO0k3ryk7NtndfqzBvso8aLC
kwnVXu5iX+7YXDiWRe2cuZ/OnK1jS0NibuwYa9TuBG1sbWyyOvw9W2PXCthr
H+Jprs4pnvnQPsHJQ+sYvokdjl7zyNGgllU+UIg3VemhhCk1Qy0trHMfDuYW
L0WgZVCl0Bl9069hKLo15WkIGxs1h2uI55AQTfHys01e/Y71T3EkccMtbnqr
Gx7GSM7ykrM0+1CeexDnHgBIdYrsmaoT5tqkVRyzVEYtlXFLZRLURDVLDaru
BtqBY/GeEC9lyraA3FTIwebMgJEU2QEAhizVT4MBs8OgCAASb0gBTsAE8DEC
VI8kUss/VruvcRL6yvOPLZYsYP2DDngKFKajCXK8G46XMEF3QRmyZt6Lb4Ej
KjoCKrCcOwsyszwaiw6xLPkan4SA/WKr7JDHBDoqb7O+/jUYMmwNPj1DnR6S
Jz7dx7vuk91AI2n8/V3sHY6A/PvkRxwV6W4IFQlT+/kQaUtgTHZOnZuHxdQX
tkxlPtaA2iho9gI1zx7w4XJ8UAnWcLQjj7WVkaYcAs3MCjmoBYzXTFLveWpS
mRpTZya0OUrIavNjqsywOk0zfCywtoVt2EqgFxVOUGTpEIDkwMsL2w/FbUdu
yZia1ifG9clhsARA4srzu2PHPxxb/p9D0/99bP7Nhf1fZd73qmCfNjxqSc1Y
kvOGxKw+Pm1IThjSo7pUH5DjJvTdfeKNNg9fY9RWnMZSAVGzNbMARyPYPsDR
zRaAu77tbW5TZLK6zeaYUbydmhqoxGuTp1N58wi0FhRmoH1FgARpnvlrEg+8
tvwYGEkf/2SID5qSI6bksDrcrXx8pwlC3mpD79Shd4AlxeMbdbCLsoTxEX28
Tx1+Lw+9vQ/+ch96Lw9/AAqCmjSJT1TpXZigWghxiXugejhrLIJEkyiwkKDW
2A2Ca8zHf2kKkzQQjBhphnkfS6wHbZ5HDABLbGgkZd9ASia4peUNxkhL6twc
r1lS5ymVBv6hdVXYpgbqErWRYi/jVVgbYCSzsAkxCFtUy1RcpzBUkfpAVcVl
VXFRXZhnAUnK2NJUhOwM7v5XmcKSoIGiwo5N2CfQKu091E7ASNTm+bX8hoKr
VHCyzxIfuCMHBEIv8sgXVehF8diRUr98++bPQjNerpiPTz1HPElEbv7TDUV0
m+dUh988pzKDjhSmLf2syryo4S1GwEgNCuz7apSh+JbT4YUxAHgwkilLtK9L
LWiT8+rkzF149NLff+rrPXJ377nff8OkPc8HoNGm68c113c4brq+3/b8uBd8
fxTtP4kPHkV7wUjbgR83vH+ESAI/nUbfX8a7bpM9NBQr1aPMDaoLo9A81soa
YwCqyeHTkHgKiTeVwFLj6KPuy5Ng8zreUSSfCZAgFE3qaOCqROp3AZ6zZgGZ
b/VI0NWvJUnCqlpYoikEWBg5amsl50hY1LNCHZ54Yj1fV9/k/5eRLMVtABKO
cGcYIB1wRnqsnj1WL/wiAZKncsxncRAj0cSPu3DrtfD7qxqhAmzSga0z1mN1
9Y2RnLxfmGZDHZAzW997LfGt7UPZeuuvHXBU2di6DD5fPXbOKR0JVdwEJlE8
BN4uAImLMjuGK0xdJ8KyubLJtSXrDKLYKauQfJ0axITohceTWePVvr9+HGwC
xaWpz6ocOPwzBevAS3Gq36aAw+sVo5rnfW9LQmElFlDytCXsi2x52nvejoTN
29kBO/mejvgsRw8rscNnZgN5JBTHbu7jhL5vVcLqo7Z4P465tKovzDHwGIfA
nada3Np2sHEc7lxEnsg397LWPGtpldpai6MGYYIKzsWVb4wUe9El/mSExL5o
abIHseUJ/jSuGLXvVaaN5VHesWWojBmroxqhV154c59/I8v9Ajq6zb69Tr+5
SP7xLP77u+R7WbZLWexVFNi8IFiW+Ad5/MNtlKayyGIfNdl+fYHGPGoL/YbS
iKkI1xgmnmqTLF9HAdD8n9w89GesdRlr3ERqV6HqZah6E6rLfZULiKd8/iAc
2XK7luyGNbduza3aCsum7CQNXUz3QLTZXlwNS2UejORt7nI6emyfwARHOnfx
ZyXPuYORsp+V6RdZvH0VaZxHGmc4xts3FDt6Bh0pY0+KCGv3Cz1dhZ+voTpo
HFDzhIZvtE9oUEZbYmnugpHMtXVLnYofHC2Jo3VAFd11CYjI+3zufbrwYB12
TvESN8MkJxycNnuHxr69vmtvUHwDy89QoHlWxuIybisNWC7zQgVWI00DKHDT
+SzTNVt1GbeGrhWIF14zFWVRATxwiIYn1AmTCJDqNEiB4oGVdSCTq7LhrqwB
kDziqruy4igtOoQZhzDtKM84K9O2Co3lNFXGTJURABIwyValWndbbR7s6mys
ESPVaXYEf1sfmxmFv4LPYxQWqB6JTPnQfbqPM9J9ZkiWG5ZlR+9zE6r8DG//
pwJ+YZbaLipbVEjZOKHZra0LCKllICgN8TikSVy1TTsBJBvbyOYGQBPC+MJr
g1rmgWKmMV5HfzClQZF2bF5eYgRjzYNpbCrCKm1tcoLoHSylLRgsXHNenWgu
UruEDp+TlYfJUz2yRNdd7MNN5Jfr8BscQUrfYIlJjyLVR9xCIwRp6A3NvSms
UPeTuMMLzwC62KGssv2EOl9Y0y5lmmrXkTbFkVjRtdRfvXoQDmzFXSpRoIqU
FVaPNCFPDCkAOdlxMJI6y8YTJQbwuI7CjCvm3KattEcRe7yKN/5nViG0F8BI
yVkeR1JFeu4CP527/+uh/T/vW/5m1/DXe4a/PbL81yvXT1L/B3mwRxcfgWii
Q6rooDo2oEn0KeLdUnzrwPd3kbfa3IBZmMQ6cWHZVLc8VTD2urexH4C7x4aG
uVgZobuxw+rcVmyVldcRpmz2iElYgV7lMQ2sYdwaFiq8BiBFiJHOscdd5WVL
blyf6tNGP+mi/frYoDHerw12ax/fax/f6oJv9aF3usA7pf+N1P2T8rHLEB01
xcf1kQFVqEsR+KAMfpQHuzXhXnXoE4765JAxM0aTxPIsZE3ttNMaYQqiFWZZ
Q+UqHBNbbYcPU6Wq1OIMrzLV5afhQbPYLBthVABBLVKDPysgVGWnlRm617yF
yiBs4LV4RJaavE9PKTJY/MsmYY3GGoCXsgs0RoBqDmcU6UlFega/1RdXWcJu
FUJtcWAkgc0jBSAJi4rCzH16TJqENzHGMGlCnh6RJYekiUFFclSTmTUQZW1b
BAIkW5lmR0OcVWpkeKgdwRBTZKlxRIlpZh3oardvol+UsT/pQi+qwJMi+Exl
FcEnsrZUtgeXpP1a2kft6qwwFcLmb5DVAGCwIMB1uE3OKVeJ0c49rB5ZxiZZ
Qwomszjta1aLuly3LYUNU27NlF/UpWfVyWlFbOI6MHjq6znxdh+6PhAgeT/i
uOt+T+J5u+X+ac3xHWTF9vs15x92vG+OQr3ApMNo93743abvOwDStve7w+Cb
i9hHAqTkJ6Zkemimem4Et88CR5v1kmC7scnSDJMap9TqVdkHI0F81WN/DdRH
Udx4R5V40nJMSnYIkGiYRv2S9T6c8lI63tcGlxb+LHW3UTvbBo2cLaxgYajZ
1CY1EzYga4NmmLSO+AhcNr3knHed4I6QsCogii6WCKFxdJUlXlxhCJtLBjRy
l48gngq5PA+CBJjEOhYvgw3qZmV37TWUxDUeC5ed0ujCJpvy3TimJFRjmxrE
WJUCDxCxGMsBdWA16clfhbrXYdRCT5fQtzRPkkYlb8GzwMaBJtcUxnXCJI6w
+zzXBjqC+4ANYi0vQ5fiwmKRvJI2E67DAc/8ewXqJ8HGWahxGW/JYG0Lf9JD
0p81iSclGCnyLMNLmEK4/MZI1H7YPmNhJRq+6mru+p4O/M+HfMKk/+k08HIJ
W0zNU00axcNfxec9Mtnj3EIqqLTEqk0W+UQXFkQiRgJd4EFYBBB+qH0KxxxX
hiaTixt43CBMqvIDqvwQ/H0TzZPcxR7Brom8aKOfVZEXJZvvdI3LjqvqYNU+
pvK0QRjTFQfUuV5lrl9XGtFXhtRCtyz/r9Lc93eZH27TP92m3lynf7pKfw9M
uor/fJd+J8t+wPE68eYq+tN15Meb8I8XgX859f3zuf/30vgPyszPivRPisw7
de6TNvtJz4qr8c660pi+PMnn81jzS96KJFy/AB2FCZCIkYK1e3fxzFu6gDwU
jinlndmx5jYt2TVLblGXHNfE+rWJbm2qR53q1eVGQRFQ3VQy0Tqmvps23Q7g
a+yzKv1FnXxR8iqjxLM02r6h1CRuMTCpdR1/koF14exHaLrOLbQ61bfTPASq
imQDQo8oEETD0vdtjV0zG96LE6KjJv2KD1QHDoGOfM+XEJw8NImLcIS422cQ
4qUmpV+xnuGMGIs0M5DGyfJwR4XqN3j88Gu8lHwECrDUV6myi4YaTRmFMWMR
jvMUZc0qm06WlePCRl9KsADs5TUAkge/Kq96yyu+yupDacFemHXkJyH24oS9
NGkpjZmEIUNx0CgMmUrD4CV7bcbOetxYiG8VmARhlV0USsI7U8VaDR9sk/e1
6fKTZM2zA/LMoDzzykjKPHW0aVnXPwck2A5yQ0iNH/Dp7rx2DvI6cIm+7xYA
yU7/PIImXlJ3dmGOz+VmYxi3WK0Fn/hxxKegMC9SwnIcm9gXX3f0EtwBbrIt
xEsU5cDF5B3W1NzKWpkgsKrqzBibjkiMJI1/vIm8uw7+fBX46Sb0BsBwF3kv
jX6gDkSqFv5EExSz48xDWYTAhME+0qDL6i4f1KmnapN1PieBhtySHJHdEc9I
6bFya7iu+JHGU1PKb8uUX9dl5rWZaW1uQpkekib7Xq9kekAW77mL9tzH+pSJ
UTjm+uwSnk+1DcU1c37VkFmgGrb0vCW3ZM0uGRIzmuiYKtovD3+4efwOjHTy
8PcSy9/sGP96x/B/7Vv+4dz1r1eeH2/9b+Xhrm8ii5BIw+9v8K0ff7gNf8Am
MhWmHcIyAMnLI4eVTXcNG+rQ26CROzyT64LfClRmNXJmYZ7lf5lqYrODcNn5
KBJodQKkpxvY3FDr5rF+6q3uOXGnsuPaeJ86+kkd7dPGB/XhT4ZQlyH4Xvf4
Vuv/BUed/73G/+7e87Mm8Mkcm7TEp3ThQaW/W+HrUj32aIKD+siILjwMMSUm
zJlpI+Wsp9ggzRFlblgFR7g4TlVw5SX2v0gkvGecUBbAA/x+Hfgwbaks0r8v
KS/QkFUa8zVPgyIBSLlJRWYUPrWmMP06+a20ri/NgX++lutPafLzlMjL0QAB
ZWoMiAuEptRtZpzVqs0QdLEx4+rsoqZAIyW1wldTW5pXFmfv0qPSFNWQK3Ij
OEpT/dexnpt4731qFC9nmb51g7BlESSckQBIDvHIybrUgf0Una5J7CBAEf6R
hP1jlNvYF3XksyH0rAs9ayKfdeQFs+Zr6r/uXPg7V97Wlbd5EwAdQfk/31FK
7vkMjjwv5qFUDhUKUoso1CYvWOUpEhohTlNxNnke55sTRxNygIu5JR2uSXpC
lRy7iwxc+LvBSBAw0pH3w4GPSGnn4e2u6xcw0o77lw3Hj2u2Pyxb/mXF+tst
9w8Hga7jcN9xpPso8n778Ycd3/d7vh+Og79QMVKiB4Ckygyosp80ebjbo8bi
NP9fDA+86Khx9bX565Sl//YhbN9RWAaMFGpK4aHE2koipZYSFhzb0Fc5o3bR
5gUfdf76zzLqhx5WzeWoH1lEGrFuLG3yRkXcQVVxAXcN3h8Nz68sU4y9wZLL
fHZli8Y34e481PchfAwjTzp/qzHmY1c5I+EINAIXucRDR2kPjg/PTVPFEStl
pP8mwOD21TFkiTYQBbiCO4w4YdNUtj1tCrYTI70CkoQV6p9CwbIG7VuWS70i
ebkOv1xgO1MlYW0L5tIuwmecBSqYK9Om6oyhMsWGuNLkZ94ABX+cMwauKqUA
nq4oyfIsY4UxN6HWVbjJxqzVL6LNqxiMaesu1ZbnXjSFX43Cv5lxfE3QvNyz
f97BGKkNL3If8nVK3hmvU8Lx8ek48HxC8nQWfKbAF0voXNM4IMZIsO8844Yj
FdU0t+CsUTmKQENy8GmZ10M/wlAaiqM8yAw15a7sPDZoshAUGnU8VZbwBfXF
UXm2R57pVWSHYM6AvrQFOjReJvwi5wMw/S1Q5TEvwcLC44CkyfcSzxT6deUh
XblfVfxwn/+dNPeH28wfb1Lf36R+JFJK/3Cd/O4q8f1V6kfIefy70/DvTwK/
PXv87UXgd8eefzh4+LsD19+e+v/zVeTvr6O/uYn9QZr4WZ78RZn9qCr0aoQB
TXGEJZepG8hZXPOU9/zl48fyGQOky8fypa947c6dQVzZU2fm8CF76ModOPI7
1swGHGdtbFQV6VPHWFVnql+bHYVviG+BRUKzd1itC4WDnqTY6anPqgRLorGb
ewtfCc4RZ2Ac4eSCjqANvk2L4kWA7B/WUByJx2DtjUN7c483hJph0+sSRkf0
L35YgIjiSAAhTweMdA1GcuLCto4dTZKH9rmzdcLG2h9SXVP9gArhWHCDckCi
hFRf9ZD+6VKNhjDwiprXsVqNbbAKGImGPZYmcVthy4zFSXt1kQWaNr7VILFl
w2dkbZCZE7c8pVW3sOQpLbuEeVt2yp4fg9gK47biqLWINxk0FGjepqE4bC6P
WcUp3t32lZE2nI2VhzqN+nwQgUl73JHkKS1wOwwN3DreDsb/T4SCMRK8eKAR
c9hngPRYtI7yFlxOFvulIC3MJe9e5GPQSJOIFPWFmMRFXtjG5yfQvA4WZ2OO
j+TfoxGf+8HGeqzSGFUmFCMqcbKi//fE535gVRDU5anXm03bmGP/f2RaA0ZK
DsrjfbJYtzTadRt+dxP4BQJsoNpghhA0oiH+SRHr12XGqcq3sGTILYNYTGw8
i7UqsYh8YMuyNkv4xHxGKrUFCEH1wZ+Fqwj3MFC79IuXACRn+ZBPDcL7AJCU
KfovFZrcKP0nsmQfBEbhNt59FXl3FfrlJvxBGutVxMc0KRpyaMzTt9BlZ1ip
/5Qxt2ApLsNfMKSmNfFRzkjX/j+euP/pyPX3O5a/3jL+zabh/5RYf3Pq/sO5
97sL74/Xj2+uAz/dhd7JIh8YIH28Cb29CrwBGd7HBnS5CWNuzl5ccYtbXvb/
LJzCJv3/uBoBErU0ltZ5mwlF6sozTDVRuopCKMIChM3bp2GYMNzYOARIzwCk
q0DjAgsbaspWWNSnRtTxfmW0F4ykjvaDkYzhbmOwizOSIfDREOjWB7uVjx/0
oUFrfNYanzOEx1S+Pog2MGwITZoi08bwlD44bopNm9Iz+Pq69DQ1jWaGaF5r
YQiMBEo3i2tshC+VmrB86w78ESqML8ywBucp+m8+Ffrw/L/wKHNUk6/OT7GQ
zoA8PaTOj7F1SKEkrGce+ZGlRl9zZDgmR1XpUVm87zr0kd2sbmmiX5oYlCaG
5ekx+pc0LI+mys+Bvnj1kQwcVZiS5yelmRG4Fdgyivzgfbb/Ntl1He+6TfTK
0sOUqmahKmqO+zqpCUCOEyw5qBr+X34ody9SlhNmGpocKh1Q9P9x9R7MjSdb
duen0caGtCtpYlYzbzT2qfu17y5vWPTee++9A0lYEgThAcKD8N57T19V/Wbm
0+y5max6I0XcQIAgSIJ/k/nLm/eeE37UBe81oQd95KMx9FHnuz/33MoARVyp
1dmg8NyJWcGSkDwjHg5JZai2hUfPrYCplolpaQncejhnuk/HrBUCjLRK0sck
wbqI4FMGxgEmaDyB44AAKwp9rfuuDwJv65GvbdfxAYyE2HG+37K/3XC83XS+
Ayktm18tmn+bM/5IjGR7tu35sO8nRtoLNW16X255Xu74Xh/gfoy2yOLtACR1
pled6dZk+1hmYIw18z65jz0JLTIdIY5JrFaK+u7BSAGmMIYVSqAupSBpshNv
lXa4cE1y4wCuy311c+C83mdJoWN77cBCHe5btJda3mKaVwvKwizgFieRUpQl
KmMDJn3Z59rFz1JnXHWbkIlVkn/tMnvaE2TCj6wJdJuX0JBQBiM6LudIYwWX
wGIKDwAk3rfLLdJYq9qO65p0qgG0IAoy8mAeYdRmVd2kPMwXRgIMgJEC10eR
exFPCzDRP2H44RjhvyGxCLb1QNngyxKVcFBHVRVr8CF1sVtd6NMV+/WlAUO5
H/MCE5OZw8odv5PpBxIjITBv4vCGbiTUCd4QI6IMkEhK4kGT/2Qq/qu18GdT
8qMm/nABRuJN615chywniWkOU23wQQQW4vqNjIsEPPwPJ34iOkn0syz8Uey/
FzDRAGIkLvxlweevr9oai1jU64sjQBddYRBPCJBoXBpmNdtDLJ9AI5WtuIRB
jHYGa5REwo2vzQ8BCGWpZhLzj7XIk72YPqy19Su2IcgOvsR9LQSgfimPp0IO
Tb4XdHSeek+KQ9kObaFbVWw7z76Vpv8kSf4gjv8kinFMenYS/fU48vNx5BeQ
Eu27BX/c8Xyz7frjnut/Hbi+AR1t2f5u0/Y/Nu3/bdv5X/c9/0Pg/5eT4E+S
yHNZ7PVZqoW7LFFhQGZcm56yZxeceZL/deX3feUjb0lwlTlwJA9siR1rfNsc
3SQR19imNbFmii8ZInPq4JAq0H/h77zwYzXapkz0qNMDVIGZm/1iW7PP8ki0
JgrcnX49oWzzXcj3c9kVu4tpmslo0NKJSevsc1BnHVjE7YAlzkjUk05JpBXe
EcyzsqzQiPyDeB6J54sASDyPZKHsEzESAOkrI5kbWzTi0fS6was6cTOy+s8D
WmXQDvIeLZHq27yfjrRka4uUFC2MMEYapIRzboh6/Hk1CKvQpvbA+iZr6drC
dEZ5gCdGmvvKSKZ0v5FHts+Q6dVkOtXpdnJsyfZocV8UBrGawMVjrs4xQFri
qSTOSHzHmfEMXaKXReodwCe5SHfKUx2Is2SnItNzkWVCQ1TvQYwEIMEyhDUm
b/AtchLBq5KuDu44Vv7H16dLvOYKgMSFvjkjkcxUboZ64iorfOv5PwDSEq1h
QVC52f8dkGiLjVUbMiWxLG0G0b5zehwjOZdWxqiOJ1j2nsd6wT9n4XYODFLv
e8RZoBkzuDzYdk4Q3qWK9mjiQ4YUwYMxu6BLzWtTJLhBKSxW5gQkAHRdJAeU
qVFgErWxZFYM6WVzlpwjbIUNrBadpR1eqo1vabNzeBuwR5GgMqTzBOGlLE62
aKJIG9bOACSB/+WB9/mR9xUmX2mo8zzafx4bVae5KHS/PNpzER3QJMeANPhg
+tSoNjGojvWehZuP3c92bd/uWP95zfB3q/r/uaL7+23zdwAkYiTXs2P382PP
C3ARNdGHWySBFpH/vdD3Do/4E8oENRGYsrM2al9ac5Y3LbkVbn5hB8kXFi9z
+MdJwtRA28QjGkYaDDlILpVrM9Kpz0/hFOA+wihHqXLaZdvH2Qcq6zOT+JyK
cMd5qJUfZG24Qxfq0Pqb1d4mXaDNGO40hrr14R51sEMfGbyMTZpiM/rwGIgI
ATQyhqYRhuCU1j+qDY5oo8RIytggcFce7+IaDopsPykglRd56xPlgSs7WIlQ
/TOIOjuuZS5OuKGwglYxdSx5sh9wggAa4UQAU6WxNpwX0uVmapDnqSEAkiRK
5Xb0JNYtDneKA+3icLsw1CLwvd73PMMpOw68lYRaJaG2k1CLONpBv5MxFaCI
6bGT+uhpegDBNCXIsECWbBNF34ti74SRd+TYC3aKDcoTo7xEnAlKg4XWDGSH
QUqG5NJboSIrbkWHschR33eThxTpfocetKCj+O/mxJ8tkc8GMJIbQ/2t6C95
JCDrvcT3AEwSee9Pru4PqF2C+uixeD/iVrC0Z/dRBUZiAoDU2+tsbLHi8CW+
luGiLsYSa9/I4bIfZr6BgMNOgbd576oJgHTi79pzNoOO9tzv9z1NeESAl7bs
79fMb1etL1asvy1bfl23v9rxtB4Gew5DHQfB5l3/m73A28PgewDSaaLjItUN
QCI6yvTpsl+6uUtLXNPjqnHAhDXEXm7V8QWTmFDnFsZ2LIf91yJ8F4sUViZ9
xCuvsEyj5iC2D4UFNWv4OmRL40NuVstda6/qAlt1H7xES6HyIlNun+RN3MbK
Iom6V9f4YvlLNQVXLMGvOuQVRF+DAxLrB6Q6Ll40Zf+SaMJyj8s6sUlH8GTI
SyFkZU47TO2KiogcN6t2UqVet9ZWTJVZLGZZ9c4GJbUowUI5f29jx9/YD1wL
Eg+S5CdF/PE0+iCOPogi98eh+8PA7T4gilVoLNmqs5YqeG/UXB0z1UZIeLDc
rUeUenWlLl2BvFDBGxjt3bUt3/V+4PaI78YGr8VMJEeKx8i1JHIj4oxEIhIP
mtyDvvS7vfbvrvK/23OfjcmPKqAaMRLTP/QA6Wtbbpy7O1HwQeK/O/bcUHMi
YMn/cPQFkE6CH8WRz2fRz2eRT1JKf93uum+3r643yESVba/YGstMVmiMeZwN
fq2+phbjwugXRnoyPCVLu9IiJjIcInN1AW8DgZynOyWJJtx64uh7XGxKEiya
A/faqbTgkG/jMo0F2q3gjIQDAkA6jb86T73lPmiq3AdF5o048SdR/DthFJj0
mzj2TBT97Sj8syD041HwJ2ASYOkg8P2O+1+27P8AOtqxESBt2f520/bXa5b/
smb9T1uO/3fP83cC37ei0G+SyEtp/B2z8CAdGOp6ToxbUzP27Iozt+0s7LuL
e3hiS2zb4ztMuHXDHF43hdaMwSVDYF4XnNYGpi48/Upvr9LXfeGn1ShWphrm
L4BV9l+qy673WEmSgG+fcTTyULM5eceQcD2z/OPd6K6nHd59Lr/G6oRJj4sh
EzE87wzFstRU3eCABCKiMrk6GfPR9llj23F74LwjRrJfUzES3gAcsvBNuidG
oueW620wkrm6w51bvzASk0xkJc38L2Jh4r4TAJPIQYM8MuaAx2xUH8KormOe
thyQeOKRVhD1HVafQzvyThLdXbUXFsFIjvyMNT9tyowZUgP6ZL8u1atP9+kw
+KQ7VKl2ZbJNle3mpWs6ssabIImk2iL+KBcZYIy0xvNIvCaQtlpKc7j2VJle
RaqN27KQFQuhbx//JbQFw/WaitPE8MVVzLlXFeo3wRP2fMPGZeFZHRGzTpvi
HihYqTFjLDDSLFMzW7QypSaeweaa+QyQKK8CRuJ7PXgbNWaW1xFkuVtYobaF
zAwlf8ic60lamVRx8jOgC3ViVB0dpk3bSK8i2HHmazn3tso9LbiolIEuELiK
dnNGLhPj5tS0KT1rziyYMkumzIopR8p+TF5gA7BEMoCZCe76Cuyhv5ie06fp
zeYsK5+jJ6sIgJMmNaNMjlPVSowW3RyQeAaJ7ba0HYfeCQJvMNvuuX/ddf0q
8LwkTAq3g5FYk/igIt4jj3ZStVJsEP+CLjmkTw3rU4PqVJ8i1iH0vti3/7Bn
/2bb+s2W5dv1y2/27D8fe14duV+yeH7keXPiewc6kgbbJIFWka9Z6G1CyCMD
59FBZWzUmJ4mAYrckq2whn/Wkl20F1boH8nM0tZeZpaqAZOT6tQY2yUcUaaG
5cyB5ak7hq19dMU5jDOUSL8RuDFZlEm0zZRf0KZGL2I95/j8kTZ5sOXU/0Ed
btdEOtSApWC7Mdprig+YEsPm5Jg+1meMj5mTc9bkojk+a4xOGMOTl+EZc3QB
YYrMA5M0wTFtdFybGsehwAE5i3VioHsySMpOGEpYOJDujZ1KNPdZO/YmLhtK
JGZHVJl+bnKHeGLUWAcYFcxzEmwG6hwHX4vCzZRNSo9dpKZPE0OSaL840iOK
9Z5EuoXhDmGwXeRvAyAd+d/tuZ5vO3/aufr5wPvs2Pfy2Pf6wPcKuCuOtp9E
24XRLqCRLN0rTbGavfTTczCSJNUmjr8/Dr8URl8Lo29l8Xb8RTAS226bvEhT
YR4z5F1gpeOL3EkQX2oqs/oKWUhj+iaDjBtyfPbdKsBI0U+XyX+1pf7NHv3d
FHi8ACNdXR957o4ZI1FnnO9B6n8EJgnBSEAjknxp7LhuD6k2iWrsZZGPF1/3
6fjKkUZFxkikdgI0oht8nNVmYBDoVybpGAKQRKE2MNK+68Oxr1ME7HF3HHg/
CPwtR4Hm4yAeWwXe1v2rtl1Hy7araevqLQJPDv3dwsiAMNZ/DMQKNfEyJJqz
mOsl7ZhkwEgDT1K6xTkMR5SNqe2R2jlTJSI5eoZJpMTFJY9KtCKj8b9BdUdU
I13dJwOXxgEPtjo+xBt4TcWXHJqQd4WwNA51iLDC+B02CK+Ai/gARR5PoNPq
MmckTAd8wMdKmQzdbqmEm3uC8JmFS7fxomtadLOFHhf55CXWrIh6C3MWk3Gm
BjRGsASxpJPJOr9sdd75NW9rLH61wDBVpimbBGaoLXLFG2d9zX+7E7jZi9wK
Uh+lud81qcfz2KMk9iiMPAhCdwfB231fYwdv44xkpeKKMUtt1FwfvawO68ud
hkqXrtShKX7QFj5ocq26/IC5OOOub3ivCZPIBb52FGiIOCNxb6/orZi5V8jT
D8rcR0Pxd0vlX69q/+6u/ttV/ndz6pM29nBOe3M3ArY63sPv8ZOMsCh4L2Ni
wgcMmcjewn8vCD4ehx5FQKPY7/LIp1NiJBwHxkium01nY515za/br0E7M7RL
WBxhMYrLkh8TUgfKj3yJMerpyFObPxX3Fkk2B5QLIsKSCoyE++4k8kYSa8LQ
gRex9sfkRX0Q7LyAjphwJTXUm8pT2nzHefLNaeLFefq1MtusyrVcZN7LUy/F
0T8Jw9+eRH4EI0kTL4SRX4/DPx2HfxAEfmRPfjrwf7fj/KdN6x+2LH/Ysfxh
0/o3iHXLX62a//OK+T+t2/7vLedf73v+8dj3/UnwJ2n0FTMa6FDEu5XxXnVy
0JKctqYX7Jl1EmzPb1pTq+bYGgDJHFy0hJZ46P0zas+4yj2C9aPSO6DyDaj8
PapgtzLcpY71q1KDGK6pDwj/ToGqRnn1+xXJFR4xfzqiI9rPZTlVXM9fIGeX
7UEfka1qfZeVvT25SDOw5/bHlEelyqJrYNJTXd9Tr2Vj3XmzQUJYeH6ze3VP
1dpfk0vG6uplbcPE9+l4NLYoqjukJs0ZiTIz27xvxcl0BjBYUSngzQEYiT4q
qb+ucTfzL5g0TJ53lVlWbLPCvXfp//3CSFQVU6a9EkdxGZhkK2DKm7rMTmAm
1Sb7MJmqUz0IVbJTmUK0A3W0+QF+mdHQV5o1Uif1MgZnU5ksY2hQqqyzXO4a
HypxwRgKI+ocZpA2Rbr5PNOiAFTnesBaBPMlqioHIBlzJH3JHZyBSY7SBsJW
WEHYWTHVZW6eK6lSFqjIp4N57vvGu9u4DgAVb1eWn1wtCousXHaOF72zzgtq
5+duRFy9jSx7mKMZZyRm8v4krWzMM4nO7Cym+8vUjDE5ZYiNqkM9xNuUmSQ0
UgcHlP4+dXDIEJ0wJaatyXlcn9Q1n12jvNCXVlNLYeMyt6jPTGuSYweelwL3
W0mwQ5UY1yZnEIbkrDE1p41PaGNT+sScITmvSUwr4+Pn8aHTOAESyIdN613E
V6Qx1fOFkV5hqsWEu+X4cf/q2bH3rSjQfBYZkmPqjPedJ7rPY12Ii0S/mvxr
erWJfk1qAKf1AhN94M2R65cj908C9y8HV79sW344vHou9L0BJnFSwq+ShFqB
c6eR7tNwlyzUzmCp5TQ4IAv0KyLDhtSUPjmFT27JrVD5X3LWlJ43JGZ0sQmK
xCTeoImNqZPM5gzMk2T/ToLsdMl2J9sDRAHiWmvrpEnbOGA947QrihOtSY6A
kcBy59HWszBVQ50H2pThTk24Sx/tueSAlBq3ZWeYgNIkHfb0qj29bEnMmWKI
BVti2RpfwiOea0OT+vgkcBeH4jxGjj+015buJivt/BTggS09AEi7eMJUa7bI
RidHbS8Xqe6zWPt5ohMTMW/PxLx8HGoCIAl8bw99L4CpAt9rSaSDl2FLYwPi
SJ8w2scZSRTppDxSuP048GHP9XLD9sOa5U+b9u92XT/tX/2y5/xlz/PsKPha
GGkWhChASmKc6GSXlNGRBERBvNQjTbeLEk3HsZei6EtRBIzUSowU76euuvQk
jjDWC6SEWZzVFuc1hTmCoir5MpP9TZFkDQylVRslHyS+W7n/7iL6ycCSSNb4
75bI58vgR6Xv/tRzR+kI2jWjWfuEGS6IffcngFjqKqLa46fZGWAQvD/7ykjM
+lDAWqjWmWLbAlPQJekPjEJYVamzAziSVNSX7Kaj4W8GIx16Wk78XeJQ/4m/
h2AyDPikhJso1HES6Dj2dR/7eg697QJf276ved/XfhzqlyXJMBokKYy1i+Id
skSXHANUpl+bHdRh2soMIAy5EQwmzPR8g1WYk5WYvyEN3pDBmbt65KyQOAav
MqLENUvL86yRh9T2dinwSuMAMzWXP+WkRPXerMiHyf6LmcyyHOG7kVI9AEl+
bdnqa3ytyn2aSC6pvIIls6m6xZfMWCabaRUpcN+KmJHrCWOtp75CJhB0yCRz
j6j6q0YGYayld5NPVbTfdLvruT3AG+jU3IsIYh+OPfeHrjusxNfBRZbaPO+p
4YD0ZCNVnjGTty+J6tgqi67aSvB2J3i7G707ynyS5f+sBSMlH6VgpPD9IV4H
Pvmvd303WFMv2WtzttoUVaJWR8zVocvqoK7Upi+368otmmKTttCkyTcb8oO2
yryrRhog3saOr34ARvLXj3kqKXgDTBUEro+ASdQ8fnORedAVPpvLf3ZW/81V
/rMj99mUftRQrcuNKHB75Knv+m8OgncCViLFOl7vTsBFWExxQEKEPwmjn6VA
o+jns/BH2VdGYjXbT3kkx92W/XbNWJ3WFIdJp4gsZZlcIVlxTbH05jCrUKIe
cFIXpJlo9rJA0w2VcDBGopXRF0bC3SeNf8A4QP7diR4se7kRqiY9Tv5QuVH8
Nn1+GNAoT7w+iz9X5t5pCuQVq8gAmZ4DkI4C3xwHvhPHnkniz0/CvxyFQEc/
HAd+FIZ+wvN99x83bX+/bv6bTfPfgpE2LP9jzfTXqyYw0n9ZtfxfiHXbf925
+rsD9x+PfN+KI7/Kk+8UyRaMk8pElz49YE1N2VIYDNe4yr0luWIKL5nCKwbf
NOIyMGsKzhl8U+qrYbVrUOMb0gSG1f5BTWBAG+pXhXspDxDvw1jNZsB5Zsy3
/KSiQJkZATOhI7lCDkg8L4qgNGl1mxJK9X2quKtuM0WdFa5kyNK5vKOKuMV1
A/7ZY+XZvFF0i5IbjWXn7crV7RYpPFxTvhoDDtVSltcxm7O+42VjlYwREWQk
XdtAUBKpyp3oN0lTurrL8lpULui+5Su+v0hGO4imqBuO2yvzFRxpkFbnngzv
ajzLus7l4pk/4za3DqFdksKSJTt3mZkypMdIlCk1oEr2qqi+tJtFpyrdpc72
6YtDzMGNrEO0wJXyAqhMC/wgzSWmtlHm2hQr/H4klSq8udCjyrUBpxW5ZmWh
VVvoY3t2dHHiKjVkJzgj2UvESFaiNdq7seSWLPkF6ryrrpgK87yO+kvd7yw5
xRem1IUZ8palmOcaHSQOlqPQZha0WbI2Y7XT0yQsQPnqDV4sbX1yC93kxtba
NHk98C025t0zwxnJll/EkXHmV6zpOWN0HBeSOtAN6lYHenWhIUNkTBsc1gZH
DOHJy+i0OT5rSy3ZM2vO3KaTdelesYQ5eMmcXdQnJ7Xx0W3bjxvWXw4972XR
AUV8VAPSYJ0+imgvCarHBxWxgbNwL5FJpBsoJQo3iSMttK0TbWdC5RSYpk/C
H46Cbw98L3bcv2xd/bTjenbgfYcFuDg2JImRrOVpou002gFGUvKTiLOZGmQ7
iWOY7iXhphNfEyYjke/DkefdkefNse/1ceAt/pww9OHQ+0YSasZfP430yyn3
0nMa7gAjiXytkmCP1N8nDw8roxOa6KQuNmVITIFAtPFxhC4xpogMykP9itiQ
IjpykRinJFJy+CI5cBbrEgfxjzxZqp1n2s+S7RepvsviNOXzK+usYXMVy39c
D+r0kDJJjXuAE2msTRRuVsXaDak+Q6LnMtFvSgyaUiPW/LStNGvKjZuy0+bc
vK2AYWHNlFq8TM2Z0rP21MZVdtuRWbuMz+kj4/r4hCE5rolTi6Ii2YMrWZHp
U6QHtSTLv0y1IhVMncf20pGjwNpjc9QVqE5O4wCS5kP0/Vn8AzM6oTSIMNiK
o3Tkf7Pvebbr+hWcg9MBdpUm+8TxHlls5CwxcRYflYSGpeEJaXRUHO048r/b
vXq2av52xfzPm45vt50/bTt+BTUd45jEuhHH4a6jUPtJpFMY6wAaiZPdoiS4
6AMPYbzpKPrqMPwrGEkcfSeJNgM2uEb9eWZQnu5DqPO0j6llpcKX1YXL+qKq
NK0qjyqLY7hTMMiAkZy3Qse12Pd4Ef2si302xj6bIh+N4Y+a8McL4BDfSCLj
9ettjCpggODDeeBBhte/tAhREoPVJ1BxQuzxIvTxzHNzQq2jLIPEPbJxG3KX
AfLIK42o8v0X2X4ccLDxabJPGu8BOoKIJNHe0wQVt0uig0AjwCRuChy389i4
PDKBOAtPygJDp8Hhs8goQh4dARNyASuWCaTkqoKkYwiQEIbMIJZ45twMRhKq
IqhsuarbVE16fUhiQXURD6p2frLeZltaFWrFvSLZCpZ8Ls5SDSfXSKktPyn1
MWVUHBZMvu5rqpDx35J6duyzMvxJTiVbtwdXjV22HKbSULJRKM8bqrTRCVg1
1ddZbPIlMEZ4Gz4A7WyKXDfHTAuIhnGWqqLqVrKVf8Dv5EUdINv9q5s1fAB2
/ImO+DaTD8zwwOLxgPV5bTpuli31aQzR2vKYvkryzroy2GCIF+GYqmSRYKlO
OSrTzsp0oL4Uvd2O3R6mP4qzv59lPp8lHiSxR3H4ft/X2PTdbPuu9wFL3sbK
VX3G0Ziy1icuK6PGyoCh1scZCaHJv1flXmvyTYZSL4Z6/NqrypyruuypbXjr
2/7adqC+EyT3xn1/gwLsFLsTAcaSj6e5P19U/s1a/Xdb+V9N2U+61KOSi0gg
AtcCMg0kiQlx5E6CoFqpe1H84YRtBVJheRiA9DvQ6DT0KA09igFIvrtDN6bX
axyodZ5Hct9v2xqLQER9mcrDcGsYqrP66pNy/lOqs8gKuTEHZee4KTyfAoiR
ijPK7DBZaCVbTsJvj0NvQEocloThVwh5opm8I1N9ynivJk5pTF22V5Pt0mRb
zqLPzxPPVNm3ihTFReb5aeJbURhs8y9H/j9JIs9P4yCu18ehZ4hD/y+CwI94
fc/9D1v2v9mw/n8b5r9eN9EW27rlv61Z/2rV8t9XLf8PAZLzb/au/n736o9H
3h+l4dfnseaLSCelgCJ9uviwLb6CtaElPmtNzNmS8+bowmVo0RbZuAxMGf3T
Os+E3juJ0LrHDd5xo2/M5BvWewe1ngFMZLrwmDo6poyOXcTGtOlpQ26O2RzP
835zXsMG5CCNo8YOL00EyVArR2OP9tTq21jwkgJefcNUI60bBJUmFkhW3VXf
5wKn/FJnXeqsNI5lkJiR/Yq9sYbrnDj/es12s265Xr/E7ykt00KDSf1o6IzM
0yvlZVbvvXZZXLeUqUncXjl0VLG4EzKtMKYLdyP4Ith+wJ4fco+zp+avJ/Gf
eXxCygSyfkwXWxN99fHhBYEkq8UKvyn9QkXFZMfDS31UuRESCkv3Y5mmyvRi
YuWbtqzeaYRbqHOrdO2XEuhLrhLGNmQtZA83S2ROFsO96mzbRarpIv1OlW1S
pttU6Q5DcchcIRcVnrohE5/ivL20YC3OmHKTDJymL0lweAaXMeksZcb5lhkF
azpjEklzGtYqhT/NevbJS9SQX9ZlF7WpeV16wZBe1qdo58uaX3cUDl3lY169
aSvuW4s7CHN+i8vb6tMzzA5vwpKfp4xWfhFcBDpyFjcchU1bZtmcmDZGRvT+
Pr1vCGEMjBgDo/rguD4waQxNX0ZnzfFFa3LZnlpzZjBBb7rzu97iPgJfOrLr
5sycPjm+Yft+1fT9rvO1ONx9GhtWMZdSVXxMHukDGuFRGuqkrRl/83Hgg8D3
/jj0ThhpFkVbaH8n2s4ZSRInbADSfN1r23M9P/KDedpk8WFqg0qyVEmi+yIB
NOoDI2GuxwJBmRjSpEdxQmlFj1cSg8rkAPgH9CIKNJ8Em1iBDSavdkoihfEj
oxfJEXwqvEcWapcE2qWBHsRpcOA8NHwRGlZFRjWRUXV4BEFNc8H+M3/XaaAX
pHQeGQYmAfmomiveLYu0E3dR/1GbNNZylmqVxVuBK/r8mJW1EvAs32V+ypAj
gwA1u/Bw1Z0lO7FqU6e6LnODxjRiyJQZM2cncbVgOQy0BlY5yiuYDZ3A/uyK
ObOAQ21LruKYO3Kr5uScLjauT4zpU7ThCFbEH6UdNGpkHsZ9R+11lS26v6pC
0sQun+A6IaWp/DrIGQeQzBNDbyTht7IoYIm2O8WRNhyrQ++rPfdvOPi77udH
wfcAIao+ivedp6ZUmUVFcuo8OqlIzCuSM7J4vzDUsu9+tWH7YcP2p52rH/FT
+JJOWQT/Xb801icKd9PeXLQLjCROdArjnUfRZkH4zVEE8RZxGH6xH/xZFHsj
jr+XJdsARURHoIUkCdezRtFBRXqY9KXLcwAkfWXuPDeuLI2oi2MkA1VctDZ2
OSP5HxTgoshHPSJ4rwncK3z3pxj9+BjCa32ZKRUW5nKwE8lTM9kZCt4PRTp7
UhL9uxO56ge8nZxKOKjGb8FSXWZT0piuDEwa4oxEQrLxbnl6gGMSkTxzM5Sn
Rk4TI7JYnzwxTCoK2Tl1CqvyRXVqQZmYU8amEar4zEV8+iIxqcZChksupHvJ
DCiFcYk1JeFUZgbASMbMOGckZ2WVOdNt4sIgCfEbco9l/hdCekIiq1TlSOKr
THYYRGQtLbOe1glDYYQsCEuT1to0xij2OG2rUfcuCX/Vt4K3J9HHs8QnZfx3
VeTzue9ORCtrHN7GluN6w9LgjDTLDMWIkTDUM3G8DWrGaeyZaju2Bu21PW1r
ssIkEgWilnlq6aI65EcR1ylCUJXyw67nbocVLe/77o8Dj3gDleV4HvYBSHh0
3W3TVsX1krk2ZSiNanHkK8P6ypC2NKDJ96pzPWwLYMhYHDOVxmzlCUdh3FOe
CV2vRRrb8fuDzCdJ5vMp0CVBeaR9//UWpZJuiZF816uckWyNSVN17LI6+JWR
8KjOvVNmX6lz7/XFHgz19sqkrYSYdZYXXZVVhLu65qbu11VXbd1T2wI4RW9P
Eg/i+L048/m89K+G8r8ZCr9rmcnXGYgIaMQBiTvLc9X36L008iCNPkoSrGIq
/CAEFH1hJGn4o4TrFXBGumqsA2URTH9y01pfACMZKl/dLuZ15WlWKUe5Pi5k
RC4ShdnL3Lw+O6pnEw3p2BfmsfpWZkcpAZ7ukMRbxLFmcQz37NuT0EvONpLQ
K3n8gyLWAVBRRXt0qX5tpkeb7VKmmk4jz84TL1SZNxfJt9S2n/xVGgMjfSMM
fiMK/3waf3WWeA9GAmiJY6/wq46Cvxz4vwMj7Tj/sO342237H7Ztf7th/e+b
tr/etP8NYsP+Vwh8a9/5jweu7058v56G3ynCLYpwh5IJxBliw6bYnDk+b4pO
G8Pjl5EpU2TeFF4yR1bNobnLwIzeC1KauQzMGr1Tl75po2/C5BvRe4a0nkFN
gBhJExtX8UhMAJMAinzCJZAos771xgHftLJUSEoCmMQrOfnqwFbfYCrBK1zo
hlIoTDULjEHKaRUqtOOXOukAsLpl8ImZ2p8XydTsesXRWLLXF3HKzI0FPojx
emOmnE/qK08dxMV5XWGR2AkjPLl/7jkrAldNyCxZn+50SvzSrvQ+3x9nmHTA
3Dp2mUTDMpdkxxNmWEnd9K6nvPEuJyUmdcKQiY1vTN9vEZfEUwl0cYY3jpFK
DGXLKWHOWhtYp2d5nDnLjGhK4+TmkJvkhdBMwWmBpa3IJIU7woCF/g9GUmc7
lKl2TbaPiThx22WqSjKTpDNt9hnSI+S+mqEUE5n25qigRZ0a4yqanGwBgbyT
SPNFGIHJyxMjUYkRMRIFAVJ61ZrbIGeEooAYiYnCXZUPSYa6vAdGwmxoyq8Y
MrPa1KQxPQlGsuO0FpYcuUVXcc1V3iKDztSKKTZjDI8Zg5yORi6DYwhipOC4
IYircdYSWwTDO5JrztS6K7Ptye16cvuIq/SGM7tuzS2Y0jNrlm9WTN/sOJ9j
HS2N9ANC1MkJVWJcHhs8i/YBS4TB1kPvuwPPa0zBB56Xh/6XwkiTONbKGYnZ
ZHRLE+3iyAfOSAdeqgE+9L45CTbLYl3y1Bgr++lTpvtU6SE1BaUEFYlO2rNO
DrCSPApgpy5H24uq5ChgSZEAOHWfxnt5P/tZtIdUCpl+6Xm0XxbqlAY7pIEu
WbBb4u8mTAr0y/3954G+i2C/ItBz7u8983bK3O2iqw9ST/t5uO88PKCIDMuj
PWeR7tNo5xdGapbEmoTgjcQHafwDUA0THHPP4U6UczjvJCebGdRkBjgjKZJd
Z0nqFzDkB0k5LTuCiwQDGonDU+3ZHEjpqr7BjeFshRUmRD9nySxbsouWLAlD
PdWrp4e1aaAXVb/j+NBGW2GCViX5VQvtih67qhKEtya9KnGE3jJkV/D+00ir
KPBKFHwtDr0HOgKQWEdhE84OGAmx734h8DedhFrBObL4oAa8XdjUZZe1mSVD
bkOXWblIT0giPQJv0+7VC7z/0PcCJxcALAp1nCdHFJkxamSLD0oSVKotinfS
RlKiC4x0EH59GHrFGUkQeXkY/vU4/BLgJIq3nYE6cqNnmeHT9JAsMyDP9ctz
5OyjLkyQ0WdtSVOeP8uMqgrDYCRtaQZDirm27SQVF4nv/pzljjTBB5XvVu6+
kbpujgFIlB6vbDCn1z3v3bH/Xhp8PMV8jS+54JWjRvc1RkuMeLzOmfWc7trK
G3iRWx1Rxz3lTyZ4k7i6MEBaOiyPBEbCkWcxgADRXaR5PdXEeXJMnZuhu7iw
ps+u4rgZ85v67LouvYS7WJNcYDHH2ldJUUSZG2BrN961PUKMlB40gJ+z02yp
tUR6FOUV3gZyVd/5CyMxc3Ya/ark6s7Vd5kXMxl8YyCiCt58D/M97yUeKJP7
ubHMkjDVSWt5wVlbD92fJD8p0r+rk59V0U/nwQeJ9+6IdZOBkdZtjeUno9Xq
LD8XDJPWwEi86NRcJ6UXLpfEK7e5QRJlkHif9T31agGTEDxf5LnbZmU2O+Cl
4MeT8GcRHn0PB957YqcvSaRVa32OcibFEW1lUFvu01X6NaUeZaZdmenQ5Lu1
uV5SUS4MWItD1tzAVXEsUJsP1lbCjY3kwzEwKfWRGClyt+u/2QjcbAdudvDo
uV66qk/Zal+LkQb11V5duQWApC01q/LvLrKvVNm3ukInKcOURy+Lw8b8KA6p
rTRtL88gHJVZhLM6564teesbobu9+MNJ7E6Y/iTL/36ByHyUA5nwSugWgHSA
4PVLXwCJxaOM4kEcYQklcBEYKfhRTLDEGCn4IPTjQN3sYjRwNtZdN1s4YuDG
v+w8ko/JCsnsV8iNnSwtWIu0kbmRWkrz1G+CNVp2CnOBMU+ieabyElOFHSPJ
mgR5UckSzcLwG440gsCPwsBP0vDLs0iTItyminVrEt1YzWkynYrEO3nshSL5
Upl+fZGkTTdZ7AdJ9BtR6FtR6Adp7Jk8+U6WeI9fBUaSxN6Ko29Owr8dBr7f
9/wzMOnA/Y8H7n8+cP9x1/k/d67+YfcKL/7TztXfbTv/sHf1j0eePwm9z86C
bwFIF6EORbBDFezWMI042tGITerDo9TPGxw1R+fMkUVTeMUaWTSH5o2+OXNw
0R5ZYbFkDszZQ7OmwJTBN4FZTBee0EYneSpJGRtVJ6iGE1PwU76iMM+kyHd5
1ggDBWt1oUpOR51U0B3XWzwjxPIV80xahzJR5sIyX6cwva89tmFN+jxPveeV
NYAHYNVUmbU15u2NeRvTpjbVZw015nibHyZJrtwYGZZlR1XZCa6nzcyY5i7T
y9b8urO091UxjDWlSsimp37gZtXmtHN9K2RF5rTiADWx1pJ1LkvCe+G5nDjX
f/uKSUz+lPseMvueGuGcvkTkrC8tcAgkUqL6nymelsSVxgMDID48GEldHMEg
DJpib6ANXLKWpgwS0/3OM4eU/DDGHHARMRLDJE2OVTelu7h4F+8N1+VGWSnU
sCY+wMrPqHgG4x6fNDHXa9LjmEZZDTa5eZqKy+osqfbpc2SQRAVILH2ELy/z
a/rMsja1pEsuXabWzJkNR37PXRb4yife0jH3ikWQwn/l0JFnwiOkcTdnSE39
R0a6Kqy6S5ue0g5nJPC5JTJpDo+bQmMckIyBUYN/TOunbJIxNG2NLNhjS87E
6lVyzZPe9mX3Ed7Mniez6coCk5atmdll0z+tmr/d8+C+6JbGBk5jw1Sukxw/
jQ1iKS2JdAhDHwS+1yCfQx9umWd7/hcnsffiZKsk3iaNdzLZhL6zdBdgg/e1
HQVeHfnfHAfe42cx76iy0xdkfjoEuNVlx58Kj1PgJdp0w4yvZa+TfQn5HWPh
vMjb+rgoOqYtMk/JjKszo6yIax4cpYgNcEBiSaQuib9T5u9BnHq7z/xd8kDn
mbddctUsdn4QX70/tr0+cbw/9bXLA92UVop08jJpMJI03CKO0rBwHCTBNEns
/TngJ4OPNETOO9lxUhxN9fFXEIyR+i5S3RfpTm2u30Cr4FHyJSzNsbuVqiWZ
Ou4K14ujJQmNcnOXbJ/0MkMl97r0GK0Ns8M8N6VM91NrFaAxPcga63AE8FPb
ttLRVUXsrZ76amfuithROLSVdi/z6/hU8mgnCWGRXmiTOPgBJ4gkF4Lg2Je8
SQ3AA0AF8EjCffLE6GVhy1o+shT3LMUdPGKux2UJGJYEu4T+ZoCiLNIqDrZQ
H2J8gGdBgQdMeHD8LDMoTnSdxNtFyU5B5P1e8AXiMPQaXHQYfgFGOoq+wnNh
ou0sN3ReGDvLjZxmh2WZIWmmR5bpk+NIYo1cX0ToauTSq8wPgZHYjYzZc9N1
g7FC6n+Qhx7ViMC9wn0jcTYEWBKy9PgcqUPXtjCS+O/FxEisn8h9vQMWJc/i
8rQ5P0HSWOV1Kt0pH7gwmJQZmjJfA+a9Pm0ugw2IkQBITPGji2SZAXWpPnmK
6tCU2WHqbWQasAgsD0kCLr9sKpES5mVhx1wAdx1YS/u2EimpMo3uJV1qng2M
s9RwmhtSZwe5ISlmZJxiMLAxM27NzbMt+0VcAA4sFYtLTJViy3tzwi3MqD0N
iFJes1CuG8PUFH7ckB9ml9Y4Vm3aXLcm13qRa1Pm2zWlLk2hQ1fsYbw0bKqO
WUqzV9XVwO1h4uNZ4uN5/FGOiTvyICYBQ9Zxj7UwpmNm9T5lrM9c1uaMlXlq
bas96cBQIzPpwJDLJC8o5U6UnJGoIBmARCEOfeIYIAIXMUDaQnju9gIfBeHf
T/Dovd9n7ESGHTyJRH+6yg3CSLRQV+nBv6DMtqqyHTomc0c+1Pkea7Hfmu91
FPp91QlfbdZXXYjcbKU+HiU/nsTuBQAkb2PFd73qqa17GmsuknaZMJeHST24
NmKs9OvL3epSs7bYqim0KHNvwUh41BbbiSfLQ4bigL5Ad6upNAJkslTGrNVx
R3XMWZu8qs946ovBuy1gWPhmH38u/SjLfDyl7NDtSeRWEL45ZIwkACz9H4zE
8kgyvBK8FQUfRDgyOD6UcLunnBJeCQEpH46o962xeXW9iSOGALKCkczVGcy/
YEgSQKCi+nlzBWdkGeeFUJa5tJP3KDlLLpppC2aJyVVtUlNPcQnDIA2MFP1U
vx1+Kwo9Pwn+JPB9d+z7XhL8TR5+o4y2AZC0yR7ytUx3qBLv1cl3ytQbVfrt
RerVWeI3WewnWfx7cfhHceSX0/gbRbr5NNksirzFeCiOv8VgKIq+PA79CkwS
+L49Dnx3EvwRgT8h8H1/5P/hyP+9wP+/jnzfivw/yUKvFaFmVaRDHe1Wh3qU
gS51oFcT7NMEezSBAV1oSBscJOfN0JglNm+JLpnCS47YmiO2YQ+vXcW2val9
FrvO6IYrymAJ+BSaNUZmdLEpTXRSFRnVRsfU0WFtYtiQxgJklFIWuQlmpLvF
K4i+MhKZpTYOnDebzBRm3VIljzDMJphiyFSisIh70F3b8TcOvbUDnkribsuc
kahuubJAJfTg2PoUVb4xRrqskRewpjisypM5oCJLQe3DmJgy1KltTE9jhLcw
+x5XeddXOwnVJV+DMxJJpFJtAO/DFfIyPwxutNPHfNO+9kFwmgIU8S02tgu/
y83iuZk1OXRUyFr3yS8DE0d5hVvIcV4i5UYSb5yhXgDGSE95pAIxkjo/ynrq
ya+B+xFTbT8VDvGugWGsXxgjNSuS7xWpt3iuSndwJRNMiBjo2Cw5rMsMgY7O
o52Uuox3KhNdqmSvJt0PUsIASA3suTnM6cz/kRw/sVTX51ZIZ7iwhsDr+gx9
9zK7Zkiv6FOrACRTetOa2XXkDj3F42BF7CueePIChLckIGvI8pG7cGApbFIq
KUOio2AkGmYLi47isjO/5iI9rm1nbsOWWrHGF2yxWXt85gsdjeh9wzrviNZD
j4AlS3DOHll0RJev4que1JY/sx/IHgSyAn9225vdvMou29JzYKQVy7f73teS
RO9ZclgWH8asikW0LD4ojfdQf1P4rcD/7MD384HvR0Hg5z3/czCSLNlGJUZU
gtKPC4bcdWMtNGWH3pPYTriN9JFivbh+mEP3NBWl5KZ4ZoZqj8FO6Z6LZBcI
hFi0MA9yJu2U2jY3QCdeKpMokIqt67m9MldIIOOM2ADlkYiOuqW+Tom3Q+rr
lvm7Tn2dYKFTX6vE0wQ0Ora9OrK+3L/87dD6Quxqknpa6Q3h9rNIx1dGEobf
noRIRRbDgjTepEi14RoAuvBrALMePiSzBsA/Qn33LAa5qomhNMqVS6mJknsr
1EgO4otnE8vxssULuw5ngDeq1CDRNc2nT2kHRbL3nKqdKWOGOZqWioUNkIyj
JHRVJQAkf13uqcicxSN76cCc3wI9XiT6TyMksc4UO5vBSMeBt2Ckpy5+30uh
H2ehXRbukUdBYtO2ssBVk5NvYJ1Mxq2FA3NxEwwATDqL9ilos68XJ0uRwBQ/
ZWAZYyY+OactzV0UxqXpfmG88ysj7YdeHkbeCMKvD8PPBNFfBLFXguhbcapD
nh+U50dPwUiI/NBZvh+vKHC7VWYASGRIV5lVFie4wgZnJBCI6+bYd38afDgP
PqgASN5bKQDJWt0kcx9yG8cNOwdeonqYeymJVrGGa3d9w1oh277L3LApP2LO
jeIecRY3rko7rvKWk6oZVyz5BUanU9xcGzO1vjKizPVhTkFQe3J2UEGA2s36
bSe+6G8s8www90m0lHcdVYGjeoxwVoVXdSHGKEsBmLRJpJRdMn2pmWSaEsRI
oF9DjqWdU6P4ljW3gJuXMtK5GRuVIC5ilMbcRw3aX/ysyWACAzjtpo2zTbo+
jEUsx9KnyXYp0x8Uqddn6bfyzLuLfMtF5oMasJTvNlaGjOURc2nCVpn33+5E
H0RPOY0HYQiHi5Gko7GCEZ6keMrjGCTJQLlG3jdfMYm3NjPHt6etCirqAFzV
SR0RozTLh1Cre+hRGvl0Gv3zaeiT2Hd/HPos8D/us672TXBR4ON+4OOB72HP
fbfhul2naqXbNTCSqT7NGGmIM5K23K1jjKTJdxmKfZQfy3QY853WUq8132nP
93iqo57KpLs85asvRu62Y/cHobs93/W6u7FI6aPaoqu+5GjMWKujl+UBiuog
GElX6lAVP6iKLapi20X+PQBJlX/HGUlfGgBP6gu9+HPcl8FcHbHWx+zVIXt1
GKR0VZ30Xi8AwPz1tdjDPskOPEpi98cckBChhiDUOAriCV65OyE5gnspr0cC
iwZvTwI3x5yRgh/FYCRGR2KGSZRHwlnAFQt6ZEm2fbbXRujouFnGc0zlwCRb
fZXkBIFPjbXL6gJoFqOKvb5MtfG1VXLpYtrs1vL2ZZHMF5g36DyVJ+UnsGo7
izdLIq+FgV8OXN8eur4R+X+Rh96pY+36ZK8hRZ3g+kyXLtOmz7brMi1fGAlc
9LM8+ass/vw0/gqARL5smXZZolkcfy9JNJH4UrxJHHsljPx6EvkZj+LYM2n0
BUISeSmMvBBGnonCv0jCz85jzZpErzY2YEwMGWLDusgwmWwyvVyVv0vp60ao
fH3a4LAxPG6Ozlljy9bYqjux688c+jOCYFYYyokiFCfBtMAT23FGt2yRNVN4
4TI6b4zNApO00UldZFQTGlRH+rSJfl2qX53sxx1HfsTFNc4VT4XcQH2mgMSU
JaimyFye55UwWCsZ8pNU0wtGqm766nve2r6nSpI+LibvzK2WSbOxMmcqT5B5
R23EXJzhDnQ4KdriKIYvGjqo3rJXkemjyp/UoCY5ok+OG1MTlynyFcXs7Cnt
Bqonkbr0a1CbKvNFYkryh2SuRKoFxzyVxOu3+fRHU+H1tof5evP9d96mwZpe
t61Y51LdMnMOKq9znzh9BdfMGrXaMek5xGV1mYxRyHJujt3y01/zSPxRxdd0
zPqT6Kg0Q20C+XHeU6nLkRMfoIgz0nnyDdUjZSiPpM70Yu7GxI0nvHUXaCSP
UJW+ItZ2EW8HJhEjJYBJw/rMpD49YyR37DUs8BEsJ79GjJRb5YZHVIBEukOg
oxXKIKU2LekdZ/bAlTv2FiWBotBfOPHmjsBIvuKxv3TiLR668/u2/KaVMRKO
OcKSnXPkF5z5JUduFZiEcGTXOSPZYwvO+PxlcMIYGAcUGbyjOveg1jWA0HuG
TN4JW3DGHpp3hBY98bVgZjeUPYjkBeHcrj+75cmsOdKL69bvVi3f7XjekKVv
duw0NXaaGDmLD50mBk6TPZJ4iyjympKu/h8OfN8LAj8eBp4Jo2+lT05wtB5X
ZaiS+SzWfhptA3tgxlck+s/joKAxXX6KrIhyc5yOuPQBLmzMIGBRVrbdR/U/
lRWSYruhAlG2RUsFt9y8EnCFXwIq/uobos6MK+K8HqkTjCT2dIrcHRJvFzAJ
sCTztgCQhFevj+wvDq3P9s2/7hh/OrD8hhfBSBI3aSvJQm2ySAcoAiwnDL0H
I+F/5Ix0kW5X49pIESYBY0hrNNGJJ6QVX6AeQ94nYmSyqPriCBYXfNLByEYr
QVIpXGJCJWt28gSnTAhPfvL7C5PyRWaAqoVTPSSIlOk5pYR5lzTaKYl0XaTH
SLu+sGEr7pM/e00KRgo0zr3VU1cZeCMgJc/8ojo1poj34IAD8xDiSAv+i6PA
Kya58PzI+wKMdBrtPIsOXMRGjfl5Z+XEf60J3VwErqXemghfOsqHGFs0qZmL
+DDucWVygDY90+M4R7Q1zLzeKMqLquLsaWZUkhqQpLuPok0ApIPwq8PIa3pk
jHQQeXEUeyvNECPJMgOyzNBZYfi8NHpRGkMo8mPa0hSOj648rSmNK7JDOAgq
IAQR7zzWEdQFzxjJf3fuvZG5GifUD1te0hYnlfkhEDjQBbN28JF22ajG4/7A
iyV5fd1WniAlkHTnZbbnMjNgSU84csuuwtZVAffIChXv5RaAJSaqgQd7PGnR
MNEP6s1njDrADXS0uVEjCVCvcVlFfABmkLFrKe7Yygfua7HnWuoiwhS7aiJH
Ebfnrr2wQ2YcRbZhnZkypgiKMCZ8STUPaVOj+uQkKU6Q+MbsZXrSmBnHh+F9
3Ez2hHYESAKrto7LhlxmsgTeGHYoxZpuQ9DaLdN6nnwlS/wsiv4miT8/T7+W
Y7zKNuNb+kK/HqDOqijdN+uh+0PM4KHb4+CdIHC7773dc2MpXV+0VCdZV8so
xkmqqWADJr9i6aKtr2AsJS/OL/rbjusnTzE84pfw6Z51aZ3GfpfHfidG8j+c
hH8/CX469N7vum+3PPeb/o87wCTv/Y77ZvXqZsV5vQwGsF8vMEYaBZ1qy71g
JMKkYqc61wlo4RkeMrDIdZlLPaZ8hzXf7SwPXpVH7aUxR3nSd70cuNn23257
8Tuv5xH22oyjPk+unVXwITEPFWyX+8BIykIzAElVACy1KQtNICVNoU1fIlVJ
JizZh/dfVvoR5uqQtT5irw3Yqv22yqC9MuquT3sa8+7aQuR+PXp3FL0DGu0G
r7dCN9uh671gYz9YP+Q7fcHb/Qjw6V5Ih/r+JPJIrW0+ttsY+Z0ybIFHYfij
JPooYVVJYrbXRuci8FFAxVq3B06q2V62NeZ5z9TV7Q5vfLPfbDtud8gRo7GC
c2SqzzpAhre7VMtU3wCvkq8f62xinnrrPKHE7FOHsY47i34QB58LPD8IXN/L
Ai8vos3aeK8+2Y/QYpWX6rjMdptyvYZslzaNWe8lGEmefKZIvTpPvT9PfVBm
OpS5nots91myHWO7LNUsi7eeJlvOUh9kydfSxCs8nqbe4UvQ1FmqhVUmvDuN
v1MkWnHBm7KzlvQMwpycuUxMGmLjICWGSd0X3g6Fp13p7dWFRvShicvwnCW6
ZE+s+9KHkYIkVjpLlhSJ4nm8IE+W5LG8LJg+9iYF7sSePbpujiwCkwzRGX1k
Ej+u9vcrA11kUxLrVCZA16Q5xh1OuUMxbium2EwKSJYaFRRh9crSR5Ps1psG
A1gLc+TiUV71Vbd81R13ZRvBLR3NVDlMHMVkz+niJKguTJhYTknP6nkwfGFt
RQW0qS5Fsuci0aOM92oTg4bkKBjJlJyypxevcmve4m6wehKuSaKN01idghSJ
MbuBkSokgMYN05myE7Xmsd12aqamGZB22XbYZXPAt9u41aC9vGcr7WJ5y4K0
hbGgZka6i+QxR1oEawhTdQ1rH9CRjQsX3CxwTOKMhGA1mSPqAjES87KhQkfM
wpQXygz974xEAxEYSZ54fZFqReB0KxJESvQt1jd3kWzDtXcaaZJHP4CRFLEO
JTVXDuhTw1g5GtPThsy8kXSHsKLcMGTWAUsIQ5boiHt26NMLgCgycs2sWdIb
lvSWI7Pvzh77i9JgWe7LC335Yx4AJGCSO3foyu09WSFnljHAmtIz1sysLTtH
gqXZVXt2hXr500vW5KIlNm+NzNkic6bgNDDp0k99AVTw5hrQXPXrXf2GqwGL
b9zqn7D5p12RpUBqM5TejeaIkQK5bV9uy5Vd23U/33T8tuN5K0n0n2UnwEjS
JAESleCme3GbSOKvMT6fBH888v9wEvzpOPgCRCFlTVVcKA9UqWCMxJfkTJ5x
AsFUNOcxF3M0AiyZCuTeiNU97URgUkiTQI0+N4ELm/xJmdo/2b7c7GNx+kUz
7S9GLbrcrDY7rUqPnMe6T8PtYCSxr+srI8n8PWAkkeeDyPUOgLRv+3XX8vO2
6cd1/Z92zL+I3e+lnmZgktjfTKIBwQ5pqBOkRIARpm4OYRSY9B4rKWoHSHUT
JrH2cDCSNj9EljpFUmamFlTqyWWuAYURlsPE+mJcX2ZbwIUpY4XtYlCZwbKh
StWY3KxWVRi6oAxtP0JOB5bquM5SPbJ4Jy+6FoXa5IlhcorJr4NhWLGfxFeX
BRvnvqr0KyNRujIzA7DB0SYQinXhx0Xh5kPfiz3nzwLPs0P3sxPfu/NYryI6
ooyPm/ILVxVx+MYQuVGTmzlp8kg9VSHuMiaZPqFJk5QiHrm+BInAMxFsWo9U
VzXlhfP81GlmXJzpFsSa+F4bSImehH49iP58FH1xEn8jy3Sc5vokqR5puv80
2y/L9J3lRgBIyhzpFhoqM/oyDTK4MVX5QVAijhVnJGft0Hcn89+d+a7P3A0J
vrRUNkhqLDckz3SfUSfFjOt2P/xJHnyUU7c15pT6qhuDQHFIm2hXx1r06TZD
ouMyOWjLzGMRYUvPIazpOTMpYk1jiKOdrwJGA5xQUo5F4Ikmh4GOMAmsbiiM
k9MB9QKTAzWvxqHce5kceElx6EbmvZbidICRqFW/tHdVphWos4T7ehbDoz7W
p2UFZljeqhJ9uiSGiFFDauoyPW9JzRMm4ZNkJwy5MWNukrkqrDFJlj0SWiE7
bPp/FRnyWNdke/jyDaFMt1ykmk4TzyWx74Xh78TRH06Tv5wlfrtIv1GlP2iz
ndpsF3jDWBoGOQAdfde7/pu9wN2u72YLgOS6XrE3Zi01cnunMuDajPV65Qsj
TT+RUm3OVJ+nepjaMuk/18mV1VEnvRQwku9uP/Igxowf/XwW//M5IvpZxju2
MOP7H6ly23234blf9z1ueh+2KIN0vehsLNgb8wAk+82cqTFlrI3pa8Pach9F
oYfKkAo9ACRzdYzYtdCrK3RfgpGK3aZ8l600aCuP2CuT1tLwVW32qrHqul7D
77Q3ZhDgPRtIDz9Y6QfzGIp9LFPUC0a6KLReFNpVhS51sZNlkz4o8+3qYg+T
sB4kO4ZKv6k6YK4NEiPVhm31wSdGqg676hNX1UlnZcp/uxi62QzdrAeul721
OV990V9f8dc3/LVt3/Wqt7Hma2xyUgrc7AXvDsKPB/6HXd/dbvDTUegzlayD
kXCI4p9keIx+loYeRSAoxFNB+60AjISzYL9eurpbJZc3qk45xJF0Px44Hw5s
t9vm61VTY8F6s3R1u0naSjiPdDb3nzqhnspmti2lLQynVOmRn9ZkBi+SHfJo
kyTwUux/pcRNQRkkarY1pod4KslSGLTkh035AX22/YLQ6DkA6SL97iLTwtxJ
ulkjQy/uuLN0mzzbxlt9Fdn28+yHs0yTPPvhPNd6nmtne76dPOkEstLnhy2l
RUcJaxNqSMH0ZMd8l5o1xEY1oX5VkMyYzt1twBtDZNwQnjaE5syRZVt8w5c6
ShTP0hVluqJOlVWIbE2bKasBS5GCLJgVulN7tviaOb7IGckQGtMGBigxFWhX
hNsu4t1kr5ClZR0oiMpHyZx98angobyKKQPTB6VHClPm4oy1MmMrTVsKk47S
jKM0d1VccJdWPeU1d2kdd7GztMK3uXGH6nLDWKdQb2AGI3+XsTCAaxV3EGm5
FwZwlMgxBCNJsguAhI9xEWNazclxntCwpRbASL7SXqByDEaKXZ/FG2eckXzX
h+7aDhjJWz8i55SHU/+diPdEsA13AW+RIN/e6x2+1+YmwWrOSIf/gZE2qOe6
zDv1FiiJVJ3/0oixamLpIw5IeDRfL142Zo11uut504q+Qo/4XzDBgZFIFpLt
klCVUR4T0DAXe8fAiIOAsUiRxFz/+jzRjAAOnUVbcLEBjeSx5rNYkyzyRhp+
LQ2/PY2+Z6mkDgyAGAlpxMMBycxacitk1ZrlXLTCAUmXXkLQBhwxEmlckzxR
jtQhnNldd07gK4iCRVmoJPfmThCerMCbO/KXhMAkT14ATHIUyRTJlls1Z+Y4
nyOoqS27jFNgTs6ZErPm+KwpOm0OT1lCM2ZEcNoUIEwCI+mu+jWOHrW9W+fo
tfhGrP4xYNJVeN6fXA+mtyLZ/Uh+L5jfASO5c5uCwLs999sDf4s4MUhTYWJY
khgk44kUye+wdOsLSfRXxkjfi4I/s17vN6cxYiQlYyR1CpcKJutOrMq5jhmr
lqedC1OZWR4XqdCIGnZYnRVnJE12TJXqx2WG69zV2Kbpj+uN3B5gZMawwN29
mY3RJBNGngN0cUaSRztlIaYk6e2UeHvEnm6prxeMJPV1gpGOXW/3bc+2TN8h
Ni//tKL9F2DSoeOF0N0k9gKQWqkhjjESAEMSbRWG3wrDr0hpJPqe2Y/2KOKc
kaj0CMhkLI9TmWV5kTcwkg8UKZlQQgkzDmZ/TYFETrikifEL2+vKs6AjVX78
okChKAzKc6DQvvMMBdFRoksS65DF2/EZADnCYOtZYoAJnq/gjvBeA5CoYDtQ
P+WM5KoIaJensGHILZBtX6pPHu+m3v9YBxVse59zRjpw/XbifQtGuoiNqhJT
xuycqyyKXBvC1yp/XRy6kYVvzjxVEc6FgTaCWaalMHHJys5NhXku62rBYqRK
ch+a8pKiMCPPTUlzvceJ5oPwq4PICzwSKYV/E8R/FUR+E0ReCuNNkmQHGOks
N3BeGJKku+W5cXV5hnqp6CRO4E7EbIUbk3wK0v10TougwRVH9YBDyF8YqboG
rAJPYrg+TbXq8hNXmI8eyc3Wg0GmDoDEmLxgyvWros0XkXfq+HstJoVYLyn6
ppdN8UlzYorWs3SHTl1mx3RY96V7eBUZLlpFqoMLz2pyQ7hcqXyoMEWOSNWd
qzoGKCGz0D3iJtSkFHQtBSD5yPXpFE+eGIk29XYcxVVLeuoyOWxMMChKj2gT
/eoY9VzrkiMGfID0vC1Dhfok9VaY5D1KGMkJQphgLw4yNcMWJ0k8OdN+nmnD
uMTWbh/OE+9oBZd8I439Igx/I4z8URz9kyzxw2n8x4vUC2XqjT7bivlOkW3V
FXst1Sl7leQFqEGekjnroAughQNcURtlu3JjYCHbzbqpPssS71MG1n4OyL+s
0XNQPWOkVS57iwAj+e8PwEhUePP5LPGvCjBS5JM0+CD6ykje+x1qjm4ssdzR
qr2+7GzMUaqnPkfFrtezYCRDnRhJVx6kKPZq8r360gDJP1YnzZVJQ3mQckql
PjASFSaVB+2VcZ4psten7dUFRwOkN09vJtgbw4+YKqMAJH2xS8/qsrTFTm2x
nTES6IhSVYyRSPhOme8ChvGcgKkyaKmDjgiQLJURMJKFMRL+oqMybC+PWItD
7vp04HoxcL3grU+7KmOe2hRIyVtd8tVWPY15V3WearwZKTEtgq3Qw57/YRtw
yLYaqd0PjBT7/TTxWY4DhQAjcemk4McTqmm/P+aM5LhZdt1vcEbCkQRfeX8/
cX0U2G53wUiY1+x3K667LeZjQozE80hc+ZzbxDw94V4PhXGs3JUJYNIHWeid
Ntljzo2aMmPWzCSzgyc0chRHbcVxa2EEB1mVfqtIv1Bm3irT5EuiznVxF1qs
XxS5XkWODiPra+i+yHUwNGoGf+LwXuS7GIX2IFSFbl2x31qbxbxPPstV3BTb
jsKms7hhyy8a42PqYB8Y6czdrPC060JDpvgU7Z2F501RkpH0J47jhVMwUqaq
SZc1mYq22DDma3rAUqJyES2e+rNHztS2NUFlt5fxGcx0+iA5YJIzeKhNQRoy
LPVdIArCQhvziKk0R3Z+VPm8SuUNlVnq0ipMAZDstTl7ecZanHDVZp3lWTCS
q7DkKiw789QwbqNy4kljftyQG9FTCqVHmQJJtqoy7fp8p6HQA4wnO+BcpzLX
o871EFImu0mJKN6rjvVrE8OX6UlalKVnMEG78uv+8n6wesQZCRGpYnEqZEqk
u2AkX+M4+niGCN5+ZaRjxkikhwk6woTIa7Z5XxvTuj8AIFkLe6bCOk8ikXNu
kaq1qf+FWlYXL+vLpsYKwtJYxZ2OsF6vXWIFVJtG6KtT/5GRDNVRBn7UAfdF
s3RY/8UHB6Glnbg+gCIWa2AkefwDZyRKGcXoCbhIEnoj9P8mClA3pSzyTh5p
wXlRJwd16TFLds6QmDIkZ22FNXt5x5zfABph+c8BSZNc0KYWaQLKzIOR8GgF
Xec3rvJb7sKBt3AMRgoUpP68zF8QgZGuUvtXmQNf8YT22gpHviL1uDmL2/b8
mjW3QAnM1DTCkpxxZJbwaIxRpwC5XUQnTaFJc3DSEp61fMEko2dI6+xVWjsv
LB06Z7fVP2oLECO5IgtPjJTbjRb2g/ldb5Yqt4XBdmGwUxzqlcaGztPjiswE
Hk8TI6eJNgzap0liJFH0t+PwT1S8F/xBnHgpir0hnyBmp8h6vgYAS4pEK2Yi
QALTeaCUEfcxZwU2q6YciVjiJsI/Zc4sAC+55hWA05CdspVXvLd7tH1PBf+Y
NHedjXV7fREowk8fq/QYVqfGNKlJTXJCEemX+tvF3lZKHLnbRO4Oxkh9Ym+P
yNt+7H6/b3+5bv1+y/rTpvnXFe33m8YfhVevxa5mmZsMXKT+Vvy4nNm5yuNU
bS6Ovmcl0O8wgfLcESVRk33U45ZdMBdoecLt8/iahR7JrJnsojRFch6n4pni
JK5DUjupzGmK06r8JNBIWRo5zw9QmiXbKU11nmd7eChy3bJkizjWJIl1CkMt
x4H3wtAHMJsyNWosrGA8dNdFV1UqH6IGUuYpzLKL29bipjG7pEtNk6xlolce
a5eGmoS+N0LvC7JucT4/ceP5B1mwmzHSxGVi9ap4EG5Io43TSF0WuT5FhOpS
W3mDOoszTFX+ycBu/LI8Y6otAvCo9q+ypi+vqkvzyuKUPD8qSfWdxDoEkQ8H
4de7gefb/l/2w89PEu/3Iy92Q88Ooy+PE2/wpSTVdprpluIYZjFbjWONw7ye
h5S5PpCJJjd4kehXxPs0aSpCw7VhqWw5G6ReSDLRN8fWxjZWRur8KNkpJltx
e+LsO+qb/lsJk8hYd9UXnNUZ4g0sfmNvFJHn56EXqnCTLtoLXHHkSI3KkJi8
TIzTBJGbMaTHNOl+DX5bpk2R7SAF4GQP6Ii59ZG+Gb9KbU8WIftfJCuPvzTm
i7mRPf66F1/WBM6KgFzvy9vuyi6uZ0t20ZCivldew0aawPEhbWqcVRLOIGjL
LzPLk0h0kCkPuQAOtDUObY19U31TU55XlcY5E2IJj5U7F/+nD5xulqdegZFO
Qt8cB/94HPpnSfQbefLXi/Qbmt0yrepsC/VXsu024ISzvuK93vReY6FKpae2
2oK9MWOtj2EhDFTAl0zneZ4az8n4dYyrRWHMpFKl+rKlsWy7XbZfL3FJAU99
O3B7GKGqG2n803nqd3X8d1X4o4yVJwl9jyee+0PPw47rfg0sZKlP49F+Mwda
sxLhTOK542bRXJ3BPXJZHTBUwDM93EkNH8Zam7aUp6nwvjrPsGfYVB24rPTi
0VIbt1Db17ih1GsGKTVmbPVpPMGXxtIwdSWXwEWt+nIn1TgV+2nWLrWTkX2x
X1PqxfQNNJKnWxGY4pks8KipNGItDdurw87GkL02YK304NFS7jWV+821wctK
P+ZBa6XPdTPirU8iXKVRR34Ij+7ymKuCiXXKWR25qo07mJSTo7YIIAS90N7i
7a7nbtvzuOV5XPPc//9MvYV2I0m3rftk995z9vmhubvYdpmZmRllZhCDZVkW
M7MyU0x2VXXvcd7mzhXh6v2PsYZGmmQplRnxrYi15tzwPO8Fv54m/pKDKiPf
5MGvt/6X68C369Bf1/5v567GgbW+ScFkCfEleZd8uQr/eev789r1cmqry/gK
AMJZJ8cKLqTgbsgQACpMnbwlnPIFti9jL5F/BEgAIyRpc0UGHlIT5uz0kzDH
vSqswoQzN2UrTgI+8Qg+vBf7dJkOrfBZk21SZts1Ug/1G+b7NbkBtdSvkHrk
Yvet8FkutSly7YyOOtS5LoJPsVuZ68Vv6nKD97kRc3HWSfqcB67iIVsJoU4x
3BcY5M3JOUNkXOXpIxsIf4cmPKiPTuiCY/rAxENo1hJZcER3g9nLREGTLhsy
lQeh9ijWTdmqEciUKWniBXlIPPNm9p3pLUdq05ZcM8VnHuJT3O5WFe4hj5Lk
MJIOLrDM18DNuSWSbclRswaJ/EiTyP4eJepkBBfZ8tN2adJVmEE489OO3JQj
N23PLyDhstIu25Q+O0a9ObSI1IVbT5FqVmdb1Nl2JqXYRhvEORrElMk+2qVi
PVz6xDAZRsRH7xNjGH+s2TlHdt0lbvuKR4HSRaB0GandRuu3wfI5yX2Qo80+
kBLHuKeiXxSB2k2gcYLw1489TIgMyORh8pLuOtWc8NYJ5n22Z83LqBiStd4g
U2ZlaUukHcH0tai9pbgI/MZdTGvCtQ378zauNNzR1JHHunoNhVEW4/dFKj9A
kCZkboxscYSRe5H4kB7FIVYJ2QtEZEvZn+9i1Od4Ff9wHnl7Fvj9Ovr2Jvbu
Ivjbmf+XE+8Pp74fcXwd/gB8UkQ7aecxNf6UWn5MLJrTazZxG4HZn5UPLTNR
I3JGwyNjpCWuhmTJbtilbZe065Jk3tyRD5gkHPuzJ3wRyZs59KYOqKBaOA6I
Jz7x1C0euIQ9R3aTQxHlxfFpc2LGmp5/Ss6Bqx9jS6boojE48xiatEanH6Oz
iKfILJDJ4B3he214vHcMPvnGbcEpe2jaEZl3x1e8yY1AZhuARHttmTV3auk2
NqxIjilTk7fxcYQiNcUamqZuSDG48yrWfBr67TT8M6nTB/6FR/KGjpGuspyq
tsBINDtwVU8c8G0LUu+k5mvyxmUWvXRmzNl1Rn3LfO5gxRusbCM9RftB5W1v
45DtwO4iyzYXFgFIyPGpLig1wHd+Mb0qYyOK6PBtoPfC8/nc3QpAOnN2sL22
3ksCpK5zb9upu+nA/mbH8sOO5ee9pz+2Hn7ZM/965Wm583beuvtuvG03ga7b
YPdtuOdV4zrWibdzFW5CECMluhUx0nHSpMhW8iG7ZJbI9c8sLTMdCTJiJlOb
wsI9q3KhBVhQtzShFse0uTEdgyWNOK3KjisEANIQmOEi0cbjOtGJYIzUdxXH
l+1gpPNQGxjpNPDpOtxxF8VUO/eY3wIaAZBseSrVtkn7fPuVdmCldXLfS01r
4iNk7/LKSO9O3X8c2n85tP965MRxM2ckTWLKmFjBJeotkOm2v3jOmyx85Qtb
cRvsZ8zOcPNxWlRBHiGSrh056eQWAUj63LJaorLt2/TQebz7KNy6H/ggC7zZ
9f8KRtoL/AY0koV/2w3+chD+/Tj29iT6/jzeTBLcsXbM+NRhmpvVipPK9CAy
L+Rfmkw/08WiWgJwJoms5jatpQNnjXw0AEum4qYht8AYqeuWMpdmDFnIDTEC
U2dHfgWTlCU/bsSFl2gBHd34f7n1/y4PfNJHep/SM2AkjKXIYR/iY2YmWmVI
jqlw5SQ6VeluvAZlivTJyfMuQ02pj7nl720j1FfrfHUFBRedv0qaVM9c1Qtn
hb70sHCWTuw5GW0u5HZwUyP9QfL4QIuihPEAV21i3EAm0UwPn/nggJdINoQz
kjhDFWuVLd5KZiyu6YrzmvykShgiU+NMH2CS2UdSFq9Kd8iTuNd+PQv96yz0
f84j/3UV/QdnJFZL2aJMNmvSPZyRkCzbSivuyiav1yKdyeKCtTJnqUwx6phG
0oGZ3VKhxvOHwoSp+CqGQINnfgIDrLm6xACJNCrBSGAtf32fDDuer+J/Kjgj
hb/d/M1IrmeZs7HtaKw9VWYfS9N45L3S+KfAJFuVGMlcmjORpdqwId/znZGG
TfkJ+rXiIq191aiqnJaJiqOmwhArqJ4kymKMhO/g+LEwacz368UuVoI1gKRe
K7bqpA42a/eohC4qQxIGkK0AkwBLYCTi4QyuwG5mhTb8II2YpWFLYdhWGrGx
FaTHXOe91GnMdZmK/WCze7Ebx5Zin6s4hnDmR+zSkCM3ZMsNWsT+J2nAmqcV
p0dxiNScijM4mWz1bJ2a+543XS8brpc1nApXfQcnB4wU/29V+E9iJEToL8S1
7+sZsAeTF98EcTb2/N9Og39dslq7K/eXM+Z2sYt5zdbYsjW28QuMQvecjR0H
tQqyZSW2wkDFKrVjvi/jKG/i8zLlZnF1aUmPa+xJoqnfUVhmsejMz7kKs47y
rL00g7CUJk35QTChQerUia3aXLcu36fL96vBlmKPUugGIMnFrptsy53YSpgk
ECZpC+CofoS60K8rDICpXhmpuknmLGT/fUiAVHzdg0ZqYExO6sNDikAHUU2w
VxUclHsHFO4hrXdU75u0hbf8mWOwUKqkAyYJtQex/pCt3gsVQ7qiTZaU0cJV
KHfikw48wq4ru2VJL5gxa0SHedm2IUkN5qQDwOqxaXmfMRL1REisWYPajWcB
4ZQ7FBcdhXk76ZROO/P/w0gWadIqzVilOQTfGtABftI9ymQbqOAu8UGR/qDO
tmqENmCSRujQ0WpSLwkzilR5yEpuRqnqJjluSkxi/OGM5BZ3A0VqagMjISGN
1JCTXrqBteV9vtfmKskC9fPw852/ek1OgvVj5gbI0ffVY8jTOOYKurxUibWz
ESOR7QLtuBEjIdviYhH63CRyW1ZeuAxG4o+W2hohU3XBVJ55KE+xmDCWxo2l
SQQGBATSJTYaTBpYF+2DOK4jU5sBvTCoy/bxTf+7WNNV6O1F9N1l7P1p6I8T
388Xod8vIwCknwBICByAka5C7xkjdWtjtKhuTi5QRdDrDtoGY6S1h9QSByQE
6MjILGIRD5k1zkju3J4nfwBG8oqHnuwRiIjKkDLHACRvSubPHASyh/TNzCFT
MdrDheHIrNhSC5bELMKanHuKzzzGZ8zxRXN8mTApPPcUmrLFZszRBZC5JTr3
GJp+8E3ce8aM3vFH35gtOOMIz9nDc7bQrCOy6Iotc0bypDbdqTVHfN4WnVUm
Z5g9wbo6uyhPzqoycxphTp2dBQJhrL6Ot5yFf+eMhDgN/3gWeXsRa7pNdCiQ
OGdGeTsPr3LHAWicLGCYGw7ZReU3yahXXMa0bkovPmaWTKm5++TMfXKadcGT
2BSfUKyFNaQkGAGspbXH/AKrjiZAkse7wDDUKxduuQ133oX7Mftf+NrPPC2n
7s+njtZTB2HSmasbcepiPm7eT0fON7u2f+9afzqwvTuwvj21f5AHOtWhIbl3
8NqDNGRAGRm8C/aRx26cJBwVie67aBvbaSVFAkzi6sSIgYps5yzMwMVR3uUm
fRYyCqHdKCopz80ws+YBtTDEK21UIrLaMZUwyuMuO3iV7LmId5zFPp9EPp7F
ms8jLeeRVnm6X5EZuIp13aa68Yjv8Ob989Dnq2CXIkbNgJyOnkTSy3rIkAMd
9xoG2DBx0XF1bFgZfWWkE/ebE9evR45fD+y/HjrenriaiJFiI6rY+H1iAX9o
E7ec4p47t+8vHXtLx57iEd6OSVim4YWpYfBNdjJVzI6SL3NunrxQpQWlOAVA
ukx0n8Xbj8JN+8F3VIwU/H3X//Ne4Jf9EADphx3/v/aCPxxEfmZSAG/OYk28
qh+TvkYYwRMq0lQIBEpBXAU/3YTbeB2akcykNqyAk9qJvXRsKe7hOtRL8/gr
8PlN7NNN5D1yOgCArbj+lFt5FCYxST0Ifbpkpzr66cb3x5XnFzze+T/qYn2W
DK0jIZswRkcM4b772MB9YgRZHiu/7+fCs4Rq6R4tiQ9P4EziY+Xb/RiIWBy7
qifc14OOy+TKwWVyHcVjAJKveu6tXTgLB2xPgbIeq7BJi73iDEniv17SM2B+
BK75h9QCaJa+ySwgeaftQ3GZmUDtmMubxtKyoTCvL0zRZUP6A6PEqNIUE1se
w4BMHdnxP87D/z4L/eMi8s+r6L9u47+o0k08v1OlWrSZblIBKkya87Qz5alu
eGubbmoZ4Btec2AVS3n2qTRHWEJqePNcL4WLIfClJD2SytI8twI3F+af8oug
LC9VKcuC9dPoy3XiLyUYKf5NxUSkX+uR3A0Z9fhXV6g5+vvzk+ZeZQ6v5wnT
cYWa3Dkj3ef7qXA6N4TsFXMrFXWXmVJ3dQV/ZX0VopllL3UaEPVYRALS+5Af
xLExNwJAYhZsvax+qQvTFoLM64mRujVSD+4+7u5B67okgdWjABWLPYbcIK1c
SUMAA85ITyUgZf+D9FknNOmFlvt8hzHffS+1G8Q2k9RBHXa5PqvUZ5N6EE9i
h0lof8i2Pea6TVKPMdtjEHpNuVFAHX+D9vo6VV83VpzPeCQRJJwcYqT/qw7/
qQx9U0T+UoT+kge+XXpeTmx1mfV5y0KVtNv2xr7vr4vwf9/gR74vlwyQZEAj
BkgbCPCn63nX9bzDlaZsFSYIVt7AIOmu7bHiBFp1x7BJKmFsOY6UJ6UJS26G
NwA6S6s8iJTK847SnL0yby3PmAvjgE9jnjDJUOwzFAcIfqReAJJC6LxDiO1g
pFvhs0Jo5YtIumKvoTyoLw1oigOvjARiLEw5q+vexn6gcUKOLVWyd/GQi9OG
WVgwpidAEZpIjzLUrQj2KIJ9cl+fyjeoD44ZQ1OW8Ko3sx8v3aVrGqFuEBv3
eMxUNdmaHo/pijJZuUtUbiLls2Dh0JuTOcS1p+zCQ2oKNzVSJGQlD8wO40GY
5ZZ2QCPSomciG/jvj9KspbBkL7MzUF62F+cdxVlHEYA06yrPu8pzOLbmJhG2
/LQ1P83ko8fABqyTtF0e/yT/D0bioQWKZ7owhpBKfBIvY8yUnUAiZkpPm1PT
T+k5a3aBF2wHS2fh8lWwfBWqXIer18RIpYO/GclZxJ11Enq+9lev+DoSOJMt
Dx4AfXlpLtvRZtbq33fiHCXAEi9I2zXntoxM69vITEyQobN2jHkEDkzlOV72
z+IVkEyVSRbTCKQzuE8RT1z6qUDq7qBKBO9XAibxDUe26d98HQYgvUWcBH/l
ZclnwZ9J/MH7r1Pfj+eBny9Dv4ORbiMtSEiZE+sYJvqn7DJJKKeWH1OrlEum
l8njLDGviy8aksvgIh6m7PqjQByFrNOTl3kL+778oUc4AAXhETjkScs8yT1f
cieYkUXE46BwRL352QO/sO8TdjyZDVd6CZgEQAImmYFDsTkw0lOCzL9YwfYs
OMcaXbTFlvBojSw8heasQUDRvD284E2ueRKrzugSwhFfdiZWgEa+7KYjuWSL
zz1Fph7DY2rgXJ7Mm/TSuia7ohWX9bllrTivzo6rMkM3idbzyB9/ryMdB/8N
RrqMN8tTPSQKnZ1gZvQ0DZE1VWoEc645vwY6Yp2Me2Q0Rm4siwYSTnzdfdDH
JylSZHpCouUsuMML0/mcI3eSBPWUAV2uI58vQ83kS+J9exEgk9wLfwc3tAUJ
HDmaTpztp66OM3cnDk6crefeljPvh0Pnr7uWf+zbfjlzN527Wy5drcpAjx5v
1jeq8PfrY2P6+DgnJVqbiveRz0iiWxHt1CRpCVcTp6bFh+wC5mVnQUbJUemA
27jYCruveqelHXNhkfZzxX6t0Ic0VpWlRX6VMKzMkkMu4jrVDTo6jZJzx2ns
w2n001m4+TLWziq3qW3wNtl3nei8iLadBZtY/37zZbD9Ljqky8yYMjtMTXST
7azNaclvjvQ3wJO65JQmPqaKDjGb3e+M5Pnt2P074PDY+ZHvtckjA/LYsCY2
aUjNA5NeQR25XonaXc25DbArrVQLozqB1nmoZjhDnnGgOx3S0sKiVpqRZ0eu
U73n8dbT2OfD8Ic9/x8AJFnwVzDSju8HxLbvH5ue/9ry/u/dwL/2/P/aD/54
HPz9KPAbGd0mWtnCyCBgW5HslCfa7uKtl8F3l4GPt5F2TWr4Xpx/LKxZSrvU
5FU8MBe273MrOnEGf3KbbCNGir5VJpv1Qj9GfsRDduA+26lLfVbHm5TR96Cj
a++bW/+7W98HTbTjMTNhzsw/JsbvI/26UKc23KljC/LUryEynVJKEpEcUWuq
MTtjz295KyfIf33VY/INZwPRf8QBF5ezFveQuCGDAzIFateB52vacZN2HLld
pDx4tIqrGJlxtYCL8Iggw2txhW+1kzKwQPX8D3ky1dUzRnqqblA5ZXmVV/Uj
NOIkCZKL81wZ+AmZQnERL1uV7kA+exH+BZh0FfvhKvLv2/hvmmyLNtuhTrcB
G8AMpsIIlffkp2ylJXd90/u87apt2GsESAh77ZVAbNVFjIqY1jEqmjFRlqdN
xUlu5GTIT4BbmHA3JpoFW37FQ7rW+5yRYl9uUn+pOCMxJ7JLzkjczp4gh9GR
vUrzuLW8gichCcTitPWVkSapICo3wAGJtgXLS69lNtUdekmlZWRGr5avoLgS
2UWZCmN6sYfvrxnEIZ3QrhU+4zsGqVsndOKNa8V2fY7KY3DTaWn3bYL3BYD3
AEu48MgAEdOZ1MdUksBag4+FQXMRM/vgQ67fIH3UZj+o0h/ItSTfYci1A5Me
8u0PYudDlrgIdGQWWh+znx+EFsR9tvVBBEd16LOdDN6GH0sTluosrbzhlNYW
rQ1iJFd9D1Nb9E9F9L+JkSJ/qcJ/qXxfrt2NE+fLMW2lNTafapvESC8H3j/P
/X9deb9d4KeOmsxR37XXNjl00aZnYxWkZH/exIGlQitywFfaBi2vO6pbTNjz
lGkLbIOR8NFbQbmFaYSlCBZadNWo3B3Xg6ex46xuuiordqBCZRGYxJbpxkzF
QZxAfaGXLxBpcn0qiRjpVmi7zjTfpptZGVKbSurU5LvBSLpiv7bQx0OX79NT
Dfw4Lio8v+/5gOtO4Grx1Q5sxU2TuMCmhtH71LA21q+I9NDSva9bGRjAOGyM
TJqjS+7sTqR0laoqgUmZujZbU2eqqnRFTYxUU6VrimRdHq9dhysngeKhs7Bp
k5Akzpmz05QrCdNMT2Metx6CabR+D5FKjJiyPQBpHbRPlFhaAibZi7Ou0qK7
suCuAJn+Z//RVpw2IU2QRmiVUujFBabJtKozzeTBkaEdN43wGdcbb8kEJmHA
v0+NApCQHNHrycw8pucw+ICRnMKGJ7cbKJ+EKle8sAEHgdIZ2S8yRgIgkTpT
7SjYuEDOxdeR3FVaLEKAkfzPF1xqA484RnjrZ0yHn2ESUwl4wpQtkYOAqbCA
gQWE8x+NGFP3XMWdWf/cl8fvi6z6qDT+UJ7AXW+pztnqC876BgLsba4ukWYa
meCQXSBXS+aMpExQYSRVRcaQ8wKT/jgJ/nzo++HETwFGOvb9E4B0Ff4DA/VN
5KM81goMADrekwzCLGsuXjYll3gY4wsPyXlDfNGYpC42at7PbppJy3rTKpIs
tju3ywCJwiXsuTK7HkHmTu14Uju+5JY/tR3K7EayvDH/MCDsI9h2GBhpxZla
tCfmn+Kz1tjsU3yeWv4TyxRRpo8UmbHFVhyJNYrYqi2y7IyseuIbeE48gye1
6UpseFJbvsw2iMudXndnVh3JeWt8yhwZNYUHmQjzxkN+25DbBCNphCUwkrG4
hhEb0+V1/DOXETv0//PA9w8cnEXeX8U/K9L9lPNSRQdt49KJZcVFRtq/WOUu
vWwdafsht0QN+4kpdWzckJhiJnETmsiYIUEWtPrkDIIvJZF1bHJKmxlXxAfI
uzbSfhVuOQ98OvZ9kDn/2HP+cuz7dBFoO/e3nnqbTzwfj1wf9+3vj5wghLZT
T/uxqxXH9CPvW5n9ZzDSsfP3m0AH8pc7b7cm0E8dqYEJXWiUfEDi49rYsC4+
pI4PIjSJIU2yl5oWU2QeYUzhyl+2iOuYRl35A4SnfOyi+1RG6UDpwFs5YrI2
q0YyU+7TCj24caiijzo+BuWZXt6TdR5vOQp9IInFWPNZ/ONx+AMY6SbZBUCS
pwfuUv1gJHx5Fe/A9zkjUeV2pJd0pdKr95lVY2YRRKSOjSojw3jUJcmBThcb
wzFbR+pXRLtvgi1nnrdgpBPPHyfudwCkSz+JI92E+24j/cromC4xjfkaGE/2
N7lte4kEwPldRkKdwog63UfrNvF2xG2yF6+NO9LiES+VBEJjLUcR2mXb8f62
7f0ZseX5YcP1jw33f224/7815/+z7vp/tzz/axuk5Pvngf+Hw8DPx8E3l9GP
d6l22jNK9crjXTfRluvwp6vQW2qCCLeBTplr4TJ3fLYUdh7zG/f5Ra04qaCa
9rbbeNNt9MNd/D3uU12m+14YuM90axLNiugbisi72+D7u2DTnf8jGEkV/kym
MEDx2IA+2q0JfdaG27XRXvpkU9TlqktPvu4LU6YziCHUWz7wlc/waYKRXjW6
Syf24gHb+t/hGExNxMxU8Sm/A0YKNW4DdaSER6QRVzj0F0/xiPTHkV9jyt6b
ZmmdLzbiEZ8dlSN+b8wE83DjCROy/uq6ubJGuppMEgGP93mywLaUtrl7FDNb
2SBNLeBrGmz59ib+mzz9+13i17v4GypDwljNGOle6gcj8d20vxkJj44aUsVZ
a4mqVW3lBWd11V1fx7xpq7125WOotJRn2ZI7rTJZCgv4cxtYpbDmKm0Haoeh
xjGpA9VP419v0/+t5owU+/bKSJ5naqxgXLTMAYl4qbJJNuWVVfacM5hA8cym
/MR9jqodiHzy05joybasvsMLbJjZKzmbc8NcwBIQi5L63IhOoKpsAqQsbrHP
6swnvF/AEvESDqQOfa4TqT0xkjRA8tRFKkcHJumkMaqBT/VQKid0A5NAaKY8
BejIKPUx0HqvyrxRJN+psp8MfCkp12Uq9Dzku41CB8ckU6bVmG0xia0PUitV
yIsdBpFeAP7cWBik9THyQ1kylRdYPfya/XnH/Xzo/3Ie+SYHIHFGCny7dTfO
nM8njucDa43a1sBItud919dT35+XCNfLKUl3VneYVhJNW0REVc5dywAkHJPG
SIGMgEFKrDB+w4u5lbx0D0CzIAFneZljABUnl+a/f9wbBDAve+7ajqOywoMx
89xTZeqhOKQTe7ggA0KT7wUOKYTWm2zTdeYTa2SjdSR8k4qRCj34BXWOHgmZ
8rT1ZiqN4qkcNZDYdqhxyvUQvI1DR3nzMbdEc640aZKm9GmqnJSHu4FJ6sgg
xt4HzD7xeUd2M5A/ChUuYsXrRFmeqsozNUWqcgdqytTV6WdNqqGMN24i1fNQ
9cRd3HUW1u25FXt+yZKbMwtzXOnIll/FFYsbEGHPrYKjbNIaAkzlKm7hSnaV
NwmT6PwsgJGc5UWEozQHLuKA9FScMBfGH/MTXJKdFEelXr3YBVLiVxpuN3bH
tbFvdmvSXbTB/Z2RyGSBDDqBBIsIh7iGud5XPPJXzkP1G0SgeuErn7DeNJmj
vGsvbZHNXFXGe9le+/2pNlvGGOkU7BR6vgw2rgiiGues9+2Y8rUiRiQSLmPC
OOuvigfFRSpNz08bc6TUx3qIJtji8LCuMKLNDyJ0hSEDkpTSKKieVDFr8476
sodpvYLJn6qrj+Vl0uGXpklVEjMaxSg4UJFslydb7hKfbmIfrhNvXy2PA+R0
jOBrJhfBX64jb2igjjUpE52G7DBOy0N6msrXqRh+5SnDFpEYIz2mlo3MiA1Q
RBUL1Ju2y453XdKOhwZVGQDJm5O5xV1ndtsj7Hoy20AXKhBKbSGC6Z1QWhbM
UHAJIw9DGndmma8mcVIif8DEgjW1ZE0ugposUTDSkiu14clsuVKbzvi6O7nN
VqUO/eKeh9Bo2yfsBqQ9n7Dlya45MkvWFC7RUWOk/z7cq04v6IRlY37TWNjS
iWuqzIJGWLgvrHJGuoq1cNceANKR/0fwEhiJrQ8MaIQJzLCs6XKKZh+qYRum
PilphUvCYsoz5dZ1wqI+u6COTyojo9roOEIdHlMAVBgj/Y1J+vSMLjWtiIzK
Y4M34Z4zX8up99Oh5x3zyHi/73qza//t0PPp1N9OFu3epiP32337m13LHzLH
hyNP86mn9djVcuT6BEY69rzbtf649/Svcw+mzj5dlIzbtMGhh+jkfXjCEBkH
LBkBbPFhBDBJnxim4qh4nybKsoPMDOjXJm7YpR1nbt9dOETgIveyXSqSAisd
AZlIAbW4ek9egT2YsJQp6oSlrD/ddZPsoHrsWNNR6P2+/81h8N1ZrOk0+olg
Kdx8l+pTZofAIQjOSNeJzvNI61mQFLPPQ214+8rEoD49r0/PalMTqtiAPNyL
UEYGCY0ig6Q3Gxv7vpTUfxfuvPR9Onb/fuJ+c+Zpvgp0Ao1uI4PM/3dAlZjQ
JnGS5/RJ0qkwi5u0GlbawWd0Ly6Q7WBmCFMJmRrEOrguKF6VKjtOHXmZMSDT
VbztLPLxIPzmlZE8v255ftp0//s7I/3vddf/4oy05f6vXff/2ff9+yj4y7H/
j7Pwm+v4q5yCMglgayWbOd4BEe0AI2lSAOw5IDRtuuWWkRZxy05yGU61K6gq
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
qKEI1uV4Arspn7pLe67iLsyaWydMyiwoUlPyzJgiO3aRHjqJfzhN9Jwl+k9i
vV/Tbd/v3vzlOPQGUIRD1eenYThUTXb0It6rSYyqE/2kWV2YcZf3/LVzf/0E
XGEpLYL0dLkRZfKTLPxaEXunTffoMn2GFLcBU3rMmp+x5Rfs+VW3sAVGuq4d
Ud0vvGH1MFjHmqmNdzXY4/Cy/Jvq3k0VNzK5Bir0/TrLPtA+oTR0feeqSb4b
X5whj/PZo0sP2EvzcBnUDVo5pjGFtT3SKqwu4srHmoOtGVDWIsyweNQsL8P2
NPa8LSybFzcdBRiJRWXxW6yLv7ZFdMTAjEdrOdiAuzzlTV91jyfavtoJG6XH
Hdn+TfMofA83YYw+6O5aytumAsamuJ7dNA/9tR0siVj3PLRGrXKtAJs4SRlA
bPwl6hXFFcsKgSiegx0TD8jjGiaqKY3bpRmWVdnC+cFCjZN2Uz9+kfgWZs0F
pqmeensW/f408oMy/Rq3G999cEYCYODP8XpI+nM0H5D0SYAflMyS5rHY4iDp
s9AyfnTNRofwT+eWNjziLq4rqiLDxVY5DVaOSM2stOLIzphTw9bsmKMwac+P
uYuTXmHaL81eV+b9wrSvOHNbWYo0WFN8dSdU2cZiG6sdpWrnIIpMTZ5lssDp
piYG5i+tAZBgPnHtGvdgaQxeHk7/stSLLZhDogoZSwkeZxCriqbwTpn9RZb5
4Sz9V0Xur8rcT1hY8LlwfrA+gJEi9+fY1aafVckneeIRO+t9rtPoqy6z/N0U
nXxq0WVNVaSvS5M+aPEpU0MNT8Rgv4btpL85T9m3r4yU7spyXU2xY8i1NPm2
FhvtAmCppcjUZbmmPNdQAvzErlXs2sV7R+2zX3r2ApCK93YwUu7ekO3qMl11
/lEHQCr/7hQ/u6l46fFS/IznTipf7+riHSXXn+elqjyM4K/t8yoL3vJPUw6x
0AkTVD7ExouTSF3+vTbzVpN+Z8h/IoWxzCtl8kemu/J3bfZvmsyfVKk/gJT0
OF3ZV5biW2uphwOStzYNQMJzO82P6H3RCmCD2o0sjmQSP1LvVX3IUR36xkjU
cvVwGnk45tVfMDrn90p8utIj9VIVHo1gpOw9VbPEqcWG8lnhDmWveHMWCRS0
dylZ0NhzNbaxT8SCbBImSV4sTwWcivRbRbbXVJ72djZ9nV28DIbXB7r71639
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
ejf6234cpPQbMOkw+Y4RDlETnuyFX8EOYr8dxV4dRn8+S37ijKTIDXGVQmbD
nJFOk72EWCw2BUDCWx2n+k8zg+e5YUV+VFmYUJemNMK0VpxhJU8z/xNHEpe4
5oCruku9VPUNe23ZLE6x/tA+vdSvE4Z4VRIASScNaoR+damPPR82lket1UlH
bZbrn1O4j/ofV8HkVmnRWJxV5ybUeYodadnYUOPLUDYg9zD2YsY0mSU9Ys9N
uSiGuegorZLycHmTVSKtu6Ut8rClTdZKTzVa2tyEMkVt/kAmVWLSkFpyimCM
86vK2ZV4FqhcBJvqUEsT6ZiiLX2wLr8FNUknfuHIJ8EFy+EISDK6suev7GLj
fFs7jLZkoKPcA7WNiF+swCRchHCRWCSDlf1A9eS6fHAtHgbKx2CkYJXYI1hX
XtfkvvLpVQ2X0MVV9dxbPsZNTXLK9S0uqsy0W4+otKZ6SGGE+vl1jbDBKWxY
ctPY4PioCOqYdUyQRA+LMh1QJRJvzyd588NAS87a202Rji7UVgVbitijMfF8
mX12AZCE5xvpOQATnvy5JwfVk9dVwZoMfjzSvAg1ZZG2HKyYfrQVfvemH5yJ
ji3atKTuHaAsWOGzt/rPUPO/EvV/xqTnu8KDN/PgJHXuliXaMIVqylBNDhS8
rp7Ziyv24hq+C1tpjVKcJcqysSlv8/bKlps19eMOAilRHKl55q+d4cOCr2jO
HZWjr8DYOLaTm/LpbRVHqE10rakHe7JjBSZFGlpwHY2Wq2x5pDXqrmUSl7cP
igSI5dmSerYmHi04FeAikpdsHuBPUFTtwZT67Eg+u2DZL97c777MF3vsQceF
DriBhShl0D4jCrrXgA8TrIEu0lUS3tRl4Y4iBp/+AOLC6VUmH1Vw8WHsoBv7
wfrL0ATQEZswdRhskGj5bR1L01G4dRrrUp7urim/ru1Tc1yXZJdc1UUHTeVY
wfpz2z4OP5yzdBvx2E39EEvWVXXfJS1d5mdxwV+Vd4L1I6Kj+km0gien4crp
rbB/Vdy5Km5RykwgiWxrZhp2mZ6yZ+dduWVHZtGVWwUCAYnp624pmVERGi6V
cFtLEgqNE1znvvKOS1jBqm5Kj8HM2WlLbg5fKC48XIdY86+rJ5SQfdSHOyrc
HVfVQ/wKbkDmRBbZCFeSUoS79zdpHqW3Ouetznhr09eNDXxkUjh8ojEZ0e5Z
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
qbKgLU2qxKHb4sCN2AdSuuI/AY1U4qCMSQAk2fdEKw0Yy6NGJhcDcKVm5wox
koOMxZepfKU4S3qP3MhNjgqQEAAkOsQv9GuzfezWHbIW5p2YiMi4asNJfV74
7NYo1RVWTdyysbBszK9eZPuPEx/3I2+Po+9P4x+BSReJgcvk0HViRJedJQOR
yqG//MxIVBRxBxjQJRuqWPUqXrtGgJewFoer53RkViX8jndOU3eX2bvb/L1G
fNQXupriI/lgcg+qFO7Aym6ovIsfDpcRpwj8qmTjJta4DVWv3dKJo7jnELdd
JerCMPMrrA9UFsdbZnfmNt1U3yqx2THfKb4ESmFtovVRWAb+AZAMhVm8WRKd
ru7IB210Qtei7jNqZKvuB5qnVKgMRmpdBZvXsY4GwMM9esFIlV+iiPLXEPfk
TLX1eG14g2CbePM63r5Nd/WpOxMB1WcX/gvoKNk2yZtIAKpU25jv2IUHLwJP
CJCa+Hldum1NtSxse+c62lD7a2c2ccMirpiEpedNJLKSIdlVQ2nOXlewBrRt
YqTSBkYQecCx4zDSvmbVXzIjOUqbIMBwHeR2Q1VSdyYEnoCXwtVLasEGTYnL
tiI1ksiMFLo7w9oNpKEGva4aqz9+p9wbyOynt7yNQ0z1MSZtl3zUpJ60qQdd
9O4GlwvpD52ns0NP0AvWa4DQ/8tIkbtL1td2Qedxsnl3fR+PeE5V3K3DcBNT
ELmT0xFb4wDYHKsfyp2P8daFfLSUuVelH25oN6l1iL9CNdu1TVdtiTTl6uvs
cG1X3kTy1KhD8FdGcrDeGSAKZnXcitHmUZT9fgASIlwBme96xC2XsGrnFiy5
aW1mSI+pPjsKWEI+i/HiljZxxYLVM6b5cMla+a6ZlualjIi4OHT0iZuwvkPd
hRJVZhqFeSQv+DTpUFtcxevBBck82lIPBjqE/babJG+wE9c11mXVFzziTeFL
0sqrzTrrE3jEe5TN0BkIbTClqRO2cXcBdsLqTA5cVeZjVaLKXgx8de7teewv
J+E/X8Ve6NK9WH1oiyYxZo5POBKz9vicOTyFMMSmjfEZU3JaFx1VBnsv/W/P
vD8dOv6qsP520/TP6+Z/3rYTJp36frwKvkIOroy81Sd6ralhb2oqnFuI5JcR
cX4tIx7mK0cZaS9WWI9zG9nKATApJR4khJ2UuJcs7kb4beTp6coxUnXwUpBf
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
TxmWMyY8geOJRWLFJQAAuCTg2jjKLRKmYsI7LRUW4BPgNEy+R/lZxKQy0wG4
m6PbC1zUAX6rC75Vu87EzjPBcXnqsIg1J+grQQAJ608KU6j5Q8QPIeAaIA41
iFIAJNazFds5x37Bcbzhwll2vZG53qgAk5xnMs8bJXa9oY63lmKkwLs1YCTK
WpRo+iG6Y+lvgU1d83slFjF5xC1ainy2MouQAMKNhqsZxKYERXcLmBKis3mB
RqrpUGHyoMxF/4vSEgrlwTEh3tkHaKW0iPYfZ1yIP6s4EislwU8y49oA8eGF
7wzUd1heNpeFiBMVrL4GRgIi8r2Vh/6kC/5Ri3uRFyJK+ukY9cHohIV4pBYL
q9YpgoJ/dVTYCDZYicTzXMgoRoIziP0O2am93NhOegAwyVSaNZXn4ewflqfg
X+E5EO9BYQK97EvTgKy2E7oF18Tm4UdLkeY65XjPJZ4z+F9QIdNeWnGf8rwX
XHtl3lSYMBemrKV51Kg8FblPAZywCApwCHcPSY+hqcx9r3cHPyI8s48BVnMs
eN1U5sABhBQJ+3Gyc8Cf67k5mE0UkQ5FtEkSqhH4qkT+WtSsS/VTpSCkprdB
FKjiw+Trvct0fbtgu75g/QYwCaa2xcNvaXtf03auz2/cnFkDOvqGtvkdANKs
8bsZw3fj2mvjqi+G5Jd6hZ90CX7fL/0coKhH+umw5oth7VV43i3+vFd6eUQJ
jHRzRn9jXH19THF1SHppUPjJqPjSpOz6tOTWrPj+vPQ5U/uSt94k3GzhGRu5
hlq2sXrJ+HzR+HDJeFd8VCU8eC48fCo4esQ/fKSwNejcPavBDo2vFWtmHC/l
7hq5FxtpUdLf36oOoMQuzEq4qeF5tmL7kWwUfse13pa47ym9T7W+GkOgZSuC
hUmm8JQ1Move1jlFPKvLlXfKZyagI4jSqTl/cpwu78VLm4Gszp2Re3Nya55r
SrPNmWVbTmjO8g/SrM34pDZI9gh8DdJQI99XTbf8OH14fXjnk76N33Wp/rpJ
9Ksa/ge1gg9ecT98wfrw+dLPnjE/qObCi7+s5v+sVvhfWmT/1Cb/tEX6Uav8
nzu13/SufduhvdxjuNy9fqlt9ePu9S96t64N7X81enRt1nqD4brD8t7j+O4T
ezLUAhKGX4oiVaJItSxRB5gkj7cqk53SZJc82aNMD6gyg8pEnzTaLgjWLruf
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
/GrjOlOBsmMK6SHX5KECqo2rOeycGTqOcDu6cCVxp3ANR2NCJiAfKXPAnZEY
66CK30yARD64VP10UjwRrx4Ll41HyqfiVawoU/1ionE11baW7lxlspalaGFg
EtUiiIkno6KJGNEXjkxDJdlEN5Q6tDZRDnt6YCFBxahXU30b2cFVCt0B/eIE
2+cOO+cylBqJU8P50otJjNUeius+GiKHV66fGTdkdFKn6uUjFSMlGZfvGWku
RzUocByqcRprBiZxmB+L1WEU8Rw3GqXZXha23QV1P5PtnEy1jCcbJlKSqUzj
dKZl7rB76WRo+VhOWQPgLpY1AHbibsrFXDvAA1cVRLR6PMAxCb8TW7Ku/ydG
2nlpdn9j2/1Gy+xR/cyP1sVtenR9UlKK3zvsxQ4GNo3zZKMrWj0aLcFln07W
480sya6LMRV+gBR3zRYsMvmf6nx5en++MfhEH3oITDL47g37bumDt+3RPFei
ZCotWsg1Lh6B9PpXTgeWTvsXjntxhWeyrTjB8Uw9ZDLdMJmWTuGMMm0z2XYI
Lu/i4QCG4nSyi8UZDrALS2qCy0x6YDLdO5WlZbU9LAEOAYqARpjZ7JF6e6TW
hmUIy1lT7ZPixnKybenD5vl325cuYJ6U79ykitnrl7rXL3Stf9Cx+m7T/Bu1
E78WjP5c4Pql2PVG8+QHrVOfNo1ekNjfF5vektrOA5OaHRdanZcgjSMX6i0f
iI3vNljehwCTxIY/AI0qlL9lrrdflyt/9UL2K/wJLqIAJPU7As1bIu07YuW7
ItW7NfI/1MjeFasuSIcvt+mvdZpud5nvdZrutmivNWq/qlVeECneEynON+o/
brN90TFyudd1TTWbb9sQOXak1u16y7ZQv11m3KUC2rqdx5rN+1A6up1HYCRo
fL0nH6ts2fatvs2veta/6Fr/rH3l4561C/2bZEdS7141eW6PBB7jUZpN1K0m
mtbjnVvxIW/SkjyeO3y1mTvdzJ5scUaKZ+cDiVFP1Lod1q4FFcvBwaVw10q0
B5M/ZlGa9qNdk+FmMNJYuAGzGRhpYPNO28KXYtd7pYbXnir+OW/gp09lf5c3
9DcPev/yQf+Pnqv+uczwmyrL69XW8yLHRw1jXzROXJVOXpdMfF03elns+lww
SlJh/7jc+n6p6Z0i7RtF2t8VDL9WbHqtwvG7mrE3mPxOOHGudvptycx5yew5
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
B64w/sT1xPBjJNnPwwlwWSBni0GAU66bMxLdl2P16ol26Vi1yC7abK6N25EA
S7O5DjyhuIA4FJmYMmREorGUqIWMJ0kmkrVYJiyf9G68lIGRtl9qWQLaMCsD
RYxE1iTyrPWvHfVTkPZZzHwjAyTxWFwEdMTiYpT2GzEtOCI1rngVGZECJUbf
E73njiXwxBp4PhqpmE03LGQaIbOAtHi1NVBo9j/Wee5TJoL/mdr7WOV9oPTe
GNy73LdzsXf7wuDu51rvAxyNVi7ESL3AJDr9ox7gH7/vjkSdIyF2xEXOhJis
SSnJaLIJDwWgCGiEddx4qo1J+0Smezzd5STDUbMj3mSPNpiCAr2vTBco0QWK
8NwZAqVUDdJfgkWKyk19GaAQ+zevdi5/0TJ/QTL9lmjs11WOf612/AyY1DD5
e+n07xsmfws0Eo3ilX8VuP6lauR/Vtj/CYxUbvplre3NRsf7Dda3pbY360y/
qRr+ucjw2wbLH5ocF5qdn9Za368xnqsxviE2vFkz/HqN9rfVw6+Bi8qVv6hQ
/7xc9bMq7WsC/etCwzkyN+nfFQz/AVIu/32t/Hyt6oMa2QfFXeerhi42Gm81
mW5jK9Ffa9BdEWs+F2s+q5J9VDn0oUB5scl8rcN2q8d5b3DssWq61LQstm40
mDZr9Oulhj1Kzcaqnxet1e490e8/gwzvPoDw9ruynWsySuW7DOHxzJqDe3rv
A3Cv2fPQHnhOjJRsWUv37+cMoZPJ1DcrqZdAo4Xk8Vz0aC5yOB1Kj7nDxq2g
ciM4uB4eWAv3Lce7qbZ5YmAlMbSUHDrL00l0Yo0GPQs9KFu/27tyu2PhZsvc
19LZL5vmbjbOXamd/FQ0fkE6+1Xb0p3OpXtdK/cGN/JkW89Vu2XqvSrlNolq
t1KxXTaw/qxnJa9z6UHL7E3J5GWx61Oh8yOB62OIcOxj8cQn9bMXpQufS+e/
lMx9WT//ZfPc552rXwGE+rdvDOzcZGh0t2/ztmzv4dDufWASkdLmzf6N21CU
UJdDO3fke/cASLwn7JlhYee2YuchJnOLH4wkxgSLSZvM+xHRSFBk8wsc4fqR
aIM5KLZFJKOJFntYQqlPEbytkbLCw80zkXbqDBjuZEGhdc5Ard0vZiglsvoF
VnYEMNVIqMEZbqZWWcm+sUSvM9IzEul0xruc8Q5HtIWcOzGslxuwDGdFALju
aOIzD6sB2Iq1JOjIGa7FD6OGbt4Si6+YAMmbDyXlCFQB8MbDQjDSVKRuMlQ/
Ga6di0pX423rcei+jlVqKtFFZQAjDaOhWlewjgogB2rMXjJ50fjZf6zcvi/b
uCPfvCvfvDm0cZXqFexekW9+MbTx6dDae/0rb/Uunetbemdo9RP52heKra/k
G19rdu4bDwrIdkT9uV7gh2EwcPnPmKTdfWbYLrQfVDv84hFvHXXuCNRbfTWm
g/LhXc5IheaDgpaFi21Ll3BbKRlt94F6nxKg1Dsg//uKLfyw2xDN3gOD96l2
nyLKdO4Ca7AMcMtauFbpvcXERXsA4CdkR9p5gBstw6ph55Zsl8K2sYMxIN99
iDdoDp4Bk7Cewgxm9pdaAi/soSru/YGux8XHshSMROnzYKRMF6+9xrLgpfPp
pjlMpAkJ1uNYuUOoIWxQwIopNc1GO6jqVKR9NkYww8osC0aDNeNhMZmeWFEa
4tgIdQyH3iFNnVVThbdU53wSSryLcqZYHhNFjETFeP90tJVlG7Xz0n9UKCBa
Nx5iMBynqHLeT4TlWFFeFeu/Vk8t2EKicRZ5gv2JaAMrWNSGhTwVnEnJZlOK
qfjQTAyM1I9neTXa7z40B09mEn/cin+7GTqd9Z3aN9Ly2biEMxKZkrzlNMai
Egx1jDrA4QizZGJY0sMSrmFm/Eqjv2zYXYArbAqV8tAvrGF1vlLNAabrMmuY
cJTSOVku5yiV/+rAWngB8JCVzaQHKfsm2T6RZkkKiTPjEtUbjHWyfMP/4CJs
v4clvoLAMwJAInjAz/uOkZgLu20m3r2YVmydUj8yuuYZ+UpOuXokByOxzhfy
5RPV8omaww/Pw+K+P97tzkW2skbCy6xs6VANDc7fQ4Gy4CLyifdDZc/lBrgp
CWiEQ2F7xkh4P2MnvA23YCrVARW/eAym6mOf6uMhu9wUM5lqw/DjoM4hBNSx
fDy0fDjA7zVwBcMe5zgSqnJGaqDQAcMTURaLGGulZI0shRJRdZ1jxebx0Br4
CmMjIZ1N1k8nRGPhitFw1XhUiOFBpr9QhStWPpUUYHQtJgZ3Ds3eV+O7R9Qb
d+vIsJ5TUZkdqndEJS4noKzjdVSAK1FPxELhxO3kfWO2HfxyutTpM1LCb+ap
lLziBGckbnBj/jjF+qvh9ZdawBKZlQ57Fw57KCsN0HKixusbrwwrp5qlY+XK
S+XSaff8Ea5J2/xRF1iCLg7VEGChSpkuICX7VRhXwtG4CDIWF0xnGpZOOjZe
UX2n7ZeanVfDFJXNLLfAJF4uYCnbSSagww4ekj0VbwA68mAwMq+lydfGwhsk
rOlVBSYKk6/I4H087L4FEDL7njqCJWSCi4mnYrQgGouVWn2Pjb572oPbavfd
Yd8jpee+3H27f+dK19ZnnVsXujc/6tv+fNjz0BGtwvifSRNbcvcitmxp1oRH
YyRezxtRjcQEo6k6V6LeEaN6CBQGkGrH8gEqyZVsARqNptpGkx3ORLM9KrWG
6yxhkSFYpfGyJmuePOVenmo/38CSIzD7yXaov2fXypedK5cASA2T52vH36hx
/hwIVG7750r7z2qc/yZ0/ULgBDL9U9XIT6sd/1A58t/LrD8pt/1PMFKV6Vf1
I283Os43WN+UWH8nNv5SoP+FQP9rof71eut5YFK9HYz0RpXxtyLDGxyQKlS/
fCH/WaXmF9XaX1ZqfiY2v1FneavW/Ha95X0WufS+SHcejNSg+qBefaFO/Vl5
/0flAxelxjvttketlgcNhmt1uq9E6ktC1adgpCrZBZHq81brnV7XA9lUvmau
WDtfqV8QGFeEhvUK3VqRbqdSt1MO7WPyFPPC/sM7eRDV1l319j0V1to7N5X7
NxV71wd3viJG2r8GRqLmsJ6HwCSD54HdXzgZq15It2OhsXtoCJ5OJl8tJ04X
o0cz8aPpYGYC4k+M7IW06z7ZerAPgLQW7llJ9KwlB9awCkureILnfKpvKtZO
nQoDQgAb1dLZzhvcfNK38ahr/V7P1pOe7fttq9eal650rd/p23rSt/1ogNK3
C9T7JdRCwifWHZAYPLU6t0B7UKXaKx3afNaz+rB98XbT/DXJzGXJzBfgK7BW
y+LXHes3uzZvd6zfblm92bxyq3sNXHRPvk86kdSi+zFkaOcRRgXt7N6H4A1U
Hmf3iXwnjylHcrSpD6jfK2BpiDUKoWk88IIawEXwIDRBKLwtIcGED11J8f/x
JltMCj53JVuxHYlJ8IozRpVzKFAh0kbZYYGWsWC9y08+OP5BFnpKXXepmWOE
vGkAJF4JbSo5OBruc8TOGMkZa3ZQb9B6aGfmp6iGosH8gzXRZAIKuoks7XGq
mewCQREjCSw+uvsAJLPvOWOkImewGioYymsiJMSqH4yE7Vy0YSnevB5vX413
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
BqcWIYPzOepnSs79dC/Liyc0wnFY9E4bIMQWK7ZFSwFLwDAgAUAFc/jy8RDH
pI1vNDvf6rdeaQFde69GPH8adf/Juf3KjC+i1QHV4OpYTPad9Zs7VPEIKFxk
sl4mmsZSjVgLc0bCyssaxhxVh5Xm0jHITQVYncQMn26BkOnmsJs6mxy1zuQa
p7J1k5laEvywdO1MVrKYawUjrR4PABSJFY97ORFhTmPJ8tQchNcU4kGAPDuG
etxTP44hKiKRwZ+dvOIK1bPK6RazuuWcCXccAgInx+ipZuVUvXgsWz4lnylO
ZCrbOZltmznsXnwpW305zKyCCh5wDtVALkXM+Wmqd83fOZFp5tUdiZpiIke0
is20teOxRp6tRtiWagMbO6LkODCHhGxpDGUhYV2PO3hxPEoUikuxeAf/YMlv
iVSZwsWG0LNh3yMwki7wxBx+QXQEZcQrI+FKZjroyHEpDaeYCICk8hbLD571
7jzo2b7TtnK5ZeFi4+xHda7zrXOX+9fvda3ckkx9Jp74uG7qYu3ERcHI22Ck
wuF/KB7+76W6n5YO/7RU/ZMS1Y8KlH/zXPHXz+R/BXkq/8t82Q9BSmCkSt2P
Baa/E5p/Wmv7Hw0j/1vi/GXL+LmW8TdbJt/vnr/Ys/Bl1+xXPfNXu2avNLo+
qbWeF5nfY4D0UZ3tA6HpHc5IFbpfV+nfwL7E/n7r6MX28c97p68OLdxSLN/X
rOUR2Kw/xhaQ0z97v2fmUe9sXpP9GjBJav2qTn9JpP6kdvhis+XqwPgj3coz
43oxZHilAIA0NP9wcOE+GGlw7h6zI+Wptx6rqPLPzf6Nr/o3LkPdQJFxlYRl
u2L7BhhJ7b6vOXig2n+gYhXRqQWD95klVE5gkKTkrLFYHblyonWjYcq7gdp1
hKm22GSscjxSPhGtmE3WL+baqZthtpeKkmG5lFWspGVUUizdw+s5UAxeqpW7
cRneCKHumTGnmiw/0VJ7vNLBSJvZLkptxEil+CJqI5VoZj2ye8mUxFzVvJj8
aKoWR4BMpOrGQUQpwXiq2hWvcMYqsdAgq2xaiocRwnIoRK5kLWckcAIXXkaM
eiLg9zBj0RkZsj6JzDXfBjSaZNVip6nhVCf3PpPZnOyrQzxPhMZwrBEXCocC
kLDWsZWU9ZCUTlCZ0w7sMKKroSgIslnVUnFg1swCUMSaT0koOj3R6ow18QWv
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
SLsfmcgnK7Xi0txsqouUAmgX1DO4fSlmjYRSCgayInwQDjtzcMmP7lyITm91
dOiuKbVKRWi3qsNbGclUfqc4+kgUhK9++0YM1LFlh2wkZz0B8iF9byIiAQuF
SbkoKPej8cbwlg5uqbR+h80f5/oPd5MQWawVf0/HJzMGn4uygRlWcUTAPAhw
xVmEvRrGy5bpBRXzAoylTJcl00bKq9FiebBIESxVRyphX8jTzw5hK+DyWXif
lL3Nji2lh3BIYVPgcSvDNbJw5by7cPL41eTBk8mtr6e3vpxbe612VC4eF03t
vZw+fjW487DD/ofOjS97V3/bqP/HOvVPW/U/6zD8vE3381btJy2anzdqflyn
+S81qr+rUv1ttfrvarX/pVb9nyvlf9Oi/nGn4ScDy/8wuPpJ3/Ing/ZfTm1/
Jdh/Jjh4JTx+i9vZvRe4ndl9Prr2oN/6Zbvxsx7z593mT3vY6NtWxT+2K36O
1ST9abPsv3VpfjWyRNXawp338sMSLMl+nvyoWLxfuLD9bn731dzum4X9IvFx
nWizfH69WLBWMLP6bsr+Ysr+fGb9OY8+CXdf479kh0XgK8lBkeyoRELBqGLZ
SZHSSYkMmeut+Ix5+rA4/kKlL//7AaBvpK58sbsYjpXI/U7szZMHSpShcp5u
U0UrNPEqQL4hXo89kGZwR2Acq3TBcixzpMwSLbeEq1Zi9evJVoojXQxs4zRm
Yjt7F2M7F6M0DZlpwrNYBOW2WK1d61KmhS9LpsWUqoG3oo9XGuI1hnitmUJJ
FOcBHZmj9aYYLVDHVm6YVAjA8JekdgtM4nVxVP53PgC8WTvvZTHYDh5Hsqaa
7blOMNL6xSAfa8j7yCgiRJOD+qwJCqeAkVbBEpk+e4pq4WjAEOX1RpicKbVv
MwExmuDAhMtGebXh1uXo7vUUHBMaNsTESeC24PoiLb4klTYZ4yRQxjqL60yJ
Vk5l2NxUrNZLEajQAjsTuATumvrh4epjbdgGdZFuY2zQSonyIWyq+mgz6UcF
q8lnj5SqwuU0ESMO7upkXSGsqool9fBB7BmaGQRSwrHazg4zlez2FZogQNVE
MLL6UIM2WKGPVFKQLdUBvsJ+SKqz3+sK8roXbo5ZHoeSnhycYC7VIWqZp/FD
LI2OpfTR2SV3kySpxPmMsmNnz6SnL4BJGneB2lWochao3W+BTCpHscZZafDW
GX11Rm+13l2u9RRj6X2lpmCFKVSp8ZfK3AVix9uFoycLxw+FJw8Wz57IXK9V
3kKlpwAvQZXh7lcK51OF8/FeVrKXXQQjweU3hXs1gQ4wEgkl+RuweIeaxl97
Fzti8jhsRGMDNhDgECyjzEfM+QMjgZ1I9YgxEmkHxQbg8sPCApC+D2UMwfKS
WQfDUIpqZiUxaY1SnTb4hzFSL6uy7uWyjeAf2Aiuwc7VC3nxEqXY4iQURlrT
UVJZZzqiQ3eNadk5ngWgl2N11BQmYgPOuMYj79mnqiHq4h/cOqcCJzb/YooN
PR9nynKjNOvzcpo0qLPT3G3n4R0aX8vwnpJ6WSEFeWijnltJjeFjMk5j41Yv
mIBzeoTkxHkdFy86DTd9f5600o+ReirzTvbhbGfw36wLd4BF2bjwTpJkjMMh
mrVn5pcTnJFmuSLlGsMkHEAw0mZ8EYzkvrT5blZ9N8uuK/PJpWYnI7DHR4Cd
ukAbV0jDt2wKD4KOwBWMW4Z/YCR6iezsam4OpIRbvAQ4E6+1kpzG2sgJt64U
YCRrYsYUH9FF2+W+GpGnYNFTDEaSBao14WY2zbMbdpll2zu0QbgqA6wOCq8y
APCzRIcBXRu5eTKvlzKYyD0qspJiwdrC7NoSYwAkQ6hD42uSnFWIDosUzlpL
pJePDaLuEsZI5mgvSA//tX+jXs8K8PyAH02kTRWqAx1haaON4AcwkjUzjE2A
M5IpNcBVkU3JTqrYj9Tok9g5h8BIpJOWbFxK9eKYwNXavwCoyMEkZ7e64yv1
8bXm6IOa6mSuRKw/awZ2cyULQBrG/5pTI3wshYnpsdCTpDtZ1WK7OVVvIne1
HhsFduyNyyGWg5tg+bhxIAo225VMLw+qw/NdiQ1upCewE25lSTqAT8HDJbCX
WTi7VWERIJ1TTQKflWbLDVizVCmBfR6XJI0tTrVTUSh8hwyFj0jSE6cTday3
2nI0Uo10Ji8HWChpcPNqmOXdaJwr9nZA2sGHeccfpcffSolDPpDAAmks3FBp
0936SHoCXJudYxLh7o2SxQaVFNNjcVSSD70Qndxozz6YTm+NBwCkD1jqw4/K
o28Vx98pDz/KiX9uZDu34s3ruRXQYHaIirUuaVwsZSSv5qh++3sZdsZpi0cf
wWl05+CDFL/Ck2DtXosJn26kFM665EP9BGwKMJ0zrMCjh0rlswOUpKOKlxEQ
LKsD6beyxnBbDvzcrgrVwDQoQsWwDrp4DQ7mUqp7JTcMGOZCoxtXs2AkOONL
6QEuuUMSN8EqRZT0dqj3/+jZzP4D0dGjPU/jTrBZd1a2cPB+5vDN6O6TwfV7
/XbW2rb0y3bL/9299C89FraWft1t+VWH6R9bTT9vNvys0fDfmk2ftFroxxbj
J93GTwas/zy6+S9jW78cWf/12Mbv5/Yfik/fLZ6+lzjycbtw9AZr/vD15NaT
weWve8x/wOo0/L7byHrcdL/Balf/S4fmF0CmAfPnU+tPFnbfivcLpIfF8uNS
2WGe6rRM7ahQOUplpwXCw7z5vcL5vUrJfsXibsniXpFoN39++/Xc9ouFvZei
g1eL+6+x8F+K4yLlCQ1GV52VK87KlI4KtatS6y1Xu4vAQounz8FIVEwbyIO5
4TXbwCQagO7MEzkLF11UjyT3UZaNNXfT8AUcfFaaW8kXcx4r1IFSta9E5y82
h6uskVp7onkj1QFGovnj530bye61JJUqraW7+YhMlhKiLkga80eA1GRJN+IW
Hoo118YZiTApVq2P1fA2B1w4lhhWgzneQGGQZOdGbhQocnIjPbySsOz2AkVH
szTUz57t4xeRPdttz7UvZ+CPsKs7QwquLAs8yhNnPDvMRwHaks0sjtSOd0iM
lGaieVmaWE314TjbgUbXwuNbSuIf3izAk9q6wr+P0Aygi5HtywlKc7PRQnwC
IyuE6KFuIyp8okYwdZDGdDIvqRULmxuMMpsmX0KzqBJdhEnJASxsldpICyWg
OSOxgCozNC2qcAMYib6RYJEyXMI6Opto0Gey698zkjXRZktQSfZqkiZ005Du
WPdKnPCPCCfeYsL+H6nntSU4qrw8Cd8IrzzhwjjUssQA6QelQUZN1JehC9Uq
gDHeYjC2IlCkCZZpQ+U4E5S+QhkYyfVKePIIC4wkO3upcL4FIykd+YqzPPCS
wvle5SjUuisM3lqTv97orzH4qnWeUiyDr9wUqMTS+cqUniJg0uLpS9HJEwCS
+OyZwvMe7MQrmuSe90AmmeO57PTpXla2k17cTM3ZkxPgGV2oSxVoV/rb1IFm
daBR4auReQBddSRhRMo/vdTAHm78gZHk3mqJB7BaJvcRI6kC1fgt/+xgJBMN
y+ijME58lMIXrE6S+vqTo6y8h+qLcLscH1uK3DWOLUWGLWE+86LbGu82hlpo
fl+oBUsfaAImsWhSL5uIQbBkiFDxsDZEVeJ3Wdc4pd543g0Lr8vFxPD+8S1w
JXYACXtvXQyZqPSUtUjftUKwNcoVjYBVOOE3zqex7QOQCP8SndRlnxzgzdTU
ZJed55o8LLU3zOvDGUTRFDCaYZEhlTze9UbRxUQznofnnUHXZkrdtlKXTWYE
J7wmVM8r3nELA4cDDnA1RwaAK2uZ+ZX4zHp6ngsNcUaiPFp8zB6dXY8K99Nq
5/mS68LqvLScXZkOz1U4vKZgn9rbLHPXyX3wLJrV/nZtsIsHdkyxQdbvRvXY
eMSWmsLipGRjdAQ7yPVXV5Kzmznx1qVyNSMxx6eMsWHOSKSc5qYl8ZUrAlVy
fzUepEp4ppWE74WwIdpHpVAETl2GUJcl2s8rWPDku9dkJaksKicAmIHc9OEe
ja9FG2hUuatFR4ULB2/ljgoGwN14QpyTQC8zqzAxRAeoCPxiAe8c2AObpQw1
KgI1LLDJZE8yPaSLkiJVNJhCbA5M94OGR5iS3QBRvEkD9ZvgV33UkwsXLN1n
TQ3jm6IieYZJh1cyYMn+BRsVd3VXlc3FSUjPLTtKjJSg+RRUoxLrpJMw0cYm
aDRj57SmG2zpJjaVtXMVHHIBKKKgPZAPOycDpC4+IIYaeBM9OM/hF/CGdyYx
3WQKty4ne3ezC5Rou5Gxnj4adbd5OUku6vm4HXSRoXQbFjXpZAgGyPqne+Bd
kt0PVanD1VRak2khkclsD94GMdL5MDZhXje1djmGJ8T2e3Sz6PhO6fhWdXIr
P7qW4vb0AxVK0Y/fYxIXnsLXx/O/Oxes7xK4e0VV2ZvUIzBJIpYX4pMbneOj
GYsz0tFHDRiJiVgS2xx8UHBGAnusnI9ZWS6ApD5Jz3Oa16kyRiKxUBZEAiPJ
DtgjeBKw1skfNcffqfdv5UxkQIH3wJN0jJHGiDnT/axgtRMYuYKjjSOf7VvP
DbHjQxjJZosQai5luqgSI1LB3OdKfbzekGjB//IMxfeMNA2/iaAr3U1p8XAt
GAkOAgAJa9FbKDh7RaqJhw83DoqsBwXy/fz548LZs6Kpk7eTu09H7F/1rv1r
7+pv++y/HbD/BmvQ/ruh1X8dWPldr/U33bbftC/9qs3yy07bf+9aph/xONVm
b302s/fF9N6nUztfTO98LTx5pfSWyN3UuYNb8Vme8Pit8OTNzN6zkbV7g8v3
+q1fdxk/x+oxf95r+aLf+iXdLmH9YXj5/uzOW8lJqfS0jCQfHRXK03y1swR2
xBSqgeFQuMpkZ5WS0zrpUdniQaH4sFByVIBrcP7gpfDo5eLJa/HxK/Hha9nR
O9VpidZZrndX6z01ale53lOv99Xq/ZUqV6H47JX4jIiINRy9pbSF+5nE+UTs
eMpybe/ErnyZO0/qIkZSU2d3Gay5MlisCjFSCpbxBym34i1SgqPwZ95ya7Rp
hZR2OkBEG+keNn+8exXXb7RpKULDE5fizWS+U5RQM0RqedGvAaybqIWrYsk2
YRmT1XeMFK/URasMcYq7wqZbmXAZq41px5W4ydQzzj4ozj5qT27VhN/Xws2L
KT7PkV/CNC4n22FLt3AGYMXYfSBqVg40wYb1TLN2CWIkSrElqYHrB0ZilRgU
Qfp+zOI8dwHwQlRwfjnJY1D0WtSXMQxzgz8jK3NORgo2Th/Glgg6asJ5qwqW
y7xFUk8h0IImmzPGkHrzRe43Yk8BsAdQpI91UOwo2qoJNyoDsAXAqjZDrI/N
HCRJbfyNJoYttIo0Lf0FcBbASJRui7fwKnQ2FZ2VD8XbrHFKuoGOSFaXKR7T
ndwQD22RoYzDIlfpwmVUDE9xgFpjtIbAKVDHK3b42DiunEPSkVGq5DFGSK9S
H65SgtN8xTJfARgJpwc/Q/CJxI7XwtNngsP780cPJKdPeRxJ5XynOHsnP30r
PX0jPXkHXtK6cVZXmYN15kADkZK3GsvkqzH7q/G4zlehArd4SmXO90B6CViI
gkjFukAVnzd3F7Ny4NmeH14ot1Oitfg07CxpElJ9e4cm2AYbDXsEBJK6K5X+
WpgnfaQTQMIZCcjKAvskHij3VsAXACBJPSWUawvW87JtfbBVF2hheUaiFCoV
ppEx3cQqJBNNzf5cC9EWu2tko8rq6JgtNorfGoKtZrBuoI4pPpF8pQ6fNNRk
ibZboqSnBI76npE6YJR5Wz3LALbpo12czQBj1vgwFeGQ8mEnz6yxhv0eXnl+
196SGCL5wUshGImXQONBiupQ0raVeaDYVAep6iPaxBVZV+J9G+lR3vtAutmk
bEzZutXMAFU60VyVAQoOYGXGtqjdcgCeNbXIJbp4iRqJVJyPk8ISZcPbV1Jk
HbAn47NwQFX5caeR2gNpNPPIelawkVkAC23lxKw3X7iWmmWJtglShYpMrUYE
u0n5SdZwnDEe5QxHF9rdrBz/qPK1S131IkfForNc6qmRe5u0wU5LYhhcZIj0
AmCwKEGWmjDHeGH2pDU5uZSYtN/N8SFGWo7PreUkGxey5ZTQGJ0An2jCrWIP
pRgEroIFF00mkniLhM48LNyhIisGzAwbSN+bJGioD64ReAP+XMlO2LPTm1fz
m1eskic7Ad4AvSh9jRInydBJHMVzu68Ehy+lziIWRm4Erss8VbiQ4Qepqfmi
yxQfsqbHWFFuK9OwrZH5KnCNsyBShzVLyRTwD9CIC6OBapbZiHbwEhvR3o7F
Ey76WBsLKQ/SoI30KIPehd1zku7cysxRbTZVxcyunk/x6hR8WfaLCSw+1ZTl
vLr+bRuhcHTzSrp1JdO8lutazw0wh3GMyWX3r2V7qUuL+kS6lpliEomRsjFh
ulA19hBjhEoL7iZHh5pwOu1m51mh+J0WE1VNs3my1JR3QcU8fPQqtuhlFo1Z
yQ2Cl3Ac5P5yOOlYMP36RK0l1W6D/3vRt3oxDIcXiMWfYeN6buuGxt3Ca3Z8
UDNxbCWQjLSbPqqBSUxtScLFFrbPFwmQaMowKY4Ck2jCDquy3jynQj7S38vO
bZ9LeGX+6bdGlldVAYrAM1RxdCtlit/4Ubp1LcLxtGXv4kg4sECs9cspgNPm
NWuQZNXdVOB9S9NV+MLzALcASMffavc/ktAWXmL/Rklq7RTrm2HyeqDoXlY0
28LbjpZz3UBEfAW8Wow1E9EgEhw3W67PlGznakjaWDVnJFOyk2HzEMUEzmms
LS/usqQ7dbEGkCesD7wDmsblLxX7ioSut9MHD6f3vlncuLew/Wz+OH/BWzHn
q5jxFk+dvRneezi0/cUw1uZnQxufjm58NrL1Bdbg2ucjm/ewBta/whra/GZ4
4xv8OLP3ZHbv0cLRM+HxU3DX/PETAJLUWaANMk17puIicxUunr5fPHu3cPx6
YuvRxMbDsbX7A8tf9lg+67J83mv7cnj9wdjOk4md5+NbLyY3X80fFCjcNd8L
sFTDlMC/NgerLJEaY7BSH6wFk2N31XjrAUtAKRqP7ipmEzzziWpgNY5fy0/y
AEhGby1NkwzW6b1V5kCzOdCo91Wr3UUyF3Ubyd2vWOHrc6njIdNAvi88uSc8
JSkAmS+PDUnPhyXShamnG+aPpG+ChbDLZJrD9KPY/V4C2+ctUgdK9cF6psbT
tRLtXo33rsSpqZz6pxL1BsrHVcCqkgmOU9uCLgokqGJt4+XaaDm4yJJtxDKl
G6h7gi0wkjZSCY4CIzFx13Y2drCDIofpwa3zGTgIOPOd35rOPuiPP6pIrvZq
jqXPKAAL2F7O9diy4IFW/gw0DCjTy4uieena5sUcb8lktTed/Pn5WGqSlmVV
2XzAIpuruMCTyFxqlVrsWV5v7byPSR7143wmIRFqQxvnki/aELZTmtlBQzkD
hRLf+0XPa4kvn+UuqcpL7H2DByXeQpC8OtSATRIL/iOBvbOELLuvURvm8aU+
7IdMEqFOEaggxe9AIYsjVejiNVS1xRgJFl9PQklU5Y4tiycKaf5XiqYP7MAa
5kZJOTDdQ3+TajYnavWRciZoRvFAlb+A1+JqqQuskfeS895YzkgMkBpILTZU
LvcXgojw5mX+YtxK3AWAQAC24OT57NHj2b17c/v3RUePFo+eSk5eyk9fy07e
ECMdv5WdvFM5C3TeO0ZaCjRZ/DT51Oq/WyYfnbFaTyWNzXUVsRKmd2pPAXwE
Y6AWy+Cv0QVqiKMchdLDN6c32t2MeDXGKoLig3jPvMRdF26DgYZJ+v8xki5M
/fIwf9TsFm3GQSPBH8q1lcvd1Nqm8lbj4+PzgpG0fmqFA4dYSXOyi5V8t+BB
fbBd7+9gdUcDACRaLHdGw1JjVJWNOxpvI64LvFXSffKWKFwVWj/1ZpLhCDXR
NFuSWKf0DWOkermvTErYWabAv4SaWBSrixdymyN9TCC6gxeT86Tb95VIA6x3
bIQ2+SsRaIeYipJiPcYYDgIV+RuY/ipP+4LPSTcg0rESG+AzKbjI5CqNdSMt
Jl7PRinCRM9aqn89PcAHydlTg5yj+GwFvDRnJFuynwKPsS7ehontl1KZoXZ2
kOsAS7pAmyHYu5KY3MqJQEdgpJ2MdP9csZ1ZXEsJ7EnWTJccXgqP2UITmzHR
QVK1n1DvpVQApPXUojEypPS2LTpq589KFhylYleV1IOnbdVHe43xfkOsVxfp
xmIxlmENjhJrdgAsWeLj3weUJpaT45b4xHJqbiUtsCSmDdEReB/KYDOecNaR
N+t4J3DQGMdFbx5NyDp7IXK/wlmNr0MVqmHaaK28sQj+C6XkotRMjatyOTdK
mJGjKSHW3IglQ9wi9VQJT4sXTvPmjl5PbD4e37kvwJ6Mr9VfLnbDjygnRfFo
lzLaoMTpF+syJro0kQZZoFzqhy9fIQtUKsM1VGqb7WYN3ST68YM1pMrb3Iz9
nIQlWdi5j8eU4EOZ4qwpL0caayRCTl1yM7xQf5VVoNFelx3lkoMculbOx+wX
43fN4KkOPi+edktqd6X59avZ7s1c3+7l2ME1G3FyJWAq08Nbl8NsdjOvJqXg
jznRbYi24UuneKynnEVumUvFznZipHPBnUTYBXWcbZ6TuCI5vFQnQ639jC6o
nwV2HMcTvAH7jv1Q5i+BS4idU4pNL1LOlO7acXCABFSccwEamdm4FGzeLGzf
LO5eiw+vZGe3KmASZ6TjG7jSypMPMmzgvIkPf8ODRVyfnJTocgJesAeqpMBj
dpokqrLTOGN3LxSHNxqq4/qg2LmRbV0vgojwQlg7t+IdFhECJ1Nc7gLMOU5t
a+cT9BXkxoFJeHuETBfTuzfzYCQaYcxaCPcAbLcsDPVBhXXwreboo/7oo27v
WrF1AX4T8I4/KphPd+EbMcQaSRUh1WRl4+TIl6eAAAnFs1ehXrnlLKkKcCPL
AKmB6/6R9mDmrnoEZxGj/U7OSJpIjSJEgydUkWp5sAKMJHK/mzt9OnfyaNrx
VOB+K/KVLPqqhL5Kgbt4yvVu0vlq6vjR5NH9ycN7Uwf3pg/vT+0/mNh/OHX4
ePbwJdbUwfPJ/WfThy9wX3hC1TsKVwkJvLgJUeSeQqW3TBOoxllBcZJwjS5U
CYsjdxfhVxJnHhyKuf3HWFM7D4ZX/9Bj+6xv9Q+j24/whKA1pndXInHBWjWy
egma7WgJV5lClZZo5VK0xhiuhVuKjQunFo3NCrZrfE34G9LBY3kc+MIaL5XF
at1lZn+9LdRij7YvR1thiaxhUlo2h+oNgXKdv1Dtf3cXQXI+Wjy5t3DyFdbc
0VcLpw+k7pdKX77KTyo0Cm+B9k4bsFgRKFAE8hShQqn/nSzwXuZ7R0pKjtfs
U5fgKqAZnbFuK82ToiHaeATeBG8TlmOrCZbpolVAXGWojHsEiuBdwkiXqDRl
ak1p6mWjgFK6wZSs08eIo3SResbPJK+Ny5B0AOC55HCFTgOKSCX+g/7so5Yz
EpNsHf+ekeCSkHIjK2eiUnPWzvZvjEQdE+dU10raX3FqcwM2UC88aw3jjEQd
9GkSGeAZNFpXM1ymA09uPx+wX/QyDGun5so0TQmEO4ZljPdpQu3KANW6kFCq
p0ToerngeiZwPJ53PBe53yx63uMR/Ch0vcY5iT+AWVSFwD812EUXHO/nT96I
HAWw7/DBdZHOu/hSpIEGqbAqJsp7RkuYPliVMVFnTDbrow2ws3omIYWPgM2H
ev34cNvk8Ab8SposMIzNCo9ToCnVasFxjpTzNJnCmyfzvMJXDzyGJ2gIN8KM
8plZ5mgvA6RmDkj6SKWGMlPFgCIJW4vugkVnvtiVL3K+nTt+Bkaa2b2PJTx4
LDp8Jj5+AUCSHL0CvUuP3smP32ucRQZvGYsa1QOQzN4Wq68Ry+ZrXPY3LXkb
gPd6T43eV6vxlJEsgLdQ5ytlCuFNpmCjKdhgDDQYfXVwBJSH+WCkveziWmJq
hYI5/XxaipFSPK20Y3ur4Lwr/TWaYBON/Yp0UlaLBW1UIK5IK5OSbtaH63AR
KTzlTEC7jGMSlQ+F2w3BVsqaxfoNgXZ9oEnnr1e5a4l/vC2WYPdydACva4+P
YC1Hh5ZCvdboGB+BQX/mq9L6qbxK5aUR0rpAlQmeQqgGzg6/lsFIpghFhABs
Ug/5HYtuqgmU+Sq0gUYWyqN2fnNkgI3P6ORJQGoZI9DtZPf7KOuRGdvMguRF
wBimKd2Fz6WLNFIkJFaN64gS1ikKHjIAbl6K9qzGhtYTgOfRVSqO6qOiKarB
7vh+XgkNQFlN9gGTVuI97P4ADNxmehp0Z6TTo4tLnpIOWJorIYxQ+TSzlTSL
NkgZNyrkDvdawkOrybndnGQ7LdmIkwLS4bkKpLSRXAA7LUXAlv2m4IAlMGQP
z2zFF7fj0u2kBIC0khCAkWTuNuFp9dxJieC0eNFZLnZUy9w427uM388xgTPC
B7op/Gz6LVWSd1NDYmqUhZv6zTjOsUFTdBjsZIgO6SP4xx5FsAHcNXXymtbp
q7mzV/MuABKu0ydCN12nuDZJQz5YyyclwZGByQbGKKK1wCRdvM2cYf1EKVKe
Wcr0AZwIonxV86d504cvJ/aejmzfH9//eu70OX2tngJyiAKluJDxVpkecj3p
00YbAWM0FcuTt0gzAqrwK2OqnXVzU7MGa+joZ8JEYwCk1Rx1e21cz7Oh7cO4
5YwEMsSv7oRHkuP0l9TDDu7t5/WEpMyT7iXVWZJZ7sCTw3quXAyxaFUnaWhn
O6lakm0g2P3W00Ob2ZHDC8HJjfj0VnZ6K6dQDB8scj11J5xI2TFqTKNiqnCr
3Fcj91OTIIsfNoGUtIF6I42Y6d+7nOPNLHxgPVcXwU67fXXHSLD4sOAUF7qa
YtGtAbxJSgYFi+BLiryvxf738lCxKlpJM8gSzSAocNTq5d18lrXLuc0r4c4V
9c6csLdK8pg34uNbKdYe6+PDGQsfdu2csqLrF/M4jHTLJDKYHt0Eaymd4SJ1
a9nJzfOFnSsKGR19K9/9INm6XqA2NJovPL3JwlZbTPIFt7i/cTOzfs1whdVy
rJwzDSs4Eczo0N9fL9BbZbOMOSMBuravcavY/6gGIB191OBxpsAwxTTKqJUV
FErtz7E6Vgxca0k3r2SoaoUqt8/HWUaPNKPWLseYyevicjekeJNs/l4nmU4k
PnURsE19cHFSBWQTJerYWK4azkgyZpThy+P8n/O/XQzSxApsoUoPdtFykSt/
wft+zvEMC9cILBrM2ezJM1w4cC6EjoKFs3y+cF8M99ZXrg9Wk4Qam6SApQvV
8r3IEGs2xep5y48mUM489BLwhsT5joqlz14IT59N7z4c3foGLsbk3sOZ46eC
k/cwlFSOG6jV8sGOTMbHGqtbilVZ45XLyVorPIt4J+uUGWC1l/189CR2eNLk
jJBisDZYpPeXAYqWw+00xj3etxbvXg63LkfhNratxJvwbIZgoTrwVukDC71U
uJ7RiPazbwRnX88cfyU4fSTxvIGh1ATpDctBU+FSrp9MgBR8Jw28EXleCN3P
xJ4Xi+4Xiy6A4nupswB7JlNJ6oNzii0XDjLcbYWvWuYrEHtpMB8cAeAQFouo
5Ev8RdJAsSxYRNVlkVIYetbLVmNM1ZszjbilH0kKklSvsQuxTEE/y1MDToY2
Lyf3bwUnHySnH1QURP1WfnArJH3481E2A3qQ57KX0h2mBI1yxjnGazCs6QGe
L+auij1DuSdTlE98bjFS4KtzmU1dZJNn2Rx2ykdMMJXXcZ6YWzsfIOGmDBwo
bDXY7uoIw1K05zABE3iFbfJAvcRbJfGVL3oLF1zvZ04eTh/fnzr6evLwm+nj
B1iTh1+NH/x+4uDr2dNHQtdb7J9Y847XM8ePp47uzxw+ge8pcRcr/bWUdAvR
LDk6mSMVvDBMEyvXxEBKxcAkXayCNDHCFBjBR7AxoSSuToldCAt7HT4FVZVk
WRU6y7jZ0m1LyQZDtAqMBC6SuF4tOh8vOp5JXW/ZUCGqW+bDJnCa8fOcoujB
CgCS2k+aSMDyH0Z44IpYdBYC7eYOns3sPZravj+5dU+w+0h48Fx8DDp6u3jw
Ckt+8EZx+E53VmLx1oGFbN5mm7fV4mqxuBqwljz1NkZK+JXJW2/yN+g8lVp3
idZTbPCVU9Ap1GwJNlmASb4Ws6/J5K7Rn5btpBe3kvPrycmV2CBgxhRuZe+2
EYuzEKXS/FU8fakNd/DKH1xoasqptfEQGakZ4I+9FXeY5KrQ+urwVMAYYJI5
3GOJ9BqDHT8wktJVxxkJLwo6Wk2MriUmAEuWYJ85NMjEkXo13lo1jAV16tFS
eoq1gXJ9CPBTpvFVGEINPJ+FJ8cLqf0V8EqoK9D9FvZ00VWEd87mOHdYU7wm
mcJN+rvJIG1sHkQn7sP2sbqgsfXMLC/Mo4puKidrJiF0P12/VD0YrSWx+niD
LkAT69aSIxuJyY3k+EaS+rLtCdLCMoVxEBoZEPaCi/AgAAm+DxsT3wFG2s7O
bmYmLdF2mtHJYlxc6ZfNNOk1R1hdELW2tfDsIXw9LkewEp8CIO2fKzfjkr20
9OhCDUbay8h3suLV5AwYCQdB7+80+/uXQ2ObMSEAaSslticE5uikLjgod7eJ
zmoExyXzJ2CkSmIkR50q0KGP9sIZkfvqZF5sNVRKJPGwSYu+GthrE7XY9+lC
XRTUCrLQVrBNG+zUhGipw60yf92Co3T69A0Aafzo6eTR4+mTxzOnj+bOHi+4
nsIELDgpmiTzlTHBjXrAEmyKOFQuwYGN1GtotHqrPtnCIhu0w1BMkrWdzjvy
x/efDu0+GN57OH3yEOgldL8Ted5LyM0sxqXKVM5osJEmhAu8fNHzluyO+zWs
Eg2pjNQakm2stb+LDanshBcGo0my2zSAaW79AowkXMlN0/js3KyFxkH22LPT
GxdUbkTyVqlpNlZ7mJWudWI3hveEzcEQb9fH69kMApoaQLIhOeqHwvs3pdrA
SLwWiIzv+QyQePd8wXmrdX/UO2/1Z7e6s1sNm6VCmqi7N/P29KglSXkcK9Wh
DWgiHcBOHAFKR0aoUJ+U6oNNeAPAeN4gyWtsfphvCxIjOcfM3cwmPBs1YV1O
UJQs1YU3CW8aRmfB82TO+XDB80wSeCMOFsvgYocomsfUACY4I+HjAws3WDiI
pLnPacjv9tU8tY9dzjH3eQQsZwIx0ljwcVtmmgtB4B9ZddYk7ykm0SEGJ7hD
z3Ap3Lle2L2Z27ymKneK5rGEIMvxTQCWaJrwpQAIBEZau5pkcTAmEczWcm4U
jLScuYt3rdET8jiShAqZbmSbl+KtK9nurZKUB/AIk8ni8nosXEx9xDBPuH71
cHai8IgbqDAs07dFMgjjW1dTMHx8bp0927ec67bA+WXLnGwhDT2quqdYJfea
Sa6Zjb4Ff2pZHYgmVs9CSZXAIVW4QhkplQTeLfpeSX1F8Mdp0Fu4Glu9OoTL
qhh+nNDzCrzKJnG8kfjeCj1vAE5SQEKgQeGnr546hQN07ZOVSXQx6Z4OmppE
Q/FayBYzvR0q9ojUcukYymWQq16MReDhycdaPHsjPHmFW9Hpa7rvfM9GflSx
GolGLvuMZYvXLyVqbOkae7Zx/bwXZxebfDrMTqoRnhFmeaJ2bIA4eoZwpTlc
uxJr30gMbiZHNmknHAQm2eMd9kSrPdEI3DKGC7T+1yr/C3UAmPRa5n0u9j5Z
cD+cPb0/73wq8+VxNFIEipTBYgKkcIkiVCgP5uFcXfS+xO4hcDycdz4SuZ6J
nC8BfnJ3EfxiGlAe615jwy7x5WIzh30X+wqxhO48LHCRLFiCW75wH06BIlzC
C8wARTw8aEo1GZON7E4LvBtbrg+eDiVbM/2AJWuWevZBKduXE9TjebN4eEPa
+0CmrauJNdY3t3E5hO2Fe0bYvvjUY6ZH3cqcsj4qdbtTg+wyx1r04Tq2WdVT
0zczOgyQ6IPAj8aiEm4ahUbFcnDGOXoB1EH1OGl55pefjep4sxJeYbBW4qtc
9BQvuPLA2NMnTycP700cfDm2/9nI7u9Hduh2aPs3A1v/PLj9q/GDT2dOQUoP
Z04ejB98PrzzP0b2fj2x/YeZ/QcLp28lrlK27VfBu6QhdGEKIuEbASBhKcNF
NJEnTJwJ/1QVquJhN6b0SGLgpPoY7+ZT5on3cP5kBujjEER1LiWb7hJnnnzR
2dOF03tzhw/Ejte6UCUYCd4fn/zOOLyJRVpIGIfLLCt8lQpfDew4SFjlraYh
gGdF84evZ/aeTWw9GF+/N7p6b2r94dz2U+H+y8X91ws7L7CkOy9lu6/1pxVW
T5Pd27Hq68TtkqPZ5Kgzn9VaHHU2N2GS1ddo9jWAkSjpxhhJ7y0zAlr8DeZA
I9aSp23J22J11VnOqmyBcXt0cjU+vkzqghTq0QcaaFhtoJ5NzaimJBqNJ8ad
ephOZivvJBdYNxk+HWmP64L1cJdorBtIyVWm9tCwXXzvVHrK6qvN4S5WgN2o
9tQpnLVgpKVQDxgJgARC20hN2WNjS8FBY4D+GJgBmgIjAY0ASLpgORMSL1H7
iqg1z1WIX1Eta4KEAvC0oCaZ+x2flih2v4fLBveN6qYCrTR9IzVqjvfrwjQi
h1WLUY00U2boYLNsKIq+mqIx7pvnkyz51W6KYbMqV/hLVCFsLOX6cA0cN2O4
1uCvgy+zey7Yzc5vp2fASIAfNrO4xcRyqUwXiArYeKKNy6Atx9vXk/1b2Skw
ko322w5K/EX6+HBYdp70msL9xugAZyRe9IVba2LAnpzYzApPbrRHF9r16OJ+
Rn50rjrIqQ9ySho1khOuJEatsX6dr93k77EFRzaigp20ZCstWk7MGCOj2sCA
0tMldTcJz8qFZ6VSV7XCVafyNCn8nZpIlyLQAmdE5C6bdxQKXYUiNxUUid2l
cCto1AKZ6Ralr17uhftZp/DWyX3YyRtpBRukvmqhs0zgfj/rfEvjOw8eTh4R
0oCR4AbOOR/Pnj0F28DNgR2h/uhApSZWK41ULgYqZHBIU026RKM2XmdI0oKr
hZMKpxw2E6E7f2T/ycDu/ZHDxxOH9wTO5wvu1yLvW3k4n6ZoBQm69LGauwyv
vxAWZ8H9fMH/ThKG41MNRtLFqZIEH4H6PkC8iTaShMpOkl5QFmZ9bvV8fjk7
A0xazgiACgCbjUvq2uOiWOtZAUv600wZyg6za0ETadCEG3XJGk28mmxfpA5v
A3SE/RZuKXawpUwXnFCwBGtRWTy8kh1fKQPfrgS+s7luzY4bveODHo/snYsP
LsV7t6LVzMQSzpYsK5FKjerjvdSXF25Shdp4BwrePO8yAE1Rg8DlNDxNYqRz
JvyCHTXdD14iyXfWI0l/n+oHV1AFZqIFGCkPFog8T6fPvpw4/gy38+6HIn8+
MEkcKFOG6k3YlsEkF7P47NTSnpkiRdnUNBZJv6bHVi+md68E67kJ1h3WQ0PZ
ol36WJ8Wp25sFJiEA4hlp2oivOgQtTlEuimlfqdaP04HkyR/x1fOR6g2PtXD
By4sZQAkw6uXY9s80cbk0O0X4z8w0vo1Zd/wWfBnPAaIv2GMJGSiSeLtG/H2
tRRYi7V9TbXiwCfWzTrOhe75KE/s4aTLGqkxwERSK1OdLdWxnhvYuhyFEWRj
WYiRYPuoBDfTxWpLWkhCOd1myXTwpKQ53csGQwyuXgyzbkES2WZFsG2aZCMb
jVqLU0IdqZQFi8BI8vB7tbccjps2USOJVYjCpfJYhSpaoQyUSkIF0iBo/x3X
qIQRl4RKQK04sABjruOEO3gJKtlNk0VeYRbHxjSTqeglC5DrALFgR2LSMVXm
RK0RHy1SbogyqT22qKjbXciadJj4cBRbWQncPapkjjWysrQuG2WEW1cyDSvZ
mrXz1u3rQRbQuAtUrnF7l+2hyBtr4DLFas2xGluseSPdt5ud2M1M76QndjLj
W6nhjTQMZftKHK5rpSVWZAi90wRfacMvNcF3Sv8befDVov+5wPVExMcN+0v4
KFs5i/NwQALA47fYOhZcjwXO+3OOewvORwtnz7Gfw2hq/ZXmUKM10mlnVRkm
qvpoU/hrpYFiLJEnf8H1HrecjvDIYqDoh/tcyQFfEBbpRjIRAFy5cHCWz3sB
SDgPeUUfJx9Cx2w3YdLV2N4lm6VOrWcTGxdjvDl9NdePv+SaGz8wEhw31izG
JlsxwRbqSo636iL15G6T4lA15apgLoGUKSrPoAoNNrCMV2iQ9FC6k8u/4Gvi
9VSaSBnrI+Djbuvl4TpJsFLkKxP5ShY8BbOnL5mu+1fD218Mbf2+f+M3Pau/
6rb/stv+i86Vn7Uv/9futZ/2b/7TwNYv+jd+1b/5Lz1rn3Ta/2vX6k+G1383
tvnF7NFzmlx/VkjD6P1lFAgNldIQvWARThjGSCQUpgzm41zF45yRKCD2b9GG
Lnj9lJ+N9y3HesF7y8lePEJz4lKd5jjlzkBEnJGEZ/fnDu9LXW+pijvS9L3i
Ygs5oSQUQCJIACrWz1jDJ5opPaCjKpW3BncWT4rn99/M7DwbX38AQBq0fTm6
/M3kGjDpGehIsPUMS7L5RLb12nBcseJpX/X2rPt617zd1rNm0JHptMZ8Vr3k
rF32NFh5HMlLtdw6d4nGWah1FetcVXpXjcFdi8ct7laLq8lyWms+rtQH21lA
lTRYDMFWra/OEGqgMmlvvYFiX5VKX6HCm0caBWyWLi58tb+KC0UCI6kti8lp
msI0Mxf/rgH7ucvV3moQFzjZHh2kUa2JIUOgnQqtwx2WQJvOUW9ydyyHB9di
4+vxqY3E9EZiEn9pC/XaQn22SB+uBWOggceRsFhrA6/xy1f43lFXqec9uAXf
FLgFx5MSfD7ypKSu9xJnntRZpPHTTDR8OlxNTB+pD1jCajxoPB8bX9hBxUgJ
OlFpN0hR9fUapVM7Wa0sPn4dFW6FKlnVWZkxWmeKNJhD9Zup0bNr7dmlfC8z
T8Nn07BWOCs68QFt8b4tsHRyZD0xAnzaoEugl3yfVP9OZnY3O7eWHLNF+pno
dx+PY9vCwzgmy0mqQjeFe+F6AI2wYbLSqQ5rbGA9Ob2TFdEQ1XP5TlJ0fCk+
uhAf5hQnl5rjS81uTrJGgkL9lCENd/Os3EZGhFtrbGIpNkLtnIFWha9N6m5e
dNRLXbVUp+dvVQe6VYF2dahF7C6fPng9e/xacPpm7uT1/MlbXDVgePCkOtAo
cdeKXTUyb73EVSF2lktc5VJvucRThv+SuIEo9XJ/o8hVLjjLEzhez50+nT6+
jzV39mj6COsJq016x8oD4KqUyf3lknCFyF8oi5Tp0vX6dKU6UaBJlBmSbVzB
DzsJCEcWKJ88fD6yew+X/9jJ/Snn4zn3iwXvW0mIfENpoEQZIYsDXoLDDq9c
GihkjxfD4kjDxfJwPUWkU808lg6wIc1YEkwbWssJ7RmhJTFJkiCZEVh2a2p4
KTmycyU6+CCjfvaMYCu3sANmyM4CYChcEG1Uheqw4IBTRJGCSPWUgSUNulpT
uoGJrrSYU03Luc6Ny4HNy/Hd69nDa9J7dH+nC/7RGvhuyfvB5P1gdH/U08zN
C5rpxiMeIDFa2SlresJEGk3gnEEsEphiagm8uZIkslkrMRtVT8La1MWWbCeF
utyQJtqiiuAtNavgLETa9MkWdawKxhqHXeLJmzn+auLwl6OHn4wc/HLK8ZXI
SZkIoefVorfAkOywZcatySmS90xSux8f0oqzgga/YrdPdVqzvQyNWLaFxQPl
wRpJoBp/o4t0L6XozVuSFAcj4akodRxQ/NlTjQsQG749202lGukOikHFO0hv
IVpLOlQZlqykmU0j3DaZUj227JD9nPXyZHvXLkdWcoN84fPy0BMrUqJ5xIA6
CgZeCvl44t1b+db1IhfM5KEqivbE+5l6ZAtbTTA91Muf7sSz4Q/gDZHgDJvw
u3U7RfLI2U4WD6QgAx9fS1kYpg/ABIrHWGXUhP1iFIBniLfzCljQuDbeBNQH
OdM5GaKTUBkpVYRxlparopXKcBVPxuGOnLIYxYRGwTzOSHz2Ls5PHHyKZ1JI
E2iHtzfBJUapme58kgZvkchzN2ESDmmqy5xrMqTrdclaLD0YKUUREjrhI3f7
FZY2VKoLk0ANiRXHqvAHJMZOWqPVxlSdJd1sIWHAenu2eTnVsnHeT1OMr6f2
r2Z2L6b4hD6eV1q/6F/N9dgAjYnG1UzDerplK927kxkGJu3lxnfPR3cuB7fP
u9az7SvJhqVEjTFeqo8WaGLvtfF3mniBIvxOGXkvDeA6fY378hB+zMNSRQqx
KHzkpwcl/lfzzifgKKH3+bzzkeDsgeD0kej0JWUQ/NV6X7XWX2sINlOgntqN
qcpCH+yE54Ul9hWBke6izf4CbALYSRQBShuxIFWxkoq34RS00YA2+DLn/cvn
g1gUQboYwh180WyMWqs51UA1S8m6pVT96nnb+mUPa6zoYcnZUdLwT9D5zCfV
kr5iEqd0PRYOLA8W8QpMTbgZyEQbGra+IDauIinljxoMsV5jZMgQprmZcJPx
cahCI9xMxiVab2RfIpCbx9YU4fc4MtIAILNA6isSOgoEnrzJ09ezrnysydO3
Y0cv4EsO7H7TtfbbzrX/3m7/VZvtHzuX/6nL/kmz5cdNxr9tsf24ffnHrba/
bln6T+3Wv2i3/GWb6f9sN/9V7+o/Dm7+enj784n9h9PHr2bO3s+7C+epKPpO
BZ0vfDUSP31xqlARDYMIlmnCVHyC3YDqT+KtAGZrtMnKxBOW4s3WRBt1CMZJ
Bor0JKONJmKkYqX3jcT5THjyQHD0ELYbDM/jMBp/gz7UqIN37L/De8KkYBVV
wYET/J16fwfcf7W7Se6oER+XLBy8n9x8TMN3rJ8PWD7tN302StOZHwk2nwo2
ns+tP5tffSTZBiNVrbg67O4uttqXXc1WRyMwyXhSaTirXPLUWbx1JletxVNv
9NRpnZXq42LdWZnRVWl0VBvPaq2eFstZi9XZAkYyHJQx4esOYrkgTGct2EYf
rMcdPb5N2IVgBQvevlf5iyjx7a/go+J4+x58f5AkFRCGSbya/iXYeIdYvhrO
SACktSQtnnED/yyH+0zeDmuwfzU6xuhoejM5A0ZajY0sh/uXAj0gJTCSKdjA
ipHK+Jg5mszieQ9AWnQ8Exw9EDtfkj4VJaQqCORoEkoJOAqMJHMXyN0lKm+1
2leP42wM9bAJZVSOjk+qDzXzgbYsiEQj2O6mGKcnSJ01M2BLdOB01QdrDSGq
fTJEak3xKjhoYCSAkyXctJub8n5ncd2oSPo+O7mZHeG9bIDMzczYbmZyK005
ONxuZ8bXUoOrNHVufA+WNyPYSE2tJtiEXHaZUzogOmIKUyDOHMXFQt3fREfw
QaIkSEXa48kxYNJWam4nM491eCkEIx1fqBw3+pMrLfAJdAdGYs57lyU8wJU5
cWvGlRgECNUBisBIWDJPs9zTqAm2gaa0YWIkZaBJ5Cyd2n81ffhy7gSM9AaA
JHaWUAVaqAEYL3FWSdzVUk8VzTh2lvIldJSIHGXAJ/y7NtwBUhK7S4XO91Rf
cfpo+vjBzMnDqUNac6fPKeMGsg2W4hqXB0qF3kKgjiJWBjuuTZbr0sW6VAVI
BrsN7K/UW8kzFwLH2+mTpzOnTyYdD6ddjxd8L8Wh97JQAbdBcHZUkVJKVbif
LXpfygL5ctqCCnAHXrkC11esC5aL2t6D9Xh7Cl81fBYg6EpmZiUtMMfGwCEw
6yQMkgQkTFIdzq2ctBAvZVxjZ/N83pYeASNxRUoqgoo2AMth4jkj6RM1pnT9
Uq7Zdt5O0aREgzXTDmsC33P/VnB0s8gZKfCdhSa+fTS5b7WOW9XxtWTnrqxo
fj3HBQkngBmkP5kaMYCcqSZtmKWuxsAtfFIAFVezCn97hhJe1nQPjdek9F8L
ST1HG3iYTuyhJfGVwlLAJafCGMeLif1Ph3Y+6d/+af/2P40efTZ/9hbfCA4s
jrA60mhJ0XEwxfpB5uAiPnpP5iONfbm/mmajh+sJEQNwgWtBiXJ/pdBVLHAV
STwV2PABRTzuAYuA/8W/SD0lOH8WTwsVnnJTrNEcb2JlsU1UDs0EqWAycADZ
EWuDrQcS8EEqrECaZv7amaAxF+FkKkY02YGkjZh6MJM5nSUZ7cwMOJbfkrwq
EzmncYTgGTY42MwG7LIUVSurBmnGQcOveN8fHCKuJQ5G2rieIGHkLL7HZooK
MkYCxVFIId3DhRSYfDrFuGBPWRqXxn1S6CDeoInVaxM1mniVOlb+PR2VApCI
5CPV6mjN3YrhDyo5GChCcMxBEaXAFdhEGhxGGk0DeHK8Fszx7vXM4QfR4Qfx
3u3C1tUUNY/ngJTtFOPKtuO9mbINumSNNlGNW5yKYCTgOmBJF62i7Ey0nC/W
3l5rTFCo9g78wAnJRku60ZbtYIUlzfZM20q6c+N8EIy0dzN9eDN3cD3LBxnT
wD4a7TfCR/vZ0i2r6aaNXMfuxeDexdju+fhObmT7fGjncmD7oheP49lsqQZL
ssqQLDEki/UprBJgkjZRqI7lY2kTReoYPnixOlqE48DCFAUwxFi4kAWOx3MO
wqSZk3szx9+AkcSO11Ru4avChgz7Ygy1ACp4ozQ2Pexj2IJwHkp8lSJ3idBV
KHTnizwFEn+xMlh7p4UYLqcVqoJ3QwlxEsegrkae7eX1bzivqCUt282q0fB1
4I/LsOdj5+f6kNYk1VpTRWKyiyc99TH4Iw1AI02EtDUY6OJODdWlBGvZFMtG
eGcsBVMu9pETB9cPD4KR9OE+bbDnLo9Aun8tvDuJmr9CFdSSFiwFU4n9VEa4
4H4pcD6fd71acL3FNTt58nL86Pn44Yupk9e4Hdp9NLhzf2D767blX7fYftFs
/acm8z80m/8egFSr+6sazV/UGP68zvCfavT/sVrzZ7WaP6tT/1m95j+06P73
zqWf9Nl/3rf66+HNz8f3sGm/BGQK3O/ZNL03WIuet9hgxd678jCpn+ocSJAh
WK7Gh2W7Aa5r2EosJoRezxTRG/ngGDCSNd5OljRUSXJDJPz4XHjySHT2VOHN
IzEHfxXDpDpdqFYTqKa2LIp8ssmz3kqtr8EQ6DSH+s2BbqOvQ+duVZ7VSQ5L
53feTa49HrZ+NWD+vM/4ab/hs2HLl+PL96bsD/gS2B+K119o90qWTptWHB0r
jnabA6hTTxGhkyowkvmsyuyqMTmrgUMmZ43urEJ9XKo8LNQcFetPy3Qn5brj
KjMwydmCZzAd1+r3ymGIgQ1UE+gvw/tUe8vxfdHZSIGUGl2wHJ8IcAL8UPlK
KY/GJupSGJkNceOVSLTwLfvradIHKDpQo/JUGYKtVlZfh7Weoh7/5fjYanx8
PTFmCw2sRIbARVupWVj/7bQAmGSPDv/ASLZIuznUaAhUcUEn4jQvqW1IccIc
35ve/0LkeKTyF+AtqYP5cJfYewMjFfMmCJWvkoFoC4VWosNL0TE24WtsKTbA
x6mYqIGxczk1sJoeoZVhY57SQ6uZPmwXjJGqjZFqE9NzMMaqySMLVQMardGW
wwtB8P+1u2/Vh+eivfNZMNJKnCSbVhPD27np/ezCbmaWA9JubnI7M7GTnd67
ANuIQThbmTlgEmkdRIf4ZW6ODNAgvEgTVXFwOfFY21KsC8wJdmI1V0MrscHl
6MB6YgRItpudw1OdXqlcH00n1xqaGJsat8T6tKFWCpqFe20xmuprS4zgs6v8
LdQv764hwasgqYPiEXZMBvXst8CnRUfZ7EHe7ME7wVHewkmB5KxU6SGMVwfr
eVcjnkHiKgcjLbrKgEbCs1LhGX6slntb1MFOY7RPF+6gwgBPIYwvhZJOHk4e
3Z/Yv88Y6ang7JnITS2oYi9850Kh5408/F4VK4LTrU9VGzJl+iSMZiO2fW2U
CrZ5l5DEXwSvEDvDnOfxrPuRwPNM6H8p9LwQ+98yN5wiwFS34Ly/6H0GV4sP
2ILLQ+HiQL06TMN2Kd7lqiLMc5WDmQHMNLclOcVHE94pHsQnbfHprYvF3Ssw
kvzgWn30Qb1/TVqRTIqhh5tCnrAzRhu4xdFFq7FMyXpbrs1+0Q1zY4LdSbXa
s93bVyNHt4LjD6KTG7Hjo8LzQef71oCz5exSenwlOric3ciNsnz97CpjJNK3
TI1b01PW7PhSluQuremJ1QtY/ylg0g+MRHhwMcFqhru5nhtcOVgBbLzyEDbV
EpEnf975HrvonOPFrOPRNFUg3J85/Xpk7zc96//QufaT7vVPBnZ/O330aM7x
bPbs6ezpa7G3TB6oVQTAw8DdMt5CAo7F7fzZuwUHfP8SaovDZeUrYXtjBf3K
+Z7yGq48/IoCg54ytkpwAuBBwcnLqf0nM3vPxI73zDEESlVQrW+kEhusknUl
gzANCdiXWsID0AsxZxVXqzMnqNeeKn/Oe3nY5K60+N+xCk2bYrVP1tQoH6TL
pBgIkPSRTmPsbqIo3Ul0s0rauxnrPB7F2o6othz4cUcgF8P0WtlWquZljESB
wXQrq5ul/OnqxSBvG8S/0+z4VBcPIGABfjTxag5IfKmiZUrqCaphEaQqSsPF
6zggaROVIAQs4AEgQZ+sMqbqTCnK2C5lumxs2hcT8xzdvZ0FIx19lOx/mKeS
8nMckK6lTBOhToZ62A1pQFe5Jl5hSBGus5BmPW552dUdIMUqmDRQA5l+epV2
VvfbwSte8JFXcqTQBbBfy/ZvXY4CkHavp/gCHWHt3EzsfZjauR3jYqc0vCbX
sXnZu38zcnAzuXc1vnMxvHnZj0dwu3HRt3reRbrT2SZLpsaUqTRnq3BrSJUb
M2WGdClu2Y+0dAmW/osUs/HB+TDHIvereedT+Fm4nT6+P3N0f+Hkscz9Thfk
Hc0kgkHuZLSHhhyxyZ5wfvWRfrh7NBvCVyf1Vy16Stl0pFKiFJKTrQa6YLHo
JZU9c7Wru9azy5mNK9I6I+H0VLcpQZ6OPl6piRSpI/lYmlCBPlJqTlSznFED
lwkiQIri7KWokYqSaBW4ZPi1gEXKhxQwr6ReFVLeqMYfiL0lhD2BSlZq2K0J
dal87VTbCXc10kqlv4AEXzmuMom3cNFbMO/Jm3e9oIv07Dku55nTZ9Mnj3lH
5OjBw5H9R/1b3wzvPQQd9ax/0bf5ZefqvzZZflFv+nmj6R9qdT+u1v5NjfYv
K1T/W6n8z8pV/wtWiex/LhL/SbHoRyWiH5VLflQr/9Nm3V91mv+vrqWf9a/8
amjjU9Ya8xRL6Hwmcj2Hb7XgpPZkABLAFTsJ9nBgEtt4i3AVU4cjz9vySAKt
OiKHYD0sF5sL3ItbfGv47sAVcleexPFaePxc4nrFiKJQDhyiyAYFN+hHV4HM
ma90Fmi95QZ/ndHfYgn22MLDFn+3ydupc7Yqj+vFe6WCzfcTy0+HLfcGzd8M
GP8waPpy2PL1uO2bieV7bH2zAEZafa7ZLV46qQcgYS07WswndYbDcv1hqfG4
3HhaZjypMByXG45xW6U9LlMdFMp23it38zQHhdqDEt1hmem0huJOx3XGg1rT
bh1PBWoC5UpvHs3PDZSz5npY0no9jcwoUQNFaBWBQ8AebKhuMYBK46sAC+Eg
GEINWDgUGl8N4AoYCeYHI2l9TcZglzXSbQ33AQy2KTOFNbeTEaxGx+yR0fX4
FIVH0sK9jGg7ObsaGbUF+peDfSvhPmu4zeSv1/vLNf5iTYCp2ftfApMWHU8F
x18Ljr+UuB8rfG9k7jw8SL/10tujd3X3xurMESbKDRSJTlgjk/bE7HqaxtKR
eiQrMqdBxul+cBF1L6Z6WIFHL+jXnumywOOI1ljidayNro6poBfiyFgidauJ
jpNrYej/WXFey4/PRQfnM+vJQUuocznav5Ycw8ek2S6ESZOMkab2z+fZKFIJ
wGY3S6EkYBIYBm8MFziWKdZHgkjBOgCbPTVMmgbRFmuknW0IzZZoOzDJFu3C
sid6N7NDm0k8p/DsVkMD6G/VmzSnbHQp3gtG0obaSeIg1GOJUCJPF24hdHGW
AHVUgVZ1sE3ha1YHWinAGx2GNVF4mxTeBhCU2FEpBgI5ynArd1H8jeeINf4G
lbdG5inHk4hdFVIgk6dG4q6VuBqV/nZtqNcQHbJGR0B6wDy5t2LRnS90kY2m
ENDhk/nTF0LHKyyRk2rpJZ53cn++NPBGFnyliuZRtD/baExXkaVINi9lO3ko
SR2tg31htZcFIu9bgffRnOchMGne/ZjqGTwvQESy4FuJ/xUASeD8RhJ4Ig+9
5RFpse8lyzHBj2sGblGv0EmR6KxUdAZHBudGA0XqmJwpp1NjaMAcHsVay8wB
k7Zyov1r2dEH5cGNfO9GvHYxyXrZulnbC4U1aCB1qgFoxBR668yppqV0G4zX
ynmPNdvKJfc3L4YOb2eObuePrheOrkRnN3LXjeLsSrKfE+B8IKJOMfGQJNX/
LOfGKFEVH7EkJ2yZcdv5KGckUifITlmT40vJIa6YzWfA4f2QbnasiQX2afvF
0RY4XwImsZ1OHj2cOLw3eXxv4ugPY4e/Hzv8dPLo88HdX3bYf9q+8vfda//c
v/O70d0/TB0/oCLPk5egHfjdYFdFIA+7IgPaF2LvO6qBP30Ompo5fYJ9Uuh6
ueh6w0tthY43syfP8IpCFxDrHW7nTl+CpkSu/HnH69mTJ2N7X41sfjmx/bXw
5AVdntj9fJRplXjJP6UnCZDoiiZWDuOoDBdQsilSDOKlEohwNUgGn5FwiKZi
tXPxGTZmvZ2PUKecSLqPz0Y3xntIMj3Ru5wbXs6NkgpEuJkNoyETRjMUUmDX
buoGivdYUv1MXmACNEXKSxc0OG/nehZHFbSA1wKBkCJ6+q6ml0MvEy3vXLui
yAPTnhpYyvThaVngqwmkB9QH/HA0wq02UY0FItIlgE/UK6SJUUYMD4Jn1PFS
YqRoEZY2Xga84S/HMYnKY3JUMEyC59fTBx/mD26Fex/mNi9HcYKtXLSZ07Xs
vyrhVmiTpcpoMX40pmt0iUptvALXkS5BXAQ60kTKsL5npCZKq2U6lpiAD8cw
+/kAyHD9anTreoTh0ASbdjG7czVJZVqgo+txfkvBpVvcH7pjoeu+revB3Zux
g5txrJ3r4Y0rsFM7IGrjsp80US86bLkW0iPK1S+dN+DWnK0BLJlzFZZc9dJ5
nTmLg1xvTlfr43fBLlWohInh0BA31rf+GpZ6/uwxizkUUO0Ki1FgP+SSL5Se
oHmdUyupCXNi3Bgb1Ibx1beqQzRiWwLYCFZRF22ogYd6cD5g4SvDF8dbBpjH
gdOAWiy5vgSpY6XaqEY6VqYK5ylD75ThNzL/a00ozxgvNcYqeecOPxsZI9VT
V2OwEnTE/QhSniFSKpQwpTj4L7hOKaYUohgvdTjymt5QuyrQLvc2cReVB2nl
PhIYlHiYdorz5bTj6ejh1yMHX48dPpo8eT5x/GT08Juh/c8H9343tPfl0N7X
PRufda9/itW19vvO1d82Wf6l2fxPdbqf1ul/AkAqU/55meI/gIuKpX9aIv9R
keR/KhT96XvBn7yf+ZO8mR+VLvyoUvwntbL/tU3318CkXtvP+u2/GNn47dTe
55MHX8ydPMSRF5w+Zq03z+adT2bOHk6f3gO7/tBoAKblxfZwfLj2EVWkhO8w
CfwAOrLGOy3RVlixH9R7pI480fEbUsdyv2MKovlY1IlJg0VIHFt+lqdyFer9
lf8fU+/h3Wh1rf9TkpvGTUi56SQQkhtCIJQU0iAQYGCYPu69W7Ysy73Icu+2
mtV7781yt6zee7E9wL3rru8f89v7vAPrt9ZeWu/IGpW3nc/ZZ+/nUaKE0ZAq
MKYNTWsC48rzEdkJQ+jr23W2bVhqlw132OobM8r3pxXvzaren9d+sKj/YNHw
7yXde0u6d7cMH3Att2WeJt1xv+mEbjwdpvJIUm+T2N0g9TYoDprlvhaM/VaJ
u0Wy3yDy1O05HgqddfACibtJ5m1RHrSrDrsU3k4AJJUbVwPlsV5ptIUPk/2T
20ACmMeIj8EvlYU7qTQOUAqppMLmU0mohdRON5GcWCvgEAAJicdKj6oY8FU/
8JI0OCALDivCwzBq27Kr+xWBO89z5zme4rY9s2qKL1hTK7bUuiuz48nvODPr
5tiCMcoyR2YssWl9hKkK9QEjAaQhIwUfCsN3KUbaOv5g5/TfwEjc81v8i/s8
/220TfQ3EmADju0mqEbD8p7ImDbO1ieWdbE1U2rLmtsGUtIkSekO9hcMEoPp
cbROTg0TWb8RU37UmBtGY51MP4Q82o5SA5EWYaAWfrgm3m3O0A+rG8BIJ2XO
QXHdW1o2JSdV4WFjctqWxXVDd5brLWy5C4uOLMuVWz6scI5g2C3tANi4C5uO
LLb/A0phoXV8Rp+egzs8NnMF2lFuND0jDw+oIriipwZAgntChEbBEkXmaAuY
mYe3OrkW+T9XHF7t2QqrhuwszJdFERoRUxrEZdwQIRy4YwQ6OCf1/IsOcZi2
F6IBDsFrNIkpABt5ZGjvvFfo73ssVxVmiC4G4J/kqA1h5VhihCpXxp4CfysA
0l6oj5Q20YUBpiI2o0ktaFKLusQ8cYQZg1fyLpqJlkXtxvH9reMHXBwfURkV
pcD8D1A4Lly/F6vhBG+JErXa4qC2MIwz33QHaRajPV7VSvRiJ3WkBYuLwrWr
5+9vBz4CQILY9n8CsYtNQ3e3/R+vnfxr4wwZCaALAIkTvLtzcQtrG4Lt/ADK
gKwf3F3dv7d5WLd7XMM9bpYE+oAekU5j0ySVx5IFJhWhSXlwAg4HVqNll+zF
NXd1y3uFLmC20hIO1oUJY3naXMY6GVRpoLyfvkAjqkUXy18LqAdC1QO7ymxP
adlbXvWVN46vOEeXu/slwOZlW2bOkByDo4k9HQn0TtLlWaj7nZxRp9mkRArd
6mGDrL4tw5No4EJs+wgYjClSQ7CL0Pon3MINNHACtWunN2B2CXNMCJbrbZb7
nwu+d+b332Z7/w4xv/+PSdebDNNLQ8bfMs2vTjrfYrn/Pu99d95zg+39ZOXk
Hso1nHyEaxyHH6wefbh+fBOICLgInoS5PLwV3B5Xjz6AMYsffAiIu3l8e2n/
g5WDGwBR1NIqbG+dPtw5r1s9vAWANGNHdcR51zvrvhvbRwBXcNzrgIu2zz/a
gQsW3gTLdLEKhQDtHTjEcNeFgOelsV74mRSKYPc9dj13QVC5O+zfR5+FIXWG
iJWlhiSxx3VTuPiVHhXHaXvRHlK0jyFJ9ilzDHheDVSTnYR9i2ICJfS6tVbX
yPi4BIeVqkLR5gfUlMAgWbQCDEbdvAyNetQXGTpSNQ2HgBTrjpAVqwGKkfZi
rYJokyAKjNQuy/TI0tiMIE+NKDJMRYZB/tlLrYthogk1Z5oQab5YIKMwCbWb
8nTqpLKUJoFbXFer7qt1R3XeVJgkCNePuZdEnTTdKEk1CKIPBZFagCJgJABO
bESKQTSQxyZsRIo0AH7IUQAQq1y+zB0RNKJ6+jBTRK2pOS+X3NcrnqsV9+Uy
cBEEUJCjwsLK9gq1MU0xEgCS43LWdcmCF8CjozpprYwCI8HztsqUpTxmLI3C
7oL9qSnQtMUBCCCl/z8jwfOqXL+20EMZgsjRiLkDc4woI9kIdww4zdDx1n+b
e35XFGpUp3rVKVTOwYltYgju2GhhUFimDA50mQUiqDiG1jBxkllFibw2omFC
w4j3kzkFruYDKBIbkUlrCchwAYISmQco1RfHVVmGLNUtiTcDI4niD8SJh4BJ
sni9PNUCOCcGGIh1EO3uXnmi/0tGooxUSBDlxkAdESqp5wexAgoQCC5YQaQb
YAkYiXeB0zcIfqCPH+jhnLfDbQoN7E5qdk4RkLAx//DfAEjT7remXH+dcv5j
xvUeQNGE/a/j9jcmnK9N2t6asv8FYlj/B4bu1VHTGwzda4PqV2jK/+6W/rJL
+pM20bONvK818r8KgAR0VLv9xMPNJx6sfuXB0lfvzj91f/7JhpWnWzafbtt+
ul/4bYbsxyPK50bUv5rQvTRnfWPe/sel/XdWD9+j7gaASQBI8H2WDt9dPf54
/fRjrBY7vwnzU5iTwumHygBEEV0cbgFMIoTQScpUemDYovInJHmCota807pd
FDu9Q0ERFbunt3dObnHObnFPHvCOHqL57Hkbaraf0QGNNIFJYCTFGVN6PCT0
0TjOjk1r06rxwaLu1pQcGOmDOdWHC7qPlgwfreg/XNYjJm0ZPsQ8krNBfdCj
Pxk0nDC0x3S5r0e63yJyN4g9jUBHioNWoCCFt13saBLYHwAdiVz1QEeYa/K2
ADhJPa3y/Xa5p0Ph7FY4e2SRPtTZiLahyc7hXUmwnUhkTFOly0A+pC2iURZp
I4riuLxIrcrxz+oF5w3w86nqI4Ar2BCed8rDuCgJsCQLDUouhrDeKTppy2wc
VaX7RbG3KPCWdtyFdVt6FcKe3gJG8ua53uy2K7Xmgmdii/YE2xKb0EUGVeEu
ebhZFKwDFhKG0D8adyzsT//NndMbu6efoCAV3HX99SIsf8IrCKBC6u9VBAfJ
+tSMKbFkTW1bktvwaMtsmZOrZBUb7fYIJtHVcQb8L12aYchioE9flqlL0w1Z
GO/64VcTBdcGYfCeKFgjCzXoYl2+4mLoU9VBYW0/t+TKsw3xUU2YaUnNOrIr
luSSO7ftKay6C/PASO782mmVf3bF9xXWnNkVZx5GyQWAHHt+wZRFo15DhoVW
I5FuYCRNctSUZSF4B9pkgU5NbBAYSRbACjE40zDrlSOuo7lFT3nz6Fpw/j+y
g0ueFct90cUMc8vBPrQviQxIQv0kN4XlPZyTWtQkjPQJgt1oTxzuxYZo9C/u
F1/0wjHSxJHN0PQ2MqYIj+piE5rIGNEwRwUGRWRIFgJw6oUpD1rIRcfEwXF5
aBrt23LrpjSm5h431gGG+Tv4F23wcfBBgvN2abgXoRrmdEFMqIpCzSh8EYXZ
1l1poklfINqJMGfP9Ihi2Dj52GotDreUdl4Y6zr40fpN/0dUR8zm2ceAQDC1
gaEWGIk0v7wLjLQT+BCgC8AJYocU4XAvmuGH757VrfnurHvv7R43cE/r+Ccd
yggTBcnjc9rIjD7GMiYW1ME5eRBlE+DHwo0X9oMlj/Z8rss11+WWrbxIFcqa
StMw44YbKex/Yls5gXVHl7MwdzbkRtE6MzdCrIiGTYVxW2nGXphz5hc8pZWD
yjpgEgScEq7cojXNoshTGqORgqhJym1WnphAu0nKFCPPwg2STQJGQg2rGFrU
KdMMoAIqfQQ3ZJTrPL+9cXZr/ez9Bd+7AEjLhzfm3O+QNsCPMa10eBOTRUc3
Zj3vjNnfGrP+ZdTy52n738lrPpzfv7Xguw1TVIQrHymzP0RAgrv0xslt4B9S
V/bu4sHb876/LR28vXnyES/wQBis2z69iwJuh1hpBo+L++8s+d7bhFvHed3a
0W3CSH9nO99e9Ly76v1gff9jYCqYHXODdXDI4B0EoRpqYQUP5fkHu8Eb2xe3
IbjBGnG0ExUYCijLqStMUV3P4lgLDPQoiRwn5hRwKybVTSh5lERpLDhbJEma
Kj8sSVB5m05hvJ0AdguFSdLMsDw7Boykyc8asL0OHWQILM1SBxetKFI9qCuY
6YIPIunBPnUWK3ZgA9XzUj2adJ8qjTqB6vQI1ZSHpJRlYOYz0Q6MBB8niLYC
3sszWOguJ95YmuwUVrxnhkhNb7ckgWJrmENDn9Dex9mqDI2snSGSISOVhgGT
zMVxa3mG1AIt2ipwVjCRc9KklileC4wkTNTBjAA4U5xohimGKN6Cfg0h7D8S
ReshhJE6CIAl9N1IEs5EDZ8BwCQgBDixHdVlBKQKGvbBZ7muFt3XSxhXi87q
nLM6C4G5oxIGAJK9MgWAZC2NAQjBme++miOANA3PmEtMS3nYfgmwNA5hKY8Y
ywx9ka4rDOiLg7rSoLbU/5iRiu3qQjdSU56uyaPXM4VwcKwBPzApEUdxbFzK
CdQKQzUQslirLksjTXz9QEpauFFnxsy5WXtpyVnecpZQoR2Nm9MTuKKKkiDE
kjXShd3B8QESNEpRCo4goCa28uVgD08Q58THFzXqEeVw/RQOEIz7wEiSRL00
2QCPykybMtOButy4iNkpebxsR6Pa2cSkvo6ILrbsRVoxcN0NE0qAT3C1EjG3
QaB3EbkDc/1dAriXhvpgysnxt22fNm8cP4BY3b+9cXRn7eCjec87c56/TTv/
OO18fcrx5oT1zSn7X4GIxi1vjJh+P2b9HdPw6pjlD/CnId1L/coXB9Uv9cl/
TVO+1Ct/oVP803bRD1r2nkFA4n+1nvs0BADSvdUn7yw+eZf9ldszT9+eefIh
++naxaca157o3P1mn+C7A6If0sU/YcpfmDK8Apg05/zbovft5f33lnDm9T6u
7u3/i+17d/nwg+Wj9xGWTt7bCXwEt1xu6C6QErbdRZupcm5JBLvSqFZKQCNp
qAvwYO+8GQJogXtSyzmu2Tz4ZMN3c/Pw462jmwBIENvHaO3HOX4If+WfNorP
O+R+mvx8SHHGAEyCR8kRHQIYadfRvmFpXDXWLGrvzMo/YilvzGtuLhtubZjv
bJhvrRlvrhlubBs+2THe2bPXKfe7gI70pww1/Pf9PomvU+hpEXqbJN5mYCGF
r03maRbaGvZsNSJnA0CRzNum8HXJ9zsl3lYI+CcwktTVJrUD+fRSeq38szr4
FdJQj5bqTExP6RNMRbQX4SfYjIwU7ZBHukh+qRt+O1VeRRaL2zGDFGqBjT0Y
GYOkIS7Yq4zSpQE69hPFpuzZ7ZMrpa8g9uR4rvyGu7jqzG04MpuOzDY84yvu
+fLc/dzWQXHbk173pFfsyVlDbFgd6VaE28ShegG5PwuDDcS+px54CUgJ9q3g
og4mGig8G2VQPm7aGFMeGFCFh81ptim5aEmtObIcR5ZrS+/Atjm5jJ7yyEiY
PVPEqPUsOqnGRy9jfWaYCthWJ3twtTHQIAU8u7gp9N+SXNxThRtc2anzqvAw
t+xKz9pTk/A9tZFhYCRrahEYyZPfdBcWXYUZwKeD4ubZpeD0kuPNz9vTbAiq
xc+SYcEe1qdQ4gDFOcMdwkCrMjZsys/B94EzCnavLsYARpIHsU8QeIbIbU2Y
y2x7fsld2qB08j1VjimH0twwXYJ5ClyDRDGALiV6PtI4KaM9byCM1EtkNptg
X2H2DH3xMEmli4/Al3HApCyP2gvGJKpiGpMzELABzADfkKoqlISZ2uS0LsXW
RDE158xvu4u7gL761KIhw9alp+WRIVGgFwIIjeirM9F9G0vQ6ZT2BRa9x3Hh
UhSuVSTacYEjO6XJ4v0fGEmAUmbEizZJE8a6YcQRxluAkXaDdyEAjZCCLu6R
XuC7MM2E6cyW/8PN83/D427gNvZfBB6SIsMazGlf9HDPWzaPHmwfwFnaIQ61
K4NMU2rOmlmBc8AQZZviC/bMmjm+polMqsNjWDWXBVCcpBiJMguDCSZJMgxT
snLobgYjVxWGBpiGz2Eta4VN/NfGjQXEJJii2suzOA0vzSMjFZYhcL21tOIt
rsEGsDHsUhQDSTBV2WnUgosPiuEyicFITbS78zCUT8KfiEP3vCYzJ4czJDoA
9EjybFjDsxdp4YRqtvx31k5v4F3r6J9wH1s9ur1+cnflCFfBUBkmhEKUnEDr
pr9u6fjuwtEnc74Pp53vzrnfZXveXzm8s3pSt3L8cOnoFjDS6uFHW2d34Ra9
dXZ/6/Th+tG9lYNPsOTeh2t2c96/LOz/Y/Xg/e3T23x/LUxSNo5uYpwAI723
dPD35cN3SB4edX3hmUXv+5hlOvhozYuxcXRrx3+fHyamSxh1FCBtnL2/evzO
5vl76/5PdgL34ATQZGA3LlpKa4AxyswYDO5w+4XXw4gviWNWhB/EDD/aEMf7
UM+QrKFgvXSyT5EdEiVpe4kefqyDF23dDTdyws2wzY91wfOSNF2WGVVmJgCT
AEGJs940GRNRggbHvkQbZeP1JSNp8zQNoEsaAKlbne5Rpx+bn2LTfQ7ICo8U
9uKlGZJUF1AZUD18E0WGoQZ8ys2oMuiSDJ8CQIWyOZgg7SFfmEZJRgA4qXPD
pKIJAUmRxffX5AaRkUrDaChfwGwSAIyhOKbODiDnJFv3YjWYR8o0CWLASHeo
iTwWJIdbqLUqHkzlwg/FkRoqZPFGZbJNAT8w2iZP9gLp6XN0wHhcWbtadV3P
O6rwEUAI4/bqjOOSrLtVAYqmIACKAIGcl48BCbbxxeVRa3kSnnRdzXouZ53l
KUsRK5QIJo2YSwwI4CVLhWEuDxmLgxD68pCuTFPm2pX5FmW+VZXvwuRSAX4+
7ltqwZoIAfUSb7Vu6hYhiTTLE03w/fFGkaWhYnOqX5cdNOSHibzVFNGmRvsb
VBatrKIAPmqxjgIpUQ7OX9TqD5JAmUdkpDxmeoll4QR6xRJGomxqdYUxstzf
L0m2AXlK4hgAmQDPEJQzNXxbqoiOqn4HTCIJ8B5SGd5GFNsQoqgNONCEo9Cm
QZKgk6aGft5FN/YCB7q24e502rB2VLt6eGvV98m884MV94cL7n9NW/88ZXtj
3PL7EfNvRsy/ZRpfGjW/MmZ5lWl8ma79NV33q0HNbxj6l4YNvx3UvNgr/0WX
5LlO8XO9she7xc+17/1X6953m/hfbxL8BzBS3e5X6jlfrd36yv0VYKQn7rCf
vDX9xCdTT9ydeeI+68n65adaNr7Wvv1ML+/7tL0f08XPjat+O2V4dcryJxaZ
5sB8B9uKPe/BJIvl/RdMvqjs9NLRP9bO/rV+/h7ceIGUhDFsn8EEYLCWyKfX
CQMP+ef3qIZ0UomNtUaAQDuH97knNTB1WvG8v+67sXHwEYzgELCBqSSYy581
Cv1EWTFEVwdHlBdM+emQ+Hhg76BPdDQIwXF3btqa18wNS4YHgEmLulvLhjub
5ns7toc79gc71vtb5rvbxjscywORs0np69UcDWpPGOpTpvxoSHzULznoEfk6
RN5W6X6LzNsCaLRnqxW7GuX77UBHiv0e5WEfhOKgG0JOeAnYSepqUcBELNwh
jXTioqG/TR5GEWns9kqzAJOAH4jFWyuVUYGxm/LZBEwi6o4tAE74glCHLNKC
a3OkJAm728L9mgQutAEjqeOzwEin16qDosyNuLLiyC04suvASM4sZ78gOCgJ
Dwo8X377uLR7nOf4cpvONJswUq8SM3iNBJCaiD8Rkqos1gzUtH10m3NaI0Zh
yX5sEEtMaROT+sS4OsLURcZhxDfEFszJdQAkV55vz+yak6uW1Io2OaeKj1Ky
54hJpA4fAEmd6KNaF9F5MM1QJ2iohhTtEPlrxMFbe/4PhRc3pcG76ki9Kzd+
UuYeF5dc6WlrYtQYZxgSTHNyxpycsyWXcTTMs1yFKU9x4ai8C4x0Ut3ez8/a
M7PmxKQpiQFfUg/8kByVh1GxE3Y+WgwEsGxbGR8Q+BuBWrXRIU1sUEUylso4
2ihrMjBTW7Lk5x35VXdx21flw13CkGEpkyOUQqMg1EUp6JJqVSa5hzNJNXsL
tiHEuvgB2Idt6iTmqw0pBqo2ZaccQHTFdWcBi8lt2WVbbh7oyJKZt+UWKacV
2Ku4YBpFuRtrfs2UXrNnN+HTfWWePb1hyi2Z84toShjDn0OZDqMWbnbOUV5+
7GWfGUMzR8zRMVCrIdIM920UTCsABozC7RHGKUqIG31G0oPSVD9qEKXa9+KN
vEgNB5A4cJ9qE94+vQtjwe75/V3/LU7g4+3z97fOPuAG7sJgChcpPMIMjohU
DwlDPbyzZt5phzyK2hTAzPbcGlbEpdYtSWyl9OR3HKkdXXRWF5uGX2rKsgBg
4As7q6u20oqjsmItsQDhUDMNjU0nzQUEJFt53nm5BNNwIq2zBCMLjBr6HANm
phCOCst1ueCpAhctu/NL9vSCM7+4X1nzVTdhXgC7Gg4f8KQigUO2NDEsjPaJ
YnADp7xgYDI7ps6PKdJoE6NOswgjjcJu4Qfbqd4ZQbh5l3Tub5x/vHryPjDM
4uE/NhAg6znBRko3TxhDfUgsDY0N8SI9W4GWjWDTur924QAzSxun97bO6jf9
TRvn9Wtn99ZObm6c3dk5r0MPlEAL96IZM/9nNZhNOv5w6fAd9v5bSwdvrx/d
4J7dh/kIzFM4/gfAqECtADmrJ38DztkhiSBO8O7G2XvwH7fP722dwKT4JgQw
0u7FAyzNDbbyLtChEliXrJMCX/1j9fjtjYtbvEidMjOI9SGko1+Xn5MmhwCQ
4IACD/ODDwGT4JF7cX8vXE8Us1GYkRqGEKcjncBC4tSAIN7Ni7YDIO2EGoCU
9hJd8MxeslcIZJIakqfGlBkEUbSmio/A+AVjGWkrg9GtCQgENoCRgNhhTNQV
BoCRgJpUqU5ttkeTgdG8m1QooTUJZS0Hx0uVGZOlgdO6RfEeeYauLU7oS2xd
YUGbX6TMbuRJpjyJCUBKPwcChm94JEVuI6QTv5dabqbySMYyE8JUREyylCZs
lWmqHQA7rchCmzhZL820cMMP+ZH7pC8MV3kEwSbcsef3ORd3RKH74vADKmTR
OmWiVRGDW3erPNapSnUjJmWZAP/ISJdsYB7AG3L2jkMAPgGYWYrj1tKEtTTm
vJxyX7MAhwCQXFfASxP2ypj9chJgCTDJXZ1yVXD1DRjJkB8y5gcgzEW6tcyw
VYYtpUFzccBUoH3JSIpcM0a2jcoj4com7lLY2wMUJlGhSvahChPu9i5FAm71
rfCdcRU7SzPkB40FBmCSMTtuLcw7Suue0o7rcgswCQuKiGYjUfgcx75g4pxI
9aABIymSj1czjdlRUnc6ZYeJDCm+shXZlsKMvjhpKI/DF8OcXq5ble3GhVcg
5Gy/JkejgirpV8L7FFAZSZYcoGrS8ERK9MCfUHsh3keVPxE1gAGYvcoSg3CN
o11sdIAf6MF8fqB946R+7ejhysH9Zd/NJc9HM5Z/sa3/Yln+Nqp/ddTwMkP3
mwH1zwfVvxhQPTeofp6he5GueZGmfB6iX/4CPPZIf0pT/qJfAVz0o07hz3sk
L3SKftIm+EGz4D+BkVqEX28WfKN256v1nG/U7Tx9f/UJYKS780/cYT0GpAdz
T9Uvf6Vp7WstG9/o5ny3T/jjfuFzw4rfjKpeHjO8PmX+y4z1b7P2t2FKxfLi
St+0522W9x2W++8sz18WDt5aPkZSWjl5Z+viY16onvQU1+yc4cIZz38Hgnv2
yZ6/TnhRD4HOsGd1AEhbvrtASsBIEFtHN7eOPoLHzcOP1/c/hpkX7wLHKZjP
ivw98sCAOjSsCjDl58BINOFhv/SULjsbAljiuDu2Ha1rlrpV070V41143LbW
cBy1XEftLpCS9cG28S7PViP1dqiO+pUHA4qjIdXpqOZ8XH46rDhjyI/7Jb5O
+UGHfL8V6EjkqAdYUh91604GtadDujMGhPKEpjjuBVgCTFL42pS+Vmm4maSA
OlEEO0BXRsYok1ldcgJVrGPDWCFDSoxEF4hAKB4VZ8oiAyK0r+2jlCEloVaq
jw8rwEOD0gDDkJ5Fzeo4C0DFklpz5ne9pb2Dyh5wkTEyDyzhzHEdmV2SR+Kc
X4kwM5PhnBUE5yXOUX7DnYbXTJjg9oJq/O1YuQ08Fumimunws8Id3NO63ZOH
wHW61BiM6ebEvBk/blIfGwMOsSSXzIlFU3yRrOhtwAe5cru21LY2OS0LM7Fo
Bx2L+iiRTHR/TvSrE4O46JYbMGYGtfFBVbRTE2+QXNwTnt8QnH8k9N+VBmo0
0RZ7euSwtOUrzbuyM/bUpCk6YoyNWzGPNOvKLR4XNj2ZJW924ai0dlwC6tuG
jf38vCezAE8607PGBCpva2MMlJ2MDshQGqIDSAZudChjEu6SBPoApIGg1HGm
MsIkDrwTqjhc12x0SMwuWPNLcH9wX23DOG7MzegyiHwwE8ci1dQ4ysJkJoFA
KPluSaiX2l2o8R4C4OyGF6PWa5Jpzc65C+vu/I63BLHtKqwAINkycw5cQ9xw
5Tft2XVzdkWXYiljY/rInDW1AvvQleO68zxfWUA69dZt+Q1Ldg0reQpzxiQL
oNSe3nHmNrwFka8s9FU4ztyqLcMGVCDJw1VNvFcd7dPH6abMiDU3CfhEtA6G
4bZGaa8pUpgzJ31DmDmHKTNq44fIOm+0Q3BRh0IQ2DlSzwvf3zy7QSbUjYJQ
mzTWCz+Qsggk2q1jkiBdEgTcnUA/vuyap7jlq+y6C5u25AqEM7Puym640quO
5KIthT/clmdZyezSWmU5q/PW8ow2N0JNQtUZhr4wSiiI7blaI+rT2DbuulqG
qSjsbUdhwVtdO7zCdjb4FE9xw1FYBiiyZ1Y9ZTSK3a/wiBvsljG9hOm49DRJ
EHXtRXtkCXSvw6KjNJbZoFQvGv/NadIzshgDSyzC2DXDCzbCvQi7cc/vYQvh
8Y3lg3fXDj/YPnkIZzIqu4bQSkYaY2JRU35emZ6VJaZkCYCxEX6od+cMu88o
Q0NesAvd6v0wsD7EWj6U+2DA5YzSbViZ37SDvcbYZETcDd7ZOP0IKGUv1Izd
baiQXMML3tv2v7t28ta2/9+80G1+6B6uemP3bpfwApmfSjoBWQFWSaOYdkZb
MfQTf7Bx/sHa2bvrZ+/D225e3Ichxlhguyu7ztKuubgKoChK9ZB2p4dYe4Yp
/ftY6h96CD+fWpfBKgigoAjRBCaPWK2d6MbF2cDdrUDNHoBBCv1E9lIATp3A
osAqqI+dYOAqDA5b7aSApFkUb6EarABCcChPD6iyA9pCnybfqUi3ypLNwCeY
TEjStWmA/GlDYdZcZlkqc0Ys9mZhSgGmVOkJPUwuShvWyq6puKXNremya9rs
kjKJ1loAurL4GCVmi364qSm0/MuMU53mFH1pcrgShDXbxKjLVpklVdBT+sKY
Kj2ES9KpHtT8x8W1tr1ogyQJP7AdvjzaWhE3N955DQxJe8H7mEoKN0BIoy2U
VpIk0iiLtSN7JJE3gIKwvqg0ZSlMGAt0IBwS1CLUODxvLU5a8/gastw2Bchk
r2BYymOASZ5HSE32yhSQEqCUKc805Rm6XLc+3wfvZimPkJwS01Aa0hcHAWx0
uV5trk2Ta1JnGzXZVn2+x1AYUKZa1OkudapXkx4EbCOazIOYL4K5aqpXl+mD
0Ka7dZkeQ45Ghbk4RNJWY6bchCWPyvOu6qrniuOsbqKFENpVz1ChJqQEuxq9
gbJooUhq70e0WbQzBiKCy5zIaC9jCdbVIlzU5gILJkHG/KgmTUNxpHwvOQd6
jcVBU4GOkWcAu+oLTASk/JA6j8hEBVVXpiLNg1h7htVoKMIPIUvRhYn+vUQP
J9QJsRvs4IXaucGWjdOHS75bywefLHs+WfK8P2P7y4ztTxOmPwxrfzNi+BVD
97NBzU9o6u/1q7/Vq/zGgOYHDP3zA6oX+uS/oCl/0CN9tlf23T7l9zvFz7YK
nm0TfK9D+MMWwXebeN9u4n6jkfsf9btPNew81cT5j8bdr9ZvfPXh8tP3Fp68
x37qzuxT92afqpn/j8aVbzQtf6tx6ZnW9e91cX7Wzf9ln/BXA/LfDqleZqh/
z9D8gan/06j572O2d8btb084/jnl/MeE828Trj9Pul6f8rzC2n9l4eANmB9t
nL+zE/x4N3STE7y1c3FzmxRCkMKYGmz1uqiHgVsUaub762Gkhtg5vgezrfXD
25tHDzaP7m/4bkLAOC4KdO/5O4UXaLUs8vdht1dwCEJ2Rped0pR+uuJ8SHY6
KD8dEh30c13dHGcXx9W6aa3bND/g2utF3k6+o13gbt+x1W4Z7nCttYqDXswg
nY1pgrOqMFsRnVdH5rXhOaV/HHALSemwQ+xrkflaNAcDuhOG6WLCGJpSX4yp
/KPK82H4INlxj/SoU3LUKj5sEl40EgGKLmAhbARLTJky88BIqiiqSgIjKaN0
KnckhaE22KmMD1DtirJojzo5pEtOoU9ZHNfXFBGaJjGMhiaRMUNqzpFft2VX
LellK1BKdhMxqchzZNdhtDXF5pz5bVxrS294MlunZcFFRXxaEPhLQmCkw8ya
J8l2JCet6VFNtEcV7YBdLQ11wOVDaTGRGqpeuLfDnQHIDRjJlsN1LmAkfXQS
k0jxKVN8AZ6hwhhbgLCl1q3JNWzCCjPFARo6YcX7hOH23bOGvVCbMtajig9o
kgP6VJ8hPaBPMshKX63w7Lbg9AYEMJIsWKuNtToyo4elDV9hwQUjb2rGGp+0
JWbsSZYtMevNrRwVt7zZRV9+6bi8DoB0Ut6BDXgxMJInt2DPICOhkGaErooN
wY4VA6T5m3k47jeix2Kk+4v+1ilNfAKOAuxhAE49MGdpyV5GnwVrcRnuCc7q
OvzThPKwkySr3I9OYZQrGbqrzMDAjRYnCTqEHP0reymtBuoZgBNncclb5HgK
XKAdKtGBSuDISAsAEu7CFmoyZFeNaTQF1kXn4Di6ChxXnucpCvYrAi8wUmHD
WdoGTLLniO5cbhHwab8o3C9xDyuSo0vJ4SXPW8J39pbXD6o7++UdS27UlGKa
UqOWDLbpmfPTKGtPvvkXM8FxlM0hOv9YaZnpQdW7KGp+amA+HuvFiNJIMqEN
Bk30rMTp2wDWiuAJOYFeMOkpsnY2DXvPnGPD7ZQCpMNLLtAg8BKEO7fhwmQm
FonZs/N21Cyag5snqedk20osc3EK7qswA8VJaHoQpYkzTLjBui9XvVc72BWF
Es0LWNKAgjarvqutgyoHAj4Ffiw6rJWWrJklmO36qvyDS6HvWuSucC25VWN2
EVCWasISx2nyJBPddZMjgLvKNBPu7UBHwEiq5BSKCYc6UEw40MgJ1FKtJbsX
NdQ22lqd3xUEm7+AzFGE5PSUsbhkLK3r8iswTOtyy9osG8bovRCNWF30Uml/
FNnDZvwWODHUiRFNfFIdZ5CrewCIlHvxEHVRzu6un9xYOXwPYIbkcLpkiR6y
OIV1ZdzgR1vn/+KFPqFqYFC9MIIsAQcImf+ibi9QD3dIqphTFARE70T5l0j9
duDWpv/DbT92ygiiLQDD5tLiY0YqLSMjxXso6T+iyoJSQhBEfbFJGu8UR1FG
ABgJCIFYJDQBPZImpi5BrGEr8GAnBAjRp8ZlXIYg2fUlI8FeomwosZI2inXv
8CbU2gpgEql/7iDjHXZdfQFIbapstzZP06MZLpHazk9/2ReGckmFUdi2V5Zc
l1vuS46jyrdWuObSrrGwbcivYdV9ehp2viwKaDSrATYm4pakV3FSlx/GwqdU
P2rx5bFaG94K3d5hEC+xUMKxNG0qjOuzI/Dp2ky/NI5Fzop0J9ZokX7/x9XO
gUaYOIgCTbJImyzWLI8jGsHhUMCLE+0UI8njHapkD0AIgBCgEVCQpYAsBO9M
Vq8QHiDgtKc62lzlx6XaFB0BGtnKo8BItvKk+xorkSiCAnwi3DICgATkA4wE
dGStjNuqY6YKFiYBfely/dpchzrTrMo0qDMtwEjwYngGsIrKEZF1ahQ5B07T
pQcg9FmEIn22Hx5NhUFjfgCmrsBIgGSY4ypO24pwUS85Kyuw2x2VNbg3UoxE
iY6iFUgapdEp7XSqBgn2pDGPP9xWmsGWvcriY0YiZepYuV2aNgICZfq12R5j
kWYo0SFMJbqlNARhLtJxMbHKNFaHdSU6FdriIMASCsnmaZoCMpIEi/b7ZGka
dj4SryVhspcX79gJtENsX7RBbF00rx/XLPluLx/cXvHdnne/P23766zzLxOW
N5j6342afgOABAjUq/hOn+qZXuW3+lXfo2t/TlP9rE/xk27Jf0L0SL/dJf1O
q+CZZt4zLfzvtPCebRN+v0XwbAv/W028rwEg1W8/SR6frt94snbtyQdLTyEj
sTCJ9JD9ZO3iU80r325de7Zr50f9/F/08p/vETzfL3qRJvs1Xfm7IfWrDO2b
w4a3mOa/QYxY/jpmfWvM/tak88/TnjdnPX+Ycb/C9r6+cvzXzfP3Nv034XLe
DdzG8N/i+e8IQw8k0VpREDFJEmqSwHSG2C4DC3FOazaPPyGMhE092NNxfA+G
P3GwR0x8l2SRAWJYNiAPDFCYpDgfVF0MAyPJz+iKM4b0eHBvvx+C623fdTbx
XI177lbZQT9WHB308VzN2+aHHFsDPKPzj5kjbBjx9YlVVWTZEFsxxJa0oVms
cTqhyQ67Jb52xWG77mjIeD5iDk9bonOGyKw+PKUNAikxCZjRpKedwqOWvfNm
ItnUo8SSngkYji25RW18RhEeUYSHFZEhGMopow2iO91ByrbRMFqZ6Efvzixl
hYDDPQCSPj1uSs1gPiGFzf6uAoyJy9bMCgyv1vQ6pYOkj07rIhPO3CpMsZ2Z
NXd6/SC3e14WnAMgFfdOshsHqSVvku1MTTkz49pYryLcLg00YzF5alCTpBOh
bFw9gVsuWaLq0iZHYXS2pZdMsVlDbMoYnzYlWIboPAEkoKM5dXBcdTFhirPh
GXmIKQsNigK94iDOqmTRLizoPW+QRzs0sX5tnKaJd2tj/fr4sCbaB1C0d3yL
d/wB/+Qjsf+BIlyvi7c5syNHpY2D3CKwkDs970zOuVILjgTbHp/zFTaAkXz5
5YPC8peMdFrdPgRIyC95couuDNucmNRGUG8cdpc2yZSE23AaeFHLD9Zj30Sk
Dy3k0DKJrUuiWS3Qpjm7YCksEU3gDUtxHrNJpWXKHhShqDCtJpgBk3HS1LyC
Vg5knZ04Z40TWBpVxobR2CIzSsl+mnJTqAVdle8XxShNUMGCGcBae5YNwABE
4S3tAMTas+twBLXJWW2EZYODVdx1F7nASN4yn2xvY7q7sAOwBO8ACHRypSS+
G+LzR0o0KbvcO6xwDirbh9Wd40veYYXrLrHtuRlrZsaaZjlR5J+NmoH5afTt
qqwaC/NEJ3kKNf0IJumKo9i1lEBxXWK1OU5sEKdReDA5SBQd+4n24DTcJOGH
Wwvzxgy6TcEt1FZcICLqbGAVT3nTW9nar267Sxtw7mECrQAn5ArMCOCEtxUX
4fX20iKFSdjsU5oxFydg5AI6ohp+sRwlSUcb2TIMiBsAqPBxZERDd1TP5fbh
Ne/gkndQ4R9d8WEbGAkNRPKrvir36ErqI+GpUnYnizBKovthbBDzG5kxKo9E
dOrQXhPdMLPzmgSKrgsjXdgvE6onvfa3IYCRuIEGYuV5XxhulUT7iD8UC4Jo
B7FNhTVzadNUWDfm4ITZtRS3dZllVYJFGReiGjZJYaHwXaQXQNpWWLXml/To
swAz+jFZnCYINaCyX6CBE0SHVoAZSawd7TkyDCz9zdEUqW5h7D5gEtARVRWs
Tg2gU0N2UB7rFGHZLTbDKuJdCiwf6odTDsvS4n2iWBs3/JAbukfKaZphNAEo
Auy3l7ZsRbSjhaO5F+0ikkoAANhPhII/AGCPi2ZxWxhpIl6ljZSHKeoJRNEK
RBBt4mLyv02ZBeRgqTOTwnSPAF1C+mE/y+NDksgAyoCHu4HWgA+xfzn+WKhH
kiRSXekO0lzfIk02SBNNinQ7WXobNOUZMDrDWYEjaX7UVBgjZdULtsq083LB
9+nW0WfCo8+k+9cSZ1VkKwlMxR1jYRMAVZOZR4+h+Kw+u6jPLsMxUiYm5bFx
NEpOo6UIkD9ME76okCE+LMV5W3kRzkZ0BilgtsdCat4wxYGJlz54/FKDAncI
SRHLI13aFA3+ihXmyR5lohtfluqWx9sAk+Cf2swAfHN8t8IU4BCazhencd0q
N+0osp1wCRQWPZV139XGwfWm72odyAFrk8qjtgrTWh62FJnm0ig880XL2yyp
6MbKJcAkshBGNxWH8TXVCcfVFFXFTSkmIQ5lW1XpJmSkQhdgki7fSTESlUcC
/iQdZ0ChDGKPMkC4CAEJ0AjCmB80F4aBkbA4qoIgR1bK0BsaABX2G1yJlLIB
cCaujOepGEcTOjhYiEa4JzEnVp52VufcV4sASN7rVQ+pVMciwwowEh0TYoUu
c5lmu2RaLscsFbq9yoCwlAatZbrjmmm9HjZe0o2VEdMl01AZwja9fA/VwQeA
Lc50iVJEMovSxUr1cGOtW8GG9fPGtbOGtZNGjNP65aMH2DRxcGfFd4ft+ves
4+9zrr8TJ5FXJ6wvD2qeA0bqUz5L0zwLj/2qHwxqftav/GGv4tlO0bd6Zd/p
V3y3S/xMM//rTdxvACY1cp5pEXwXYYn/n/Bk4+7TAEgQjdtP1m8+Ubf+VM3K
Vx4sfOX+/NM1818BQKpdfKJ5+Tudmz/q5fyin/d8L/9XgEmYSpK8OCD/zYDi
pUHVq3Tdm3T9n+n6PzIMbzJNfxwy/GHE8vqE87Vp1ytTzt+z3K8vH/6DlIPe
IkLc9/ih+7zgPUHgnjB0Xxx5KAnXiEO1WIETa0dtzGAb5pbPSYL6+C4w0s5p
DffsIbA9rm6E+yi1GaJljYYdUn+vPNCvDA2ogyOqAFMVGKFC4R+WntKxSOmw
m+9rFx93So+61adDmvNR5emQ2Nct2u8SuDslB/3qszFLfMmd59gzHENi05zY
siTWjbEFTWBcdTakOO6VH3VpTnuNZ2O28Iw9Nm9JzFuTC+bkHIo0BkYVF3Rl
YEh+0Sc568RVtnAvpV9KuplmYFjRkOYvaWhIFmZQIpNU6oZULpF+pXAfUAqM
bjB8ozcfTAEyaAFsTE2a0wBICyR9BAPupjHNJkrRi6YkusLBd0CJyOioJY0e
Jc7sgie76kmvH+c550X+SY5zlFzyJef3UyxPetKZHVOHumSBZlmwRXTRqorj
chgAmybFhIGecniBLw+MZM2yUak7NguABB8BXASMhGttCRbwmMLPUF4Mkz/N
ii/68RAEe8UBLEFXxIjC1TmaWaujfbo4TRXuUgb7dOFhXWRQEWgSntzfO/lE
cPKJ9KJOHWnWJ9rhWx0W1w9zywfZlf300n56xQewF5u3RdmHhU34ky+/dFha
Oi6vnRQ3zsvciyr/vLLrK6x5cyue7LIjNWeKTxkTxMowNQ6nENdfzwvU7YUb
UZUr0oe12TDE51dhN6LqZmYRBnEYRICRIMxlVBs25NkUI+lhu8jSwU2vwIZR
m6Sd12AbCxFzU4ATQLBYEZSeBeIiDkEzWCcW7Ycnj66F548MR1XlQZXrKS07
cgv23Jojj3kkb2n7oMxzZrcwChvG9II+Buy0DjiEqaQCB9OAuS1XAVBqm1qq
O6xuHV/yg58bw5+Zg5+qgv+jOX8kO7kSnlwJgI4gjqq8gzLHXVx25Rad2SUI
2HaXV2AgIPIs2G5vLwM/zBMtmmn0hy2MEeXhaXViQpecIiZHLAtlK19gfdEO
P6zJjFtgTCmjuRi8IVZYlZb3L9c9QIy5eQhncclRWoVwltdcpVUIGAsg7Hk0
iId3g3mo63LNeblCFSeQbPwkTDy1OaYqPfSFkwWNwgAKiozAcpkJIAr0/czP
uSu7B48EsEsPLiEEwEX24hoAmLeyc/Kp+OSRwnep3K8q3OU9S34d+Sc9I4+h
eYcyDRCI6wLASPCGsKHH9No85pHi49LokDDSgzp14brdi3sbJ0S3/KKBqh3i
XNTDiA8cBWhkKqwgGhXXjfnVx5FZMWe3bAUuhCmzqU8tGVKL2jQM2eOACqJw
lzDUKY8MWfMrh59KgB6JUNgE/BxFko6JmlijON7xhSh0kypDM5ZQExt2iLHM
VGcHZKlGQfi+JN5KAaQ+O2LKz2GylxTyUS4YwEgk9dSjSTEgEGsTnXvRBghp
qh3eEx1F0WkFgHbDXgJGWgDgF8f6lCk6BLXbcf8ne6nKXiIc3QVsQ8TV6yhA
QsdSLJ1tJQLXbUBEGjj/SwvqzIw0OyBEA6wBRYJJXK2RlHC5LdpFVDFbxbEm
6vuIE60oNJRqECfrIWBDnmpRpDuV6R41JjQGgARIe9ekuTCC2zjUYo+8+3L5
4HobjvLZZ8qjTxXuisSWF5gKHMAkUx79ATWpBW160VzcgDDml4FU5WGYs4wg
JiWZOuJwCkccQb20ai+uPD5RK+v4z8Kco8iyF+FD4UwbhtkoFZoc2t9QLKRM
9Mpj3eoEDe7DVF5IlxnWZugARQAhymSXItEOKAKURdbRptHvLw/XEQtmBPY8
yrh5S5twFXsKu74y7/hacHq9d3jNcV/ChGsKS7KLdEuJgfkiXKR7LDUJiGIr
sUhOZgY4BOiIrLKNASNZy5MOUteNBnDlSYArQB0DgESmXZftIGtt/YAiWOiV
7sNWtRw6oJGAi2sEGSlLBygyFegkdzSCeFYASBtF8YEKQBrLfYUCBZQxMS6O
l2cAseAMhEeSfJt8vGJI0AgCvqSzOkvWDcfgW7mv5jzXC0BH3kfL+5+uQMAz
juqkuTxoKHZCmCt9wEj2y3H71YjjetRxOWKrDAMpUYxkvhyyXI+ar5gAS9pS
L1HL7IIAwBamWgSJpi/l1gWJlp1I/fLpnYXD2wuHd4CLFnx3Fw/uAR0tHt6G
WD18sLj/8bz33cWD91juf047/jzleGPY+OKQ/id03Q+H9D8a0PwQAImu/SlN
/b0+1TNARwzdj4b1P4aNNsE3m3kQzzTzvt3K/y5Eu/B77ULY/kYT5yvNu081
7SAj1W88Xb/6tbrlb9YtPwOPDctfb1z5Wuvqf3VvPdfLeb6X80IP7wXApP69
Xw1Kf90rfqFX8ut++cs09WuD2jeAlChGGtD+nmn8/YTttSkHxqzzj0sH/0AJ
38ADuBJR6ywMUSsMPRCSijhZtE4aqZdFm+TxDlm0g/SFdYqCHRz/AyKad2/3
HBvShYFmqvwDrgUkjTAdGImkkvploT5ldEAXm9RExrXRCdiAR3V4TBkckfkZ
otM+0SmM1DTF+aAuMGqJzukDE4BJwFFAUOLDQdnxqD684MpxXVmBPcW3p7jW
5BYwkjY4ofEPq84GNecD+sCQNTTtTCw6U0sASNh1nmIbYlPa8BhJZNGU4X4I
ShgTtQoT48R8Fpu+lRH8wpRyDuXfIYv0K+FWE+kEJoRfBLynjA8ZsrO4cJBm
GzIjaFucnkI7V2zdmqMwyZJaQW+yxBT2uSdm9fEpQ3xcE2agr26EpovRralp
Z5oNFOdNrp7ktw/S6774jDcx5UlOOBNMe3pIHe4Qn9dJAg2iQDPce1HnPE7X
pUaU8UEsogihPwgM+qYUlkwbIpMUI1GNS6Y4GwBJHRpWXAyognT4aMAz8Vk3
AKo6SpNctO6d1mNfXqiVf1YPn6IMdWthV4T6VBeDxvCEMcJUB9rEp/Xis/ui
03vAS9pouynR5clNAgsd51eOsqu+1IoPvnN63RldBEw6yq/58quEkRZOyyvA
SBdVQehaFLgUHJW34X8d5Le8mXU4KI7MvD3L1ifGYdKN0uUhdMOBuS0wElkn
mnMV17GCOrsME3xgJBxESCGxpTKHAjK5ObRKr6zqSa80eoOWl93VLVdlG4Y8
ytULAkX7k1MIFZl5QwoTJrCN/XRJprUwTzHS6bXm5FrkAwDLL9pzK84CGxjJ
V9o5qgo8OY47v+Mp7Tjy63AoHbkNCo2IHOiaNbMCz++XNg8r3MMK5+yKe34l
if2vI/4/jshn2uj/6gKPlP5rqf9a7L8Wnl3xT6rcg+K2I7Poyq16ixsQvvIW
rvGVVzxX695Lru+a777axvxMcdGUn0UCL6CBl7E4Q6l9WvJs7GeprNhLS5bi
HIS5zIIhFUjJebnkrK66qxsUC7mqGJQJLFpfVVdgYk62Fx0EpdDI+3LbUVo3
FZcgqLVLrNYusqnppzE7CrdcYsCNThZoRBLvg8GIsu0GmHnsVJgewsxPjuUo
b+1fof7kfoUHAchkK6wCC+3DnvlcfvK5ijCSzF0VAiMZMgtYmpKaVaamsHYi
M0bZ1wKfqFLjaHOPjDQLZAjDuiSGpir8cMPuxQMApO2zGjSBIjLC8LwkwpBF
R+F8sJY3bejrumsFps0s61IzuhTblAUO5EJQKg26xBw8qYyNYZ9jBL0A4CPc
FW7w//SH1zy0F4T9nJ+FOQjguiTZhmrYiQ7YgEdtjmEuzwCXKlOoDaVG245W
UaxWEuughBax4rc4p0sMACbpMv3qZPfjtZ4EvE8H7ExtjsiDJ3pE8RZ4T1Wm
Dx3uqmgGYYZzr4xTAGtpQZebVKMe8jjmEjOjWEZCqkpIYckgVu/AVB1X+lBc
HbNJ0TZsEEvSYGMv1kpckoc1+Vl0Ck6zFNlBCpC0qQlNchKC5CEn4QYij/Zj
BSAqLj7WLAJGovzFBNGHkmQTKkKnOogyAFnrIXkMGLJJYQyTJDTYxL8D3eHh
ajr9VHFwpXAVReYM11zgWIrwuGMpbhuy63AgbMVtSx495gBTVTH8Mo+d30l/
hK2wbi/C2bvpKm66S1v71V04c/DSKyw4imxbfsaaH7fmH2OSIQtUTCdN8X0E
M/o0yX5dmg4cRXhjnKwrjVHG68BR6nSPIcskqMCCM9xegoto2VVawjfPLbnh
vlThH1XEh2XxUUVycimFOLzie6+2gIhIqwUd+QQAozwD/xd+LxWO8oK9PEsx
EsoCVCfMlXFjadRYGrcRkvEAzFSx/c1RHrWUhgy5PsoeDnNEhQF9bsCQHyan
DcncVog3XBEV6oy5IQJFTNjb9soEgNYXS37YYYfvfL1AlC1ZVOGWpTRpgPOE
4BaWnZemiT0KhrM87arMeMiXcZKlQ4A376N5Eov7ny75PluEwOr063HH1ZCl
2msqd5nK3ZbKAACSE58cc1yOUgHPQFghHo0BIBmqfdpyhzLfRLmuSFPNe6l6
fqJWEKuhgp+o3wrdXzi6wfL+i+V9j+V5f857g73/0fLBJ6tHt9eO72wc1VAu
TusnH60efbi4/y7b89aM8/UJ22/GLC+Mmp8fNvxy2PDCiOmFIf0PB7T/Oaz/
6Zj5F+OWX9I1P+qWfKdN8Ezb3nc6RN/vkf4Uolf2k17pjzoIJrXxvtrKfap5
6z+at77etPHNls1nWza/37D6HYjWrR90bP68d/fFPs6vu3Z/1f0Yk57vEz7f
KfhZt/CXfdLf0tQklaR7fUj/OsP4GkP3+1Hzq5P212dcf2R5/jLv/TsWQx5/
uHV2nxOoRUfOSBOu6kbrJeEaabRGHgNAalDEWwDR4bZJML5XEu6imgsguBe1
xLCjAy5DVYIOc09VHG3R4BEX/aNYi4IziOQ08AM8EoEa2J5URUfkIYYkQINx
XBsd0oaYhsi0K71qji3owzP6yKzqYkLuH5P7J3QRmNdvOzNcZ4bvyHItiXVd
mKUOjqouhjT+IX2QaQyPW2MsV3qZqrjAip0MCwZlbWQYCEEZ7oNQR7FJH5NI
cfgyE6SUiAmPsuCQNNy35++Whgapbw5ERFUaQMAtFNWqYyPG7Jwtj14YKMOY
BLiaJC3tuEIEvwvtYlNz8M6K8DCgFwrvoKctCmhL/e1Sf7Pc36YJ0SzxMXN4
wh6Z3k/NexIsd3zEFRt2xOjGSLc11a+KNO+d3ROe3ye9de2YSorTUeQ8QhMH
u4VYRt4GwKmNjWJ6KjxGLHQRkCzxRWN0Rh1gKv0Dyot+bYihj4yq/EzRSaf8
okcXG5RddPCOamTBVlW0U+xvEp/Wyv0dmtCgPkQ3hMYs0XlLZEp93q04a5X5
G+CvqlC7LtZtivfu52dPCjvASIfZJU9yaT+1BuGIsp2xWV92wZtd3M/PAyOd
lJaBkYLVvdin8vCV5LTCOy5xzkr84+yuL7nuy216cyu60Lgs3Cn0t3zhd9wJ
vGrOTFsyc1QZj7u85ixiL5u5wIaAgR7uCUgOQDJXG/bLdaKov2S/XIGJJwz6
7uqOrbBsyrJgZopjQWoGbsLWwgKm+9JsXFQqADYsQMB01Vflnl4rzj/V+D9X
nDwSeMvrjsIixUgH5d2zR3DP3Nsv8GBquV/e9ZQ47uKuq7BFysyWrdkFa5Zt
zy8clFaBjgCBLq75wUfy1P+50//rTnxujHyuCVwrLq6kF1di/9Xe+SX3uLQN
AAlno6+wAbx0XOEAWR1ecver6Eu1f831PeL5HnHgzgx4Q5ax2DDmmkqocUeV
T8At3Y0/c9OFflLzqPFyuUItzLmu5+GmTdmAAikBRwEOAVNRk2W4mcNbAYGY
8nNE/mgDYMxzuesqk76Y8jqEo7IGfyJy63iX1qWwR5gaoCmvMWAk0gTahRd1
kqaId4mjbbjGlEEXMEJZaIYLuwiGNjwQpTUzNrUJzj5THn+m3L+UQHgu92zF
TWSYzALqbOeXtDmWLDEsiQwAesFP1mZmMEuWn4eLS5+ZoTw00e033MILNu74
H3L8wNJ9lPMsNstEmBK4rNIz5iKOwvYiBxhMn56nHGdM2VVniWsv7BJGwtVb
ZWQM5dMDraIgViLB5MVX5Qf+RwsHAiuycrNAknC/wkWcBMr4UN3NEEBBwOdo
p5tmaLJYRazMtIliNdQanKE0ZC4xzcVxfapXm+hG064kGh2q00R0KN1pKozp
C6Owr/A9UVm9U4NVuOPOS1waJlV2KNoDh5VKgRIpKiz+oTbMxQl8hxwDAEme
ahNG0HoGi4iwKX5AmcZ0H+UNIUvTlMhjsxAatAkekEYHAZDQkDG1AGBvz2GL
Ad5s4c4WH5AlCCYlmlGJEV1oa3jhe7zwfcorBF350r3a/ICpSH4gAECBAeM7
yW9MAEK4Ltmeq5WD6+2ja8HRldRbFTtKAkuOY8ztmPJAR5vW/A4cFOrRVti1
V3jG/KqWmNfDJWnLrpKpx6arwCGL13iJeYrbvgoHrjtvkeehUqNFtqP4uPgH
i4fz2Fqiz/brMj0QAB4ApQBOWM9MetMAZmCPGfOj2gyRf8/SAPud1TlXdQlX
iqur+zBHgIsFJhTZFfi44yup/5Hu4lMjBGycXakOr/bgkoTryIwWw5OUqAXq
LpaW3JdrEJ6rNVLJM0dVJVES3MBIwM/E3HkS6MhbZXkqs+7yjKsy7ShhBxx8
c3NhxJRnwiNZAptGWe/yAi6cYREgvtXjNB2BIqqHzlmd/bLDDj6OMBJRsKzM
EEAi5wYAYWqIVAySgiVij0IVTVH/hRJ0QtWCR3P7ny48js/mvZ+yIFxXk67r
MdejYccVzVLtMZY6AZOslzTHNdN2ybBVhhyXI86rUSfw0tUYgJPl0bChStNV
OjXlZln2gSh5V5S8L07W7CUe8KJ3IfhRIpEaubNx8cn8wb9nXX+b87yN8q3e
Dxb3PwZA2j5/gHGKpYZfLqOvHd9Y3H9n0QcvfmPG+cq08+Vxy28nrC9P2V8e
t/5qxPzTSfOLU7b/nrT+Zlj3C5rix93i/+oW/7Bf/tMB5Ys0xa+w8U328y7R
D7r2vt0t+la36OudvGfaOd9s2/1WB+fZjt0fNK19v2ntR507v+zm/Kaf/3va
3su9/Je6eb/u4j7fyX2uk/uzDs6Pu/Z+0S/77yHNawzDm0P6N+j6Vwd1rzD1
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
WAJAwnfLpCFh2hLM77Q7wPk/F5Gw8DZyd5n6Kk39pox9lUe/isNfeb77c2t7
1dRYsDQW7e01Byph7vn6cEq5oQdB+FHo6/1uuctog8OpDvcF0XtR/F6aflTF
0cNa9E9GOsCK4CYaPwX7l+G7G7hngz1B7F4V7ktwo7/Ni3aVhUd37R/R2m8x
6jFUufPmeuZYS+6luBBxO8h9T+PA3Tp0t9D+CX9X/QSXy9qX8OhuXDhhiqmd
oWp67cRYPdNRJ+rKoSC3IcyuinJLkvySJDevLKxA/9SXt5WldXFmWZxel2Q3
ZfkdaW4XGnCInrrQkqfwtxpyX1VhKysbmExOrBlo92q4FtBs9WNoKP6JqiZM
42KCR+8M5WJucZnI2z+nd9NO6c52AtcRs+NoHTm4Fv4ehwaqM3pw24GpCvAb
HWDp7xLnJlAaOj16nRiRZJfkhXVVaUdTPtQRp3Q7NlSPdaVjHb5yDDjHQJ2e
2oeeCZgkK+C6DeMTDQ0Gal72zWXqBTf9/Cr97Dr1C7SbxM+85DNx7hWqW+cG
FCjWPUxX26ECtqw4JcwPXifeXseeX0WeXfl/uva/EMc+6YtzxiLM6VvmAlwO
rp3kmoDZymxZfkWWm5QC1GWHAJAQh/KDtLjlCGYtovjbZ0nxkyT3HoIpZsQw
VHAAhKYjZjXlSUVhUJx5LYDAPPJUHHoqD/6sCjwL1aT+Ks+U3VIlF1TpWXli
BhjJUGSb8ruGwoYqMy1ODGCCUOqjMDkMmITHkFmQJGfonbUheWpamZlVZEZl
qTFtYd5QXtEX1w0llpUuKjEQW6oSMNWYODUIHKUuLOvKLMzfTs6L0xP8+NBN
7O1l+MUVMFJ6TF1aw4Kg2pm2vCjODF1H33ECz4GOjn3/ceT95tD9F07kl8vo
q/PQK270Ey86KoNxOLUoSdLlcrFxRXoOuA4wCdDIBIyXYSkTs5r0HGCSPres
yU5CM5dWAZCMpTWYl61ViG13gcoA6ZUIcsPa4iw0ZW5Inv5gIZdpAfCDxK00
2paEW4JI59oP8QLFZvKOvPULV/XQ1zyPdMXBlgBFIFucWF8McQ2u/bZRacdE
bUKz1GCI2ENhosYpUBkAEjR34xgYyVsHfFpFdaAGO9Q78cJwV12DGcRem3PW
1wKdk0iPF4aptr3ngDC/seZq7VibKwC9emKVca2lJX320SCgukIf/4ymMAmY
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
3YG1aUP7bFl+Z1l9c1VzF4BnSXV9VnppSXWVTDStO3K2bVuer2rur2merOuf
79pwPQq+2rb55brhEVl/l6K9ta67u216sGu+v228s2e9dWR/BWDJ8Xfwgh3i
6ABgEjAS1f2Q6W0CRuKGOviRDnaoE2CJ6n2743mOTYo9r468b2iBZpqv6djT
AEZ1v6S7XwmDzbJIuyzYrgh+UIY6pd4OabBfDdwV7uCHmoWRd9zAa5bnITKS
+57Ad18eea1PdZuyQ+pktyo2aMmtecuHztK+JbthyCwo48OicI8iOaIvklSZ
CRT9TvTIkr1AR5iXmEYxcFNhXZdZ1WexQB5GMFGsXZR4L0p0UL0/0HwPWeEG
TrSJG2sWxtvEiS7gK2UG3KspTHhOYg4PkcAzpsmOSBJvwZG35VYdmVVrbBHA
BngmWhMFczRXct2RXHMld0NFGuxofGNq76g5vu7J010ZVrgqDla4nsKBI7vp
LGx6Swe2zJI1M+vKUdzpbWd8w53cDudoiRIvfSJP1hShMted37dm1p35PW+J
6a9wAJNc5UN3leGsHBixIGUKmBC+srG0hJVixTXYIX4zZyovwz4wHgbaMn3K
3ADW/henjSg1sAwcZazMwFfDIr7cJLyVqbhiq2wCIDlq+5iW8PHYfbbnPN10
nW04ztZtJ2RzdV5fHlYX22TZRmm6GcvriIRt+8m2tbJrrW7jTnXTfrIL76zN
T8MBWKsbwEiWE4q5tqovzwJQodZBiQKYZK/SieRtbCenyy/qi2v6IkWVXxAl
+1jhN+xgozD6XpVCDA5UOfFTdeJEA2fPVdjXJRY4ziaq5cGO4eKa6hcbml9T
Ld8KPU/Y1udM03OurZFtaWCZXzFMj/a11zY0X5FVv11Tfb1vun5kfMDQt6qd
q4G00Jvgap0UhW1KZO6nqxq2xXcowivrkisU8WUS/cuxo9+OHX4+Sbsww7ky
x782xT4/zfrdivQ80BFFdmVDemVDcnmZ/fUy46st4eVtweUN0eU1wfkV4Wcr
0t+uKn69qv2EYjy3Zbm46/z+2PeQG29FKcJYByYjgUU6MBk40kqLNlGjr+uA
dBwhtgFgpBfg6mIlfn5SliYyRtL9ptyKtbxhLlKww05mWJaEp+wNmCLyzpKe
8xWOU2ei3E/y5IksUuL6S4fO7K49swVkDiiuTy8asDJumQjSYVNURWYM5c3T
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
NojXNWPVD3GaBrClGNpY1n6xb1rsneE5hwEmUY2tNY5qxulbsPrGedl18PVX
VNfQ2ts4wyOCqROn61jXPsKbHq2pGlCSmxv6Br4HwXcviIPLyjia70NRXANU
Tw/R+WjDcQfvvEn13ueGWrjBDmG0B0RJRXpCFOkXRmD1AsPzQBBu48dGAAAb
UuuWFNqZQ7tiS9H4SiaO+k2c9mWG/zIt3U3IdmOK3Yi8GlRU/YpqSLXn4B3Y
mFUnZ9/Jf+Hk7jh5O3bWQeDwBfIDn+QAgpO06hN+Z2PumHC7ZsKuhXLg5FY9
InDsnpNT9fD3nKw9D2uvBktwuimir8b01YS+mjJWk0bIRRnXQdZTzfsOsq6X
cdNOVLYXV1bTxmrWWs2CZy3VlKEaU1XDKjhPFVHBo5KGg5RhP6l9EVd8k1D9
Jcn/fZT3+6T412nGv2XZv0zxfpmhbyVRpfhqPorJRtbTMWwsjkvlqbE8IxzD
h2LoYHzBF5v1RRdieUI8Tw6l8IB8njx1PH0aevrMXdpUZfIigEmAkVzhRU98
0RFB6L2DthDCm1iKZknBGCGdZmYznFxWWCypNjeNT59aKpvKdI4ZjWB9PqTb
N+0NLjl9SJ2tT23tNXkm9M5BmbFXZR2xBBZNgUVjYNYUQZii45rgsD42ro6P
HJaaCCPt0uSQMoNQ5xCSRD+c/fPf54YbxIlOZXZEkRpV5Rf1lRVN7RYYYBhZ
dkZdXNJvYrQFpCIDDYh1xVltfhowkiozrs7MwmkfAEL5GViRm5+QZEb5qUFh
ZlhVWFYWFtSlBVUBpS1g7U+43k/lzm2xuUwyFgnmMkFbWq7pQveBOCsvjKoK
U5oyAtZmw3ebFGfa4ZRXpl2c7RDlGgWZenGumZ9tYsbrQYgH6SEgJfCPmLEe
ZqKZGr2L85zHON9dNP/LrPpvFrX/xPPV+7e5vk2hNUvWpjCyGILueoQ1nlvT
H0Gp3sSZ3yM43lrR/Qgp/meU7DWS+SLd8ZBkeQgyl0XFB0jpG1OCV+ZkH6J1
V8DliZKfRmsv0OwPNvS3VuVn8Zo6mqmBYXzE0DfSdQ1E1V209NqS6NKS4AJK
fAIl+QAleW9R8iZS9MM58Y9WlG/i9McptrM47QmU4J0Z+utT1F/MMt6dZ3+I
ZB5Z4B9fFp3FKK7g1LdX5NdQ4ito5a1VxeU11S2c/h7efA+MSILYtCg9xwj1
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
GusJcw2qXEJZp0ZYdppS17L6Z3nb9xX3Vzvuz/bsf9rRHxbEieR2OLHuSSzZ
EzP27Ky7uOgrogKFNX9mNZDdCKQ3IllsNL0VjK2GoqhIfDWSJEZSWE9s2eQd
Vtk7ZbY7XNNFqvplrOCf8JIXhLYbMmcnMG1gUOcbVbuHvHGML7ntz1CCeVak
ChkpUuUDTLJmNjXxKW1q5oyRVJleQ2FenZ5QpUc0mUlNeh74NY6W8q2tiDXD
EMQZsN1YQLn3YQVbQxFlKq1bqgTjLkZbnZMXBwHGCDL94kKvsNDFz/YIMyPi
wqgoP8TL9fAy3fxcF/hIURqSZ/rk2R5Frlea7hJE26WpfgBCxsqSoTSnL86o
sxOy5KAqN6YrzahzMzB0PD8iy44oi1Pq8qyyOK0oTMryo5LsoDg/IClAAOOl
B/iZfnYcsMQtegjAzANZYsRU2HRXaXB8focJGkZDjiBOzTIDg4zQACME64Kd
aRUSPfeJrkto04Vt0xXQ4AgjY4r4sjq5ZcpTxfFlwEVQb996nebpViTWrCWG
Jc+Sx1Y4zkm6ZZjvmhR5Zjm2caF7RuCaZtnHOc4Jpn2QYHyI0by/oX4LpXhl
WQGg6Llp0Q9nJT+ZF784J359SfkWxnYNY7uDsd7eMN/ddvZQw1NE/xjW3Y91
96yY76wY3l3QnEcZLq4Y39mwXMM6HlD8/fTQCCM6RPR30sM9AH7oEZj7z44O
ClIT0jQAiUVxcgEGVMQHADudKQPQAj2MyCArOg4BKbUgSgFAWlcBJzqPkaXX
ACbJsyhZekGVR52FYcM6DnmUIrsIh3pgiNFKS694RZPH64rb6jzaVCK6D/je
Q7nvQO7Zk8I5sjwWKhuX4ZAU3L+4ANx2GICU6OJEO4XJUcBa5l2isUIwV/D6
MhpWH05PiZJDgJFAL6YvwjkR0M2dMVLkUJv40B48VPsOoYqyrnJWVWRKnps9
G4mSpUYE0Q5htF2SGJCnpjQ5lLkEHHC8s8QIH8iSVX0oJ4sUZcmKCoBQuqKM
F8SRLC+Wk6ZKymxVk9vR5ncN2aoOMFJhxwTWMxV9sqxLVo3RijZYVAXLyuie
GnivEJP2FK1yJGcJU2QAcgC2XTtse5kB09nyVG+OkSwLMyXJfkr8xyj7L278
59rlTwWjn1A7DlCXsoPPJ0ZfLIy//Hj+tc+23vkb8d0vcOe/Jp5/Qjr/PeXN
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
CoGnHeBWFybYtxjmjSVtsF/hblx1NMX8o9/FSEcReTq0nHVKUWCaiQTd6oyH
mCEjbzpXDaOMRgY6sMfZ6syJcuhUNpRRdKaWB9AMMLcoK+lE4LE8mhV0nMh6
0vzOjLAZSRtAFN0i0FFuBZPVjufU04BPgF4peWdONZZTDBxyK08IH59Sbp0z
68+ZdaeM/DN2zbly5FDWnhMVZblFKV5ZRlp/ruo4142k1xeOLZQjGzfrV6a9
qpRLknVwMusXftdrBKCjs5Xxcy0mq8FmVudSyvGMZCAnqsnx2sBunMvaz3nt
qCiSejijms3JR1OirjNuc06CXMSP2WVp8vUM7kqOlJdjVeV0cwdWZspMOuM3
nS7dyfGbsorhjJaQUg+ii5d2pOVd2eWZjJaSM5KOlZgjydixaBAuO6MYzahn
Mjrs+Tr11CvIRpazMU0qqjxNSA+3pT/tiB9tCqNbS54Y1hHDmYIzK65erbNL
H5iybdLdu0LnNt+yydCDzg0PyXwdYlen0j/i31EEH8itCaohOr8WnVR5ehWO
VqWzTeZqErurxe5aNGEY7ZOE4HmokoY6liMDK4kZXXJGvdEPcKLbGVZvADX1
onza4WHQOOoYxvqQYtgCyzO1ujG3toFZ35rTx6fMW0u2Hap5mwxqS78Ng2+v
NNqiiLVoNztViTZZuEEcrhCGCsXRclG0AaUCiBSzImXsSB0rVEkP5jED92ie
u1T3XX64EnYQhxsAsRARxfqhKaNdimizNFQrDlTLI03wpyrZr4gD/LRIo8BO
bdCRlbGx1V2cJNbPC3dywm2cSCs71MoPdsHgrt0AzsGA5DRtEo1JAghPPapD
OquMjYrD/QxPF8VTC9IPZ6+kuJuEKHZvSRXFKyNzKOdzYsm0xXE+Unm/XvF+
qbE8ZNseicy7EsfD5dB3+tB3Os+jZdeDZfeOzL29bN7gr0aXOJY+oXVC7SeI
bRjQVlRDO83YQdDXkM31NHsXxd5FtDYvGIsmV65Or74/oXp3YeUm0VDNtHWA
6cBbO+dNNRO6kkV7y5ylcWSlEGOqwTt6qI4+UWSO6R6juvpwlroJ7Z1Z4/0l
WwVGfw9rKV40F0yt3ZgxXCO68xn+Koa7ju1rEQQHUGmqcC3NV4vKtoYr4YaI
AF0SQ0AvgEPK+Bz6pnGMEq1CzoPEVkRHJaE+RWwI5aTanF/dwqp255a3JmWJ
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
YmMK+AfIE+gILXzE+oWhTlSsLdAOWxTRhsqdjChjo5JQD9/XwHKXkCzXKPZr
sCVZbrBc5Rdo1I7cIYLN8mirKFiLCh65iqT+upXoCDCMdYtp32Q7EhxHlOON
8YJJUSAu8IQ5rhDDHiCY3NN66+i6a9YZIFo9iybnjM215PQS7G6cwT6ltw0b
3aO2wKwjjHVFKI4g3RaimkNYjWtC60X+KvrIDFhaZWhEFuoFIJf52vTO7rB9
/BvX0nM77kf10Cau0Nn5nrv13UjPFVfr+9ry31mr/1e0+62Hox89HHznQd+b
X/b+4buhP37b99tfp/74bPYvzzBvPcG8DbhySruxv/QJwNKTof/93eB/+37s
X36e/s1Ps/8OyHGEvXtKKvx+5Df7pBsZUf0Zu+SEfv+UW3rALT7i5B2Tb58x
8gBLXhDe2ye8/WLhry8xH5xgbz6f+P0/ev/7dyP/7yv81RSn5IRffMAqSvEa
U6zqfcrHL5ZuvsbffI776JhZm5L0HMpaD3l1z1nlT6h3f8V+CNf249jvX5Cu
vRJUHfPqX5A+f4H/+JhScsaue0q+/iP2g58XPn1OvvWSnncoKE0pWtLKwXPV
VE49fCxtPGLfP+WXZWUNGVnLCbdqH3hs4bMU/vNjwmdHxJun9MITsJAclBAg
K4IdKlKchjNRS0rakQFNqhnOakfOFAOHoq5jcdfRcssradOptPdY2PWEXfSc
df2Qfi3Fqj1STx/4Rb8mBBtx/Do8Y/Ex5NjjH5P5xpdDAEtL6ihuObqoiM3L
IjOoQHZ4QuwfAVrgedrYzsaLnDbtgBwy/6gyOIVWVdy9MnefAkZP67DGPKwy
QRtVmkblpiGFbUjm6OOZ2wTWLkAp6NcgrzTJmdXtOcMeDoTAZSUmaWiE6+3h
B/pFwWFRcBQtKCfmUMr6+DgvNEBzo8Rr3Eu5AX0tNCC8cH5GNcHjUyixdggj
D08JPMNC7xAMvoBJqIXGhAHQWcMC1wDP2YOqhjm6LjCpi2fvZq+3sEzNQkcX
39oFvCR3jyFGihLgUBLfOByH5+tludqYrka+r1kcar+MR4MGmCQJdUEPAksL
mATChONrhEZ3VpCs93GWm9AIVqCju2RHAdVZCuaR7qol28uJ1mLKxWQvP9ii
iA3AbZ9byVtcu7Oou04yFlBMlUA+wEUorffqrcWVfHiNXc1HUGSopViaiaZa
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
a0dgSTDWIov/yUjTll3iWnwOGMmYnANYkgX6UFJ3TxnbVykKNSqjA/rNudXN
EWAklitfHGoBrlCEhxXRXr63luUs5fsqLusAAiaJQvXASAx3Cd1bQLLfA7Zh
BZr5wT4AIejFbOjO/haUuCOICjCtbuDUiTl+sIfsriG4S3CO+1jbXbz9PtvX
yPN3qJIY3S4JZCbb2wXHWbTenNZ/srh+j2i7T3YUsbzNvGArJ1AHR16ODCGP
9G2KYQuhEcASMJJxm4FK0SWx+m38ahKrigJYYq0PmMYt+kWtpWGBt1Xga4CB
fn2HgRhpcwkdYYegjk/Io/1gVK1fCkx7HP0eUbdLkAQHGPZqvree72kS+tG8
Ct1ZxXI38QOtwDa84AigkTAyLotPyaILAt8Y09XJcDfSXXVEWw3Z0UD3NJEc
1SBUUfM2ERyATCXYdVB8cAQ0KwWqluvvAtph+OpIzmKc7TbdWyuLDckT4yB1
pbFJ9CIxKo1Bm7xMLQWICPsAHVE95RR3BTASKvsSGeCGOhjBarLvHtldAFC6
DOi7TXF/heKgnY8F5gcs0x5Lv0dWbqAitsBIhl2iaRdhpDa5AAiEVhmiHcIQ
qn4Olhkoi+sDMdsLFAc3E7BWHZvRxuZU4Rkk+sL98kCLxNss8daLPFUcZxnH
WS7yNUqDTfAwSMONskiTOFTD95XBwyMPt63GJ4wJvHmTZtuk2xM0W5jkCJE8
EZovwvSE6HYfweKZMbgGdfZ+YCRHkLjunje6Jte9C2vOWa1lZNnSq7Z3qOyt
anuXzj1kiy2ZwrgVz5Tc0Sm0Nsi9PWJXJ1g/vqNK6KwW2ipl1iqdtSFo6frO
OvbCOPkDt3Fz/q534KPV6j8oi35jqvmLpeEvxtrfOmr+5+7g249H3/lh9sN/
Tr79y+y7P06+9e3In76fePs1/voZq/CEVnhIvr9PuAnEckT84pRZtE8rBTJ5
Trn7HH/tkHzlCfbtH+feOqJdS4kaUqK2E/bdF4QPn+GvvWIU7FOuP5l789eF
j14Q7h6xSvcpn/8w/bvvRv7Hj8P/45vhN5/Pf3KAv/6KfPMJ/uZz0p3nuE+e
TP/h17m/7xPzXlPz9snvAZg9n7/54+JbP+HzfsV+8Qv2k1+x7z9Z+mCf+PmT
pWvPSPcOeOVPCPe+Gf/bbt+/fzn6l18p+f/E39wd/sOj/n/5fvavz3BXXpGv
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
+aP2+mF79YijZnqGYLolnFmQzbrZMxbcSwtvUU142pn7sjnrXUfpijxvmRW1
2OT1tP7KvfLTtwu/nc/75l7xyddNNza48R+b0z815+62FX+u4LPdXrPWXPGa
k/OQlDRbfcNccMVS6ueuib5HzX7IKXGRsh2kLKu4wiAvU3eWqfoqp/vKRnsK
+3ozegeTO4fipf0RQEqC/hDxWFyXMksxXrgwXLU0zdw3NXsU/J326nfMpEf1
vu7SK6aCC5OZv7ZGfMG+/o+SkP89lva1sfCErfiHmdLv75ScfFj5zbOavy02
/LDY8Lc3Tb+ukm6CknpL+P099dIq02eN4/+Gev0F9tyT+lP3K//2EnvmedNv
Dxv/eE648qDh57mKL56Sfn/LCX9Nvr5QedJR+s0TvNcz8rXHeK9XtLgXdN97
9afe8ALWmL6vsecWGd6r7LC3RL9XVJ9XlKAV2vVV+sVV2mW0f4QVtskKBjaD
I4IYBA2715y2I4tb54WuscOWiD4viBcXyX4viddeEM/crz/xrOnqk6bLj3En
Nen/x5Dzl/m6P+4Rri7xYhY5Ce/4cY/wl+7jLj+h+QIRzdSctRV/5yr7/jHh
6gtGyD2c10Kj10LTDXXBqe7Y/28g+b+GU/7cH/tfw+n/qcr+2lVyeq7slKPk
7zNlf7tbc/IV9vwj8rU3nMgtcfqWLHtVnr3akbfRUbzVWrbTU7PdV7fWW/NS
VvScl3UbG+Yo83KUX3LV+d7FBj8lhb5ihC8yo1YEqdDeixLf9VQtK/APbHTr
DGnIWi7TxAs0wRy1j0gXCrzUZinospb22GoGXeQxN2vAhkMuyupEtiIYGOPY
zz8X4gaIi057FfLfQHMygEkZaHrTXiszlrNUMRAiKFPXPzMSZeoGytCzZItM
KcdqIhEElMxe2OIqkTnyhBZk1kpRAyB5kRRX6OoQCERcbSJPF8dQo+K2bH3C
cW4k2pnbjOaly+HQoGKOCxrWQVCC04B+2u8mQgjqcdV2Oos6nFlyawJaaDNG
Co3RTGUgddKXNhXAVkWiktCqWI4qnqWI5avjAJZk+sx2c9XQDHP6tmxyQTY6
I+hyACOVs1VJLGWCWJ/fZq7ptDSgzTLWRjRv76iD0xAYUni6BJ4uiaNOFpuy
hIZ0vi4VoEhsLGq2VIrNJXxDDluVSFfG01TxdG0ieSKIPhUmMxQA2gE/4IcD
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
byQBiD7mcCy4yCxFPG3kYY08HAS6RnNpl6O60wYELK7TSh2e4sof8QfGqeC6
DVsI4+OMFSN+tS3rBT3gBcZrGe+3TA6eR9yerrxpLDg7FP/dQOj/Y0n7B1AB
YLF+TfBeQoGv+oNVgt8S4u4i7MoqyvUDPeQ9LXQReWcBdWe7Jmyh/O4LvO8X
Gf5I3bivbDySc9/XFSyiH8wVXZ9KP2GL/8dE6t+XCdAu05ao8BUjbR4VOlfp
/6jEc6rMfbE68AU6YAnjB17iJSFwDWq5k7IlyFwXFe40l32U5m0JEueI3o6y
y7bcU9a0nx1ZJ58C6ELema10mSq/Nl5yyQ475yg5b8792ZDxw3jur4sVV18T
PTYJ7htEVzCW0BdeVp9bx7u8QELV/WsEt9f0h5vU8BfI60voGyu4W0tQN8Wr
TxGXn8AvPse5zFXffYp2mUacM+Yfk6d/r8w4rsn5BTywwM5OoDzGEO7m/LPG
nBPm4itgps+UXniJvrtMuP+S/ACMedTNxyUXJorOAGKEiuthpwAFfaiN2ajx
XSdc36a5fmIFva0J2eY+XCc/WMZ5gJ/r9MBtQcxrbtQK7vYaO/yNKO0NO3qz
JvS9MPatKOo51XMGe38G6/0I5zOOuGkpO6vJ+1mZ9cs08t4MIWCWHAowSVdy
uy/9hDD4T4Lg/xrJv2SC35dlnxOH/UUQ9MfW2B97kk/L0s6qC66qc2+qc89q
c487YKfn0ffAq2yLkl7zI9dI3s/Rt+bhl+YrLr5A3dyk+m2xY96wEjYEcRu8
mE1ewnZd3seWst0u5FZbxasG2Atu3BjGX15wU5ZxfiTrnKbosrnslq3CbQwR
aEd6W0tvW4pvT5DD7V15o6rcVk1iozmp3hwvNkYJjNESY0qTsaTPRtJMi5RT
Ivkkt9dOaTVVS3X5Yl1Sq724d5I8+pQyNMXQPmmyLshsi4PGhY6RaV63g9Bs
KpIa0gTaWJ4u4mufjWSxJUNqyxJZM8WWFJEp/ndGqjNCHWglxkK2Lpai8CWP
uNMVfgx5EEcTytGEAUaqs+Q3j8HqrQVCQ3KtIYKt9aErXGtU7iAC1Gp9hXr/
ryOQr/EDRAQN+QMw/aWGGAictGEAkDjyEL4qgq+I5IyEcwejhKNJTfr8dnN5
m7Gy1QAHBNhqqGjQ5IsUCZAJna6404IGjNRhrm43wetUudzhePZQxO+36qgy
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
PQlsfSxLG1+uT+MZQbX9mYDiqOiOqOxOBIZwjS6nQpUMiAWK1BcvciK1uzMV
QVx1LK87FhgsLb2FbX2FjcbM1v4MYMg3mqKr9YHlKi+a+imm/TZS/DOwBQAJ
J3mEl97Htt8mSW7S260qOv2qVSE1Gr/abv8WY5KkH9oxQeycJLUPoVqMhc1G
ECCI6g0pLEUop8uzQhVa051Sr8ut606v7IpmywJoEo8qeViNIqG+K6tWmV2p
TKhQhbEVvjTpK7TIjij1Yyhi6HJzlQ2mLFM0TFfN1konqpqGiFR1BkIYAGv1
pCqiGepUgJHwinCUzLtEbJnPv0tuD8aJPVFCX7Q4ACf7vzS9ZXBjSdrnuzfu
l3f37s6+Q+9AT9P0dFcXk11lZmZmZmaQSbIli5nZjDKjLMkyyMxc5WKXoewy
M9u6qZ7diAyFIM85KSnyyd8/zwNOuBZntiyxfDSH1xlB7/CgSLWKh6NZklCS
2JDSbs6SGwBAym24D2/WAoiFFjviZE6oDnNEm058xf9IEf0ps+FHfKclOD9W
7JLToJZScTe5TBtS+yil6p+wer3fCnfmlQ2qtrvp7V4sKbioc1alGqTqCbzB
giTx5SmyCxW5pYPwmmlE2TC0rB9RNpTO7fJjSYOIrZbwWh1iux22yYMs9lOF
M0tdCR3+qEYvYnuUUJFN7YhEN3jiGvw58lhKuz+u2ZPZlUCRxSAaXfEdzsLB
KF5ngrATIupKE/flTY8X7k6KbwcblDKa6hZVE+Gmg62UMZWtuMva7EsRMBcR
53y3G67drTDiShB2XRhyyvPcplpvEs03CUZfsbrryAcriMe7RL1NlMYGUu2Q
YnpTHKTaKarIuS5LuiwOvykPuygMvC0KUhZ4XQuczksDzos8j1kO4OX/8akm
669l/7iFUjtmO36l2OwSjA/Q2vs4/UOS8R5O50vuN5vIh4CXlILAa67fGcPx
lut4y7G9EgSdF0Qp6+HKVsxpbc5VC0Ipo542E29Kwy8EnkdM6wOG2RHb5pjj
ecYNuy1MPiKbHBItT4gOe1jzLazeNsV4n+sCvp1SGHnKc9/n2R+yHc5odvsY
cF2DQ5blLtn1kOG+SdQ/pttfsT2vuW6HZI9Tusd5ofeBwPu8JPyYF3rKDlzH
mM2k/jCT8ecvROv3eRoLGY8+wNTn0u4uozXWcMaraLvPcIPP+XoLWY8bPP6j
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
ID8ZcldWj1PxUJCwL6CwP6RqLL56JA3IRvEEATBS8zC6YSBH1JNa05eh8kqa
VBUvqxqBVI0kVA9nN0wgASOVKYBlS/h3ZgBgTpuG8zvGic1AeA7G1Q8nNk9k
gz4qezgCaRxPrxtMah3JbxlGt49gZeMcySSrY5zaOUnrmmBIx1SxwKJBAGAh
ZSPuJUN+VWOxjfM59fM5DXNZjfOZ1ROp5aPBAJOqxmMapvLbF2iN00jRWGbV
SGblcHrdRH55X0blcGKhPLS4K659hlAmz+K2B7FbIvjiqCLVrlEMAKTmmbzK
4fiq0d9q6Y5DqkczWucxktdU6RxVOoMfm2GuvG05/jB2/W70eqjqsCRxE2O+
DtdaRRpvEZx2KV5LSLsPSDOAB+/yDT+izN+l3puP//59xi9ggh8STPYpzsel
cddt6Bs5T1UIqavgQs4/VxRdDpSfyguPxPwjOf+qp+BWLrwQM6/lPOVAqbKn
SNlVfNvBUvaUXHQWHTSQj6ryTsszV1nxwzCf9igNUcDz+jCDunDTEj9Noada
VaBhT5r3MMJnCu/zmRHwKd92MdNkixd605J/WoPYK0lTucFUpu+WJC5zoucJ
IWPoEHmWN97DOEzzF7Pv/1PvH3948bffG/z8ndPLJ4FmumGWhpm+rnnBnslO
lvFWhhAnc4iDWby5brKpBs7VuDLaWZLuO5IfPoMOmIRazsP0lgnGn4nmb5Em
87laMzD1adiTkfT745lPZ+CWM3D9wfQHw5Cn80irBYzTWLahIumhKv822vwz
xuQNXPdDvsUK0WWZaLtGtdjmB2+QrT/kaQCBs0ZwWMU6gGm7X5b8lR26TQ26
KoreF/gsU+13mG4bdKd3ZJN1uvs8Uqsr4bvxHI0ZhOks3HgCqgmeLyANRtKe
jaarL+QbvcNZfiA7viE6juYat0U9qQv8SRz1TJGkq0h/PkewWi2IGkTYSOO0
ACP1pBt1pRtLk4w6EnXrI+7VhH4viX7Ym6g2DNF9g3FYIrm8xzm8RpgDUlpE
m21yvTZ5vltcf2Bmr0uj95k+n+EWH5CmuxSnHYrrF7InGNs63mqf7nYkCN9k
eX3AWm7QfQ/4MeCQr7ygDb6KVNdYvm+IniuCuM1q2AIvQZztUBGjVRmnWRyu
KQzXKA5RLwvXAoxUnWIBGKmzOae4MRbJ9g7LsPGOdPIJCgrwi46LyczJweal
oTNisyBx8SR8ZklVfklLdkFnSuFAkqoc9nBy0VBM4VA4V+HD6XWnyR0pnba0
LmvARVSZO63Tjd7lRJc78vuChP3RhQNg+scV9sWUDSZVDWWoaoIMwko7IUWy
KKEkhN/hxxcHlHZHVQ8kVvUnVPXHlvfFVqoAJqKiJ7S0y1fY6cqX2THazSjt
uoTWh8j6H7FNDwnNmnSJAVWiT+0w5EjMSrrcK3qDKntCa/ojG0eT26aQkllq
+zypeRpTPZJS0ONf2BsEpiRAI8AhlDYTttSlsCdcFcsmC2a3e/DE3iVd4Q39
eW2jyKbhXJEiDYytqDNU2Okv7PSjS5zoHZ7C3qiyfkjlEFQ0gqodIbfPCRum
uWUjKHpnLLbNj9YVDoiCIY9jd8XT5MGEDjdEk0lWjTqmwSmn0jhPZEdoc8e2
OHK7I6pGc+on0OJX/OK+dKLYWqCIZsujWHJnXpcfockCVvM4R6QO9Cm8yTq7
1iyv2TS7QTO7UQ3e/iS3WRPZbkwAxlkehJc6ZdZooFod2b3RBJl1ZtV9XKsF
Tx5b1pdbOYgo64UCmcaSuNLa3fLrDTIq70Nr1EgShwIFXDROEY3iK0czq8Yy
gFkrHYyhttvT2z0o7Y5UsQOj05OvCGV1B6pC22RBXEUKQxZVOgwvHUawO+PA
4OmSILYskCHxpLa74ZrcAE1xeoMZ0tCKIXjtCBagb3tn9ugwcXuh+na6/lZG
uaxJuBJFXNVGKWshN6KUy8rE04rEi5rMm8ZslfN2acS1wP9K6HrEtD5mA4tn
8Rn5ZIv44oBqskM0XkHrbZLN9hmWZ3yH8yLPi/JIsHqe1qSAY5VN0GtRwqHQ
65Tvcg0a1xUgh1Lod0KzP6E7HdHdDuiu5zyXE4Y54JMTjvc53++K67SN1lxH
qe+QtNaRDw5JDucCb2VN7G1DurI+W3ULr8D3lm59zbJTVdetSlJ5PdWkqfJs
Vycqa5KvRXGqAZTFqOpK09zOWQCQrMA4N2khgN/OeK4Az85oPpeMkAuG3xEV
cJEDgKhzgS8AthOS5Rbi0Q72qSpCjeN9wPU64LgoixIuhSHnhbZnfA9AR5cc
xyteuLI8+aTAe4dmuUWw+Yq2+gTVXIQ+e5er+T735Rec+nTqP/oi/jwa/8MS
8sUXouUSUgc8eZ31y2jCX/tj/jyY+N1I+s+98d9Kwv/cFf2NNOK/mvx+NxD/
r5kMzdkM/cXs54Nxf5GF/c++mG8nUh8NJ/wynvzTfMa9WciDucxfZyC/vM5S
7SONJ3w7Gf/NfOrPH2Dqy8iXX5B6ixnqi5lPZtPu94R+1x3xt6GkH2VR37SH
fT+epTkP0x+If6ZIeCGNfl7o8g3f7q/lzt80ev91NuvFKs7mA8J0Mv3ZbLL2
YpbRJ5TNR5zdW4zNR5L9R6INsJ+LSMOPOKtlktMXqtf2bw4Duxz/85Lwm5os
oPqVlem3RVFnbK8dgsUh2WYbZbadr7sG19vGWpzibPbzzfaIdheC4FNO6D7B
4wCIRFrYFiloDen8KklvPlnvXbbZW4j5CtJxl+6zCVYBuNlqrskyTG8VbriF
81+hB63j/JbzrN4mPzrCOexz43bpKQfs7BNB9mlRzmlh3hEfcVCE3CyHfiiO
H2pLloviRfXufLkfdzCcIrNnyRyJbUaYVmNMiwW2xR4IH/AEUa+VWfZrqvCH
vHJjarsnrSOQLPYH84gidaPJnfDt1nmtd/Oa1bCtFtzeiIKBtIK+ZF5vBLc3
oFSRUt6fUjqQWD6UXDmSWtQfxenyZHbaFw76cLrceT2+pcPRlUMpwGZ2TBIl
ExTxGKVlGFnTC6nvA++QWsdJzVMqF4iaMUjdWF7TFLp6GFLUGwVasaoWucrl
oHEE3TpKAGatfiilYTi9dSpXNJRaN5LaPA5vm4A1jWSJxwjto0TpOKVrUiif
Kuye5ffOsXumGPIpescEpmYooazfv3jQtWjAB7BQ3WxqzVRq8ytoxzt0wzSs
biaxajyiZiq+djKz/RW+bQGniuUZz2uczge297eSeekV/THVg2nSBVLdUG6p
IkkgixXKo8qHIgFx1Uyk1U9n101lNEwk143GNYylVI9mtS6SJG/pnbOMiYWS
T29bzz71Kd8OXgzVn4pJl9Upp4KAQ6HPQUHEPitkA+OxAjVby1XlO9rAOu7T
I444gRssny+8gNPyhKsSCPhDr5pp173FVwM1Fz3lN73lt33lV/3lALduhmpu
B+su+kuu+kpUJQB6iq96Sq77qm4VotueGmUPXyllndRi98tyDytzDypzvxSm
viKH1oY9E3jcLQvWrI42Efpr8Hyel4fqtyTaTaK9Z0hecxj7V7mmSzjHg/Lk
q3bieRP1WITcLYOtC9MmUQEdyU6VUXZYJ73Ah99rf/d3tb/++d4f/vOXP/z+
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
5N1ch9ycjP9hNvXGSMJfeiP/z2L2w22c4Vum9SlHGWr1hqSMtgIHh2TTE6bj
nymqwkD7T7gBp5LE8/K859ycaWJSJyKqNjtMEu9DD7BG2GnkO2gWB1mM5Hov
Ie028w2fwVWept85IpmfSv0+8l0/c71OWZ6fOe7fCn2/iQOUJfN4Xlsk1/EM
yyp/rWJvjSI/1ZIg1dZk81GY5zN6zH5B6mFh5qkCfVZL/KzAfC7L2acHvhEE
7zH8XjIDr+rR1z3cjw20j820b12cy5r8t4Upq0jN/qi/TKf88CRP7Vtx0nlR
3CE79JQb+RbnvJWr/RJt+grluINyeSMJ3WxBTHXimntgxS0hJY2+sqaI8p7M
ivG80sEscV+8qDeE1uhEbrAD3mLZRIJ8OlM6mvqnV+iurLjU8+8AyIiKUWWg
prgvpGoqp32FDbwP2VhM2XhU5QwUnF80kibsTxQMxUnG4svGk4qHEivHsqsm
MBVj0PLxVElfBGCY5kVWzTRRNppZNBBXNBQuHvQV9CmLhvN6/YVDwUUTgJEC
gHNaNpWinM8f9yodjasH/DMNPJ2s7jXO8NPSgQ1p75qkcYakjB2aJtZOoOuU
/R1eM60EGNlEWvF4vOTPdASA9xQzWY2LxOZlYs1cLjih8zFr4Jmof7O4Ziq1
ZDC0aS4f8FX/esnoc/nQU+ngeunA45KhJ8Ujz2QdKyJhewa9Mah8DKqYzK2c
zqqdhygnlMazgXcGkKlqJhtcE+jJ6ArjzauB673168dTF9P1113F1y3s63rC
eWXeZR3qogb2oRJ+3V9wMVx3OVD8tZNxWof92s25niz7NFhwOsz73lcEmEoJ
RT0F18PS7/2Fl+3c83rG51bangK9LUdvSCDroqyNwsxxWmwvIaqZGFyV5ydN
d+PFOVPC7FDepkhvU1qUIyvWVhBvB5BpjBw7RYoYxfhO4wNniAFzVN/XMuhp
I+ttDfmZJG0AY1cY8BPZ/j/5QXfKEgwrsx1qoF4lqa44XzOot22ym52HqbmJ
qobKH/d+++n3X2/cundf9f4D1Vs37/3+6617N+9q3HtorquXFhGOSkt2NTN8
9MsPejd/tlC5Y37/pvn9321U79iq3LF5dNv6/h+mt2/YP/otWPdXup9eH8x1
ieQNAGmT5blOtl/BK4OClnE2kwiT3nS1lrhbteG/9KarzMBNJjI1x3NUlzBW
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
fdiwDFp2MiYhAh4VhIwNDXexdTbQMXl4X+3nH8x//i+UhVp/ht9jWvwuL/mQ
F/Kepywc/I4f/oYfdkT3eo2zncwwbQhRLQ/UaUpybU71rgyzrQk17U2wnoM6
rGJct0je2/TAfUH4oTD0Bd52NVt9DXrzCUp9Q5lRyv6Y5XtVknouzvlagn0n
jN8iuT7B6rwkux7SgwB/7hGcXqDNdrCGp/ygs7KsNwXxh/SAfV7IS5bXc6jh
ZvqjpfQ7cyjdJ6VR6z20tcXqpecdU1sd3WslTYt0+XgG6FyVM7nVc3D5ZLps
Olk8EM3sdOP2ufP6g4T9ypjMmjlo9TSqYQYN3A3lbO1sfjHoa8Oh/L4ggFWK
CUTFJFIplRMQ0WB6yShMPopVjNIqxvNKhjLE/WG8Tp+y0bTODVHXhqR+gVQ2
mS4eDJcMBtVOpzXMYZuX6ABySqfSJJPxopHw8pmsyhloyWhU8ViYaCiM2+tR
MZVdOQOXjsSIB8PKgA6MpILODlgLUBNwY6tmYQCTqubRFbPKnPyioZDSiYzy
GUjNArF1ld+0xKiZQQGtqJtmtS0XdqxKiwbCeZ0usqH45jn0wLp4cK2wf614
+Kmw9zG95zEbiH/paJxo2K94OrRiOqZqLh6QUtlYPBAf2XiCqC+woM8TvNb1
RS0OYz7PK67HKy5b8JdVGVdlyV8qcr610c/amJdttOtePmCn7wMl19286w7O
dQ/vazvtUw3yWJpwUhT9oSz2SBp2zAt5K4l6Uxx7LI17XRC7w4t5zI4dIwX1
5/pWJblywuwhHqbBxirmt3++/8Nff/vvv9368fa931RUbmvqqhoYqusbPlS1
1db0NjOOtLUKMtFJtNHB+Zoxgo3ZYXoFUUaiGEOK8/+A0XyZE/VCmrPGz5jn
pE1zkqf5ycOsxMIkB6SHNtRdL9vdMMxM3UHzke6dO3d+v/37z7/99uMNgEk/
/f0fN/7+z1/+9ufrv3400NIK9fZJCgmJ9PQMcrBzNzEwV7nvbKQdZmsR52AR
Y2ccZq0RZaMSZ3Ib76Jfm+Y4Rwp9yYt6wfBZxtk8obs+Y3ltEN3mkPpjEK1x
iN400mIu324yz+rP8GZdwEidCXfHMtTWMOY7LPcXTLcltMkMROsF2W0Oagg8
iymo1gbO6jHO7gnFY43mvY42XkGbTEKMt+h+L6iuy0i9FbTRDtP3vSwRMNIu
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
yXTReHrlbLZ4Oo07GFzQ5148FCecTKuYhtXNkWrnMeKx9MrxnIY5as+mqGtV
WNQfxOoAlfT6AtWl5llUxxK+a4nTOo9tnsvteEKoGs8sGgwsGvUpHvcXjIZU
z8VLZhJFY0mVk+l1C9mA92SjjLv8mvtjtqdo5xPi7+3Mr7UZF9LEi6rUi0b8
987Cs66is3bWz17u9wE+8MuPurwLccq5MPF7VdpPae53KeKsMuMtN/CYZn1A
cjsu8DvmBJ1wQ07Y4TuMsAVCwADCoz7NkxVum+ZubKN1V+HGb5cv/fOfv1z6
6+odNU0rfVOXB0pGf11XvHVb5a784wc37ivLK5o8UrJVU3HXeZTuok8ONqcG
6vEijctizUpDNBtSLOcZoYv5UQsFCYvcjOVS+AgrtYcczY23y3LRSLBWirdR
d9d9YKhw+7H8zct/XLv0rz+v/P739cvX5K/dvCt3+9pfVy/98vtv//jH7b+v
ggwNQt3dw1xcPC3MbLXVLdWULNWVXXU1vbVVvHUUXbRueevIgS0etWQFb3Fk
SSz3aAFPCS7/NpLzJsltEWYLGGk4Q20yR38RY7OEc5yAW8tyU0Mtx6Fm3QmP
B+IfrSLNntOdtqg2a1iLJajxdJLRJNhwDeOwjLBcgpmsY+2PuGGbzOBNpNkT
lCyR9R4zSDaBLMZkgwg6KQo74oY8o7hvk10Xc027Iu9NZGpukqymcjVXiDZH
3IhnlMhltM86wXkeYTyZbbyQ5zSH9phEWDXFyjfG3OpIVG2N12yKV2pKeNCe
pNmaoD6cZbRKcnlCcF7Cuq6QfaZRbv3Z5n05Fg1J2qIIZUG4Esf/XoHPXYBJ
gjAVcaR6TYxmbaxWe7LBSI71KMSyD2w0n2e5inMEjLSEsF3DOm7T3BcxoNEc
vQGwRk/Swwmo6jzCdBnluoELWsZ4LaIdx7KNRiGGS1jbyVzjwXTd/nSdwQyD
GYT1CtX3KTdmmR2zyInbEIAnWeHdeL9mpE9FCogZooX1eoj2uI/1vEcLeEQL
UuLEalUW29bUR4i7kso7o0o6w5F8bzDFm8rPYAohcFZiCjYiDumZw/JBFnkh
in3gJUE4fgyhLBHFSYAxwnJYHhCOLaTYJJsPGEkzR2SEr3VkNPvnt4WW9MRL
RrPrJpF1c6jGBUrLIqNlkVo7g6+ZJkpm8PzRLMBISIkRskoVU6NGbDAG1FHa
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
r7KxuLKxGOF4WHF/SNGwS8mYf/lUing2nTMSWjAUUDgUWTaeKJpKF45mVY2j
mhcLutYEQ9u1w89autfLi/qjOP0e/JFY0XgqwCRAR7Knh1PJ5WORshH987mi
ydiyMb+iIY+yMbeykYCa2czGFVLNE3zlVFZ5d5CoxXWhL+3lGO1bN/OinXLe
QLhoZf5oJP6sh32vSnvLC/kElAmCiK+lMQCNzqWwL9LciwbURSPmvJnwoYn8
oYX2sR7/VpDymhX0nBH8tjzxuChqm+G3zwrcL4xYzQ8fxPkIk10gbiZWjx/I
//nnpX/+8tuvl25cv21h4RybSEjLYsQmoTy8owyN7R4+ULl65cYfv/5++/e/
tOSvOqjciDC7A3FRQnupMAO1KhLMRimxm/ysaUZIc6Z5VbxOa47dBDVyJj+p
kxJJjbLyN7pjp3LVUfu+lcpd7Xty94DPunzt8m9/Xrt85ea163dv37l7S17+
htytq9fv37j1QE5e6fZ9W30jRyNjRz1dd2M9b1N9PxNNV/3Hnlr3U83Ui0Ls
BvBR20LIm8rc1xXgfW70ITf6oDDsKdltg2A7DzeZzTVZwzqtE6w2CI47lMAF
OGggWXU802AwRa0t6tFohuEGyeEQKBLLY47YYT0Janz3/90ScXkVbb+MdBiD
aC5hjPfZwafFic/ZQc9pbs/zA58yg9aIrrPZOrKuRyjzbU7AETdih+EyAzUe
AWv1Jd6fhuptEF2eUZ2XaY5rNPdlvNNopu5Iut40zHokx2Iwx3gAojsGMx/I
NOnPMhvKMW9N0miIU2kDazZE3ZZGPhiEmk6j7cehZj3JWr1gncEck3mS/zwl
YBDlXptqWZFoXBSiXuD9MN/zvihaSxJvKI5Wq4pWrItX6c0ybU5Qa4y715Oi
AvBvOF17NEN/KsdkKEOnNe5Rc7xCW/Q9AEsTUKORLKPxbLNFrMMSzhHY0BzG
dR7rMgoFDWebA0xaILjNYFwmEU7DUOtZnOciLQgw0gwQrOhRengn2rss2YId
oUcLlPXcpgaq0INVaCEq3AQDMdtN3Bwt6o2v6k8oG4gB7uOkygBcZXhpG7Sg
Gp7DiI1GOcYRQekFrjmlvnBREK4ijCqNJ9XEIwURCH44RhyKrvRCiO1yqs1y
qi1yqkyRNeakRltmq1dZX2LDNLZ1lgYwqWmaUD+BlgxDq0dhNZMI8QiM1xdO
arLOk6gCAqE0WAv6Yiv70+uGYS1j5M6ZgtZJcs0wRNCZIOwCAyHuTeJ1RbEa
fchSG4xYB1+hRajUBoBEqzanVlsUtXkVtfoX1LsTq6wRfN28Uj0k3whdbEEQ
2BU3BYu7kvgtCbwGWXdojMgKWqwK5+nSJM6cxmB2fSCwkCCxxteYY2qMMDV6
8ArlHJF8Zvkf6aX/gomuIyvv4Go1kNUqwH6ipFrYOgN8vRmxEUSst8Y1WKOk
ZrAqgzyJMbHJidrmgW+yR0hNUVILYpMLpcUnvyuC2wEu6ckSD+KA2l/1BEw0
kMprj+D3gAvbIqkNLsQG09wKFYhANb/Dm9Mexe/LKu+M4zT40ySueXxDfLUN
ryeaVO+FrnHGSz1IDc6lwxmlg7lIqW2q8DEQiWVysfy/wOJ7ubXGyHorWmcY
qysKWWuKrgXFcP8Vx7sMrVRndvlwB8JIrU64NitYrX5a+bXUYg1Wawy/L6+4
K43TGcjtCa0YQZcMRbBag2omsIPr0uH1xtZZrmgQUTtNqpxAkVrsSW22pHZ9
wEhdy1zRUDarw4nYYl0yJBsWJ54IrxgJbRqIXppAnM4wzwYLfvbSLuqhP4Qx
ZzyvjyzQZ6bpV6bRB6LpHuzhRsaV9YzrewgNWTYhlPZTuMIm5O8dxMMtlOJT
1MNtjOohweQ9zfELy0mWBEkc870a/KMm7bsk6bs4FoiLqoQzScy3qphzccR5
adB5sf9FWRBgJIAxZ0WuXziuXwocX5MN31BNz4q8v5aFfRaEyJJ1k03ekSw/
0h0+UCw/EDU/ENU/Mk3fU20/Mqw/Me0+0d2/sf1+lPh9LwWYFHaW7yJDEV+W
iOlrWcDXIu9vJYFfigPfE61fEPROyQZv6NbAB+4h1J7mKL8gW5wSrWQJjqgG
BzjdHdjjbZgCwL8XVNkYKFkXbrzhEVr/mGAsW5NgvJV9dy75ynO0xhHR7gXd
/SnGYA2uuYvVGU/8VdaIlKuxmKW1DjMDjATAZo8Aego3WoFpA46ah8gD9+K5
DOVdrPVSjlZfnNxArNxw/P1nSKvXrMBPZdEnTJ99rM0+2mIVorGWo3aIk43E
P8TryJKWk5zf0H1fMlwPgJ3Bm7wguewTbHfwOjsY7X0UaBupu5yl/CRXBYgj
svNLqstM6l8zKb9vo632CJZrMIXZjL+e5Dx8lmd6QLJZzXu8Dnl4gDN9ijA/
IDoCSNuAar+k2b/J93hZFPicAuyw2hZMSTY5HcMVkNursrgXnMADktNJQdBu
cXoHMhrhZhBlphIG0g+xMc4I9iCmxqUFe3ma6dtqq4Q62SCTYkLdXYKdnYOd
XUD6hkAtW/nuHb1HiiB1NT99oxw3G0GsR0uqW0+axXCW9lia4kKm+ibU6pji
c8IMAmKf7LmJsFmCmm9iHF9ww79Woz7VYz424S96eF8bca/Koj4Jkr73si9G
hReLrRdPei+mG773FH2pzHvHin5Dcl9IUhiJuDuXpLuUrgco6BDvf0oNfZ5n
t5Nne4hzeY62WYPor2bpbaFAW1jnTay1LP8e2mgOqjYDvreYo7Ys8J8azGud
REtn8gCBVE1mNc+jG5aw4om0ismE4pHEsolY8UyOEEDOHLV9RdC3Ie1Z40vn
Sb1Pxe2rJZJZVMVcVslwRrNs+HxV2yKvfpbCH4GWjUIrpsiN89ymWV77HK9h
llQ3DTCMzB0MIbXZMXtD+JPZvOE09lAcqz+YMeDMGnIuGYvmDaRWTBH7dyWT
u8NjG50zW51Da9KWJXb5eHbFDKJhmSWYTOEMBTJ73aldNpQOe0anZ+lYmHAq
QTAezh1w4wy5lk56Vi1kCacyOSNhBUN+xRMxRcOxwpFU6XhexxJraKtieKeu
d1MKAKl9pYDdFcwdDKyczQLMwx+OKh9JkHVWH4/iDfjxR6MrpsCCyRjesA+r
14U9asnt962bwzSuFFQsIsvH4mu6w0YGkz9O876Pl1/08y+62T9aSRcd5J8V
KbI8YxSbY5TOK4zWR4L+O6LZF47vz6qkjxWJ74WpX0Tgs/I44J//ZxX4qzBh
D+e6DjF9L8oCsLRD9wbY8Izouox1HspzrE+3ZEfZRZur68nfVLghf1vu5u+/
//5f//jl6s07yioW6hpWapoWyqqG9xXU5W7evfzXtX/+31//+D+/PLpyyVlV
Lt5CIddZmeirwY0wrEi2aIf7zrLiZC0PRL+6NDNJilEr3Lmf5N+IDaPH20fZ
qDppyTto3TNXvqNx98adK3/c/vvq1d8uXf7tt8u///H35StX/rp89a/LgJfk
rlx/IHdH97Gqi6mZH8gqwtE62cM+zdsh2c002cUQ5WkqjnIeQ4SvssHbgvST
6pyXwpQ9TsyrspSXRbEbeJc1nP0T4B8S67iJ9wSMtIS0XEY4jabr9Ccrzeaa
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
6UrX8FZ3zyp36HLd0t3hczf7R7Zr62bR9XNlbedIxgs8QEddixzNPKP9HKVx
GgMAQzVWUjeB1iww25ax8klw7VxB2wqhdq5cOQMDjEQ2RpH6vFljAYReB0z3
SUKfC3UgjjaYWDkQLJ4sbpliTmy2L941DVxraVslyRbTlQtg9XmUer6gbbGw
ZjJSMRXcvAjTrlRp1jmqhSLasA17zIUxaiabju5cZRivSofWm00ryq4lRvcl
cs8qXnOxvP1CWetSqeJcJn8ynNLnAYCwa5XdsARljviwR8JFkwGCkSjZeApg
JPlERt0ESj1VbVjjTm/qp3a0wxuqyQvSm6uabxtDexf1nxfbPs92vB+VfTSx
9nq4e93sPQNtb5i3N9HwbrRh71zbl6laIPbmW/ZmG79NKN4PcfcM5I8dle9a
yr9oiXs6xudO0se28rf1Rbe46Ws4/4tY51uipCftFc96RW9H1S8Ga+708GdF
uMaSrBpomrQwSVmSLinOrUxLTg70Dnd28jA3tztyHAjXk6eCbK1TArwz/FwL
w13L4pyIac68fG9pkX9NoV8TNEiHjW8uCpBn2iuybGvzndRIPyXcjw9xh4Ic
4/1OBLkc9rD62dvqF1/LX7zNASD96ml+wN/mWLjL6ZQA+/Rgh+xgJ7C/DTTS
vTozrCojhJYVJilK7KiEjLGRVxqoW2raphp/v4XysJlyr510p7n8jhRyi594
mRV8SwK+L8u+J8m4zo7doAQtYd0v4gPWqqOusaPWKG5XqEE3uSmb1ODhvGN9
mQc2KC5PFFkPJOCH0oxbwpgplH1j9C8t8QdGEfuz43d4UTuCuEvk4AW82zLZ
4yLFf6k6+ALdZ7bCdbDAegRqt0jwGy62782znCn3PV/hNI6wWCSGnCfFrXLi
1zmgi9SYFUrAEjloluAzgHAwldiPYTxnqwKAGES5jZS5D5bad+YeP0f0XyT/
mX2EtNEVHuiDmemLzvTALDoLz2ghJ4BXDaK9pojRAxif/nKfKVLkRFWkDuHV
nGffWuTcXOBYn3dWAT7LjzslSzVvznVRZ3uoUs/yon8VRv5TnXG8r9hhoMRp
tNTFUGDZnH5AnfpbD8wWCE2+GSCltpwzHfmWo+VeBqh9d5Fja45lc5Y5oKPO
QruOAlvg7cYIoXqkZ0+Ju6nMF3jrWVr8LCt1lp89ys7qwIUr8l24aVasRHN2
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
3peNavfNrDmJbA2o6o5n9KYydamVam98q31ZnS1SeQLC/xtdH8LsiVCZSlvH
8YzmOITINZduiZC6E1q85f2o7gVpzSCSpo0naN1Las3S2N8lsf6lSPUDyxQs
GIlk9nvTjX7U3mBAR2Sjc7XehawPVeyX84XKJgs5pnCayV85Udg0WaYayu6Y
QoyPl12dwL8bon7oQr9Wpr2QR72UBL/i+z3neAME2sCd2aj8Y5t06lr1mQ38
sWukI8DGlQq7nWr3HbLtPWbAM1Hac1ni85rkD62oPT35c0fRFy3iU3PJ5+b9
RdO+tkAAd+1poF/b4W/qsoD2P9aDPzdmAfGtNXc/wbsButdc+EEFeioIfCEK
e6cEva1JeVOT8EoWdY/lfIfheI/h8pjt+Jjm8pTu+5Ll+ZQV/k2VvKdOfV0T
+6EhY78gkhr6vjYPINnnPuKXUfFHA/lTS86XOvD72vzXbfkf6jLfSbM+yDIe
c/xu0h2fSMNeyuOf8MMeysFPa8D70/P5kQ95UftlFYnOTyT7TLpGdtuhuN+m
e61jrC6izqxV2F4leN5gu+6wQ67zo2/wYp/K8u5zQFtE702S50LRgancQ9u0
gHvilNsC0BY5YAVzdrnk+DYx7B4/YBVrtVh6aA5+ZL3C42Kl7RWS111eyqvG
/OuckKt4h5sU77uCuE1GwFWq8x1B2LMa0H1h9A1awIWys+dRZ5bLLBZR5lMl
/xjO++0mI/gWK3AReeZc8ckR8C/zRUcfSkB3uHELJdbz8JPnESdnYD9uEC0f
C5Pu8KM3KK5XaS6P5bGPJYk7ZO8rFWaXEL/eofrfoHrvUPwuVRzarDR7RE/Y
pfnd4nm8VWW/b8oFPtLLhsKX9blP5EmPZaCvnaVPuglvuitfd+HemjhAP/ik
vfqqHNGHTUInOOYEnElwPxnueCbE+Wyom3OEl2eUvy84KgqTn8+vxitZdAa2
DJkNLkiOz4gKBUeHBdhb+tmaxXifTXQ/AfU7okqzm8aEXmQn3KzJfdmOfN1a
/ECe9UCW8by+ANDRndr8J+qSV+0VL9srbylgN6T5d1QFl2jRw9hoIyq8ExGq
K4/rxad0lSe2FUcBUZPtz0t0YsdaS1Nsu5EBI/iwQazfDDF8rCpslpKwTE/b
EUG2eaDB/NNdKb8Y0n89X7a/dOZzNfpLJ+2+KPuZOOO5NA2g8iNO7BNhxvM6
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
caWxPvnRe8pSPMuTPWFxexAx2wAjUZI26YpcnbjgfayYK6rcOw2Q22bEdSP8
uh52UVNwmB+1QPY9Icm5YSVctJH31leNMiu0eERhVLCXi8uWNS4b12zZsG77
2rVbf1iz8esfXb74+pefftqwc6dngH94mH94YkAYJD4JHRNU5r8BEfRNTfS3
hOiviJFf1EZ8ygz/oD7t86aiDcNItwHYtmms7w0N9K62/L6++J4W8cxOetnG
fNG5Wsbn3wHhP520F23kF82YP5thNx2lezvLOkZgmulSwyLCMo9t2ldrP0Az
7yfL58qVe0tFUyDRVE7DAaRpGateLOaOJbFGM8RzEMUiVDCeLZ0C88ayUW2/
Fhs+Rtt3isZBwgkwdzwB27kV3bIJ27qxpmOHdDJdOQ3jDaUTO9wqrL/imz0l
49nsviRWXzy1I7TKvAvbtLu6eS22aXOV9fsKyydVTV8CKwJdCr7di9TjjW7d
WmHbTOoJYQ0mEdp3VTu+ZTk9jQuw8dNN85eHZi93jZ6ztxygmxYQlmWM/SjE
uDeeMbi5uvU7nONXYqtbXV9+61zj6OTMUHPXmKNnzNbTo7Y5hLoGtrSezJTV
so1seZPYACzf3zc2bra18HnNdKoBixTDS+XIUn11mbYS0HKmEZ7kJGUsccHn
dYg7zZTfuvnPB5UPO8XnzOQLzbSLrdQbPdzb/cLbfaL7g/W3evinzdiLFuwZ
I/KqnXqrlXmznQXEVQftoo0IxHkL4ZQRe0iJ2CuGLEvK5gXFe2XlS/Lysbq8
Hkp6GzGljZTeUZvTVpvrIIPsNWmAl1qJGS34tGZ0khUR3VAe7kAn9JDSxzgF
Q5zCfk7p0Wb+yTbpspG2qCMtmhjjGoqdDm/lVvfLaW1icoeM3iVnN7Lxcny5
nFAqri5glWcARuLAs1jwTEJ+bGGUGyzBG5UehM4Mg8b7QGK9KlMDikJ3ZHiu
g0TtIGYHy5BpxHQfUponLSvARi7q5VeJSyNJUZvVhYFdpLRxTv4IOXOYlDHJ
L5oXlA6Q0/oISWPU9LHa1LaKoCaI13BN7MF62AUL5XIz43wDcY4JmiQlrPBy
DtcXH5EVHa4v3MvPbEf6KjPXKzI2tFb4TzPThsnh3ZigWQ7okBI+Rs80FriK
kn9pQ3qNMzLmuNkj5Pg2RIC11A2IgZqYcRpgquTVoka48BlW8hQjsRXhqcxa
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
bI/TTO8zLJ8TjL1TuI2TuI2H6e6HGLsvyKMvarJf9Ag+ztlfj1b9NWx4M2p4
M679a1jxvJv92kX5swH5yJB+X5fxoAryQJN5Wxl3Wxt5zxBzWxNzQxF7WxN3
3xB/XRl6kevzs3CeECco206zdh+rdD/NCbrMifhZmnhREnWWH3BbnfSrKvf3
atTrZvzHXtFrF/vvIemHMe3bIdXfg6q3A9LXw5K/GuDPHfhXdfiX1eDfqzJe
NGKf1pb8qpgvXv3CAntuzXmoBd1Tx9yVxd/gge7Iwm+qQx9qM+5KU24J/X/h
77jG3fubNuW+KvmaNOqOKvuaOOIsa/sJ2tZjpC1n6LvOVvpcUEXdq8q7pcq+
Lk27Ik29JM+4qsk8xPYfwf4wjt12hBZxkhF1TZl0gu59oML9ENHjLC/+qjzp
kiT+IDnokijptj71Aj/4jjbtoS7zuizxiijqlirxjjIR0OMf/07q+qyR/ryh
7IWj4IkJBGzzMzvingl2z1J0qwrysyL9riL7Bj/qlibhTb/k7xHL/Rr8FUXY
JXHKZWn2JMGjA/7jKUnSvRr8owbyr80V9+uL75ph11XQK+LUU5zQa9qcu9aK
q4a8Y5yoy4rMm+ayuzXkZy2sx83MazWVh7mpDsjWYWrChSryuWryMVX+HC/h
uCzjAD+7BeNvgq4fZsedVKPnOGltpW6HZFm/2IXnHdw5HaaflgxwZVRacLC6
8qfmqnuTjsvdhgMWdp8IPaLAtjGhNlxGG7Ooi49pZxf18NH1pOzWyrxmcgbQ
z1chQ3oqU0/qy36y0W7Y6Pcb2Y86JI+6Vc9GbS/6NA9bmL+38551qu84eVds
JSeUWVPUuI7ykE58WGt5sB3p0VAS0ENO6MDHTnJyxpkxg9ToAWo8MECe4qeO
0eMvaIvv2ihPmtmP25iPWuiPW9l/dsqftYmfNDHf9gveDto+DJnedYv+7ua8
aqe/aCS9a6K9cVR8sME+NmLf1pcB36L3neyPA4IPnYwPXdSPPYp/OkWvWxnP
mskvGkufmXOf21HPnKz37dqPk/UfpmofTql6e2DyxgB2k3t587aK5q1sVwi3
LU4zlu84TrUdpRvn0LKhJFa/H7svmtbtLp+J1czC+QOZ4nEQtXsvvctdCIxo
hlIFg9HUNnds7SaMbT1Y8U268FOo5muY/iuw8j8w4zcF+u+h6mXltW7Mpihk
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
GFlRkrECXM8ptlXAZLBkJiiYnxNuRKfU4DIbyXndXOSgGNsnLHEQspuoUDMm
hRHnJk73bqpI72NBu1mQJlL6gBjZycyzl8RowB6WAv9aTHxTeUoXBdRFjm/B
hvaR4wZpiUO0lAkeeEqQN8HL7qMmuEhRTWWB2pwtzMiFCtCaepQXsLM3l80/
wlaPcRenLJGmLdHmbdFBtqrBm2QZ62X/nkRS5+6QZ20RgtYrcnaYi3wb8VFt
5CQXDdREiLcWhyigfszUHfOX2FK3AUYCzFMWvQYbvqokfA05aTsrey8lfVdp
7HpU2Kry6PUAk1CBy3GR6+ZLbUetxsWuAdYnJW4FQAUACQhu5nbASEALMEkC
2aMs9NYhg7QI/ypMKGAka3lMHSXVhk/WFkVVgtzm3z9zL5DQUncBTGKk7pLl
B+hLEw2ULL0YpjQWSv41kn4YY5kimOewhimkZqLANIf610gE4BBpnSo2jICr
x5H1s2Tnv8/R26dLqyZQqoFCUW+qqGseSP/Wz0EYR/INIznKvgRZT7RpPMcy
DbHOQAEjOebKHftKqydzABQBR1hlf6hhLEYzGGkYSTaNpRtHMqrGM8xTYANw
1O4FGcZz9WNg5VCatC+R3RrOag5mNgXw20J47eG8tljVIEQ1XKgYLOR1ZNJb
o7H2nejqTfP3nDcHKnoCAcjZp4vM44W2SUzjgUrHLNk4UgjgStQZRHasoTs3
c5p8uU5fbvMuaWeArjuzfrh8/8WGQ1d6ew6r9T25eOPmQvmXhYoFJcYlgJGQ
ugVI7SdI9X8R6gXYqm/INWsJ1hVY43K8+Ue8ZXGZ+aty8yKKY5ugDcAeQt6b
wWoKZzdHl9V+y2x3UwwlcDtj+V0pwp4UWrMfzrGJ3xmpHYEDzsE7VgIC5HX5
SQf8zFMYTrcPsXE5pWk5t8NXM5xtnkXUHsLYDuB0o4XywXi2y53WsonsXMvv
8ZQOhspHgpnOtezWJcymdaxmN0VfrKQzmu5cTar7trL5f7SmJcJOD17Xbkb7
ZtNsgWq4COhFWR3BkoEkdlsSqz2K2rJH0hdnmcEB+gWMJOxP0EwUSgdzNaOI
mkNk+0GkZjRbPZJlmSkDdOQ8LG85Lq7ZV26ema+VJGrbga/7rqJhkW4wpvsQ
Y+yoADDSjTnlsyO210fq381Z5+dc62a876C+aix5bM781Zj+izz+J0ncWV7I
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
xvMMU9COY9SOo4ymCbh1oRLgrnW6rHuePHyYfHCh+vIh1ZNj7X+fGXh/tO3v
adlfg9RXnVVPmkvu6JNv1SddVcZcEEYsEPdN4bYPV2zuLFo9WLbtEC34IDXw
GCsUqKN/qSt40UX+q5/zoIX6ZxPsuR37xsl45WQ+slc+sJTcawTf1uf8osq9
XQ/+RZV+lht+ihV4jh9ygRd2lOx9grFvtsrt6P96gx8geRyl+5/iRJwTJP4g
Sj/LS/2JH3+G4fM9ze+OoRSovN5PaP+eqXs3Z3wza/p7vvHtuPydk/mvs/Z1
N/GvvqrXzWX/tuP+Hah51o59bAA/0eb8oc75TZt/WwO6Lo25wk06S/M6S/vu
Gi/whij4V1H4TXnMYzP4qRV+v6EAWAfw0g1hym115g1F1kVe/FmW30H8d4dJ
u84wA89zgy+rs67Is34UpFySpf8ozbooL/5FhzjOjJ3Cei4yAi7Ik67qi28Z
y8+KEg5T3S8Iw36S5R4iBx2jB//Aiz9A9J7C7vieFXhDl/WHCfvYirhbn/GL
KOoXXvwjDeyJueKRDfuqn/nCQbvfgL6pzLzADThau/+8JOVmI/aejfyTEgRA
6wjef6B020l51u8djEetNb+asMcFCU7M9p9V2b9ZiA86BPe7BU+GJQ8c9J80
8FPirDOStPPSzK7i/Z1Qzx8BF5lwZyS5h+lJZxTFP+qQx9ighZrkmdrMI4zk
+ZqwSWIAoKaDnORBoq8dvW+YHuOiRCmyt7JTVvVSEs7UkxalsAOS/AVR2SFp
yTw394i06LSVcrpbebxVekBeeV6DOdet+qlHd7nP8JNDdaSeOqPAjfArRvm4
EXHlkBDTzylz8dHj0krgaxz4Vu9jFsyrcRdahTd6NY/GTX+MGf+YaHy2YH9+
sPvRjOnZrOX5pOnxqPbpuO7+oOSGlXqvrfaqCf+DpuykEnFcgfzRTDqtrzgk
Le7ERnRhw1tLA4YJ8YdZ2aO4sAVa3CV9yTUT+paJ9Kux8q6V8KyT/ryT87id
9aiD+bSH/bKL/7SN9tpR+6Kd8tzB+HdE+X5M+96leDtS/2ao7pVL83ZU9+90
418ThlcAkw62/DuseWnHv2gte9lOet3Jfmol/tFUdq8N+WcL/alLcNdBOy2B
OsqiHeikYT6yW4c3NcIULdn4pihCRwp/ZGnqTFqvd5l1K7Z5rXQ4XzqYx2/P
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
f1pXIKJ+NVjxcbbo/1VYABR9gWlaSWjfhG9zw7fuqrTtRZt3Iww70Oa91OYg
6SCE05Ne2bSvpM4tX/pdvsStULaf3Z6vHadqJkjs3sLqlhSEZn8+b2UBez2I
vSJH/BlU7UZo9SV37pYMR9dPgjuO0HsO8fsOcca/1w8ckDmP8KdP6ccPm+RG
bFzSjn0eyzd89/matd+sXr3yq6+++Gb55ytWf+m2YVWwz/7YEP9Qr/3eO912
bVy7Zc2329av2rd5s9/u3eHevv779nvu2Om7Z3ewp0e4r3eUX0BMQFBSWERu
fFJRalJFHoiHLdbSKsyMChO93MIoN9fCOnkowEi9fOSgGD0gQfcKy9oYhRZy
tqUmt6k2z1Jb0EQDW6hgIykX0JGNVmymFDXTS5pqoEZSgYkCVVVkttARPUJc
B6+iQ4DpkhMcSqKNg7GxKwAjWZgYA6W8V8NrFtWqqRgxAaGkVmholRJyuQCP
5FchWBXFHGyJjIpmoCA1iEI2Bk5FFlYWZpTlJOfFBxUmhkJTIhCZcRREPrkk
F5WdiADFwtOic6P8cyL9ADIBT3Oi/TMjfFKD3YEyJ8onZNe68D3fAZQqiA1K
CdgHGClsz4aY/ZtT/XfDkkLhKWGQpOBSUHhhkh8ofE9pWigiPQyRFIhIDMCA
wmuLkrTVcDkeQi9OImaFV6YF1hbE8GFJ2sq8ptrSekKBtjxNXZ7WVA211cKt
NSVNVJi8NEmBSDbhcrqYiAEepo+D7mGXNVcX2Ei5Dbi0enSctjTSgk2w45Nb
sDEDNJCLld5Nie+nJbfiwpvQQc3YUCPCV5y1VZC5WVW0p5MQNSnIGWSkNKED
gZjK/OR5O3hpG7mg1ayUNcLMrYbSgBZslKU8tK7YA4gB5lUH8WyA+y01LmFj
bLi4VkJiGym5EZdSX5kkQ0Qw8n2wCW4VcVvQsZvLIzcAQELHbsWl7CqL2QyP
2AANWQMNWlkSuqY8Zic+1R0duw14CgtaiQxfVxXvRk7dTc/eU5OxszZ9BxBG
5m5evoeoyEcC9ZMjgg1VCSYicCiymyh5+so0cWkkuzCwNtufnOFZlQxYa+ka
X22WuxQeCRhJg01SkjJVApiqAaVsLweMpBsv1YzDAB3JxwsUU4Wq6QLhcJLA
maQez9dPwY2zhKYD1bZD1c2Ha1qPMJoOUlTjcE5fGqszVNADMk3jrXM11jmg
LLPMwM3TpQ3TWYaJQutCqXk+VzMWoRoNVoz4Cgd2MbuX8/u2SgZ95a5wuStU
2OuvHIqT9SeJ+iJE/SG8Hu/atm3Mzl3srn38Xh/gt4LuQF5HiHIA1DRb3jSD
qh+H1o+DeY5YQWeirDtH2we3jBC65iXOI02uY7bBE4bmOZLOBZH3ZgAcAkzV
MFkkG0hg2b15HQHS3gRRdxKzzY9k3ljTspnV7iHsCdONFuvHkJLebHqzP9m8
n94cKOxK5HXE0Jo90dqVcMVHMNl/oJIPEIqPK+vWVBt38zojuO3RQPhdIayO
PbS2rYx2d1qLP63Fj9MZxO+KUQzm5/I+SqN9ABGspTdHsDsCSxWfFks/qKj7
musIA4DBaN9HaVnP7vAEdo/TtUPY6yvo8mW27xEN+ix1JRqIVTkTVYMBrOYV
1KZldNs67VCAeiCmYwFvGS/RuaLlvf5LN9PZP5GO7lRNhkmGQvmD7uiGD0rV
/0HpPyBZ1gPcUgzHAOIS9oXyusKE/QnUFm9Gh1+t3RPXtK7M+CG5Yzu3P75u
vsDxPXvognHwjNJ+hAbgs24yXulMlfWlt87XdB9lORbpHQeofUe5QIZOiTsW
aN3HmNrJTGrbboT0I6zmE2VXcN9w2bEZ8u0F7aOD1jcHbO/nDW9d/Gd2wh9N
0GvqqHP8/Yertxym7DhE3jmB+W4EtWWG4P09J+kEL/mivvS8gXCtXfx4vOn5
jOnZqPKpi/eoq+aPbjpwwv7GyXjdXfXYUnRLm74UXe7ScD385GuylMuSmB+5
YRd5sRfocYeq9h8meB+nhR9nhM1U7ZvAbp/EbD9U7X6MHnxTA72hgl1TZ183
5z7uJ/w1InjnkrybUb4ZU7x2Sl92M971Ut87WX85ZW/GTO8n1E/aqx+bkW9N
kD+UCTcU4ff0ifeV8VfEMXc10Duqot/10Gvy2POC0N/ry2/XFdxXZdyUBJ6l
bLpI87mnzP5NDbqtS7sojbsqDL0qDLspSf9VknKW4X5ZEHqS6jdRtvIUO+Sm
BnyRl3WGlXJWmHqUEXWQ4jVH2DSEWDOMWn9OmnTDiDnJT5klA/v/3QVm8mV1
zhlh1CIj4DQ//iw/6Qde4h1D6ZtO9m82xM91aRdV0b+o465JUm+pih9YqUAF
/dIlvd9G+KUu7wQjaBq7b6hs/yIn5Ya18kp98XF+8kFq9AIh5HI9/G6f+koL
91ZbyVF2QnPRhubiHZOMnF/buQ8H+X8MMq83V1+pg/6kKvlJVXrdhD6vRh4V
lHSUBfTh3U9oUAc4oG6UzyFZ/kl9iYsSMS/OXGxA95JC2Imf0+K/cLFBk2Jw
Gy7IAHazFbvXQdzFGXswAZ+3YaMn6NlNhTtsULehqoRZafGiHH1YWnVAXX1E
U31ciV9U4Y+3ss/26S4PmY7ZpJd69ScsHBcf2ceCj4nxAJDGpVXDQkwXDdbH
QsxrSWNS1KQC83199Xkz86pddLtP8WBY/XBEc3dQ/Wqu9cVs49P/3TL2ZFTx
eEz20Km808F70scBVng62fB0svHZVNMDZ93dXtn1VuYxWckRUe4JJfSkGv6z
peqWg3JCUXBRj7zTRPzdTnvaLbjfwvrNQv6tCf+gnfpyWPanU/Wok3rfiv+z
lfquT/KuX/mmd6k/0r/9rLdDoqV5bWbNgI7+Oen858TQeyDHBl9NqQFWve+X
Pu/k/u/6ZsZCbdYCs2KChtJB45iJ3sy0MExaBCYpsjohnJQYSEyMpmYmirBZ
Knm+rr1UO4rnumBVnTGIZnfuCIzUEo7WeuLrwlltcTWtEaQWH3Ln/iqbJ7Uz
qMKyCWn8Mlf6Ada6Cl7/WalhVW3P/poub3K7L9HuS3EEAkBCGLbhDd68zrya
tvgS7eZS/a7Seq8C+c5ijS/XkaObJBnmKQJnEckWV6rcUST4BsJdVSTfClF/
U6jYTO4M4A35KcdjG6YKBk7xeg5x+hY5I8fVnVOsnoWaocPi+TMtrnmlWAUu
RgR7eK1dvuLT//73v//58ONPlqax/c8Xny7bsHrFjk0btqxdtXHFV6u/Xrb6
64/Xrfrvns3fee3cAQDJY/sO7127gzy9Qn29o4MDI/1CogLDYkMiYwJDQzw8
EoO8sfmpnIqiump4XTXMykJbaktt9JJ2DrKbX9bJgnWw4V280nYW5P+MZKMX
AEayMaDNdJiJDG5hlNjZyAZiPhALpbiNWdbORZvJUCAAk4zVRXYBxsItMzBK
OiWkDjGxhYdrF1W3CqndKp6kEk4tzhKRkEoatp5XrajFiKrL+IRSJgZCQ4Hp
KDAbC61BFNBQ0Gp4PqE4h1SaCwNFZ8f4l+clwUEx1fDcKkhGaXoMwCRkRhxg
pPRgD1hKJMCnvNhAUJhXeqhnRrh3csDuRL+dedEBgKOAFVID90fu/y4lcE9B
tB+QMlA0IiMamhwCTvRPC92VEbEXHO9XnBJcnBBQAYrEZUUR8+IE6HwBJk9B
KJJW5gNS4sJT1VVgcw3cxigDpLQ0KzQmk10QJUWmG4hFgA+XpsOryulmlg2L
if1cbEctHMCSBpHIyQtk5/qJwP46RJS9GtRSmWBFR7qYWYCOLKiAhlIfAEhG
pJ+pPEBVuJebvlFZuFsHc+8ixw3QU1oqw9SFe7SQpfEhpXlu3PT1gJHoid+K
stz0JT46iLcsZ5e6cC8gKDPS3wj3MyEDASO1VMbaScmAkYyoCCU8SgQJZeZ5
E1J3IQEaRS+lPHI9KsYNMBImcXtp5MbCwJXZXl+C/b4tDd9QmbQXMBIi4rsC
3+UlwasqYr6ritu+1JEbtKMqYVNN2nZ6xi52zj5hoTcndz83z12DjjCRUizV
Gc21+baaAlVFkgAWwS8OpeUEEdP2l0dvKg5ZWZXoxi7wlSOiNegUNSZeSQLp
5QhjC1HfX9kwga2fKVcMF0rHM2XjuepZqHquiDeYyh9I00+XGWfwpnmyZYFk
XsA1zmHN80TTAl45DuX0J/N6w+RDWW2Ha+xHGLb5qobx4rrhAtMU3LIAbpyG
NR9EWxaAk5Ro9ViozOXL7d7OG1gt6N8OwEDUGyzpD+V3BShdCSoXSDwYx+8L
Z3f61LbuBIAEhNvtIejz5Tt8BF0BjZOZ/SeJ/SdqbXNYgBaM5jBxS5zWAba5
iMMHlIvn+k7+PHfsp5nDPzmByl0zWCjsTBB3xymd6eqhDL4jjNayn2P347YH
8x2RNJtvZf266qYNVOsecXdK/TjKMI5VDEA47XGM5hBOW6zQkUK3heMb3Mo1
X8AVH0DEH0BFgJE+xOhWUMy7hV3xupFC1WCBsDua0b4Na/gMY1he07IHsJCw
N1LhzGicRuWKP85gfppE/gDYSE3TXkzdl0j1hyj1WprdR9qfxrFHsOy7BT17
Fa5YQU+YZMRP7PRkd+1i93wHvF8AKpbpPGmPh6Bjo6hjk9zhYx0rbBkva58r
M7hS6gbjVN3RtS2f17R/wOreJJ/wFQ65y4ZCieZ1wJ+Ay/9bpvsvYDZmu7dk
MEzUGwocYUlXGr3Fg2XfRzV7Ui07icbNtGZvcb+/aiSh45hw+IeWzqNU++Fq
42TBEs9GoiQDMcDHN3xKPXvOfOhCz8LZ9r4jPPMktnE2r/VghXosj9bqBRN8
hJIsE7R6NfUljwznX5qmPF6Qv51t/Huy/vUA53kL8rE5/6Yh7Twn4DTD7xw/
7BQ3dIHiO0v0OUgNPkgNnafFfy/LPVsHu91JuddLf+Lkvx6VvhwUPO1hPh8U
vR3XvhlTPuljPemuftJRddeM/FWbeUWZdFmReFmecp6fckWWf1mWdZodtYB3
X6wJPclOPMWOP1EbfpTsfZC0f5aw5wdBylVt3gVx4k/SxCuqtOddlS+7q1/1
0t475f8MCl/1M1+7WM8H6G+G+X8NS/4eUfzroLw0V7wyQp83pP8qDr6rTbqj
TvhFGvKbOuG2KvmqNPo8I/QCe+9VqfsfZuRTO+mmAXZTEn6DF3BLkXJLn/Ob
rui+FnJFGntFFfOjKPy8IPyCIOoUM+QnUfwvyozT7JibusK7DcU/ilMOUIKO
MsLmKf5TBJ9pou801n+a7H+YHX1eWXCal7TUawu74wg17Koi9SQv+DA78kod
6roBfU6c+ose/KyT/qSD9Xsb6p4F+kAHua0quGaEALZ5MVr3pJ//wIq7Js08
yYw6TIs+zgAcVfKol33TgjspTB3B73MgNx+VpV+342+2E2+3VR0VZPVjfMzg
LQOEiOvtzD8GFL/Za683Iq/WIS6q4UAuqKFAhb4oSB+rDh8mhh3XVc7xcsdo
aT+YCBdbasZqk1rhPnMC8BgbJAWtYyauslRGHtaiZ7k5nRVhJmSotSJAkb+L
5P9hT232iQbiYGWEqzr1kLDoiLTiuJa0qCOdMNJPmthH9LXHGxjfm5jnOuqu
DNl+cppOdShPNUsmJZW9dMiMGjcowEyqyCMSglNQOSzCzajJC3oqIKXF+uoz
dvHPw403RpvuDBkeDBn+mLI+mG9/Ntz40Kl+NqG918d54hT+0c1/2Cd75Kq/
Nyh7NlkPkOnFqOZhr+iuQ3jPqb/ea/ilVXSlmfGzBX+5CXe3k3nTRrvTyn7a
K/t9SHt/SPMIkNWo9qlL8adL8qib87iH+6iD8IcJ89iCe+MUvJ9Uve2XvOmX
vRzTPpu1/Huo+f3BtvdHut+dGP7n9MT7k8Pv5+2vXYa/Xap/BzgvHDU/61A/
aPAHhdhRckkDCsbJTqxOCquMD8IlBeFTQpjg+Mok/8LY/aiMcFZxshyTaaqv
NE4yaa48dKs7tslLOUmt7c5HWYJK9P645kiCNbK2KwTXuh1t2oZv9iC1ehBs
20o0n2Et36IalhdpPqE6fOndMez+BMFQKsUeVW7YD5avgMm2VzV6V9Tvhio2
lRl2QtVb8mSbweodlNZoXk9x0yG+sB9eZQ6BqTYn1nySzV9epvaGyt0qm/ZR
Or0Ew0HKiQjTbJHzpLD7EN11VDJ6UjV4WNA1wxk90nDgbPvcaWv3MFlvLSmt
DA6K2L5h08bPPlv96bIvPvn0gw+XffLJZ/9d9vkXyz797KOPl3287JNPP/3k
s88+XbVi5batbtu3bd265bvdO3ft3b1n/173AL/g0NDw6OjYsNAoLw/fnZu2
eG3ZUhQfxUeV6Gsq1USEjlTSQIU3MxBLTUn8in4R1sFf6qFkIOTqCTlNNKil
ttBUCzaQc20MmJVebK4pamWWNhDATbUlFlpJM7O8k19poyOtNARACBO1xEQt
tTDKG2sR7RJKp6zGyiVoyAg9DaOlVlCKM2pKsuo4RAOf3CCgqOl4KRXDrSqV
Uivp6GIyPJtcmsPClTCrEDhYXlVJPgUFwUGyChLCipIjEVmJWDAISEV+GmAk
wD9Z4X65UYGwlGhkRgI4LjjRd3dakDsgouA9G2N9dhckRGRF+qeHugftWhPr
5QYsz4/1L04JK8+OwxYkITKiQOHuKcF7Evx35Mb4wVLD82L88qN8y9OjcblJ
lEIQoySXDQfVFMWT8iKphbG80jQdCWogw9nQVAkyU4HOpWRFlEd5MPNjq0FB
hGQfRl5ofWV2v6hySEroWho3IFeHTqVn+ojAoYBV6lHxdkq2iwPpp2X11WbY
sOGKgr2NSF8bNrSdGN1UEWpBh7XhY5vQkXXF/i24cDMqsLUqAuCTOG+HKHe7
vHCPMG87LdWNA9qpLg6U5HsJMvdxQTslefvN5eGW8mDd/9qR/m8MScBIFlwS
oDJAR8wCX3qBD8AhaOhacMAKSPBqSOAqWMTavMDl+UHfFoavzg34Js3j00yv
z8ABy8uityIiN4P9VwFGgoWshoevAUBFSt1enbaLmrG3JnMPPWc/B+zNh/gJ
oIHikhAVKkaNjjHgkw3ENG1logwVK4RHCUqjuEXhlEyviji34uBVmPittFwv
ETxCXh6vwqTW0Qp1EoTegra4CPWj5UonWDlcqJosqJ9H6GYQspFCkStDMgLS
TIPrF4r188WmA+jG+SrTHKFlsbrpcKVuskQ9BtWNFplmy5sPkjqO0q1zeI2r
UDuS1TCZ2Tifa5jMt8xDbYfA+uko2ZC72LWP79zHG3LjuzwEg6HC/hhBXzSn
O4zfHSp3xQoH43kDQXTHjtqOHZweX8BLQAQDIar+aO1gYtts5eQPjaOnTI5D
NK0TxGn14bdEGgcg7cO1M4etV2+cvPPw6sXb509dOTF8tMHoQos7YwSOMGlf
qqIvV9yRILAHctt8+fZAdlvgUgOR7puKuo9IDWtEHZGG8ZLGSbS8L0/QmSjq
SpX15vLa4wFTkUzrsHXfIBQfl8o/Qqm/wOpWA7qote6W9iSpBrJlvcmcjn1E
85do3Sd44zpgfWl/LGCnhimEcQaWzvgwm708i/GfctUqZks4rn5Lhf4zfONW
dqe/fCCZ1xnB6XCXDvgBRhL3R0pHgiQuL5ZjN61zJb/Ho3EmwzyVrx7wUXb7
GYeiTEOptvGilklo+xxU158k74zU9EUz2r6tbf9IOLBDOe7LH3RXj8XWNG/D
1i8H3hdCs4xi2yXoDVpqlOsM1Ywm1g1DVK40vsNf1B0h7wtltXnyOgLkrnDl
UErjDLLruNB2AGWZwphnwbrRBGGvP7vDXT+a332YN3PB/P111+IVe/8xmn4E
qh1NNU1D5M40wEgIyWcoyeecJu+mnqzJceS1OcmLRfO7haa3U3Xvhrmv7ZhH
jUW/arNvqEC/ajJ+FMUfpvqf4ISeFcccpvkfoPocrg39UZ5x1QC710l63MsE
zvSf9wteD4rfTtX/O2t+M254OaQC9PJnN/WeCXm3AX6vPue6POmiMPq6AnRT
A76th/yqzf1Fk3aKEXGCEfOjNOeyPP8cN/EULWSR4nuI4nOEFnaWn3BemHJJ
mnGnAfq4pey+reS3pqLnfcR3Q7x3Q4p/RlR/Dwvfj/HfDtBftC/1037dWfW6
GfGoAfSgHrR0gU9XcE2aeFsZe4Hlf4EbCFjoujTwZ6H7AxPsaVvFbW3GDVn0
fSXovjbnotD3e/q2H3mBl8SR1+U5t9T512RpwK5elkedFwYcqd3xPXfPJUnK
j6LEk6yIw7TAiar9I5jdB2uDnOU7xyo9FjkRxwWJFxR5h2uDx9CbnIiNJzjx
v+gLT0vTrhpLHjsotxvLf1Zk3zIi7reSH7ZU3jHmX5MnXhal/qrKv15X+LCT
8nKs7sEA574JeUec+jMn7oI075eGqhsttbe7WbeslSeF6WP4AGdlyBEx9H6v
9IlTft/BPCrKdVUFWwq2DJOjbtjp93rFN5spVwylV+uRl+tKL+uQR3kZI4SI
AWyAHe7hwocdUZe5yAmNRfvGuFmnDWhHhb8saa2TkjTBzrDCPSzlvg5qmrk8
oqU0qJ+U2FuT0VQRDnx5dqBDv7cwzrfwTshgp+uqDolKjitxByWoY7rqH6zc
H1pFQE5ZuEBOt8h+7q2/Ptp0sbfuQrvqmInjElSMyImjMgJgpCkVdUZTu3R7
joI4rSaOSNAHFBWXeuV3JptujTTeG9L/MVT3cLTh4Zz10bDh0Zjh2VzD3QHB
kyHZwz7p42HdmwMtf07oH4/X/9ol+a1X9qBPBix8NmO7P2Z7OmH53am6Nyh5
6JL83iO63sy83yN5PqR5OaF/Oqp7Mmp4Odv8Zs72alz/qJP9uJ0OfByvOmmv
HcxnfdxnA6K3g6r3E8b3B60vjw28/37s/cmpf7+ffH164s2Zsb9PDv012/XS
qX7rlC4NXWUn3W6tOaUl9hLBFniaGJxTm5aAiQpBRQdXZybW5KZwoNlkoEpN
9IOFe7DyElTIDJMY3TEuEbtKkUZPVON++QSBPViMbQ5DWQKwtiB0o1+13a+q
fQ/GuhNhXIO1bqZ3B2EtW1Dmb3C2TYCRcLbd7P44njNRPplNc8Rl89elsT/N
YHxVrtuOMexBGXZjzZ4Q1Vaw0q1Yv7uqKai6OVk7QZS6EDhTYL5oTTTxgxz+
SqRmR5l+R40jiOuMkYzFK8cSLXOlzpNi16Ji4pRh9ISmc7rWMcOYOWVa/Kn7
8AVH9xTVMUFu7K6WN7BjUtJXrHH7ZsXab1Yt//SLL4F88tmXHy777ONPPlv2
6RKWACkt//pbgElrVq1ev26N29bNgJe2bt7itmVbUFBQQGCwu7vn5k1b1ixf
7rFlc0lagqASqSCUibAQOb64nlJiYSBbOYB20E4FsY2NbGGWmqmQemKukQIG
0lhToKkCGarzjeQCXVVWw9L1tSIbvRQwUisP3cIst9KRXSJ8B7/STC9rYi51
czIzyvW1ZerqEmD7GgpSR8ewUeCK7DgBDmbgV6sZOC2bIKupEJLKBcQyJb2K
TyjHFaXhikCsylIqGgYYCQPJhmXGI/NSwImRgJFg6bGIzARkVmJFbio6JwUw
UmF8GDguFAGKB5gEYAkU4gkkzmtHQsAeULgvLD0+Py4kOXCP//aV8T7bAUQV
JQaXZcVWFaVh8hPBiYEAkLKivIDkxvoWJgTmRvsURPsi0iJIRWnM0twaaAar
NJOUH4vPDqcWxgFYqimI5ZSki8ryhIiM2vx4XGoIoHFaXgwlKxxgEjkjkAOO
NlOK2pmIltpiAy5bjohn5QRKYTEWfFYzKbuTktuKT7Xjk9sJiTqIdz3cH6CR
ERkAlHZCjIOc1EFKsGAi9KUB9XBfLdSzAeGvLfEW5QIo8qxD+EnBe1kZO/hZ
e6QFnrzM3byMXUAAI9XB/ethPoYSX0BKtoqIVlwcYCQrPqUBHS+ABnGKAmj5
vqi4rYVBq3K8v8rz+TbH65t0z89BXl8ku3+atH9Zhu9XGd5fZnh8nuPzNSRo
bXHIeqCEh61Hx24ui9qICPs/Ju3igH25hT4AkITFAQKoPx8SIEdGSuBhIliI
sjxajUlUVMRLy+LEiDgpKlFQHFWb44tL2lkavg6b4EbN8uRCQiWIGC0uTV2d
qxaW1DWi67pQyv5i9QjMOFvesFBlOoTXzyHlYzkCZwJ/MF46kqWagOimUU2H
yLbDNOshqu0I1XygqmG2smG2yjRdZZ0ntR6ith2hmKbLVM4spStRORQnd8Xr
RjPNcxDLQr5uIkbm8hUOeLJ7PASuAIEzhNcfzOkJYHV5Mzs82J0+gt4Qbm8E
3eFNat5c3ezG7vYXDkQLB5bmcVMNxOlcqR0HCXMXrTPnm3sPcw1DBeL2SI0j
u2MMP7ognTto/fnywcd/3rj94Mq5a9+PnzRbx6uUfUnS7khJd7KiO1vZnaYb
TJH3xMl7EgSd0Sy7L7b+6zL1B2WqT2vNuwHYGMbKlP0QRX+earBA0Q9mt0VX
m3eSLZsIxlVY/edAqi2rac3bmW17uR0+Sme8tC+a3rwfZ/gGrfuwXPMfkmmD
tD/UMI5oWahpPkAxTCDTa5eBuSvhii8ggs/ZLakUUwBS8znBtIXR6qtwxisG
Y6R94dqRePVIggrIaJxsyJvVsYva9oWw190yndc4lmdwRVpHCrtnyzsmyq2u
gobBBP1AnNKRKOuIknYHMtpWVts+Fg7sUo0HiJ3eypHYGttuWsvempYdZdov
ytXrWV1+wr5QviNcN5pknIB3HqFohlL1I6l1wymSrghhV6hmOK5xGmY5UGw/
QrTNI03jOMNEDrCyfDBcORKkGUpvniYMn1Qd/Kl1/Adl+6EyYIlmJBkoxX0J
XEcwtXEzSbuJbw21dBVMjlZdW2h4c6rn/VHHP7OGv1zMZ1bkIwP0XkPJA3PZ
b0bYRUXmIjPsB3Hc94JwF2rzKHbrHHH3HMXzuCDhehPqYTfzuUvyYkj6elj+
alL7drb++ajyz0H+myHm046Ke6bCZ83we0bor+qcnyWgpZnrmyoe2NDXdLln
pbEXxennBRm/1pVeUUHPclO+p0fO473nCJ5zBPcjNQEAS64qM38zQG8bIPes
8IctyOdO4t/jwr9HNa8HZM8dtFcO0usO4rtOyvMB+sue2jcO/OOmwt+NeXfq
IE+bym8qQZd4wZf4YTeUSQ8bwDfkMVeEYY9MiHuWojvygCvCiDtq8G/KtPOM
bT/x3G/VZfxmyHtsKrmhyLgijr8ojLyijPpJEniCvednpf8VedJlRdI5YfRR
ZshY5d5e5FaASZ2Q9X3oLSN490PM2AuyrHmSe2/xl0705rPynCtG9OUG1IMu
8u8t5WcECecEKbeM5YCRbjTkXhJGXWAFX5an3TbCbmqL71uJL0Y1jwcF9w2w
W4L4c+zoC1r4vR7JQ6f6br/oYl3RLDVyihR5XAw5X0f+w1l/r1t82YRfFBeO
V0e3Fu0cJUb+bMT92kIHFl4ylJ+V5QO52lB2RlE4VZvYmLuLE/GNPnt7Nylp
pCaxEbLHjg09ICtwoH3ECctdNUnDlFQrzLOHGHtYW9GCiTfku5tK/NRQP3GO
V09t/gy36FA9/UKb7JKJclBeMVybd1SKGmMUzYpRCxriMRPrfLv8ZBP/bJv0
uJF73q480yo50yIE1j9tkxww8pxKqktUOa2hTqtrhkRVPazyKSV5XlfjEqJm
Rchzzdzz7WIAYDd7ZPcH5HcH5Y9mjH/OWp8dsD0/aP19RPNqtvHFVOOr+aZ/
jjvezDW9Wmj9Y8L0eMrybNr8fMby53TTvTHTy0OdT6YtT2aML+atD4cNv/Wq
/hw3PBuve9TNfzyoAMT1ZML6fNr2asL4Z4/wRRf7fiftVZ/wnUv+fFD6bFD5
btSw1FX7oP3f81PvTy+8P7Hw9sT0X6dH3/4w8PeJ3r/m2t84JS962fesldeN
qMsm4ggDqoXEinKjiPFhmOhgXEI4ERRfm5/OguRKUSVsaB4uLgjss4uWGddE
LOkQEdpbudJ2FNYUgWrYp54kyqcrUdYITGsIuTusstkf3+qJad2Kbd2NMH2F
MH7J6oli9cRU2twY/b4Y6wZU41ZWf6RwOIk7mFTdGp4jXA3ifwbIB6nfUt3q
R24NrjQHgGXbodq9SJMXqtGjyhohGSoVDkIxDb5Q2Zokyv/L5S1H6NdXNG5j
9kYpx4v0MyXGGWjHEYLzpHTshGnuXOvYcV3rGLF7jnbwvPXYxb7FH3v6DzPN
Q8j2KWbPTDuulu0REL1x2541321fuW7j8tXrv/52zWdfrvz0828//2rFF1+v
/O+X33z91Yovv/wa+FmxYvmqVSvWrl29YcO6DRs2bN+5Y9uOpZaob7/9dvW3
X4d47wX4wcMjxIRSQRVUjIcqSBANBWKogTbSl8xjYyKsjFJTDURPzNOTC/Tk
fCAyTJqGkK0n5iox6RpspoVWDKygIxaYGHAVLq+OVNQuxNnYKAsTZRfiNdVQ
dmkqvyJXiM1X15QZ2JUSEpxYDMIWJMmoKAUdwyOUAKWgGkmrKKRjoHxSGbsK
Xo3Iq4SAKCgIGVUMBFeSnxUbkhkTnBERkBkZCEmKRuWmAEFmJMDTYouTo6BJ
kYCRyjITASylBLiDQryzI3zTgtwzIn0KEsJKM5PACWExXm5em7+O9thSlBAK
Sw0HgESAgpCZMeCEIFC4O6CjgoSAjAiP4rQwVE4cQLjyjOgKwFH5SUvJiast
BnHLcjjITDI4HpMWhs+KpUNBTBioKjMKkxwCBJcWzixKZkISaOCl8Sc12GxL
DcxGL1Gi0mqzA9ngcB0mrYsJsxKy1dAIYZaXpTzWxchvroixoiMVBfvrYL4t
uOhuakobPrYRFWrGhFqwYRqIhzx/jzBzGzdjKzt9sxLqAQCJDdrCAG0FmMQG
ba9N3MxK3ybK2auGetcj/fXF3v83DkADPMCGiW4jJjVVJevLotgFvtWg/VWp
uwEjFYdtyPX9Fuy/CiBQusfXcTs+Sdz7WQZApoDVxRGbEdFuBQFrioLXw0I3
ICI3l8UAQPoOHrYWFrIaYFJV8g5atjs9x4Oasbsmcw/wGCCToixKh0lSoBJU
FUlApGUJQngMrziSB4thFYSR0jzRsdtKwzdhE7ZTMr04RSFyRKwUGSuuTFHz
igEjqduRyj64frLcvIAzH6Q1HiBpp2GysTTBUCSnP1IynKWZRBhmybZFjm2R
1bJIsx0hWw4S7cfZXackPSdk3cfFnceYrYcJximIZiRNNbx0Uz9QR+vG0sxz
hQ3TWerRaKnTXzTgy+8P4vWHc3qDAR3ROnbXtLuxHHv5PYGCnkhebwjT4UNt
203v8BA7lzqKi4H/8b4gaX+82pXWfhg/f6lp9kLL4BGhbby8YaDA2l/eO14z
c0g7P28598P4oydX7t6/eP7ysZnTTa2TeKUjXtAWLO1IrOvNr+8HG5058u5U
7UCBaiBb2BNSZVxZqvwQMBKjzc0wVtQ4VV43VK51lSr6ikSOTI49gml3B1BE
sa7FN35JMH3BsG8S9XqJepcu/El7A4QOj1rrBkzdZ+Wa/1em/pDatL1xOrdt
gd95WNx6kGGaQRdwloN5XxEaN5ZK17JbkgSOBKRqNaFxO063k+/w140m1I2m
GWeyASOpRxM1o+lypz+rYzOpaZlyMETvAjU4cy3DmX1zZOdsTc9UtWUwT9kZ
xLV4anrS1P3xrJat1aavOZ2rlcO+wj4PrsNTNZTI6vCrbfaTDMTgGzeVyNdR
W90Bdop7oxSDUeZJyNQFo/1AhWk8u2EkR+/KlPdGG6eyek/WdhwltMzjWw6g
OxZodUNpyv443UiGfiJB4UwwTyMdB1nDp9RdRygNUxlLQ6O7ovSjedL+dGFP
AtvmRTfuVbQndjiRi3Osu6c7luqFw453Mw2vB5kAFf6oAz9ogN41l1+vg/yk
yDqnSPtRnX5CGDFauXOKtGectHMEv+d7JehmO/FmF/2+S/xytu6vAw1/TZvf
TJhfjRpeO+XPupkPbbj7ZtQfFuzdlsqbFtTNRtTvNvxtM/ZaPfySOveSJuOG
tuAXXdFdC+b/jLRIDnbBt07g9s0S9s0R957mBF+Sx92qz7pnhr9wUN/0cN5N
KN5NyF4P8V47uX85ea96mK86a/4dZL+fs7zsET9vIz1pKr7fkHdXn3/fkHNV
5H+ZG3VHC7pvgNxQ5l0VJNxVFTw2oX/Vge4Ifa5Ls+83oO4oIs5R/j9L9wGV
1t3/D/xZbZ/OpBlts/c0atxbUBkqKCAyREVRVJTlQnAgyBCQKUOGCIp7D9wz
xuzZ7CbN3qtJmqZNn/Z5fv1f2/8573PPl8tlXc7hvu6X7/1+dj5S4l83Me/o
EN/V+Jwo2XGu0vuiMOiqNOauFn1fj3tkIt3ToYBHXZLDZ4v9BvL2dVF2tKZt
7s7YbsJ+NMLyuabNOCNATNN392WuOlod/r0596qJ+aC55JGj4LIceaYy9KoU
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
vVef9sia96ir8uWY6t1U/c/jJuAgftOced2Yes+Qc0eZ+52OdqOj7IqKscBF
LQoShkrBk6LkU4aCC4aCS4a8E3WEo2LsLQvrnDrnlCrvipVz3sC6Zi46ryQf
rUFPcKJGiqOnKpMBArXmxzhyQs82ik7o2GPluEUFdUFOac4KkSfsmpPnfmut
OKHJv9TI+6699nKTYKAUZckOo4PW00PXWQriXAXQcy7F9X7jlID0rYN/tUVw
XFN4SFFwwsQ7aaue03LG5awFXdnFVsW3nYarQ43X3fZrgw3XuusvOGsnpIz5
+lK3jDUsYQ5IGH0iRlc1bbSuGGDSsII9peKMytknm0T3x5sejjvuj9ofjFtv
Dmoe9Kieu02vpmyvxixv3Oa3I+Zf55w/zlh/mm16t9D8brHt1Yz95bjxhVv3
ZtryeroRQNGLcfOL8YY3U43PR8w/jJtfT+gfDYp/GNe+Hqm901hwQ0O6XZ/6
1Ml41lH+tLv67YDyl3H9+wnD+5H6X4Z1P0+Z/3e4+Y+ltv/NWN5Pat9Pqn6d
1P9vpvGPafuvA4qXLs5Dc/YTG+uKKn+iiDAnKJgUlzg5+ZUkLCkyNCnEn4ZG
StgsNbdcza2QFZbxyHliFqeeV23mV9sqeVP19WdcbWMOTXMrj2NMLLXB1ZOF
vF5yUVcytz+lYhhZMQDON66gN/y7ynHQPEhRdcJkXeDuk/zB8zr1FFHQH8V2
enM7wvn98LKesHTDOpzq89yGvVW9MaKhRPkYSdCbXNICL2mL5XTGsl0R2Q2e
2Sb/qm58eQeiwLY/37qjug8sGUXXLleOy+88Le04VmmfpjZNUdvnigaPlA8s
1gwuyiZO1M+cscyfdR272n3sWuvhq/VDx0qA3y5FAy0tGwuBgkCR4UG+wZ7e
Xrt27/1m3aaVX361YtXXq7/a8OWadZ9/uWbV6rVffb1u1ZrVn37+ySefffTZ
Fx9/9gVgpM8/+/yjz7/49/r1K4P89qLjw5MQYZjYIDI2ipIck58WV0hBMtNh
QIoy4JxMRFVeUjUNIysiAcgR07GKopRaVrKEkSSmY6qy4mpyEuSMZAUdK8hG
VGfFC3LiK7JggIuUJak1dGxxGqQ0E16Rm1CekyBi4et4WZLiNA4VzUqPK8tL
lpRSAR0V5yRXsjOqi7OKc/G0NCQJE52MCCfjYGlJyyGgIGnY+BR0HIWIySYm
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
sdJxhGqSYF8smb1hG7to7zmlcB4uNkwSASNJB0E1vWHykWjVKETjjvur8Eel
y6O0aRO3ZZtowFc3kWaYTtdNEhRDUGFXYFWbr7AjpLYXohgiqNwk9TChbhCt
GklQjsTKByGygSjlCFzljm2YSgcMM37WNHVWN3CY3zZZZO9K63KzxhZEM0d1
8yeMY4dVfTPCwQVh90J1ywTL1JtS34ZVNyXJrAkSM6yiPoSr8hE2+AobfcuN
flVWkLwtQdmVqGxHKrvhmt5E2xi1/VC5cZRS3RZQat9SbNvEadxW0vh1sW01
z7lV0h2s6I9ZnsXIta26cafcBapthlY0+AoaIW1ztQtXBsbONjrnOIaRLOMY
tWWpvKI1ptTpJx1MkPXjc5S7hc6o5omSnjlp22yhdTzNOImU9gVUtu9RjYUp
BiP1E4ni3p3ZipUcqyfwQ2SdoNR3p+t7E4z90KbxbEU7iGdZx7F9Vmz5gG38
GACSsOVgtWt9dfNe41C8fhBa1xXLs4VwnQcAXmpG02v6QirafSo6PADkAO/Z
MAa1TRLdJ7QLlxpapiiOUUrbDHPsTFX/kaquI8yOpbyOQ2W2cZSyDabpjGuZ
zu1ZrBw7aTGOZ/BaPETdkaZZitqd2TBPFvb58JoPWsezOo4KmmZ56q5UmRPh
mqJPL0nOH9U9Pd39y6n+9/PN/5nV/eaufOPIem3LfutiP9EnXeCDzgvAF6Tw
cbb3CMPLzT44xQmerIgYKPQbr4j81pT+fKTmzYzhl8WWnw93vj/U8vOk9d2Q
8oWj8LaW8NCU9tKZ/9Re8LSReceQBajgliHplCj4eE3IOVnc+VrsLTXxtp5y
XZt1XZV5XpB4uCh0oTBokLp/hLG7L3fzGUn4bRP6SRP5YWPuL32Ct101wGHr
bXfZLz2Fr1tzfulkvO/m/T4g+X1Q+UNjxj1F3LUqvyuV3i+NuJdmygMt5prE
/2q1/xMD7k1j1V0t4bo86Acz+bUl+6WZ/MTJ/dHGfq5OemrE39Pn/WCl/2Am
3dckfa+Kv6aAP7Tiz0liLtRCHxjw99SYK1XRS+zdE3lbR2h7Fvlgd1FQX8HB
4QJfF2lrd/amyZLgkwpkP3t3U/rambKIi6rUw4J4d+7W0fy9x6pjLiqSrqhS
nrUWv3XLng7U3mnK/F5JvFtHuCKFXVGgXrcKfp9yPnYbH3byHjYW36zLuqIk
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
qDwhJXbRQnW4fVqc93lj8c3mqosG2kwlQo3bmePzsRTnuaimLUmyu3IDAaqd
qy8+b2ScVlMPiVIXhOljFWkmMliQsF+EOzCh551rFrQzkcM80qgksxC6nhX5
jSUTelhbesJQulyX1in8rlezYOCpM6Nyg78uiNzVzks96xCes9ecb5SeNtec
dwiPGktmpXknTGVLptIJFeOQmeuuYzQwUcoMiItDnNNyTtjFx+ySk82q893G
K8ON8zZJmyBnTFc2ZajqkTABIAGNoboSwEhzuvJJZekh4/KQ77NO2dUO7aVW
1ZV2zZ0h49NJ1+0e/Tkb52aH8G638qqz5kIj92Rd3mVr0TlTwWkj/by5+Ftr
8Vlj/hljzoVG5s3W2lNG2jFN+g2n4GGX+Io975aj8nmv6kmf5E47/+Vw/asR
3Z1mzvPOiqetVa86y3/sEb7ulr7qVwO7/Ycx/Y9j9T+5ta/d9cvjlEYUrzsq
f2jjPnKUPnRUPGqtGa9M1xIiDWRkewnNVUYXpGOjPHevX/HxP//1t3998Ld/
/vPvy/ngHx99/OHHn34IqOnTLz765PNVn674Zv2WHfu9fHwCQ/0iwg9E+mLK
9nKaYVW9CN0iWzqZT28B5Tfvy3fuyjL+nW5dxbZsZxp2sozrafUf4Kv/lln7
mXwEqZhClnSGsFpDWO3govaYsu7oqn5wodOzqidCOBQjcsMUc4lVI9HVo5Dq
0ejyoWBWy/7CJn/tKLXjmLjrTK39KNewUOw4KWo8xm08wmk9znfMlzRO5pqH
0pvH6SNH6g5dtEydqAcydkQ5eqxu9pxu6pzafbLafYbXeTxX70bohxKrDbEJ
yb4HPPZs2/HNhg2rN29aB2TdN6tXr/li5aoVq9d8tXLlyk8//fiTT/792Wef
rF6z4puvVwNG2rZhQ8jBPfjEGEYWnoyDkJOiCzISODRCFZvMZ6aX56dw8wic
HFxxFjY/JZ6aDC3JTi7KRLPJieU0IhAKOjI7CVyckViWnVSZi+FmJQDLoow4
INy8RAEbX5abQCOCSPE+OYSIMlpiMTWeRgJT8eHZuDAqKSqHBKHgwanYyNTk
aGxCRGy0LxIWDAcHQiMDY6NCEJBwIICR0vGJSYgYXGIsAhIJiQgCEuC112Pn
Zl+PXd57t3vt2goOOgiPDIgHB6KiQ7DQcEIcGDASoB1UpH98iDfQICfEJEUF
AZhJjPDDgAHqBAE3Y/x2A0YCAg/wIEDDUuAR2KiglNhIbHQwJNADEnzgLyMB
jb/IlAgOAJbB+7f4794QeXAXNMgLEBcGHIiHhgFGwoAClkeGh/qQYkOpSTBK
AgRgEg0TlxELJkQF4sF+uBBPUqQvBeJfiI2ixQUUYcIFGfGVRAgj1rcmFaKm
JYjTIqoJgZrcGHspBljqqCB1RpiU4CdM8qpE7JEkH1SmBgFGqksH4q/NClak
+VYkbuPEbylP3FGN3VeF2V2J3g0YablnKWm/jOhlyAqy0EJbi+EthVAnA9TC
inGyoI4/x2wvT5HESJRlxvBwIblwD2LEdhJ4V0r0juSIzUj/bzAhm1KidpEh
+9Ki9wA6Qv8lpdCNyUHr0H5rMb5rASalhG4ig7bnwPalh3xNDl1fAN/DwwXx
U0EAkESZ0JoMWCkupBAdVIIN5RIii1CBfxlpeUx41PZ82G5G7G4mfAcTuh2g
ERftXYL04KG8RdRoJR9fqwaMlCRoRVZ2wqp7YeJRhGQslj8Yye3y4w+EKSaT
DPNUy2EWwCTFeIpqKk03m6ObzdbPUQwzOS1H+TPXOyevdLYuSXTjGaoxnHYM
3TJPmTkjHT8rGz0na1/gAAdl9TBc3B1c2w9WjaGMM5mAppTDSFlfjGY4oX6E
oB/NNE/QO5aEbUtc6xTVOp1hmiJY5vDa0XjVSIxiIEIxANG6sc5D7K5jwv4l
8egRKWCkwWnh4Ax/YLqqb0LQPcZ19KXXtyFMXahWd3HvVGWbu9jenW1oTlVZ
SNJ6VJkspEhwUFDvpW4NtPTFWXsJutblQUq1VnhDN1HVTFS1Zjimio3jmcuF
S1q8K5r3VDk9qpzbCk2fsE3/4No+q2raIHZ5SFv8JPbQEqNHqeGAqSf1+PXu
hRvDtjm+pD1e2OSt6oG1LtDaFpkyN9gwnW6eYkg64xT9UbVtSNdcRe/Rqq4T
HMdiinRgf0XHhsquPTW9nqL+vdzWjWVtKwEWTl62Dp5RNU3nirt9K13bNCMQ
7VAs37W52Pk3bsuXLOs/WaZ/M/UfVtrXV9q/LjT+TdJ+UNWH0AxjnUt07QS+
bgQFGEnUGyPujzDOIlWjENVwvNaNMU4m6kexrYfLXIcqjBNY83iKZTxT0uUl
7w0wT+W0HmXrhonSdjSwb8cu2jqWFB3HReb5bGFfhKAHJB/Fmhfpygl8da+/
fDjOOs/SDFFru1Gi9ijDAGVwTjg5JTh3RPvwePebIy3/mbP+OmlcLlDbVfjC
mv7Cnv3CRLqrQl8UQZe4YdPFQYCR3GzfEabvaMG+UbbXBDf0tDrtUafozbDu
p1HDbzOWXxdbf5owLM8a3cF92FL6okf487jyZW/NMxfre2Pad/Up3xsot82U
W+ZUoH3LmHdakHBOmnShLumUGLpY4jPD2DdZsH+K6XdahHhgZz3rEgIn/neb
cp+6cl93Fb7u5L4b4L/rKf+1p/x9R9EbZ96bZvqPbWWAkd51lD2zU1+15P/W
X/OuW/CsKf9xA+GuMva+JumJPvWFOfWBLv6uBvLUmPyDhfKiIfNdO/N1Ex0w
0mMd7pmB9MJa8Lyp6Lmr+IEi/pYS88Cc/aSJ8cCcC8DpkTn/UQPzkgw/nO81
SPNf4MXPcKJOiBKPCZHd1C2dVM9rZvplM324NFKHWNWeuv+snHxClj5RFX1c
jr1pyb9pyvvORLlppT6w0h420G4bcwD73bXTb9oZ3zuKbrkqbrfWPOxWPuqr
uWbMu6QgnhZjjitIN9urno+ob7uqL9bnddOjhbCt0oQDM6KcK7aqJQllkouy
5gRSfD6mR64Z5uNnBZnOzIBJIeZWp/paI/eSpfCwLH2wFNmWD1cTg0uitzHA
m2YMFWeaBCpcYE8J7oi+iI/eUwj62kKJWZAxjuuKF1WMb52CGwOGRVOVJR/F
Dt9WELzFLaKeaOAsallnrBWXmsWXXKLTtvLj+uIT5rJpNWNSyz7qEPTX5hsL
MHoaqp1HcRSRXLyMQSljpK5oTMs72qJccioAFwEoAm4OyIv6ZYVuddlQHWei
vmpMWTKuKl0w8Q+bqk80Si62a7511Z1ukt4bs72Ya7/WXnfKUvKdq+qsmXNM
wzxZzziuzjupzVtUZixpqMfq808Y6IdVmXMy4mF16llT8RFN5lE16WJD6VUb
56yO8rhT8mywDti3QB62Sx51SO+7qh518B+31Txr5jxuKv2htfrdkPqHAeXL
0fp3s9b/zNvfLjS/X7C/G6t70135Qzvnjq3wsqn4mJKpIYTw4/zKY0Pqs4g2
dq6QjMOGBx7Ysu7Tj/71yYf//OjDf/3z7//4x9/+/sEHH3z44b8++OCf/wDs
9O9PP/x0xep1X2/avnHD9vWbPdbtDP0qQxpcO0iRuAmK2QzZTD6vN5He4l3g
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
uaFhPjbwPzMARMx8YkoFAPm0PeWwLvqL3uKX4/UvRhueTdZ/2iW9r4++Wy8E
xPXliPrZlOFpv+paXZyjLLxVAq9keJiicbdaSvfrMhZLeeZkVAryuJR6brku
HriUT+Qz73TkPXf03m4uWFfFLpZz7Zn45miYMjwwA30hGXFmsaHowFJmSaKM
SKOWNRmGWHgu9iRApimZ0FElmZTzp6rFm23F25aKOVVGJd2/nOE/Uxm73ZDp
qBE7VPH7rYXbLQVbTYUbjdnztUldUo61RLDcWjLbkG+Tx7fnRA7I07ukks4C
UXdRtKVQ2FceP2coXmmrntIVDKuyxrV5k/X5o7U5I+rccW3+nKF0VJW9oJft
dqpv2PQHPbV3BxuB3O6rv9Vf/9l0621r9fX2otsdBevahI26xB1dypYueUkl
WqoV7ppS9kzp240pCzX8iTLmkpK3oUlYrI64ZpA8tBTeM2cd6EVf95d/Yit9
1J3/RW/p593yZwCNRtSvxrQ/zhgArj/vK3nRLXvdX/HDcPUvM7qjhUhmG3+Y
1r+eqH3WV/xNj/TVYOm3NvlNY05/Rog6AlEPXJfpyJJQcn2CqDKaL6ER0L5e
Hx1/96///m9//vc//vlP//4fv3/96U9A7c//9qc//O29Y6fOXzp75ezpiyfO
XDl+3uc9P8pHiTpi+WBMnSO+elZQPilUOWKLR1k5vbh0i092t1tG22VpV2Cp
DZXZ5pncdKFoIEDrYDauRdQusgsGMVlWWHYfOLMr4GhN236YxsFuXBMoZ0Ma
VqKMm+LGjciqWZx0HFIyBVfO04BTfdd2cdum1Lydbd7JMS1nNq+lmlaSjYtp
XRu5HSsJnQsx9tU0+0Lu7I5ifEU+AZyBd9QzO+qFG7rFW/q56/Lpw6Le9aTO
tZg2J6d1gd40zspVQVF49/OX3jl//vipk8c/OvH++x/87djxdz44/u57770H
GOm9o693Tn70IQAkj6sXA71cGJgAcTgpKYoOAClJSAOMVJQWlZcYkS4OTxaG
ithECZcqDCFJwumiUDJQ5meIsxIiAVbxGWhATTmS8ExhaK6YkxxJiufiUqMo
efHs/GRuHA8bx8eliWkpsaRkCTlehCdj3VGQi2waJJKDEXKJgnBCKA1OwYFI
eBAJB0bCfWBgbzwGEow8ChoBJmCRVBKWQSWE0ClA6BQsmYBCQP2hgd6QAC+A
SQCQgIq/N2AkEBUPCYZ40DCgqBB8FJMgAg44hBhBgHPxMMBIgIIwvldZqMBw
PIxPwwIbBPu7wNzP4AKuMlF+HAwY2AbYMvz3HAEJ4cfCgQFxYSGeMN+rcD8X
sNclIEGeF/1dz4LdL6D93ZjBYCAkqG9oMORfn8EBDEN5XsT7X2Uh/QCh/Wse
SwBLcUwcB+kfhQmKoyITacjUEGQyA1LAw8sEJGkYpjAcq4oNUUSTCtjgkgiY
Jg5Xl4irjobJOb4ylmd5mF81PwiIVoTQS4IbYjH1MSitCKYRgevFsKbk4IY4
ZGmoey7popR2oYTtCjCpOvJIULXCAL0YVCvwUUb6mpJQ7emYllQMsH1TGt6U
QdIl4zWJpJpYQqkIk84GARYCgBSOvBACPwuUHPi5CPSlKKyLCO8WT/ONo3gD
RqL7vR8adCIKcymG4CLEXo6jeKQwfGJwVyToc2LU+USiSx47qFSEVSYy1ckh
ilg6wKSsEHAS2QdIGj0ggxWQQvYUBx9NHRCPv5SIuwAYCUg2zUUeEQTgsFQQ
VBaPLc+jyqtZZc2Mkk5cSR+6cgRbPoEqHQuSjwcoplG187SGZb55M6N7r9K8
lWtaS9ItSzQL0coZjmqOoZ4NNSxKhm9pnJ/Y7Xv61uWMlhWAQ2zgTbRzp/va
o4m1O9axrap2R0z9JL5qKEg5igGM1LklsazH2/fzRw8r7JuyLmdm06xYOxLW
Ph9r38y0bQBqEhhmCHXjiLoxdJsz1L6fdjTP4Vqxfb3CvlY6vFYyua6YWlU5
1pWOLcXcunx2vXLIKW0e4RkGWXV9DGOvoH82t3sowzqUaR8v6LTlmHsSGts5
jR3kjiHOyHzy0ExWx6DE3B/RZuea7cL24dim/ljTYGLvckHznEQzQlfakdX9
4Eqrd1HbxRzDu3mm9/KbPqru9m8eZxuHeapugrIHZxoVLh62Lt3s6VnO04zh
irvOlbaf0tiQXYtR/RvCygm/ugWqbj4EcEurM2Xylmn2fvPorQr7NeAUxFdN
e8lHz1ZNepSOnCoceBfAkmERM3qoXHli69rIrJ/DlA9fqhnzqJsi6maIAJ8q
x0+XD3rmdn5QOeB/NCGS3V3ec7ncfknW5aYeC+7cEHdti00ruOa1UOMyWzuH
U8/A9Iuk5qXIrq0koyNCO0HSTJIMc+EDu1XtSwmtjuierWSZ7Vz1mF/3dmHL
akzDjGj6jnnuXmfnZr7toKj/msa8laxdYGsWIkzribZbFcZVsWoGBRipcV5s
XkpvmI5UD4ZaF8ucO513b9m+vD/45ub0P/bs/2er+/9btfwfZ+P/TBQDRvqt
P+tNa/SrFuGzpqhnrTH3akM2SlCL+SCHNHA6w3e5AnurLfPZWNuLqcbPBzK+
GSn8u6PvH87m18OVr/qLfhwoeGkveGEv/s5W9GVn1iO9+Gtz1ldtGU9M0R83
8G+owrYryPs1hC1Z0FI+ZL+aeVsTsScnbRTANwrBa4WB1zTMB8boLzszXg2X
fNuX+9ye/3qo5JfRyv8cK/9psOC34Zyf+1JeWiSve1J+G5b939nqf9rz33Sn
/WyT/jZY8rI9+Wkt9UE59FuASVr6UzX5gQL3tSHiTVfC0aB+E/+ZkfedOfpF
W8xPneLnprAv68N/7Mr+wZ7/xCz6qpb2mT78ZV/2q2HZDyNF39synjTwbigo
AA57Yz5alsEBIK2UYuby0HN5wRb+yQ6x66Eu5mln7pO22GUZclNOfdKa8aAp
43pd+E41bVEKnc8Dr5UTb+l5j5oljw3ibyyybzryHxsTHjTEPG5O+tZa8mqk
7tVo4+sFy49T9d/15H1rzf9+rPblXMu3062fDdbfaUmbLmY2SyAZiA+VYaDD
lqIbzfkLZZEGCSwNdTIFc2ykPOJGi2xDHXezPW+vTbGmSllRSuYrudZ0jJbr
W0x1k5Ld8mhejfHMoRLRVHnsQUv59faKiQqhiutnjicMSTmWRIxW4N+UipnW
Ju10lG83F9fzUHKKe2cKbUuftd2YPljIWapLXjfmTlTFj1eKu/M4xWx/oH1q
UyQOK9OHqjMm1VJnY+W8rnREmTVVnztvKLQrknrL4h1NcsBIncWx9qo0oD6m
kQ6rchZMZRN1BYCRpuryV82Kne7arfaavW7VXqdyx1K921Fz2F213158q7v0
Rlv+cm3spj55VZu4qkt0aiQOtWitLh54ZKU+YbKCO13FWVaLHVUxE7JQZ03E
So1guYq7Ux9xuyVptzEOMNKn3bIve4uf2Su/G1T+vND8crrhp+Wmn+Yavx+o
+rKj4JlV9oO9/Fln/kNN3OeNiS+7C17b5a8GFW8m61+OaG82ZLULUZUcqDaa
Wsmj5tIwch6rPJoXQ8IS/L09XC988P7f/vIffwR09Ne//vWtv73z57f+9td3
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
I4NoCBAdDebT8eFENAUWQIMFUMG+QMIxMAHwWpggIQmRzWdkhpNzIygl4pCC
SGqpiK7LiioRkJPIAbE478JwtCqeVcLHJeJdU8megJQyKJ6JuEtZFNeKSKhK
giqOCMhmuqZTLwNlCd+vIMwzh34lg3whk345L9StMMKzIMy9KMy9nO+rigLp
45DaGChQtqQRACNp4pDqWLQyHlvMg6SzwekcCGCkKJInB3UJCBt5kQ07D2CJ
Dj7NDDobAjnPhlwIh18Mg5xn+H9I8X6HGXAsHHZaFHwZiBB9BfAPoKOMkKAs
NqxIgCuOJuVwgzPYiPxIAsCkFHpgDNadCzkbATkNGCkKeV6EPh+NOSdEnIpC
nZbgz2eHehSF+5XxQaV8sEKCrsyi65VRtQ0CVXNUjVlQ3RFVPyCpH5Uoh+mV
g+Ca8cDqcaRygqCeImlnWOa1hN79gs6tnPb1dJMzWj1JVo2jtNPY+lmiaYnW
ssLu3Ii27iT2bCXbD3KGbhdZttL7l5LWb5quP+xeu6Uf3ihtnYtummOaFwSA
f+wb+UPbZdbVrJ6V1KEt+fyhaf1e/+JBy9R2/cKN+oW71T1rsU0Oev0sQj3p
qxq5WNV7pWmCPLSeM72tmtpRjW4W29dTO2dFnTMxHbOittlwjR1V0uxZbPKt
7cE3DUeabFxTV1jXoLhrJLF7IsE8wDNZ6YZ+YtsQp2tM1D7EqzRBMxSXFc3B
9vn0YWexeUzSNBYFGMniSOmYFzaNMyyzoTN7VXuPrGu3O8Y3FPalrNaxKI0V
p+oJbBxhDi4XTWxXG0fjajoxHcPC/XtDMwfG9sV0wzixYRzeMM0EVNmzlz9x
1zh+T9W6zlPPwJQzPup599YNnHUvYfJOvcHBUs94qqbPta3T6qdx1f8/Sfcd
lVqW4Iv/rTfr/X4z8+ZN93RXuHVv3WC65pzFCEYwgCKoCAICCoo5YCBLlAwC
JjALigQTYM7p6s35VtWt3NXVqap73kzPH7+1fscp13fttT1H8ODy7PM5Z5+z
t+u2bB3Jt+dI3FCeM1u4ms9bTmIvRfOWEBI3TLmFVu4UDywnKTbylJtgwUok
y+Uv8UZrt9HCtfhe24fyzSyuCyT25A9u5I8ekfQ7FOUGQrScofaiZKtl0pVk
nbdStVasXC42uEmLZ0L7ldr2WKr2EqTeAsMOHXiJbrtctQWTbSbzlzMNR1TZ
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
CEG/ilzYb959LPVcCqa3GjROuNyWo7FDh9crrUed1iPm1E6r9Zix/ECyfKrc
eDjsfTC8/N9TjSxfca6N5M6Rr8cJnH68+U/EluDRNbjtoHv1BNhPuTNb9aPu
svEVnGWncXaLNrxSIZxN79SFXfeCOWqHHVjNZLFmNN9oLhmeKdfPlqqmocoJ
8NBs4cQybnKZqJ4r6FLcI/X/M0MRPOyomt/pMjqJWid+3Ns4sU0d8VSoF6Fj
K5VrZ2IgcxttgMRGV8pVllyBOYZvvq+1lziPmPZDlmqxijeWPDSD2L8yu07k
Jm+bwVmqceQMOuEs+33tNmb2YsD+YsCwXy5wxQtWwnjLvoLVEPNJtfOJzLBd
JffEcp0fCZ1RQkc8x3mP78jkLqXyVhL6FxMHlnOl63nCZYhorUy+BZV48pWb
+fzlCNFatHwDJHSFMZc/FXkTdLso4XpEt/UjsTtPtomQbxcJVjOFazm9lgiG
xYdpC+IuRbOssZLVrOF9/PVVICdEt1blfj7ifjE5/4CrdNcMrGTJPCjJf+NK
sZMLvCdAMu0ujrkUD8Bs4pxpPuRPnzInTlpHd8mje7X6jVq9t0bvxk8eNk/u
NxmWa+3bvedXo88uJt8eG/98MvT3bfXPNt5/2Th/n2/5aRzzlarkJTv1vbTg
Oz3uc1X1WxHiraT0vZbwhY78ToN9Nnj9CP8Bq+iJpu6zyZ7fO0Q/H8z9vGP+
47L8Ryv7u8m21xrCE0XVS23NEa/0mF92pcBsMqGb7KJLJf6NqePVaNczA/lU
XLrWnuykJ+xxi9e7clfbkrwdsbt9qY+kiJcq7GdDdV+OUH+YbP9xuvvPc6w/
LXR9N9X0o6XrRwvjzwvM/3Dwf7b0/TTX89NUxw/DhC81yNeiks8Hq7+UE94r
0G+k+Z9LkZ+Jq95Jy781EL4fbf1mmPb9KOm7IdI3euKXyoovZMj3csxbee3X
BvpnKtxLUeHXcvQTAey9sfGH6d6vRihfGcnvDXUXgmJnc6Qe+fFKC2itLWeG
lDRNTdbVhHKKbojLg2wM+GcWzhezvfM00GCxz64A/2iYOUmLExbflSKDlrkV
Ly2ib1zGV2bWcz35RFK9z0PtshH73PIHstp305zfrRq+XR1/O9H3TNdwOlB5
KiEdqdu+Whv7zm0+1vcOVUdSU39DTv+ws8D/8Yzk9bL58bx2X9E+24IQY1Ia
8/2RMf+HhU7aULQ/nVU8mpLvaVmPJiWrgjpVTTqnNEqCzVTWFbcWJTLKknvR
IMBIrdDQsZayNRH9ekDsadmhiTvWVKSqg5m78Essop6GsEu6gHIAlWofaHww
q7EJ20dar4c8UtJL+bVQemkaMvl+fvinhJxEdSfVqZfYNHx5O+maSa14TTdF
2ozrJxT34GBcCmKwBSNvxSjbsdKmCkZ1LpdcAlQMjNpRJtnIqLVKOqZ4DRMs
sqqpfLwPPy+gOmQti6K6BT5xhlm9NEA6MHSfjPYd6rsvzZxNBf1qgv/WPvRq
UfPCIrk0Mc9Gek71jJPhli0ZycFBHWip58bmY12jV0TcHaSsMCsXOmGzrRkG
SsS6CHGoq384ybmaFL+Yl+9oek7NwvNJ0fE4/2JKfDop9eq4y+LedRX/0Kw+
mxraNwxa+5q0ZJSgCsosy2nMTqJkg6rSkisz0hGpIFBgUJyvb9SdmwEf/Srs
7scZMSHAYTErNqQIkgiHpvre//Cmz69u+v72t7d/cyfs1sBI18zBgN5LNuyQ
pa4K3kIBezGlfSK4cyqctZDYNRVJH77dNh7SMhrVNh7TNhHXakrsteSKVsv1
200qD9GwTTFuEWUupOOZZPGR0rjTqd4kS1ar5BtY8TpS4kZqdrCAjibP6DPn
/ZYrjvWib+Gi23HO8T7U7j4zAi5a2OxY2u5aO+LvPx72XurWz6TuY+nj19bt
PfXuiWb/bOjkanrvbMi+1WpeRqlns9XzIMVMvHEBafE2OHa7Fjfbpt3EeU/r
ygHTttEws1zr3h/YPdW5D8RL2x1LO03T25TFsy77w57pPdLcdu3sGs2y2ra4
0W3fE66dKD3nmpXjQfsez7bDmfeyJ1zM8cUu3UTboLaJJ6qjt8LrGqA0WjGF
Uogj5JYi00vg6SRyeWszkVZfWUcpBWhEJOc3NiOb29AtbVXkupKq6twqgFWV
2XhiIbamgNaI6umjNDZVVmEKMNVQPKGkGgdHovILi7OKSsDoyuIyZGFmFigp
ORYIJDs9PSM5Lj4yNi4yNS0JSHBIwCc3PwRy8+aNTz75+N69O6GhwdHRkYCR
AgL8fO7d8fO9Fx58PzEmMj4qPDEyLDMpHhQTDk6Oy89IgmalAG4BkpkQlpUY
DvwDQFNjizISwHGhv3S0ISApAJmAOoAlRDYIDklJCQ+IC7wLcCg/Pb4wIzEl
KjDM95OAW7+J8L+VHheaFhuSEh2UGOILQAgcHw7o6JcyLyUGlp4AeAySEAG8
PDHIJz8xKi8uPCcmFJmVAk+NhSaEXve1leXWIyD43GRcdnw1OJaQHQecxVwH
nlpfEE/KiWqAXfe70UsSyTkRGJBvRdLd2qz71LzQutzAlpKotpLoDkRsEyyU
mHmbmHmroQAA0n069B7gJQrkdmOBT0tRQDcyjIuJ41XE9CFCWcgwASZ2kJAM
GElOBkspuVxcJqs6kwaPx+eGVmcHITP8ARflRH0IJDf6o4LYWyXJPvAUv+L4
u0BKU3wRyXcL424CNAKAhEy+U55ytzzZB7ATpTC+EZHaisrqqMwGKhRYAjEv
BpMRXJ0ZQi6IrU6/j80IIGaHYNN9UYnX15HKEwAsfVSTfheXeQebcYuYdach
z6+7PIZNSJN1wKUCjFha0S8t6R4sFI1Wa6zkIQd5zFun81TIl2EDi0l908E8
a4xqDaZeR6vXrmehFdqLBEuFQjsMMBJ3ESRwpvKWEsWryTJPKsAk427p2D4B
oNTsg47Zqw6tu9ywhlg6anMdM03rOPVS3vXk8vOpGkfp3H7L0ilz4aTPeclb
f6hyHA06T8Sey+H1iyHXuXz5SmjeqxvaLNZtZUjXwyV2P/06aHITZdmlOw77
FvbbR1cr1UsFE+sE22G7Za9txI0dXMzlTqaPeanzu9xxJ0E3iRgxF41NFpks
pbop2KAJLBhOkpvAM57aKU+tbCaXYwxh6n345mi5NWfcSwKoNrXNmDtiLZ63
mnfQJg/WccReuxBNeurVC8Vae57eBZXNZ/LNUQNTQQDJ1i/49qN+/TJONgcZ
nq84vppZf6C17nIn3STjChJolNhOP9UmfOywbfpBp2qzhO+Kk3hjFNuxfVZf
7S5k9rJ9+KBC5o4RrNzm2oL5Dn/ATszFaOZiZPfijW6rv3g1R7NVodmoknsr
NLsomRum2Mxm2e8wlz4RrIRzbYE9jt9KN9PU24VcVyDPFancrBw5J0i8sL7F
aIYlonnq45bpG3xnMmM+sHPKR2DP1+1UqL0Vg8v5Y7vknXezy49HDFuNg6sV
rKW07vnkzvkIjiuVsxzPW01UbVVJ3aVt037qnfLx087h3S7zSed15+kubmyf
NHnUYdyoVa9WGTcohg2Kehkz6209e2p6eml5czL246Hxrx7Vnyzcvy/w/2Om
7Ucd+rUo9zt50feqsi8UlYCRPh8seyct+9ZY93ig9ISVfcIBXwgLHsrRj9TE
V2Mtf1oV/d6t/8Ep/26e84257Z229qm04sngdbZZsPVu8FJL8mJTorsvb5OL
OFfVPhtpfmdqOxKWLzYmzlKiHS1pQDlfF7LUGLTVn/FCh3upI30z0f7DLOO7
2Z6fHKKf7IN/XuR8P9X+p9nOv8x2/Dzf9ZO17/u53t/bOP8+3fHHcfLvhjFf
qiu/UtV+p6Ne9wzKi54JS78CPCaEvxSV/G6s7TtT22tl1Rcq/JcqLIC9z2Xl
Xygwn8mJP4w2v5Fj3sjLvlHXvJKV/WBu+/1kD7DZbzX4r0YaH0pKXS1Rpmpf
b3eOt6dgBBtlwEaOkGMlqLuKyuhDJe2rJfEDXYO2MliNDnygo29K6odwQcrK
UDMt81BLB47p7x3GVybOoQC1xYKtdGQst6R7GPkn4pq3M5zv3aPfbkwBRnqq
aTweqH6kbX04xv1yZQzwwNFQtxobzoD5dkD9e4pDr2bEl3PaC7PsbJi9zqdI
qtMasv3gEf8bFfuhuLbgcET4bMFo6SOtChvNbWUyfJoEmyLEpolr8yXkIiER
2oNOLY/7kJB2W4jNMjaVL/Jpx5ODT5a0di5xsLZgpAO72I83d2LXVMyJLpyh
oXRpoGlnWLgxxJtkkoda0UZGjYBaRi3KgMfdh0b44rOTB+qxEwM9S2rhlLBX
1kxQtNbqexp03VQWAdFSBmHi4ap2gqipQtFZo+zCM4lFQKPXVZ0joqNkbRgJ
HT3Kpg731Rp6agB6adrRY0z8JLvWM9Szqu60S5qWpS17euaBvm9b3XU2wjkf
Y16Y+E9mZe8cundO1QMT83y093KUeTba5pYSnJyKfTV1T1V/bmjbUzR4RSQP
n+Bili+z4aONSSuCsgND49UU78wkeLGkPZoQP10ev1jQ7puF67o+p4492Eps
yAfTCrM5tVgBpXaAUMOtRDNKS3qQxd2lBcTMxNrsDAwYAFIyJDIqwd8/1s8/
8tOPIu98HBdwJzMmGBITkp8Yji7KKspLDgq77Rf4yT2/Gx/f/lUkyG94UWA/
VdivRBNHvTxrYc90PNOa1DkZ0zkZxVpMoI8H1qr/maa/BSzpnkpsGAlpMYf2
L6T1WfMsp4MzR1z7lXrqqFezjjMfdc0/kI/udw3tkZSb1fLNSgBIio1K9Ua1
6ZhmfdzteCJYfipxPuIvnjEcp8ytx0N7D4c9p4rVA8HOhezsycjF86mNc5Xj
sH/e3bK+x905lNvX+1xezsGFemWnRz+fp5iKHjSH6eYSDFaQxU1Z2etb3ul3
bvU6tltc2+y9B1rnTrtlrXZtv2fjULp5Its4F68esxf2W22nvdaTDuDMVGeD
GueRk/b6RXenY0u4c2nYvTK6T5TOPZ5zj7t2KnEdiha2ePYtyfKG2rGmHJvs
UevpUnUdR4RjDRCZPCKRAquphTL6yT1MEr2lvKkV2dZV3tgG7+ipZA9Q2row
9Y1lze3VQMjUYiDt3TiekM7oJTbQAURVt3Xgmlpx+Fo4AgnB4kuoDVhsTSm0
MCMTHJ+dC0KU5RfAMjMyk7Jz0qCwnJzcTMBLPr63gdy69QkApMDAgPDw0IiI
CD8/v3v37vn4+Ny6eSMoMCA+Oio2MiwhOiIlPiYhIjQjKQYMis8GxQFMKoKk
ZCVG5ICiYWlx8P8eHwBg0i+VkqwkAM/A8rKc1BJwMiI7NSsuDGBSamQgUAH8
k5kQnhQREHj7A0BKyZH3ATtlJIQnh/kDRspJigJ09AuQAIT/IqiM+DBgbVKw
b1ZUcEbE/ezoEMBIVbmgypzrkgKH0JB5uLxkbG4SDQ4hQ5Pri1J7qgtFtIoe
bD4NlkiFxhMhEaT8mLr8WHJeZE1WMBEcTMkLpeSFNMNj6bDIXwaspuT41+f6
UfN8qXk+tIJ7hPQbZPCnjQV+dKh/c+H9XmQkuyKai44GgCSvBWnqwRparpZe
IKcWMDEZHeXJlMLYyoz7ZSAfWMKt9JBfgQL/NTviI0BHxUn3yjOCKsAA54IQ
IP+SZF940j140p3SpNtAkCk+yBQ/RJIvOj2IWBBPQ6Q1oXNaq/LrilNqcmNw
kIjKjCBsVigFGofLvO5oq0r1JUICASZVptwuT/gEYBIu7Q4efA9gUk36LTLk
Xicymk3OlDHKZIMYiapKMoyRjmOVMwStlaC1YXTLVUoXXObKFy4ldU/cY0ze
FdrjrgczdBYIbGC+DSxZzpcsQ4HD7uBqIcCAwXXooDtXtpEp86TptqCmo2sj
De+RJy7qdTvVUjvY7MXb9hhja1VaR77anq1YAI2tY6Z2aLZTxupj/sql2HWu
XNgVWneYa+c6z6Nh96Mh7zON5bTHtEcYP0RqNyDatRTzNmxqCz2zTbDu0iY8
xKGlcr2zfG67wbLfMr3bMOypUjqgupXytSci15lmZqXJbMXPWDCmacT4XJnC
lMM3JDA14QJ90vhq5ehalWIeprLkDtlzNQ7I4FKGylXgetTteapeezhkO+VM
79dZjuhrj4SOs04APEpbptYJVi1BRNOpwulEmRVk3qSsnAmmva06B063VDLj
rH/4YmX/xYzzWDa70TyyXCW3lw+spii3Ebpd8sgBTeGFC1bjRO5I6UbMgCtK
7A7XbBWqt3KFywmqnUT5eipgJLY9pGvWr2cxqHn2f3Vabsk9hebjprnzHp2n
aXSvBeCNZDW92/JvTPsHkvV44WpUr/M3Um+yeC1TsJKg3SlVeSs1+wimPZlh
v9k69xF96l/oEx/zXBl91jCG5Q5zIVawkqtwVwLQXbhgbb42zZ3wJc5ykatE
uFbUMBZMnwzossS3zYYNrIHHT1vlXnSXNUixiTIetIwftY8f01WecoW7ZHSv
1rzfYfASNavYITdNu07RrmIn3Y3bp9rHl/NfPrT85Xzm/24b/3NF9v85hT+b
6T9oq78bQv3JWPHVYClgideD5Q/7M58PFLyQoC9YmWdMyGNx8WttxYuhinNZ
2aWS+OUM+5W594sp5tfTvV+MtrxQEJ/La16rax8NVh/yyzb6ck2EICM2YLE5
bZtf/myE/rW1/9Vwi42eNVsXt0BPdLSmO9pSbU3x6z0prwzU57r6Z5r69+b2
7+e63oyQvzA3fj/H+ONU599mO//L0v7v5vq/jFF+nmn503zXjwv9fxpt+J0R
/7W26hs9/itt7TdDdV/pcKc9oHNu7jMh/AkXfN4HAsDzzUTjC2XZS0nZGzH8
tRj2RgJ9JYF9rqr4Sl9zxSt4KSv5QlXzTlX53VjzN6Ptj+WVnxnrXmrI2705
JryfpSF+k1no7ivQVARJEf5mKkhcdltSGvp4pOv1NHdXTJiigRbbwWfaOier
0kCImaBmrrDRB1rqxXj/G6vmQtuxyUJYafGzlFhrQ4qrI8/Lwzwa7/9y2fjl
uumzKealgnolpz4f7vt8Ufete+q9y7Ata5xqyx6qz2KVRXUUBnk1racm8blp
8HJCtC6oE2NS8ck3C4P/d+adf4BHfKhqRLnV/cvCBjuHMtWJmuouH6JBmahE
Pi5rlFHNrcklZYfCwn7dXBilrCsS1eQI8LkLYvojm/FolD3HoS4rGBpyvqa+
ZE3DWhtst/bVTjKIDmn3hoE/yawTkQuFdaV9+KJ6eDYiOTIt4BYsKrgRARU1
1pr4vTa1cFrUJ28lS+iEYWarjkFjEsqYRIS8jcCkIPvIcEk7DkgrJrupPINT
hxA2oYR0tKyjWsOokTSjuJQCbWfljIg6ysJNcchWUaNT1rEs61yTdXkUXdtq
xqGB9cDE3dF0n43xX9vUzyzCs7GeB+P9R9rOg6GmbRV1W04GjLQmwB6oGg5U
9FUeYaEPYesrvR5SSURw8WsOjG1HY4zd4Q4AWofjwodLI0czyt1RvkPWZVNz
xB1UbHZmdmQYGgKuKyttQqKbEGUNxfDG0rJWJJyYC8aA0wriIrNjIkBhwQmB
/vEBASDfO5CI4JyYsNyY0Oyo4NL0RBw8Lz897pNP/+3GrV9/+Mk/37r3T1gq
ZNzBNHn67A8Gp094vIWC7qmIntkExnQKczGdt5zabA4kav6RMvTblvEgwEi9
c4n91jj2QrrADrdfqJav9Nuvlyb3ecZt+sheg+mQNbzXqvSStdt18o2aQTdK
u4uVrcN12+jJU6LlQav9cb/jsnd2v9Gy27p5pTx+Zjp4NLx1oj681F4+Gz+6
HF7Z589vUEdsqAkHzrsvdHoZk4uUueX6+XWMfCKca7glmwxSTSWM2rK3TnnH
D4e2jhWeA6H3hOU9kh4/nPYc8G2exrW9vu1T6fb5oPtEsH4isu232U96549a
TNsonR0ybIMveOgru0ygSTl/Nnn0cMxzrFze4y/vs9ZOeI5dlsXd7zlWbRwa
N/aNnm3dyoZi1s4ene9Rj3aNzLA5UjKxMa+5u5QtIrKEBKYAL1KQu5lo1gBe
pe/gS6ntvZheDokjbGzuKm/qRPVyiWJlC2eAyugnsHh1fWxKezeeSCnBEWFA
pbuXXN+Aqq6BFsFBZShIFbawDJWDROVX4xDoyuICKDgFFBsSej8wyM/f3zcs
LAQwUkhISHh4+J07d3x8/IKCQoBKaHBIfFwMwKSkuNiEmOjwoID4qPCkqHBQ
XEROaiI0IxkwUl5aHDI3rTgzEaARuiATqABAAqRUAIopykysgIFLc9IKUuMA
FwFAAgj0i38A88SF+PxyHSk+1DchzA8w0i8oAtYCjspOiYZmJoKigwBKAT8Q
HXgn2v/TlFD/zOiQ1FA/wEiY/CxCEbgGlgkYiQBLb6qAAVIiQFOppdntlVAS
FFSbn9hdDRNS0e1oMD47EpsVVpboiwOHtZZndKDSqbBoGjS6sSiaBouszQ6s
zQogZvkCqQbdxKR8jE37mJh5qzbjVh3kbhP0flPh/dbiIFZFrBifqqCA5eQs
IKr6bMBIgyTIACGLjc1qQcTjssORqf6lqf5laQGFSfdyoj/JDPltVugHsPg7
RYn3kOmBmJyoCnB4cZJPTuTHkPAPkam+qHR/dFZwWdp9BOh+eWZ4DTSZVp7d
VAGlIiE1+QlVWeHlKQHlIP/qzJDqzKCarEDASOWJt3AZftVpPoCRUIk3y+I+
rgJ9SgD7ESA+xKw71Dz/TnRsPyVL0A0fHEQPaiuGZmpNrmbzStOIg6ReQEks
ULENOujMHVxOY86GdE/c6Z/35S1Gy1ZyhUsQ9hyIv5QhXSkQO4vELoTSU6XZ
xMg3yuTeXIkbJHNDxo5qzSd0zUaVZrt0aB8vXQaPuKtsB71T3jrjKnx4DWFc
KZzdrZ/dpy+dd64/4axeSTafjqxdqJcO2N4r484L8/bzse1XRuclz3reYblo
MO1jTDslkzvIiY3y6e2qqY0qgxM5uoK1HrReT15/2GTeqtGuFioceZM7pM0X
Cuex3LLcOW9vsNgpYzPo4TmkzJzDM8RwdUGKibTRlTLDKlq/gp7eqJnwVKid
+aKldJktbWoPt/1Ksf1i2nakWjjpnz4gTexhxjbLVK5MpTNN7cqV23Kk1izZ
IkRlh84ftDqOuEYnRWWrADbG5u589mb35KVj7UIz72kbd+L0zkrRasmgt1C1
jTIcUJRbaMFKMscRLloDDW4ksZ1+guVogDoKT6FhH6HdKhWvZHbP+bZP32La
wmgT/5Nh8dFuV849YNofia1nAss5z7BdwXdGtk79I9PxKeAi4Vo803GD5wqX
rOQN7+OBSFbzRe40pj26y/6rxun/t970L00Tt7otoSxbFNMWxLDeBLyk8tQM
bzG8r8fWnmlN+3SRCyZ05Uvd1e2zcbQJ/6apuIaJELYzb/KCpd6u5iwnSt1V
2i26+aRdv0MWOfOvxxPYqxveahzy1lyPnbLTM7zRaXCTTKtU54bg2ePZ754t
/e1i4e/bo39fkfzXUt9fTHV/Hq79i5n0tQzxkgv9nYH0la76GS/rrRT2RFjy
Ugw9Z0J2ulI3OlN2WdkPZOjnQ7RXxu6nxpZ3E4z306z3k/3vRrs/G+18N9L2
VE3d56B2WMXTlKhhTNA8Le1KQ3tt6npiaN5llwFgmKJETZIj7S1p2+ziXV7Z
+6n2Z2rCHhP+SFbzZoj05Xj9C23lG33ND1PNfzDRrie0nW7540j9X8Yb/nO+
42+zHT+aGv88Sv5xmARs5LdGyjsl9tUg+oUYftyTdiEuPGNmX/QlX7JSXymx
3040f2nEfa5AfSYp+0xW8nQAfMVOey6GPhdfP+MPrHo/RHoqhb+S474ebf1q
vPGHWcaVuMZGjR8nhiy2Ztk7cqca4lWYAE111FQDWFR6z1yXdDnUeKqmbwvw
tvb85Z7CzQGMh0+w9yCWuhGLXYUTLWAbu+LFtPhC2+lhlnn6SlxdhRucqlMl
7WKo8/E4582C4gvH0CNDx4mIdCWnPTf2f2k3fO+d+tI1tCWuXRVgxhqgDFgI
PffuUDN0W9v7cFr1YFLiZBP4qGQS0MLE3YKFfwgN+6CtNHle0LihaHcJGpe4
9TuangVOvagmV0jIBYwkqivGZgTkBv2aWZU91U/WNpSyqzO1bWUbw+JNdY9l
oGlDz9HVw6TE/Fle01x/7RKbbOqovh4WW9M/zaZKKPDrIXyri7AFmTnRIdG3
P4ImRLZXo8StVFVv86igd0EjHOF1yTupRm77mKBb0kYaoGM1fQ2KHgqLimLT
0APNVU2V2XR0ZlNFFg2ZxqKV8hqR4rYqJhnGpuQPtpUZmTXqbpSxpxrIJJt0
PZWJvn9N3r4ubz009G8pW1wDddvqrpPRvi0VfUNOeTDafWbo3lU372ubNxV1
HjHRwa70iogbYvJiD2pdUmPnVqwICB4pdYlT41U0rCspc9zyRRbWJWtd1THd
Bs7OCGdZ0zPMa+lpwJfnQmIC/cL8fXJAKTUlcDKilFhcgi8uJBQWVGZnITJA
OQnR+ckxkLhIIOmRITkxofkp0cARDTic5SREwlLjwclRIUGffur/8a9v/NO/
fPA/IlN+w9FUjC43GddbgDMa81H34DJa6MjhLYEFjgLBMoxjz2oyB9ePfFw3
/FGTKYg5nyV3I4CWmb8IHdtvdZwJVy6Hzr/anj+WjOy2jR3SjDvtowetg6sU
pbdOtUmUeSqHdjFKT7F+Gz68C584xM4c0+aOmiz79IXdjs0L9cO3tgfP53fO
1VtHksMzhXt3wL7ZPu3BDi8VjttL7e6uld3OUQtKZcodWcySTwULRny080lD
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
qb5qj7pt19hjE1CsXJxjgLjArnGJaV5l19JA00R7qQSXrm8utQoaVjU9hm6c
rvP/p+m+oxLN8r3R3/d9z53p6dOxqruiVeacRQVBBBWJiggSBAMiBkAUc84J
FBDFgIg5JwQVkIw5a8Wu7ukwc87kOeHOuWvd8/57H7vvrfVd201pwUMtwM/e
z372L2uomtYtonYJqa0lGeUMNDUJlJ4UhUuKgsT4ATqKiw6DxoTHRIVGhgT4
vnge9PJlmIeH15NHzx9+8firz798cF/C9ZPPP/ri848fPvj00ZPHz188eenx
PDDYLwYchcEnEimpJGqGoCtftdtqejesve1aPKtZvWxfPG9VObk9BgyAIrEF
3mWMadGFN26FteojmrTB7XsxwAhowEpUuCgya3q/Aa+w0NQu3uRhudolXD1v
WTnvmjqq1RyXzhxXa28Ht98oJuxVU67mpcuW7TfDy+fNy6dNc0fCyQPm4iHf
cjNw893Kqx/15+/X7Fcq++XI0SuV9VLiupPvn/WuWYunjdjJHeyKRaC11szr
cyfX08YWk9RrSepN5KKBqnOU7zrrHGeK2/drQG7erQJMOrrS2E7kR+czF3cz
jlOZ+ah7/6gN+DG9U7TtEOjP23XXHbMHooUj0bJDtHXQsH3YqT+S7Do6zcdS
1+XYyd3U5buZg9fD+pOWNVfZirXKct7vPBs5PBnbs3VtO9vNd4OWbyb3bxW7
F5KNg/YVR+OMoVqtq5wxtk7ttU9v109sVExtVy0Y21Yt/dO6Xs1O94JZPL3T
odpomVhtmVrrGJ9rHpluUi92zq6LJ+c75KPVUmWlXFUrHavqUwrFo3z5pEgy
xu+QcgaUpbLhyrYOXlU1p7aOV1rGzs4iUzPT04i4BCQiFhwHigJHR4HDQ6OC
Av4/I3n7+Pn6BXh7+wI68vb08vcN8PO5Z9LTr7968uCBx/Mnob7e0KgIXEI8
JSUpIxmZgUogJcPTkXGUlHgyCgYACZAPNNQX6FCxSGZaSioCDBgpE5OQiohN
Q0J+Wcj9yyJtRFQQHBQECvQI9Hgc7PUcAFKY78vIAE9YVGiE/8vgn3ebTIoJ
RYMjMLFh2Jj7oiSAkbCxQdTkmOJMdHFmCic1IQcDpSFBQLLRcTREJBHsz0JF
laTHcXAgVnIwCxmcnRRcgIvik8BF+Kh8dHABNpSLC2HAPTLj3Ojx7tkIT1a8
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
A9Kgwfi4QBwkAA8NSo0PIcDCcHEhBHhEKjIKnxCBig1MiPBOBvmhon2TQd5Y
sHdy5FNs9PNUsBsApP/fSE8ZcHfASNmIFyz407zEFxzUyyKsDz81SJQR1ZCX
IGugzY6XLi7XTK9WzS4JFrfKFrerNva7tg/6lizlI+tU5VqmXItT7lD71rDt
S5FdG2GAkUYdmUM2imw/bchMG7PmTh0WzJ4WjNuZo+a8mePqtcuuhTOhykUa
tAIGwIw5qYCRhqxZvTuJMkPKzDFr86IG0NHFD9sXP647301Y30gd75QHv1VZ
vxnUXtTv3NaZXjU7v+0x3XXsXjetHhWtneTprwV7r5oNrzq0lzX3E0p37dqz
6p2restrCQAk7UnHrLlwycHZPmvSnbcuObn6q2rLndx0MbjpatKd1C+aSzW7
+XOW3JWD3EVHzrqrzPlKevbt/PF3I+snJWOmJLkhQLrn3q/zl+vh4wCZjCn9
ujiFAWASecyaOWbNmD2lz7gKV87LN65ql09qZuwFgJGGdpMnbZSVQ9aSkbFm
4uwetukd9Y7j7u9/Z3v7k3HvuHdGXzi7y13cq5Lt0adP+OKd+/VO4p3cbn0q
AJuuHfyIkwIAqWElqG8nQXNUNGhkDZoyxxy5Q1Zq91Z6/x65bRPcuO5dvfis
ZTOgeyd2xMHs0ScARiqd/j/Kpr8asmePH4rEBobMml+ziOZP+RdNfl008USg
8e/WEWXG4umzrv69kpYtXNcOTWLKa1knyIwMpZO4edXz5t+ubN/PjjlyZk4a
N+4GgXsu07hXTnsNm7MblqIal+Ilu2ld6yyxNn/mtKpjnVUxF102G8mbDKpa
BLduo+pWoxpWEyTGwvWbAePdmPF2eMXVtncuO75R2W2919ae12bJ9/vyv1uH
/qbt/uti3X+tNP5fc1V/VRV8L0t/LyF8kJKvurCHTXFXvcnfKRkn3XhDbfJG
Wcx2dfyhmG1opWtK4qZLkiZ4iQM5cWap4Ef92NsVKWCkN7MtR4P8c3nJqbTY
1cPSVqN0NTh7J1vfSFmrSZ7mw6SMQA0vXteWae5l2cTsy1Hh1YjQ0ELU12Em
88M3RfHrwtidahigsg+jrH9RCf6sEfw4kvcHdeEfJ4v+qOb9dVL4H7OVf5kX
/Pt8xR/G2O96kg8rQedNmKsOkr02QS8KO2xK1vH8XY3R7+TM36n472TU06bE
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
5qRs0lU5ZisesbKV+3ylXTDiLBg9ZI0e0eT2tP59gtxGUh5kKhysybOy0aN8
qY3YtZvcrI3pMSXI7dR+O3rsmD5sz+jRI6W2dNUJf8zOVzm5qqNimZkuMVHr
16IbNyCNm5HdevzAXqZkGz9iJo+ZMyYc9HFn9qCZOnmQrbZTx2xZUwc543bS
gB4q10HGdjEaE23JUbB5Urng4qr26dOu/FETbcRIX3CJ1g56ds5b7G+GbK8V
+zet+hOR6azZdSe3Xcp2Lnq0Z7XrJyUac97KcbXutnv5tGrKyV46rte/aZiy
0sWzSeOrjJ2Ddv1Rz4Ktcd7CHd1mTJjyZg4Kxm3UgR1E91bwwF7QkBk3d5K/
elG5ed5ieCXZvunZuulcu2iZP2VO2CljZorKwhraY47tcxeO6jS2ihFTjnyH
NaDPHrFxO9dSaycT2mbwXdMZnZNY8Sxtdq9Of6AwHE+smaULho51e8+sqW3G
2Dq5WzeyzlfrhXPm8pGt7IHFjKXtSoNzYNMkXTP2T282TSzVqOebhseahgbb
B/qamqv4AnZ2dVFhk1BYVVzMYdAZpDQGiZiRiiNgUEgEHBwbHQ2KBJDk6+vr
7e3t7+//C5YC/QNCgkID/AKDQ8J+3nPSMzgoICI0wNfjWaDXs+hQbzQsBgAS
0CZDolKg0QCQksCR8ZHBsYHesLAAAE5oOASLgMJjIwAg+Xu5hQb4xEYGRwX7
Bnm/iPD3AAV5A0YCBXiBQ32gEf7JcRF4eAw01DfM4zE40AMRGYCDRSVFByaD
/DDgIDw0mBAXjI29ZxIpIYqMjAKYlIWG0JBRREgQOT6MlhiRnwrOxUUzksOI
EM/UWPcMmHd6nCcu+ikR9IQMdqPBPO53H4p6RAM/ywI/z433KEoK4KXcTyXx
0EFlhHAgAJlEaZFVGbHV5NhGOqyFGV9PgwL9CnJseQa4LBPOJ8UVpYHZ+Bgy
PAgZ6gYYCR78IiH4RYz319Cg56hof1RsIA4eTsJAgGDgIGRsSBI0FAkJhoR7
xAa5gYOfA0aKD3ePCXgc6/8gLvALeMgDZMiXCUGfA8d5X7sE7EaBPOegAgqx
QfdbOaF9OCivYmwgDxNcnQnrFJL6e/JGxkvm1yu0e/Vru217BxLLxbDjamr/
fBx4cWqdDYaT7m1Hg/VWfvLbOdNb1fJ5tfqQPLifpDClDVnIKidZ7aJMHeQv
HdfOumqAV6B0F6txZo3sE8dsBJWLOHlInb0o0JwUKm3shZMK8w+dutf3Wbvi
a295q6dFy0dZqydZ+qtKYARheN29ccVfOKFvXBVtXVTrrmt+rnVbs3Em0l5W
GV+32z6I7d90aS/4hrvas5/GLn5avvh+4+TbWcNlj+mm0/F+6PC7Uce7Mef7
0a1TgWoPvmjFWK9FR9cD9rPWvSPRlqt491SoOyqeNaTO7aMsN82ud1LL3cjO
9cDsMXfQHCc2hg/ZE4escLEOObyfMWFnzZ8IgKcM0Ei6BxZvJY+a6UtnVVs3
HcvnFXNH3M2b2r3Xgzs3rc7X48dv1brz1tWjIsNZ0+sfDee/W5s7ErYvx3Vt
RPTrocNWaudOSpHmYdNGwsbN0NqpVGnmdu0CJMtZuWheOavWWHPmbOWzziqF
EVO78EBmYU2e1nZoM6oWI7mj7i3r9F4TUeHK6d8jNq2FjNq59wuWtEy+xpM3
9ZKn8eZNBonmYsvUcVUzIX3bxDFTp+On7a3r2T5DTu1KZNMavF0HqV+PlOzh
ujcggDPf/+Hd1m2dbD+1fQs7ccBbOG8acxSOHRTfQ2g1rGoqtF/HkuxgO9ZR
TYvQ6aPa9Vc9E87azk1mxUx8iTq4RZvSpU9v3cSJDcw+HWnranz1rGve1bh+
2G2/GtNbmy2WxmNr+1ub+A8HQ/9i6P5xtfYnTcmfNLxvlLkXXeRXEtabAfp5
J/qwFXHeQ7oR5xlLMeYa4pE491zJ07bSxktx3fmJDdnx9VnQxmykoiKnNT+D
nRwzUMYerS9a6BYZpLWrzfnzovTd1mxzH9c1WHY6UmHszFmqxY4UgiuTH9fi
3FtI/t30MDErsiMzqDnNfSgPuiAk6GpJ5hacvSPlTsH8rZr/40LLX7d6/rzU
8pf5+h+V3Pc95G/7SBd1cFdN1HlTyts+6htphqU69qQVe9x8f7rtpBV90kIw
lcfo+SF3vRlX3aSbfsrtQO5lN8laF6sXhmgFYEsdfqcCphWBN0vjbc2pF2LO
YWe2sRG7JIwezwle4COWRSh9C1HK9G/Efj0lRGw1MXRteVstWb1ZEU3pAZ20
8FFekmNYaB8qXW3OmhDi1cJUeQFSxkVJOMkSNnKxjqbiYzXlxN0+/sGc9GJR
4lBWHYzUOBT1V9N9a805U+WEte5iq7xCwyO2Z4B10mrHdN+eot4kq1GVUzqZ
yIGi1GERvTwdgvT8BMhYHed0efxyWWUcbFUIGNWZCEq0B8zt47SQ51VE2KCA
stjG0Q2ItOKqHVnT0ax0soHdlZvKQ4MKksIrKYi5zrJtRfN0U3EPO01aQlKI
6EO1rIFyelsevoGRMljJ6eIxhVlkVEQgA4Oo4LCEbEZuJoFGSOHnZQm4uSRM
Ejg0xPPxkxcPHmHhifk0JgWbWs7lt1U3NlfUNImqOxsa68rK6cT0XCqNSskE
UljAxaIxiQhkKp4QFRUFgUAoVFIBNy83j8mgU9jZWSXc/GJOLoOSzsmhC4rY
VeVF7GwKEY+gZ6QAScPE4dEwViZewMkqyaOVc3N52bSyPOZYX+ekuHuit1Nc
U6HqaVP1tDbx8oSsjJoCenURq7OC18QvqCnIayzhFmSmF9CIbAqenIys5nKF
+fk5VDKJgElEwsIjw/wC/P39vMLDgrw8X3i5P/N+/sT7+dOHXz74+qnb02f3
S5I+f/jgwaOvP/nynz/76uPPH/z668cfv3jp9cz9aTwGXNXLXz8d1b9TrNyJ
V+4UutfSlYs2QEeTB6VTx4JxZ5HSWjDuEMit2XI7HcCPxJwqtiDa9CEyG1Z1
xB91lKtPSucuOkedVWJzcrcRJrORpXb8gAUvNuIHrCliU3LfbobCxpIY04HO
kJXQb0iVWugNm8n1m/D6dVj7Jl6sY/Rpk3t3o4bsSSN2+riLPe7ijDnzFfbM
QRNcuY+asOJHDKhRY/J9a8BPWMgaC23SnDXr4E5aiybtPLWtaMpZMnNYMmkv
WjkvN7ypN960GC66DWcS66vBvase4HfB7BFv4axwwp5zf0rxRDB3Uqiy09bP
K1evypfO+UMbmat7pVpT/aazbcpWO2ktH9vPnz0u1RwKRmwssR7cpwuTGSCD
BhTwC0htz1o6EmxfN68eNyyfNGzftm/dVs0cFYxb6UoTbmA1XqUrWnVJF4/a
ZDpazyqxf5vUtYZumoFVj8XUjcK65gjyxWzpPHNSJ9QdS/ZOh/Wn8um96pFN
zvg6Y0rPU+9Wju1WDG4XDO/l3q85WclQa3mmo9F9h1prEi/oGidXG8dnGodG
ReqR1rnRHnEtv52XL6srlVTym3mFNQUFopy8IjozK51ExOKTE5PiYXGxMZER
4cFhQYGhgQGBvn5BAYEBfv5hIeGhwWEAkwIDg8PCInx9/f18fL08PN2eP/Vw
ex7s7xMd6o+ARCWAI5HgKEx8LAEJTUXEIUH3ldrAIX6JsRGEJBjAJFhUaHiA
l+/LJ0HezwEggUL8QrxfAonwdY8O8gzzfAIKdIdG+CVGB6PAYXEh3uGeT+KC
vZJjQgAjJYKC0DHBgJGwkMAUkG9ylFdSpGdqXNAvS5KANj0+FLiZHv/zLtYp
sTl4WDYmFgAMEeKNCXuSFPQA6vUx+MU/Jfj8MzroQVrUYyrUnQX3zE7wyk30
LsIE8QlhJbgQdqJPfpIvJ9kHCJ8QUkgIKsIFCnCh9ZnQ+sz4SnJcOQUGAKk8
E8HPgPEyEYUUBAMTg47xjQ95ER/kBg99iYzwTAT5JccEYOMjiChoBgZORMMw
iOj46MC4SJ/YEACEzyMDHkf5PUqI8oJHvIgPdwMHPIQGPYQFfokIfpAY8iUh
9jkl7r7EGw32MgfpBRwJO9Hrvsxcsn8JIfD/Zek+vBLL0oXh3/W+N0zomZ7u
rq6uKrWsMuccQAUFQclJQAQxgApGEEHMiqAYMGFGBEXEiIoJBUVUxKyVu7t6
erpneu7M3LveO+/3/Qffsftb66mztgcLjiz25vfss0MNFdRciFXWsVQDRYN6
/pS5xmRtW99v3j5W2a/0R/eLjtfG/evx7YetBvtXT2TbVz1n3027vtdu3bfr
TwuHbGk9+5F9u3FAlZlyMExnktWrdr1TMLKfO7ibpT1mArnG6D5N68ybPs6f
PmFNHVPGDlELl+WO76Yc3xo272Sr15WrV8Ll88p5F3vxImfpnLf1qm3zvnXu
NE93jJ47oy26q9ZuxOZL0fpl66q7eeOy1v62w/F1p/VdmdmdZ3srOfpGefLd
5Ol3+u1b1cKJZOG4bPe+8fCbbufH6Z03A8bzwkkbesZOXb/gnL7qOrzp3bmo
XzhiL53kLh0T9dbU5UPKwet+13fjjg8Tu2+HTReivt2U7t2gwYNYoKBYi6g3
Pamde6S0xE44sjUATiwI2Upo50ac4Zy/cA1UwNLZ0wrTedXem+GdmybrbcfW
2cNmQ6tnvPXzZsf76Z1XfYM72DqDZ8uSh2I1Wr2fO3rMadmM697HLjw0EfWD
+1kt69Ej+znzLpn5vNN8Kdm6b1x0V3RtxNfM/k57Xq6ysqVz8K4dQvt6Rvs6
qWE1UnWA698nyS2Jw7b8IXvO2GGV2BhRMu4jNMRyRl4K9NHC6YSS4eciTeLM
cdfOB/3ytVp9WC6ZS+zZorWtJ0uXg5tXQZ2rqRc/Gq7/dDJ1mNtnS29ZA6ms
OM0xv2+HrT2Tqu35gukXDabYUTu/y4J9WCB0IVFzVL1036k7bRmyVbRvEGqM
iU1mhGKT2LaO1p5Lu7eI+qOW2ZOaSVv+ylnLvnti095+5FTcuwfeOfo+7qu+
31T+xSz7z3npf81W/2W65C/a8p+0VW9VDGcT5KAOfK4gXilzj6TE/TrC5WCx
a5Cvq0IpmWBpVmxzHqyNg2rOQzflE2uZRG4GVETHthdna5or13sls9K8ORFl
pZ6+o+BeaRsuJyUng+W7nQxNeWoT3reDFq7KT+hhx/XmxXWxY4Z5SfMSormO
sduSs9OItbWgnO3EbyYrf5pv+r8byv+z1PrX6epv+vO/7WP9aYh11Yw8kSY4
xWmHNfCL9sw9UcJRHdzdhHfWIp2SlO2K6O2KmOMG+G0X8U0f/b06790Q292G
s9UmWoRRuzWplirYfEn0fEnUthjhbKO45Ky9epKhJEpbFDzDjzeL0SZBxnw1
TJn1sovub6rJWK7LMlSTBgtSGrG+bdRwIDRVmfaBsv2+ss1OrqmeMcLLaM2K
Gq3ADfDRKi5yuTnXWEtT8zKX2oqc2s59tWSzo2RDxj0ebbrRd623F1vkhQ+T
1ofE3dkpgxyMQ9N+PNtzPte72l6qYKe1MlPHa3Jm2kqBNxbq/ZuIz/+lgZVh
0/S+Nuv3R9pHBLm1dBgV5IsOeYwNeQoYaUzEGBfRFtp5myrpWrf0SNu1rqrt
4BArMYkApfLg4d1ltMWumq3BJkNzWTcXpyoj9wvpgJE6eRR5EUUl4orYuBIK
NisNTENA8sjo8kJGFZddQCMCwcvLYZGJ8aEhgJG8Hz1BQ+G83IIiJquGX9XT
2mGcnJ7X6Hpa5YISHouSBTCJjCcgYXBMRiaFRM7JZhBw+CQQOBUCpVCoLBar
uJiby8ph59BZjKxsCq66oqSMx+EW5BQXMFnZhCxiBjuHwARwBovHo9N4BQxu
LrW0IKcoJ4tNwqiaG7obpF3iGrmgSi6sWNeOAUzi0wj5+PS2qqLWqqLGMs7D
9uvw5IIsbAY4OiUmOBMSB40OAo40XHoOBQVLjY2ODgwKfukX+CI44GVMbHhA
8POnXp96eDzEF49/9/nTz594AhL86pPPHn3y6KvffPbVb//w6Peff/H42VPv
iM+w7NjGIe68fcT5cevoj6v7H+c23+p23s9tvBkzXbVPOHmDNrr6gDF8lDdo
Lxw8yul3kHvt2A4rtHUrtMUSNH7GGD+qG3XyNIA3rlqm3GLgUeUefNSV22sj
PYxT2s+Qbcc3r0V3bKIHDmjyTWj9YpxsFaxYR3TtZjWuZEoXk6ULifUmSPsq
RrYElq1FDh2gxxx548f5Y87cEQezdxfTvhqhXEsc3EkfsKQNbUMHtyBDW8jR
HdLEXtaUnWk4LZs9Fcy5a2dOq3UnZbpj3qQjb+ooH2jM188bTz6Mn3yt3bjo
Mbvb586FWmeJ3lX08AvOgll3yew5R3OcvXRRt3wnnb+oGl1jLu1WWQ7qlh3S
KVuV7khocAmN5zX6k6oJR07PFrjfmjhiR2iPsg0u7uxR8eJZ9dp146JLuuBu
WL2RmW8b5i8qAICN7hL6l3AzW41bF/oVV8+AhdVjzupcwbbMpTQbwFJNQv1Y
SqeBMGHmDC/maCyF+m3B/H7L7qV6br+ue5Y2aKJOrvNm9hqmbXV9Zk7XYhYA
pIEV+ry18ezV/OWrhbU9+fRKpX5VOqKt6Ruq0k/K5iY61W3i4WaRpr2uT1Le
Xslvr6qsKyrmMxhMAoGKxREwaGxmRnoqNC4qPCosFDBSSIB/ePDDIgChwWEA
kCKB02ERoaHhvr7+L1688PLwBIzk8eyJl+ezMH/v6BA/wDypCdF4BAQPT0Em
xQFGgsSEpUSHpoNi0GlgZEoiYKToIN9gH8+gl0+jgn0BJkUCH8hgv9ggn9jg
F+Evvgr3fQoYKTUmGIiE4Bfxgc9/mfuPSAgHhbxMiwkEjISMD8qIC8CnhBEg
4VlpMQCNfplH9ouUSJAIKiwKOJmNiGejEumwCHJywMM2anHPMyIepwV8mhn+
GBfzFDASIfZJVvxTOsiTkfSckx5QigkHjMSGvmSAPbNBHsxkz5LMICE9vooY
BRipGh9bhYmpxCcARhIxYOIcRBkZUkJO4ZIh+YQU4GLgMb6wyJeIhIdbbKik
cFRKBAoag01PwCNBQMDAYaAo34SIl7FhnjHBz6ICH0f4fB4f/BQAEhBJoY+h
EV/Bo55kxDz95V4bOdETMFJ2ijfgN27Gw9jy0szQByahAkRUkIxHUEiz+waL
NYs1U2u1uvW6OYt450R18X7p5o/Wq487x+9Me9fDu9c9lmvF2nmH7a365DuN
7YNq8aoCAE+/LbZ3N3jIBtKf0pauaszXshmneMzGHd7LMZ6XGy/4miOG7jRn
+pQ+eUQaPchU29JWrirPfjDc/HXb9r5/9bJy7apm675h7bra5GYtuHh7bxXW
d+0zxzlj+7C5s2zznXT9VrpyIQaMtHHdtPOqxv6+wfpGYr5mLZ9nbd3x1s5r
zOctO/ddG9ctS2dC83nFweux44+Tru+NO28GDa7iGWeW0UmZPcywXtQdve7Y
uak2ObPmDonGA4zpAL/p5u1cy6338q1bueVV29xFocoa12EJUKyHqKwxio3A
2rkvKyd/32gMU1nIgGQGrTj5WrDM7DdgRWqcLKBeTzs5+pPc2ZPyhZNCIB6m
xzq4iyfsldNy85nU6CxVrsdLZj9pWXnUuR6pPRHMXSs6tki9VobBpZw/bx5z
sDq3MLpj7varUcfXuv13HabTEvU2om7Go974eOZMotpiKteyZs5rxx2Vvdt0
ifGFYiO1z0qWm1PHDjmTTp56r7JuIbZ6Jql0Mj6n51HFdIjUCKnWBstXM5Zu
uubOZTOupvm7tgFr3oSjWrGZIV70rlsK69ukvP670/Z6WmlO67ZCFNtJXTvQ
oX16tyVnzCEd2KdVTH3VtBQ37ZL079KVFmTXFkTvEs9fdcydK2cuZOqjotaN
zLpFOACk5lVEv62wz0pTrXHG9znD2yzASMf32t2jzkNHx9ubiW/ONH8+1vz1
cOy/dwf+uaH8p6kFMNKPGt6bHoZDCtsWxm5Vxx02ZexI0FYp1t5CPlYVzIux
fWxwb15qMy25qwTbWoArw0M4GUm1LKogi8hFwaS5Wera8pnWitnGollx9mpL
rlMtvNY32fpKbrTiU3WpoRrVlxs3VJg8Vgof4CQPFCWpeZAOZuREOWJJSp8X
YO3t2W5V7t0w73t9wz/NHQCQftKJ/zTK/3ag4ONg/jcDTFdjxoEofqcCfCCG
nzSmb1XGOKTpJ3WZ542Z9orYNe4Lmwh0q6Te9BA+DOe9UrFvlKTrLqqzBe5s
gTlbMHOF0Vp2yEJZnLOdfNhCOZEzj9ppM/zwiQJfPS9uo4Gw1ZRlqIJ2Uf0G
WKGmGtR8DWGqNKOHGdfFiOrIiZHRIoaK02bExC1lkb2/crGR2V+Ypi6CTwlJ
PVxEdwF8tAwzzM8YLsPtDEqc47ItZYWpLntOTL/WKa9menZ6Rdae8hV56WJT
YR06UifKuV8ZvVxS76obBvmElhxoLw8/VV8wXl8oKyaiw59EffkvbFjocl/z
1dKEQ9MzUp0HkKkIFUOK8ybHPG/LzdA3Fo4KaZPih7uce8NtgJG2hxplhTgO
PDzd71NCjKeInjZRx13pEs+3VvQWk1SlWQM1rL5qloKf1VZM7RGX1BbR8Ulx
iNgwPDSRgU1nEtEASwrpFBISxsmhluQywZERgJGeffpFahxIUMRvldS2S5sB
I/W1d3U2tjaLasWllYLikkJGDo1MQiMREDCIQc3i5LER6bCUn9egIeDIrJzc
8tIyZk42mYDGomBIGKiQTSnh5uWx6Jx8Zh6LSiGi2Dkkbj6dQkBiMiAPasJl
5GWT82gkNoUwqlSU5ebUFhWJOZyh1uaF0SG5qLyQhCangWo4zPbqspJsEgEG
omLSCMiUAO8vH3/6Hx6P/xAV7J0Q6R/g81VaSiw6IzUw0NvD87GPrxc4IbyI
n1PbXpZKivIK+y2OCYZiwz1CfvfJ49/9xxf/9h+P/vevHv/6N1/9/lOPT/1j
PYGHOG3wrkW2xla9da91frQCTHJ8XLDcD6/c9S/d9c5dtgzbOW1r8FpTlNgY
IjIGy7ZA7duJsq2EDmvSz7P+46YuCjWn4ocbcEelkyc1+mvx4FF26zpMZc/q
s+d02QBNZdSvhjatRyh3cQoLSjQXIDR4S3QBbcspHRZiqxlTYwBVz0SUjfsI
NIE1Wp8mU5DaTgbaGaClUh+SB+3E7h2EzBzdbYEOWTH92+kDOyl9W0lAYWiX
qN4hag7z5y9FpuvmpTvZrLt2wsEDmqnhQ+KQlTLnqlw9bzv5OOP6fm7xTG48
adC5S0YOch+2Sjlkjjvp2lPGzDl7+jRv+apl9b556bZ2ysrVrhYa1nn6Xf7o
DmfqkLd83bR41Qboa+KI1r0VP7gHnTjMMp7wl86qV91ND834TfOCS7x43rh8
KV+9bVm4Fk868jX7LMOe4OBq4eLD4fbV1NShcGArV7YAr9NFNs/Gts0kd8/h
hhYZY6vMwQXcxAZp0sKe3hSYjztn90TDq4wJS4F+X7TsUhqd8sG1kk5TVpeR
OLbOspyobr5ZPrufNm2Khw1szXz5hL5mdEy8NN+1NKua6W+b7W7WyesGJWWD
UuFYc31vjaCmILeARKJhMRQ0hoIjoNORSdFx0aGhkcHBsZERKSBwfGzcz6sB
AP8e1uIODYsICAz28fHx8PDw8vJ4/PjRp5/+7vnTL32fPwGklBIfSUHDKZmw
tPjI5KiQX269oaEgDCwpPSkeFBkSFegT4f8iItAbABKgI4BMiWEP25FEBz4P
83kS+vIrwEhpsSHw+LDkCH9IZAAOGo9OjkmPD4NE+iESQjMSHma3ZSYGkaBR
FFg0FR5HSYshpESQ06Ko6bHYpBBknB9wxIFDfsESHRaVA49iIiJz08PJIB9q
ih8zLTgXHkpP8f3lpls+IrA4M7QQHlCSGQpEfprvLxu6PSydlB5QQYwux0WW
ocKrcLGlmRG8zKhSfGIFJbmCDC2nQEvIUAYyLgcFIqVFk2ExBGh0ZnIkGhKN
SYvDwGIy06IQ0Ih0SDhwTEkIigvzjgv3AowUG+IRG/I03O+LSN8vksKfQaK8
oJHPYNHPEDHP0PGe2HgvcspLUoLHL/1IrDSfhyFJ6cDlhQCEA7xUQY5rKEY1
VJOUfYW6VanOUg/E4l6Dxdlx9tbw/qejb/5+df3Hvd3bUfOFbONGtnbVZn3V
7/gwcfD1yOZ94/RxlmontsPi2b8XoT3Bmi54G/etC+dN006hxlGydNOweC2Y
PKJMHGEmnBkjB/BhO2z0EL7oLjr9bvrV3/aOvhlZcpeuXZbtv23YuqkznrJM
rqK9d23W9626IzpgJIObuXZXv3FbD6QGG1dt5iuh+TZv+03B6hVzxolcviBs
v+ZZbus2b+R7b7q379u2XzUdvG+/+M589M2449ux3Xf9Jnf13Emx6YSlO4TO
H+bvvhJYbvMNzgyNFTZlzVg+zTu4b969bV6/EJtcZQ+dTseZ3btBnVt+7WuB
LctfNZi+EGp/XT762zZT/Nh+vsFVNXde3LUV0bL6pG0taND+M5OO8scPUH2b
0PF99MguZNqOBoC06i7cvBaYz6pXXPyBXVjz8hetq58pzKHjDi7AjO6NwqG9
0tmT3rnz1umzIp27cum60vpmwPq6Z/WqbHgro3ctoWXer2sj1nAim3JUGd31
m2/7je5uvau2axP+MMz7ILdrgzh1Umq6bhyyVjQsxbesYrjqGGbvl0J9pHKD
ojCn924Thvf44wcVI/sV+rOGxds2g6trYI9Rs/iscTVi1iX69v9+s3Wn7FpH
AHDqteOVu4jenawxR/GwXdRpyahb8G8wxWucErU9v20V0rEZ+8su4caLnvmb
7rGTcqU1S7oAa1yG1y8lV8/FdFqyu5bZGnuF6aRj927k8FX/ur3R5pDfXgy9
OR79i1v/n8fT/9hT/49F9V/zLX+fKfvjaKG7FbsvTt4UxloAI7Wgd2oxZiHM
LEXtdGTP1WAn+ZljfEIHG9HLI7cWkYvQIC4KUkUjFKDT6algYQ65vaxAJeTM
tVXoanNXZYWO4WrnhMSiLDybEFg78wxCrFFMmKshaipQvflJSlZce3Z4V17c
VCXa3MRarCFfDJW9n6r522rnP8y9/2e16++mth+nRD+Mlf5phPt1f85FK2pf
CLaURm6Vg08aMO5W9L4o6awRc9NOvpPjDivCD6rC3G3Iy07ydR/13TD7TEY6
ac44l1Ns9TCXHO1oRevyIuZ5Cbt1mfZW/E4d7qCFtiZGqKhf9VAfj3Oi1uuI
283U6VJwDz2gLydkToicFaImefBhLmSkKKUnD1yL8e/nQLRC/FITy9yWv9yc
Ny0kT5ajO5hJ9aS4vhI0wKS+ogyLSnCgad3sqFpuLhgtQoyX4QEgXRv6XVq5
tbdqQkgfKsYIYIGz0vxvdmYvl0YGK6gSfGwdPVnbxDUoKhR8iigbjgx7HP/s
3yiJPlqZ8Mw0cjjZrRbkyjiEcnISgB9yjJeEDAaMtD0gmW8rMTQVH07KDybl
q92SjmJSflpoRsgjZPAXleTkyfqipU7RYrtgorpgrKZgSFLQVkwS0pF8Mkxa
nC3hMbMzUmN8nyeFBwKtOg2X+UAjNoNFJpYX5LEppNjgoOePvnzx5dOU6PgK
DlfEL20QSNokjZ2NMlltQ6NQDKipT9FRL6xm0WhELAaaBCbjcQCTMuAwgEw4
1EO3UklRcbWwisvJI+FRmQgIEg4GIpdFp2YRWExaHpuRTSVyC3KElSWcfEYW
CU3AIij4THxGGgWTmU/LaqsVs0gESXGJsKBgRKEYVsgkJYWEVFBKeEAOFs6l
khlYJB2LxCKSQgOfP/rsN7/59b/9+lf//rtf/8rnpZeX51fPnj6KjoqIioj2
8njh7x+YConoGhLbXhna9bwYwhcKbcHYmkjYhcMWvkgk/yYK/W8gypeEkrji
Rox8Kn94maNaLRzfL56yC3beaKxv5lev1QuXrYazatUObciW229jAUCSmIJ5
2j9wJv6dp/2kcsZbvOQlXnraaA5QWmF9tqyZm0rdZaX2vEp/0TRxXDN9KZy6
KO/YxnXuYMdOS/qOcls30TULwY3mKOUuqX0dUz71smrao2zkidQQ2bqUrtgg
iA0J1bpAztBnhQO/5Q1/Um98qbZnAXV/5DC734YesBGHHVmDB9iRI/rkcd7Y
YZbaljmwl6a2YUbtdABCk06u8bpu6V6xcN+pd0tHD4snjotVBxldWyiDW7By
pdh8pbZ9O7Z41Tx9XDZ+Qh+0UdUHjBEHY8xJGT/OmrnkzpxXzLlFM27B4o14
/rRydCUHiKntgkkbd8LGXbpsWbnumj0Xjx6Re7YThm2ZxvPS5bPatQvZ3l3/
3uuB1fMGw1Hl4nn96o184aoBeFHNUYHeUbhz2f/1j7df//DG+WrFeNo2aClo
M6Y16CMatKGKmaTJzWztZsHUOr3XCO2eSxhdJxhtguXj5pm9Cu0uS7NTNO+s
37weWjrrmdqvmdrjj23m6axFm5cdrndju8cdGwdNxo2qiblS/bxUr6/fMPdb
zSPbc8OWsd55ZZOmqXq6VapplvaJyusKWTwqKZeAp+PwFDQODYVDYxNTEhLA
sbGQxEQYBJqcCIqJio6OjImLiU9IBEdGxQQGhXh5P//iy0dPPZ59+dVjoAAY
yf+FZ2iAT1x4ICYdQsxITY4JBUcEAS5CpiSi05KBSEuMAVAU7uf90HEU4gsc
ASxFBrz8xUg/r4zkE+nvAYrwQyRGoAAXJYQjEsJRSdHAERYblAmOwEJiUInh
xNQYIPDJ4UDgksIAI9ERCVmwWHRiMDTcKyXUA2ASKjEQFR+QGeePSwygwyKY
6dG5GdH0tFA6JJAFDytAReUhQhlQ/xyoLxse+MsQ7pzk///WWwE8AIjc1JcF
6f4lqDAeKqwIEVqOjSnHxvFxCSW4+CJcXCEqjk9OLaens3FJ+cRUKiKehgSR
YXEoaBwaFodDJBIyEzGIOERqGDQlEJIcAI71jQF0FOYZHfIsJvgJYKSowMcA
kxKCnyRHeEAjPdMiPWCRT5HRTwEmUSA+WeAXWeDnVPDD9P88mC8QwMUUP/Qj
hQjoic1VeEUbUzXMG18UT2/UGawtqyeytdN2+83o9cetDz9dvv7Lyd5rzdxp
3YK71nzZsv9u4PhbveODdvtVp9GVr95LVW4977OGj9ihWidl7V68dtduPJfq
ANhft8xd8IdtyMH9xJFD8LANMmqHTx2jVs4LT74dvfuLxfn10LK7YPEse/26
ePGEt3SWt3rF3//QtPmqdvqIPGJLm3ISZ475Kxdi4HVXLuoMx8yZU+TSVebC
BXLmJMl8S7G+rbS97zz4MGp/P7L3uu/wg/r8+2nnN7rNu4b125qd9+2775WW
2/aF0wrdAUZjxxhOSQYXVn+E0NozZh3UtfNy613T+qVwwcXXH+VOOvD9ezGy
9Sft64/l688aFz+rm/99te7fysd+1WlOMrpFqzeyOVeNaidZtuYl3wwaOkRo
nOxJR97gPli5HtRrSepZDxveSTKd0pZdhbZ7hePViP1Vr+6E070VqrA869mK
HtgjzV81jexVAdpZuOqcuRCNH5On3QWzp8XzZ0KNPWtkL0W1CR7ahfdspGqd
eev3/TqneO6sHsiqlq96za8GARfNnEmNN7WTx6WTR2XLd4ppl6RpNaF1DSXQ
pXGHfVtWMnRn4oljbvsKsnsje+q0bPxQ1LvJnb+Urd5oNCcVNQveLWugnfcj
f/x/f9y47Rmz5w7aOaMn3B4roW+XabgSjxzUNK+ktm0kyNaQE46aIVteg+lh
daaBPeAtqgOMNHelVB+W99oZTasZ0oUkiSm6ajZItkqZPqpZdHetX09Zb/WW
U6XFUX9w3Hp22nV9qPrhQvefp9N/t4/8c1v155nanzTF7/sZ522Ys7bMw8bU
7VrIoQy/LskcyQ83VsMtCuZSM2NamDVeltXHoyiLSPUFuAJ0YmkWkpkJhkf5
YcGR5Tn49ipun7RMJxPoGji6+lxTa8HekHCjq3hFxjI35wA0MtXRZ0Skfk6q
ghGvZCXIs6Oas0L7ClNMEurZYNV7feM7rfTHxY6/r/d/1Lf+bUHxD2PznyfK
vx/Kf60gHItT9qviNnhR+wLobhX0sh1300G+78z500jxtRx9Xpdw1YJ420c5
k6Nfq/PfD+ffdhHvlFnv1JzjVvxRG8YiSpnnxa2LkPYWsrk6dUWIsLXSZvjx
bZhPumlPjVWp1nbmSi1utDBanRdpECA2W7KNNdgJPnwgH9zLSmyihJWneQ2V
pI9XYPo4adpq8qaSNyOhDXFhytyUznz4pIjWyYbJc1NP9R1bw02LDdzpKkob
JVpVkO4cl90vj18Z+zaU5T0FmeoSfBUidK655MOW/kCrbGHCudCX1WTQhrph
dbChhUuopKZhor1SfH+XGfEEeJ8PdaqtgdYhYX5PeTbAnuxk32zwy/LM8NHq
7IPx5rVuwaSYuaES28Zllv4GVSVDQEqmJ/mlBXzKxyWqa/JXuiSL8mpdfelU
Q6laWtRQQKykZ5TTUCIOrbyQRs+Ehz5/4vf0Szg4jk0lVhZzqoo4LWIRIBM6
DguKiAz0fBHq4w+NB/HzCzg5zLJ8rqK+eaizp7tNDtAIOCmuKKss5rKZNBoF
TyXjmNkUoEzPIhDwKDIJS6Phebz8ysri0tLC7Gw8CgUFIhWWQCKjgWCysgoL
c3JyyFwuS1xTVcrn5uZSs6n4okImCZuJzYDnUsn11VXFbGZ1cXGbpKZfLlM2
1XEZlIQw36gAL2RyDDYNWpBNoRLRPt5Pfv2bf/3d73/961//x69+9atPPvnE
z98LjkiIjPZ9WN0oNDg0NDw6OjYZEiSVsw1HrbMuMaXWWzgEmrSye5dxzbMe
1WNf1Ez6KJczpmxli+4WIP3U7fMHzNl9ZobWJra+0yxd9ozYeA86suc0LyXJ
NtIUW6nieX+B8VH1wheS5efS5eDaxcjaZT/x4lfV849a1qPVR0z9VbXWLVx4
JTO/G5q9ahk/LZt0lw8e0br2MybPiwAjNa4hhcaAypmXTUtpvXvExqVIkc63
ctRDMh3aOJvUs4Wvn0sUzwQWqX+f1/MvvJF/bzB5De3hJ45KACmpdjMGbfTZ
qwrNWemUuwJI7iaPC8edjOFD8sRxzoSTPXyYM3lSpL+UzN+1Ge/aded1Y8d8
3Xn58Cm+dx8/fVaxAGRq7ibjZb32lN9nzeqxIXr20f12ysgRdeQoa+SQBgDJ
cC41nJcB3yAGd8XipUhn405u5Y5t52odvDFbgcEFpN7d+jPhgC2zewc8ekA2
v67fvu+yvhqwvx3fvRs0OiQ6e+nCuWjltl5/Wjp1VKx1Fsw6ig5uJ//012/e
f3fvfre1fNY/sVvVtYxVmEBtM9GKGfDUVpZ+lzVpIfYtpHQaYtWrmTord3a/
Enj1YQt+xMJecjXb32m27keXToEvlLrpvVLdfpnptHTlRGjYqth1de6cds2u
ik1LDeaV9k1z39HWlMtiODFpdkZ71vtka/1yU0fLiFTQWV5Uk5dTTM/Ko1Bo
aCwmNR2XhkClQZEpEAQUCktOBsXFx0bHJMYngBLAiaCkX4zk6eUN6MjDy/OZ
p8fDMuwezwJ8Xob4+wT5eifFRCKhIEhcZHpSLFCtYKBYQEqI5ISU2AhARICL
4sMCHyayBflG+HpH+r2IC/aP8vcGjASO9I8O9EoM9wWAlJkUDRgJnRwDGAmI
jKSIDFB4enwINMofmxwBaISKSGSiUqjwBEZGEiMDRIREpkf7poZ7p0W8AI4Z
cQFoUBDAJHRCIC0tMgsangOPykclsJAR2bCQbGgQNcWPnPiCnPgwgwyIvLQA
dqo/M8WHluhFS/QAyAR4CQBSBSGOj4nKhwUXIMI4GVHF2DguJi4fHQM8FRsV
n4sFs/EQLj2DhEjApsZioDGotFhkanQmLBaLjMcgY+BpoQCQUpJ8QbEvYsKf
xYQ+jQj8MsT3swj/R4CRwnw/j/T7PD7oy5TwZ9Dwp4CREFFPMAle5GRfWrIP
cFUUsActyZOZ+pKV5sOEeLNTfUuw4XVF6b3tLO10jWGlSb/RNLfXNrvfOueo
B0z+sN/Njdb1dvPVX49Pv1swnbWaTiRLZw22twPXPy25v1/Yue9fOq80uBnq
g7jhgyT1Pghg0uI1d+1V08JV3cxZielSonOxB/eSVbtho4fgUTtszJ6pO8Zv
XJYffxi9+Lh89G5o/bJo8Yy8fMb8eYnIPMtt6c6b2tXrSq2DNPTzCkWThyzz
Ve3qRePCWfm0A6txJOlOQfrjhJnT+MVr/Mp13ubD6KPhw68nbO9GHR80xx+m
d17JV26KjGfMlVuB/WPPwdfqlfMGvZOmccAHthLH7bCZY9KCi7l2yTefV62c
VRmP8hZcvPmzIu0pYWA/ssX8WdPyr1vXftO89Lhh4Q/C6f9VNPgvLfNRi5d1
22/UC265eo8s34hU7aWoDzHDdubIfg6Any6Lf5cluncrcmg7QXeInLFTASC9
/uHg9K3RdCno201Qbvr37yYDvLG87l9yqxYvFXOXTQ8Z1h5yYBc3Yc/XOHLl
K1HNC94da3GdZrh8BTN98rCc/qA1r2+bNbhP1ByJVu/7AP8A2dn8faP+smbc
UTnjbuzbyxfOhjaZ05rXSVXapK4duuZUMuHktS2j+vZye3azhw+qVNusUVvF
+qspnaseAFLXJsH9F8uH/369cq4CMkT9VcO4u6x7l6i2FenP6kYOauUb6I5N
9NBBwahD1LmZBRipZs5DaSFOHomMl50z54r+fV6PLbt1I1NkiBHMBkkXk+Xr
hJkzycqFeuWyb/d21urWr+7Vbu4J7bb6M5virWPow27fX/b6/x9b/z8Wm74f
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
PPu9hPjNTPnPFVXXo9i3YvKjqOyDoupBRn+crfh2of2duuWtqvFknD5XFifG
vdwZJK314p1duN0JhrY6T85MX2yBWzuwxhakpq5QVZ03iImdb4AttuMnGFk8
YnwPKZUNepqggwOLKAd9xS74sg0bL2/C7Ci791UCQxdjoDRN3ojbkHV5xe2a
VspUBcLYV7OpGjaPNsu7yvsr0E3EvHp8NiEnApv9glDwhglLFXCIwmaakl8j
5FLQyV+m/Oxvqoszl8X9HpVQUIklZL6Axv0Ql/FVH6e4twJJK4gEXKrvrzcP
Ny/2N8y1l/eXwQRU8AyX6hL3PKwvXK6ofIpB51j7uoTvkfEtk13TreV1BBAD
lkUGZ6Ay49FZCUD52VFJn+hsnuxqmeZ1cmmUSiKxlcPpbmhkkKlZKWmRLyLe
vIxISUgEMj+mGIWAP9EIXAgqzC8AyEQmk9lsdnl5eUlJCaoYjiXBeCP1IzNN
gmmOdKF30SNd2lJZ1vQLqzPalckFt3zWOio381RL/XNL4+b16QXXtMk9Y/FK
nXtz68cLxu0RqYMzZWfMb7W6T0WeY/HGqdQTFpm2+xc2BLZ9mTOkcoV0jt15
z4E5cO3xX7hWA4Ylr3LJrdzatfj8Jq1+cGCsSjBRpbIO1fKKa3iwYX1tEScD
VpPRKSH1KsllfYWlbfnN4mK+FjNuLlWv1i75efY9gcZZr1isnltuUpgrZh0M
9Wq53M7WrleoN4liR8GkKVdpR8vMiBkLXO3GajdLtdtl+u0Sc4Bm2qMu7pfI
3eBJW8G4FSFzUYWOgm5jUaM+ga34YYchS3fQZTrtVexWKvdpM37ayCqI74wX
OJP4rpRJPwwoWwwX7dqT5qkdhizIkocqFYcVA96chsUfNC1/NryZN71LlPif
JjJy3vbZzvrcN8OeK6n3Xui+mXBdiqwnfM+D0PsgtZ1NOm6bAQIB2U9/XAWA
ZO3jpPNubOmya+GideGcMx+uAH60fNluu2uxXrcBZlh92+d67Hfc9Vmve80X
3a63IwCTNKHap1ft3o1vfS2zXwkcty22W47huGzhrPypjnsc0hzVD7gK5Pt0
1zuJ+YI/G8RLgzCgytMf1bnuBK77XuBOBByG9aobgJnpssFyw1UeFBvOy/Un
tfozluWqK/SLRf83qvX38rX3M8t3HcZzojqAcV33Lh7VG45Ys34agCXvRb9l
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
XVnTB3z1d7Z31/dOVw2xa+fWehSWFbVDYLyQGH3SI9f2kWNLbROp7HyNR3h8
sam083S+VcfrDdsrAXAIn9wyXe8VlnvpjqtTbCHK3PXqK+rhdfvJ/ajt3RTA
JI2fcXjFljoJPHP83GHKshEhslZxD8mr5srFk0L2SeqaE3/4mnH4mr9/y9jw
tkrcrQAeds/mN+yja/a2hUMsW10mdfQcXLC23ZPrjl7RSbvU1q2+nDU8CFTn
HLG5e8PZveboZR8SOPqqvetx9Wvm9tXour9XdNa2aK0d02ImjlAiwEK+UZFz
XOweXHW0irxdu3dz29cTWzd9a+c00XnNnKmEZYDMn4BFDtKGq3XDEbiNpb1n
yfyTAlvHmq9F5u/gmWuWzNXAQQpsbcFGmbOW0U3wBSMF4I3iZuLgbnbbN7Hp
bwKMtHiKXrITl624DV+D7LJT6GjgmErmzMVsM4rnqNq8aN32jci8oyJbvdTV
qr/n2z+qju5E67Ymkb1yxV256qwzvdvcv1pm2WFrZ4Nif9+8lTilh82cQFa9
Fbt3LNn1qPQS2I3ABZ+9h1bZdUtgPe0zINoO7liBbm7nTZtXXYt2dOv2n6cM
yazAjNqqw/dsYFdVd+Obvtp1XznfRRC4yGJvldTfvnPVBQQgqO2r5pnDbIYx
0PRk45LI9yD5btS8LYtjg87Z41iW9DkrfMryjOmIXb2grJ5Vyt/07N7T5XeD
e28Gl11ZC6fhPFuW6AwhOScq7nqO3zIM302r78fU9yOqu16JvWlIjBrbQM8f
YpiHRYBORe461nER11wmdjbLzoYPX8/qLictr5edHzZO3ywfXLTzT+EcY2K/
7Mv+vc+YhkSBHbXurt276lTedG/72rfPeg+u+k7f8fw/7Hrfb56/27q4k125
1y5MHK9kcH+ydrOvYr0nwKTxSnQHDl4BSyeBMwiQjLLctILkGFBCZG5STEp0
WFzoi/iwoJCvvwj9+quQJ1+FP3+SEBEKSAl4TIyJAJhUlA+CQ/IKQDmg7Kyf
LiXlgbJzflpSMg2IyPAo4IgDgAToKDDfLTgYKFKePn0aERERFhIaERIaHxmd
GhObmRgPSkvMSY7JSgiHpMcGboHlJCHA6ZjCPMBCgQUkMxPKoJk4WA4KkoHM
SwWMVAbPwSFAAJN+NtLPS3NnJ0RlxkWlREVA0tPK4DAkBAzOSIsPCw9EeGjs
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
Fkw0wsebEP3oIgBIZaBoRGZ0QzEIA0mpyE4sB8XDkqOgCeHovMy2sqIGWF4z
vKCpBAIsdFWUChcJAhKehh2eH+hZGh8jj421lpdjCgoaSks70JVzQ0Oj7e2T
PT0tKExZfkFzVXU9ElVeAAOydYR/QEJ4RKjfm+d//kvIa7+spGQMEtnd1FwB
K66vrGpEoXuaW/55twCUlZ+VBc3JAXRUVlJcUgitrizvaKibGOgjz0zjx0cZ
i0QujbpGp+xtM6TbhD3ltPmYaj1jOm7XnI8MzcmI7mz68tP2ybtd1y3f/Z6+
46qXeIGCKIOjh2854Qeno7Y7hvpkSOKo2vPVmd8PGq7791xtputJpadhx1ZK
U323KPuGpgjk6cHqs1b95bDitJypjyGr/kxVB5M0f6Hp0ti2bIo+ju3IWjZH
Cj0VQCyZosmGEPJhNNUIXTJCOHYM34FePCggarKBj3r/9h+Hdl/QbZg1X9v6
aRPXjZKej+3fUJU3eOXd2PbVmPC4Z83XQrOUkE2QBQNk2Va2ft64Yq1bMBYu
HMFWXI00e+OCoWTFhpbfzxx8WuZ6eumOtvWzvo2bAcFZ5/blpPaBK71YVH1g
AyE+m2E7+59G/rmjKu9YimuW6h1Lck7iuce57n62t5liLxmURSxZq1T3QsnZ
tOhkgu/rIB1CV0zFRz/SjPdC288C9XuS5GJh7WR01VHHcPfyz/t47l7ecSfT
0U49bFw1N6uv5Kb7HeXZ8qZ9fteH196wgVUxHI2rzmqGA234QAOAtH9F3Lua
VF7jDA/LR+8FwJrNH4SGB/ru2YjI2bHp7hI5G2Rn/err2b3zEYkP/48eaisb
p3PC04kFQ36H4I+Uo1xgLz2B01qyd9lleJhXX5Gkvn7mEZRv7TS+Z9t+lRx8
WNq8HBSf94pP+oDgOqoFrgHZbQ/PW8h1V3Kc1UxnIekwfUD2L+PKbwDHEvUp
K+Ycvhu9cVINQEh+1bV3NXT0nmn7uGl4t6q6xEt9g9LTVtUVZe+0X3mCc73b
Bj5dO45moiR+fjNW5Z1yP6iu/uo8esffsg9vOVuFFpTitNf5jnX3N/PFz4fW
R5budlp1jtPdzOvfTenvZkzvl2y/0FS3E/s3OOXtqOahH7CT5SPH+klg+bDm
/Vng+Sw+edx6OFm7ko66ybVOUrWTWK+fqtzug4k6ClgNOUuY9NmytJGSpI6C
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
VxSWZMQmRgcAhWdqelxidGh4eGBgqL//q++/DwsIKIZA6lCoiaGhsYEBIBhk
Coe23FpT21CF6utsA4AERHtzS0tDYy0a1VCNwpTBW2urO+pqyLOT2wLm5hpl
jTPB4rQpteMax5TBhwdSjePjvNxXrbsY8r5fO35YP7rBqU66N+2IHQ9SdlKv
u8FueqAsfa7xguJ+BAS1Zr4l2e4o7ncs0ylObkHumMr5ahBTEY3j/4kkfSsy
wXbdKIkTyj7y3/QUbh+jN7wQivHZovYVzfx68eg3HEc8x1IAfM+uHEVPK/9I
0gewrQiht3LNVc51VK+ai2ZV0XhdwowmZloTS3eVC71dPGcxy5a7ddJu+sg9
fFgDcsuavRooCjiuCqopi2xOW3Hkkox5dHud6GyM5e6kWatXnTXLdsyiCcn0
1Gxcd4ku+pedNWRbKesUzTpGk44gBH0m9bBCfk3WvF9/mujtdFpwOiG+mBKc
ja9a23jeLvHx+PYFfv+GKr9a4Dk753WFE/uxQ3tBFBNS9U4qv6ZKr+ZWbfVs
by3HiZZfjbp+Fe+ezG+djsjvKNvXlGVrM8fTyzlu47jauJ5u4QmO7xnjujt0
91L9rVBzydj2TquvSObHLf0DG3ic4UItHuYLj3uOPm3uXc4qLnGAamwfN3U3
rMNHrv6ep7plSk7HhZ7unfOhvesxxcXsU6Pxa/yWb0p81rZ1gWO7m9jO3mV7
af/2V3htElWfwnMUGT5MAIXJjnvE9MgETMU4hNNNhZsng8p38+vHdSsWiPJj
n+Sic81Tw/OU8F0lwpNCijaebSvkOCpZ9qqlo/Lx/e9m1EFkQ970XjTtMJV+
mLdqTGccgrdcTcrTOcfHTf0VU+4b3XBixK4y3UP33f+Zrn499H3aPbye3rQV
ragiKTuJixsQ/TH9+mer+35Xe7ZwcDZjvJpxPJC8H9jW6zXbLR/g9/7psO5m
4ep/DY//n939SWD5vKi4HhZ5y1aPMrcvG+VXPcqbAWBb9O+wO2cTgJOdn3nn
v0juP+3+9Zz/k3Lkgd1xz+q4Wm6x4Cr2+wulnbnchvRVdBIVnTIGDe3I9kcn
vUQkvi1JCoGnRSNACYic1MK0+JzE6NyUBFBiTFZSbHxEUEyof0jgi38a6fXr
bwICngcG/hAREZCSEgOBgKDQbBgMXADNBoyUlp6UmJgYF5cQHRsVFBTg7/8m
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
X2vd5FA7jTjKWh1a43cJNloUtoED34T2ol9+VrtuLWBoMoTGKtMFWXs+qjkd
VvrapXaU2Fq8YStb2HuB3/Y3eMlnH8X2O7ruFGe5XDg6W1Q5Brb0pUzN9xxV
nNLVLTSnrKoj5J5a+XEtXe9H1X0pcIGYR1Erh2+m5P8+AuQTxb9SDIFbnuKd
UzTfkz6vfbF6lCnwlrNt2TOyt7PKsFUzFHDRnCqZ564XettY1iKOHSxwVjzN
naRNFburN91tEk8/UIjxbWUibw/DXkI1gVfMpVRTCUGXSjLmrPu6ZR9IbPfA
0xiSV53Sd32Su761k/bx3XyiHsH3jIlP57murkVD0Yq9SnyO3X+kPzUuulja
uiZwTwZIpmqyBU05QtGd9QLPsMSHt36SGh9EYuckQJ0JRdrAbjjD3qZ64Muu
FqWXxGVr4/oJdveGuH3Zp3lc0Lwnr3vb5e+IR79u8T0DZH0V7RDJtDTxXe3C
kxGmrY3nanD8tH94t3l0K1BfUw+u8LYPPNtPHMn5GNfbwnCXM+x1WxdT6+6+
Le+49Ufx6d91und86SlefjvH9TQC62TbWjj2Fs3joh7Qwj3B/JEn9NXOqeOx
+4GkIxDDVUk05o3vvyWbcwm610xr3roTtXfdrb6d0d5RhY72BWUqTQva9o1p
75c3TtvotqL14waOs5btKl42Zy5bwpaPQpmmHJGzgWtpWjKWz2nSRuUBwL5d
OUIuH+VxHPkca8mqIUvsLTPezasv5na8vRvupg1Xu+r/Z+k+gFLb9oTBv57X
3/f6vQ7v3nfvufnkZM45gkgWJIgIYlbMEXMCjCgIiARBgiJKRqKCCKKY9Zyj
J9x7zk2vX+qeqW+mq76pr6rnm6qZnm2/qVq1a7G1FHSv//r9195rrfPOzZMG
y1n38Qed/1q2HqJzjCnz5jSRHaTxl6x4aHIHxRYe373mmI8YrrPp0w+a4LXU
fSjYCI7q9jvM593WK5b9xbz1alTmx7N0UUPrXy4f5CuOQdKDvPWzSuOLdsfr
kb3vRO7XHO+P4sBPor2bmdOX3J++1f7vL9b+2/b8v+pHvpW0HrLJ1g7oWl2e
qiZ3qTxtjhg/gHzeCX7Qi4huBkfQwXEVOdEVoKQaaGZ1MZSGhpARYERWem5S
HEAROCgLDMgn4XnE028AHT189OmDhx8/j/gsM/sZHJmCLs7Ak3IoFYUkCgiF
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
BhRrJYevL1rUkwRavNSEn1VlMpc/Y0qfzKgTlqwFqp1ShadEZMcJTOWLTvKi
myr11iqCjTNm7KgO3K9JHdlIB+oSXxVgJ4GDCOQpLP2zGSuQ9zUYz/uNZ4Oa
YIfC16w9YGiCXZLtKq61iGvDrYfaNkIMsaNK4CHwvEjpQelKuE5yWs/1lwn9
VRsXw6aLWe0hW3s6fLsj0mH3qC2XLv+sQ/NwwBDRvnqHoX84bMmeNGHm7Zjh
1cRm4Sd9K49G1hIYKxE1/N/SZn7RuPQLlj5l3kKaXMc5Xi1Nm6jT9kK6+PO2
5adTJqLQUzbrKGfb4MLt5iVvD89Rw1onDsgLZgwlCluzztutdnWothumtAkD
yn/i2zM2D0YVTtqU/rkyRFvYpvZpY7lOBN9eMKr+dAnoWc4HuDYYQ/nF2GYC
xw7qXXs0vBk94wErjptlBxWcnfRRc+S4JWHEGlEn/1XT6q/nvDTlef+4DT0C
dCV+0ryH0qu/1629I9mrUR8Ocl1EabByznW7u+6Mq2zSmdSzdrdz/Zd01S/G
bIkTW4hOzdMW1UfTjoJFbwXfg9o4bZY4K4fWfjNnyXC/4plCLNPB2NYRM3St
OXkrP7rhHZwvH11Krk8kb0KSt465yxVGeKHGOYrTM9DqDsRMBVjcRlT01Q5R
YV0kUFNxNhWSXI3KJxWm4EFpgJFI6AJAR3BwcmFeEiw/tRhdUIwGIQoz4dBM
NDL3djSJCCcQoWQivLy8uHOghaucWzLPybdHFf4WANWS3fIVfyfL+pnIDzWc
zer2u2y79fp1hmVhyCVi7y3zQiui1xbNe9vyt+sz3ylHv5d3fifv+U418KN2
9IfVwTeyng9rrJ8Mc8cLbfbhSiuzaX2wUdFVreyjW7lMxVifYrR3sr5quJI6
Vlc7XFvbQ6sEipbHN8vl7M5O/sgYu6OrnUqrQKMHGurG21p6G6p76ioHmmqG
m2vEk0MG6bxBypFO9nH76yY7yqe7KmZ7qkbqCR1lkDpMWhMhm9VC4w+2yNgM
+WQfu7VypIk6UF9KhWeiM2OJ4NSWMmxTaVE1trC6CEoCZ7VTCMuzrLG2BmZ7
czu1tBwJBSfFl2NQ/U0N7XX1k4OjA21dFCyhHFcCGOnJl3ej7j8FKvSK6t7W
DhyqqLKMWl9ejQLDyEWEIjC0qpRSVkwogiEAJiXExUPABThsMQFfXIwtQkIL
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
JYs+iv4lw3A1sbRXydx6PmJ+IgmROB7sjIOkvxkTH9AYm0/HHREAkJb8VPl+
m+qwT7BdMapP5GxlGF/0GV8NKo8bBPvwSU/cUhgjO8Vz/dGcnbsz9meLOwih
u0S828C24Pr1iX26pJ7NO32G+/M7BSIviefMXPGRbcdsY6hD46UKLdkqL/7g
W8nRO8P+65XDd6r13SrZVrHEUrLsKBXb0LItsudy0nzQrw5WrIfopnDPzhX3
4M3aweuNvVfLvld8Zaha4EapjypWj1qmLQUDa19PWp+vHVMsN73aM4oMuGzO
4PrLGs/riePfr17+aevkJ/nh9+q9N4L9F6wf30r/+/XWv5+Z/j289L9tDJ5N
kXf7kdaW/NWaNDElcRYfzUQ/G8XGAEbqAD+oz/66KusuNeM+JfNJZW4UDZTS
TkbVEFHkIhi1GEmEgRB5qfnpMdkZ8RlpkYkJ9+LjvkpKvJub+5BSntzTD2HP
kya4hOEpRP8YvI0Bx5HT8qHRYGRSZm5cQsqz5NSotNSE+LjIxKSYuMSImPhn
0bGPIqMfxCcClQexCfdTMx+lZnydlXsPhX9eVh3b2J3aPZo1PgsbYiPq6Okl
5JhC0FPASEWF6YCRcLBcLDSHgICVoItQ+bnFhQUAgaBZGUAdUwAiF6EqCDgi
HE5EwIAz4LQU4GRhZmp2QkzS88dZkQ9hqdEEUEoZNJ1SmEwBxdAKY6phsYCR
GtHJDcjk211I8CAGrQgIaFPdtbPddM5g0yybMTJR0ziSQmz7J0Lbr0hdvyAy
/q584KMB0XPOepbIVLJsaDTbZ11WmWddYJZPKzi9rA5qE6kQXxAPGCk77uuM
2K9To75Ien4n5fmn6dF3MmI+A4CUEfk7AEhZUR/lx30KT/sGm3Ufn/OwJP8J
ueApIKWqwueAkRi0nOl25MocWa4hLViwCzvZfC+C5ylecEBUu7ijt0tn74yu
kxlbeCLwcvbkDffwcv7lG9XZzbLneNy837Tqpy17kFIXUuEqUzorZBaM1lPu
Cg0efuvYfSOyXzE9r1nGi27z5aDt5aRqv1WyR5ixJ8w6ovmufIEDPGeMmtn4
ZtESrdohLFlRo9LoRubHXbP3x8UJvHW083j6xY+u83db+y83jAGWwFwyv5kv
3ASvmNDKLZLKTFMYypctxEVbwZwth+8qWvZVL3nL+c5y+V7Lyn4T146fNiOm
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
GL7zNfvppHKvVRhsFPhvb+JkORtR7iBU8VpZEKKJV4Sfzu++VAau5mxHBO/V
RODpnPeSEXk+tnMzfnWz9Ofnpv/+PPwfSdO/OuevBW0HzGbHYJkakyv6H0Ba
bkpdbUlnNzyeq0+l1dz/H+eR7gJGGql5MA5PHatLn27Im24uZnZVT2Og423V
1K7Gyb720X40ZaCtqw0Oqyyog+Xie0sZi3BAOM4g1eAhaex4jQ0n13ca7eTo
Pjd+yAeWtsiY1IIVmFAr2voZIZgphi6K61aVSLV53BFc9ITZQHnDLKdvymQj
q3W4LT3SYOkwOFAmd6POVaW21246erSW0Q0JeZKKIhJaiN0dHQ01TVUgGKgY
MFJjORhaWAAvLWmuhCAgFUDVg8oq83KLUh+lffFp9t3PQGkPKtIfVmU/guWl
NJVkIkoeNZc8aAPdw0DudVXc7YU+IsGziNC0PtiT0eaCCWTpOApMx8CYhObZ
3lbGAGqRiGOROnm0YRFrkruMo7EqJtayB9d+MSz56/61v+7h/RXNfEcQRaw6
UNzNZpNr3Cmbli0QJHOEdRp2gdza11IKK7xXkfkZYKSilI8AHd1e1/bg/cK0
T/JSPizO+GVR6nuAkSDZnwBMAqW9X5H2C1DKe/lf/Sjryx/lfP790rs/gD7+
CabwU1pz2sZC3aYRJ7QjmVrQjAbMscK1Oxh1BLfmgs2a7zKsd+jGXy17CtR7
PYArnJd8z7MVzSFZGL6lES9QsRFr2Ije7ktsG4Rrq9XFJ+0nM7p9yqq7ZtlV
ARjJfHZrJAFAoyAU2OtUex2yeKcs2g3se4LtFmWIyHc2sTbLRK4Gy95A+JqX
eKa37q6tG1AsSZUlTDl4pnrzL4en34W3r0T243Hn/rwx0iO3NJmD4/YDlihC
YPma5j3I9WC36mAEMJJqr2/N2yyP9NxOOfRUvv1SrDumsz2I9UizMNYu3yX6
nq/HvtZ4n/Ks5yzV7hA/jATIAQDJeDqxdUA0npG1yb41X6MoXKfcbd86ImkP
J+R7FF4QybTkssw5yki38XBuc39q0QqlyO+Oaz6eNWUs+wqX/Tnzzjyq/h5+
44edvL8e3Hinm/t23+pnE7L8xa06YDM3d0aWje3TKvC4PJW+mQmsn90AzauL
x8WZLAtcGljQ77J2XmhjFyaJa3hxq3Js4z5+5ecU2R2KInM1jFrwV8za2qfM
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
i6bi+6Dixy01r5qqimpKnwGA1FBZUF/xsrHuVV3186ryx1XlD2vK7wOMtLAM
IYuh4tCSMis0XOzIj0a5gYHod7tH/zPqvOSQ9ps2rJV70VmjibpDXt1ensCM
Dc6P9MB7W5CDrchBMKIPtDk7TEVPGOgbIQk9LiNHBasHu9g3ipVT/tgRs+uE
2n/BHD6hDr7lTZ7QRxOEviDQiP0ewoQUBZEs93FmuySrU0wUbLq1cbQZND88
iEciyGj0LHQEOzOzjVtHjMImRkZwSwuU9TXKxgqDSGBQtjl8isRE2zGvKoJk
XRpnz9N850L7KUmbXTSe4pjeISDF6082NNlVU56iO6SZT+kcB4xuaqVqR2hq
JEmIpgpwBMYCbhuxQoBvUjA07iZ+e6l/BISY7yQxJ7dYMIZkiqWEq91krZei
9TGMoR2OEk/hrWyz1sm0tSXs9DCso7e/uX+ouau7pgNS0dNZ2d9TA24qaWwo
BhipsuxFY2MVwEgNoOqKyqKXL57cvvXJ/c/vvCx4CjBSdU15SWlhXX0lqKEO
VFvT3FALkFR7Y80ApKmvtW60pwU53r6NgzIpwwrNFGCjVAGE5QDrOF7fS0B1
WZjpeNp2jgEYaTfSJkt1BL6k6PIDLP8LRqhMkOrZ9NxZ0P79uvEXpiwGUPW9
+IQpt6bNzW15HyPV/0TxFMjiI5LUyG58kB+BmE5oigMk2Xd/ff/zTffv5TmI
8fUaPwFnh8eFsfG9LPz6G+Zco+50UZGD7SSaJAddisMJXqRFEC8VxMt9V9zU
d3v2M4o6u0S0lVD8L+gBMC8JJntq9WcYVW5Cn0f5vySZTq9/zFVkUNJ0qzTZ
v5tq3rDdRyp/urF/R5lBJ77dz/73gONUyXCOOt7QXG+lxsstXrKL4Hu4Znq8
bnsJIBMlAFrU3gd8DcXZSrLVLMp/h1beoTjAytS40Ncu9o+IAghRfJxuLwfC
n+pulWZHeeFKmqNAGu/T5hHscB1+/z7dWaFPwaWuYW1gLn2psIXZF9/7cu+8
qXPNnntC50X7j+b8+eVglm+Mo9wnq7LgxLa5Gad7gpL8EiX6/aqqACH/Z5qr
R3uABWT2ek5Lopvo+Feur0IYr92NgHjeZ3JPT/iA4c/Omr3jb750XHwX9Z2z
hP7x3eCMJLjAc03sJTHa9LY0ADOmF3WxaWsMHzxhBHNsW3bGlhuwxpFqb5/O
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
z5GQhBGiUI8ug3GesYDRpYhidVkC1zO7ru2TenCa2LYqui1wb3Dtq+z9ZYFn
VRJc14S3Hcc7gBWShOZEnmWhYWubg8NtzgKMBJ8Zmpjqg411jcI6R0Y6enqa
erpAfX3g7u7G9vb6ri5wR0dTU2Nte1tTZUVJaUlhWWlxVWU5wEjtrW1treCG
muq6qvKayled7Y0AslaXPB3ubJgebB7vqVkab91cGN/aaKNzWsSGXmWgXxUd
0WaR+twUK3CfFyrdywxqsjDj0aIwAhYnwVvOuyTvJ5uu3xCcn3DiTyiegvm9
/zyv/C/bjvvq3MiW7Y4gAmb7Cxfk/0q03hZHW7neesshLvBWTnQ2rtqezZh+
PKn850n5f6b6n6jycHF2FGt8Pi3+CVb7S0m8U3eKYCYLOOmX0two0HYPIPxU
BTtcqkjDrOcLuuw8x9PA8j3Gm29s7v+WH6pUZLr2X0+FvpU73tH52bp176/I
oUfCTLfuZM50uiTJ9Yuiw6G35MQ7geuYC4ihODHheseSJtEUV+PmfokyvZr4
Yc/1mrp/zLSdkDPfm/1XYmUKxvSUI3c/Qis+0x2u+F87zceAOEC4vieyQKsy
AiUZn9LdZeLoEtcPo3saDEdoWbqH4S6TpToU6TbDAebgjx73G2nka6UtQ7TE
1tNvdVffJXJ589lr+w9/vPz3v371x3/LXX3pjx+y3PEZW2hSvgc5Oxe+fev0
xyhy2zBb38wyV23tlfO9XQwryHww78gSVYFuW2bOk1+zphdOvrMe/6D0nzL2
0yRNeM6cXEi+2QnmuLYcXR1bdB7TTJlNlqWPtd8CPGbaqv9WFnxSHO7fi45b
D2Zs+UnPKdZ9glGHJ3nOhhXxxxu7BWdfWVMnJlOEaEoTOf7eBcUThPzDKclP
MNp/WdX+ck33Cd1XoTuA63KLgjAMMAgcy+CWtBZFfUjXDdqPJeocbjczMad+
AMH/pxVZEZAgVEHMOr93CPv7CcJvNsRP0dyb06SbiuA03di9wPvN5PZPp5k/
mRf+Wh4fMeYJNOcwzddFt3dvGwZJujaKoZ5h6Nw/xCe/ErqPudLMID34KS/y
3HPJyn5rMmVX3Bfrlhxan1tUxgi7oXG2D8R0NyqiczEAlbNwbRJ29I358L05
dcp/c8j/2rl8tdudInT6MGAXttmEAasWWwXIVvZUG228ZWuoljBYA2ASf6YT
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
gcefUGamKMHyFedngJHWtx8DVytJwUFjBUaA+KsOxsz7q5b9Be8ZPnZCi4ax
UmbFOvTWeOVvR8t/O1T6dm/eOz0FH7dkfVL36KOaxx81Zl9uyfu8t+LecN3D
0boHs205S91FGGgxHlrGREDos53UqbatqTYWIAThvMS7IAsvg25RH02BAAf8
KUoMClOd0jSU4MjBW56y/W3qvSVRfIEVGaAEasieZ4xg9Zr9LstT4z0mB56T
Qi8Z7jO2/6XQfIgTx2e2/I2E7WKqvxUkAsM+Q3OAEYXmddHNQEoVDui8Gp6R
ipYu9XHHG+kD5ZSePDzkAbr66krtdULrQ1LHU3AEnwBkWmv+gtz5GNd4e7n2
+mL15bnyD5dqL68238C33l5ruUnpeSiaLBaMFwoRFRJkPXe6gTxaDxhpFdaK
g3VMtVSO1hXOtlfPtFXBm8uGa3IvNiKpzgEnc5BiVGfNxmgrd65HvARVUOBs
Poyq7t6wV4D0Kkj0S1Oz667bw6IfLOlvm0+o2690mqMN4AQ54SF5aFrvnhVx
e1anSrDj5bNd2f2V15uevdf87MO2/CtdxddBtzc8fq8l+wPASCNlV2bqb8w3
3ZqpuzbXeBPddl+Aa7abVxwptmJnVb2H4oW6VowPKZ4ybrhxy9kkCIzZjjcN
hxTtMVGaWeImJojearTpGSPSo3++CnKi/hCp2b3Yi81yiHEd8Hb/EI1/61Ik
0OAXVeEl5wHZdUxSJxb1SWzytXzvO/32CU2VnOcHoDjjHfJ2PjvcRbBX/GNn
N3YIBjBJEp8XJceovk5uBCndQbEDQyB9A6ZSROd1Ozh9ag24G8fJljaD4QRh
VHcp0faY5qhUhidt+yh9bNaSxPuPWYb0tCw0LAkipeH5i/I+wS5VcnLTUL+u
qfCdcZIvTdEDyd6+8o/fZv73v7/7038dxU70zgRH7UPxXf1b5laivhEpujXK
/ckw87dkWy0AOXl6Cljvze1Skq0MSCgjWEv31F5sEnfC8r1QgOvRpOfVGcRF
hdXt3jnd2/PG90jeSnqoS5CYEwBD5Gsj2UvAvAV4v2HLJVgu7lxjDRcazoxU
E72lOGe27USqzmClwCTuz8rS87zEMMGThdD8dN3zhTwDp3ratzxdAEgkkQmy
tYZsalDHccY9giqOW9OXgcksTw6SzS3C4ABtu2zdWLh9QI1ntO44CSge1dVL
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
ZCzZMsi2O6JQi29/+fh75+/+enj4dTD9UAGIO8++KPLcYDthKtfhyvi8LNLN
cGat+svWgs3CUBcvAGG4y+juYpq1juUa1G/STdt8gECU2yMrnjqcKZftrzUf
IozbCE16WL89pt6Y0e5MiNONnGgdLzHACTdQ/CXMVBl7vZ53Wrt+SB4e3/7a
mnpqkYUmMeoMoj2H6q4h2xoplnq2t06x3SfZ6GF4ywHAEMWnJamRRWMB3nif
G4TYDtiqNGxB++aI7Myc6j3Aq5CtxXD9pVn9x4BzBgbWtseOPTNHThxbv/XI
4gimH6rcmjVuE4BbWg1VYfW3VixgdWhO5h2Q+nqcB0uawBRwsWppXtbf45oa
9dFZlisf+BP2w0XPCTb0kGnenHfuUk27MJLvY7juyqL1NsZ2l+RuYgaaV9yl
OP1dtPFLYGZh6ouz6o+o3kJOqJcVKcCabmP0WSxvsyDZg9RlkLx5q4lWzQGO
HW8n+yoXjDeIvnuagzH1LpIZKsZZr+Gd10j+eyjnO2PyMxPKnwMGbjiZoQU+
Jls/NiRGHeuz3++L/seW9t+tlD+rYQ+W21Oo0mdr0CfimecWyjcO6q5iIcYd
XefDkmuYpIRqpC0I4LPI7lZodXFtcVZV8X1QVUFzTXFjRR4YVNRQldcKquzq
rEaQa5Z1OTOc9/rwv15S3Ga6yk8pPdIhCg3o1ynS5PxqbBynzVsNQ2jeyhVr
E0s4Pj8JWhgqne+rGoUU9tRldlTe7q3PhtZmtdXmN9cWNVYXQmqL62oKqqsL
Oxor4SPd2OluxnyfDD28L0Q9teD+5Kb/Txv6P9QT/00H+yfV0L8o5/+iGPyD
sOcRueEAX7FPKo0sZCYxJQfLrVF0jXO6zDpVZYGBzfDuABWmRw2pEf0S5CB3
ts9Ix1n4yzohy2pUOJxGp9+q9XGkwVF+sJHnBZnSC9JQJ8t/V7nTtJrIYSey
DSdTQBA0PZyXb/W7H1M16VletFecnuLG+/iJDll6lO0v9j3EBo9pQMwSBTpD
j1Yf/CkcfCQXREH00D3xeo84BQZskxduOn2baR3B94ySFVAcvwOzNAo7PY5k
EDYzSyGR6XQ6Dk9AY/BYJAq1AF+cRxCRKOTE1Ozg4FhX10Bra38zeKClCVJV
Ul9wv7OmaKyleq6zAdMPmWzMR0AKpmtvzjbdpI+UStFNq+QGtgRCVmTiZDen
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
QJRnYORnp9gv4WRfsGygVfeAKjVn3aX5H8jJ9prTauH+fu0OFsB+gracJmjH
oxvRE+WwnorxtmKAkYDW15DTWpHZXlfQBiqDNJSBqwqaQKVAa6wsGGqtBxiJ
jxtX4kYf65n/ui75z7joX/Xzf1VN/h8f7T99i/9hxv0P3dgf+F0AIz0i1z2m
12/ji/fJtUfLkMBCuXu2TD1Q4IBDNlgLAdqMaqFbi+rnTrdIUANaypyWibfI
eG6LzmjS2tx2W8SsDMEZjjqOE+Q9pDv3CKJY/WnV3M0O0Uan75lWu7eoP5pT
byOsBzT97sJafGjF2yhYh6zGGlR7fSxfmWETpUsC67yE4bpr3cE++qeHm7+1
KTbBRM8Xy5G/VRv2FfytWMSgNDol8A9xzAM01SBjDUFeRizikHg8gUlnMZns
pSUiGo1Fzi+g4QgCEkNGYxDj41N9faNd0GFoe09jfR8Y1FVf1ViS3Vx8f6ix
HNkDxvSCT3MvIQWI5vuItoyV4RIRooFHbdTYxxiaOpIyF6+/0cv48RDnR0Tz
eYL5Mi9azvDmLpkvYvW/GmSemZe+xHJlCP1gjPbNSf4vZKExnr1/mv8qy1FB
NN+fV3wqS6FYge4JxRcA7aDN2aePiU03kfpL09JrI/zXUPrzdP+dHsbP+ld/
NMj9WTP+7+pRZ/oYL3VQfooy3KL5GpGmwmnVFyOCt8bWAFVSodmYkoQ66ZZq
YJwTT432faosOcAL96L0mTDdZ9OacxjbTX6sQ5zoZAZvsN137btjmsigJYFM
PpC5duaZtntr/srQITlxrHZtL1q3us3p8TUPmGD8DG/4iGS6LI3X6dIDfA+E
663E6z5b1J7n+gsshx3CaAPJfmXV18wJVjL8eeJkB9sPAoTParCJ6S+Srnfi
nGeRtguk0E1qpGDJ/fms4ccLxnco/jsLpl9NaX6Gtn6y5L5M8N8WbHSTA5+z
gnWuJyxWpGo5UMdJtEt3BvX7KO0uQrrVB8R30V6ncLNLddDLjVeK1nsAfWrY
m4o90ez/3uV4CAckjGYXpz5uJYVeJfs/UW51azcnok/50Yday86YNjlr3V80
bM8IEsVk5yVBvB6rv4M1ngO8kGV/URSDoPUfAd+KowNkS/6S6XN1esD9aEm+
3rWWyF323OeHusVJiHp7gezKBrwcznIPrv0cY/qK7q9btN0kOO5gTTlLjjJx
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
McwN1HkPoNlPVMFnTJjxJMGdZzhASRLjGEc5RHpJERt58mXCe8AFkIOjmoHP
t7fX5LRV5bXXlnTWl9YW36spymmtLuqoK+lvrQb1ty6DBqhrc1z0fFDF+Szt
+8Pne39+sffnLf3x9n8X6q/21a/D7P/x0f6km/2jevrPprk/qCZ+JRj4vXbu
34yr/6he+UIy9wvZ8ufa9a9M1I8VmAByOESe9ZDmbKgBO3qQN15lWBuM85Ax
Md7FXfdLaREzP+zR+GM2S4ouiwxJIrWGdLstSRQ6+kS+XlF4CG3IXzOfWtb/
FCT6wYTwxITsxJLxFZy9WBBr9z4TqLeWkea7a/pcVnAMSHPS9JAo0a1MT+n2
waJMJS12Z8l0atl8UpSGcKKz8tQqwwrBq5rZGihLiqBw0WKFxKC3KmVanVJv
M1gMco1KwJexmWIagY+Dw0HdaFD3Sm/dTGPxeNXDuebixZbSqZpcSMMjgJGg
HYVr7YUrrfeRXTmY7tu4wXvMiULBXLWS0m+yLusCI6pYsSoyCJgOgvnlReZJ
rmkYxitYoJ1j6puABhNcmyS+3Qj5QcXM33auf2tVexZlvYm05TOSVXDr/Rnp
qVnhe/OiS0hR/jL3/ALzAoTxztj6D3tXXlpiXKCrGn//2y+//q+vf/vrz9wh
vNI2ZovAZXYQWVVKNd+H8H84xX4dqbtD8T5Q7Q5qdiCr6rw1c6FoE4w2Vg1Q
XiI5i5yHXN9zQKzIzOgIoDxI540e9rcGhK9OyK50Mb/Xsv4TjL7flKWLfRCB
s4eqadBG5k0pFIABwSd4rjsfo7mijo9ZtlY9hxhZfIRsPz5LS7e1qtmaZgWL
uMHjL56chxT9LogZKFZtdaozE8r0sPUQDng6rPsaI14r3R1jb9Z+c55IE3+j
Xb+LMuzhPB/RNn9lsexhENrL8/IfzcrfmOC9wY/V80MtREchzHCL5q9dM9wZ
YH4fLH0LEDSSo3zdeh9vy+f6+zxHLNs+XpHuYQUeKdPtyt1R+dYYd7OOFm5A
e98HSMz6DGM6xAOzZln7Y0mqXboxwAk1SpID1n2K/Qlelhqh+HIYoavizTxV
elQYq1JsdrifIhXZOvVWizh5mx68QgkUi7ITkvSSJD2uzUwZt9Y8B3Sg2bbR
zn2044Bg36MI4g3HZXkOpdo9GNFdbd7Dpz6zpz9z+T/UWfZ5hgzDlBW6D5SB
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
VgcsOxBepIzoPCWL98sXJ/D2jEn1D+ctRyRLY9zDvPaIEysF1oxyeVyaGIQb
zuNM59SJAc3K4VMJVOcjGPNaW9sx5HQpD9qL6q2wshAmBoIC6ukszmorud9e
mt1dWT7d21WSf/vh/Rt5OZnpWUfaYLeovj6iqxwIywAj4Zw3yIA8uo+PSl9j
eptYnipxpEedALO8DfPaEwPcHw7x3u9ivcEJFNlXZna/lD57JT34Krz7S51u
dZQPuJKhaRr6qCj/yv3bV69dPnX9GjBOP8y5l3f3+q2rp+/eOJeXmVZVmN1e
VdRYdA833XkQ1/3zhvtvq+b/SMj/O879Dzvqb3b4X5zz/2lG/Fkz/AdZx5/V
E39UTP1eMfozfs/PReO/1KO/NWF/ZidvSRF7SkKAOCkcazBgh90cNH28lTra
zAJ1ceZ6ZZhxPnxQjBqXUEBSHlZln9MsdYpCNbJYgyreufmdybXNk8VaFmzn
ZYkHnl146BnWsN4uTd6Wr1WKE0UmwAhW+vDuk7Oq47Kl1sBTgn0b59+DWZL9
4sBteTzPtDZq2x/RpJqVqQaq/xTaeky/Ck18ow4cYE2LIGscxFSBZDqm3WzR
y9Q6qcyq1rj1er2AbWbTVWScEo9Q4iBc8DAHPEAaacP01iPbK3A9tZDGx6ju
avxAA8BIhMF6dE8VpqsY1fWI2lvI6Mk/ZKShAtFMpccAN3mpgUXCP/4q9W//
9Otnzz1Lq0y5rF/IqNGrhtSGfleY5kqQdJEJurmV7CweEH7RhH9nlHV7wdhK
NNWidPepjmKKugZBe8zX1HDVtSxZM1VcLLVViozVasfg2p5+aVdpCI1iBBkT
5M/70Z/1Yj6eFR1f0JYq43OWDezaT0Opb8IEYyVKexchugtlXGhHvbNgqNem
5ibFaSDFRbD8EvArabiLEeoflR+bUV8UR1Eo4y24Ksu5S4g8N65+ZX36O791
jYkxVs4bblH8jwEU4cY65Zvwae3tHskRmC2fECghhYpFy5OaTQgLIJA1QNjv
AfLrfo6VrXawIrXy9SnT9tzh1ZDlNtlqGTtyeyHwnnG3dflbh3xjnBIqYcYf
MEK1QFkpVyeNW0TZahs7WAzE1cAzqSzZyw93LLgKoPqLg4Ify2IDzn2iMNpF
9ByexrfvE7wvqMJYNTGUzl1q0e6BaeFabqLdcACRb0wAbAawjeMFkbvUQ1/s
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
m2lkjTWIpjp16Ek9ad4lILslNJsRo7NBmbZmyWJ/5JXKsi6me/sXQmXkUDXC
cmPBnc6J1nEjIxhb/pDwfbTpEs1VDtedw1gvEVyX0M4fECxnKeY8mXuWaRzB
STtI/I7p0azRjhtwcCFsvniw//bkYEZvw5Xx5ltcdL1JPmFzw0yJOW6ohebJ
n5EfGxf9GLAPlr9EvFhLceWgDOmDvE+aCG+P8M9Mis4Mct+Bqg8fkRDFGpmh
ZpqzRRXDysNEhLZxVls0p8/vZp/oY75L9uYr1oeYscIe5k8mhOdmZCd6KD9g
OGsNG8M0d8609LNx/vEJwYkx/icAcoAk1xashSDxSZji7ADlg0HO20PC93p5
b4+LPplSnpy3XgIwaVLy+TjvVBPmnX7uB7Pa052M77fTXxuTfgDRXkEa72Ms
D3G2h1DLzQHhuTrCW220TwBuEcYniY56rLnRsEoxbQjEyZE5YybGVQxghnJt
zrKPVWxOAllMvDQAFAXTlyuO1Tt2iL4n/MM7TwJtOF0J2VIjivRKYn0Mdw3F
WURw5sypb6AMWXhjCV5fz/WMGtew8sU5RqSHEWyald9gODsNKZww3IfSZ0MM
Jw+N3lkHKIAshrBvsdSxOccqQuHvi26R935qDm7w/NsU3xY5sMvXhqF0QzVd
125boiZfWmMHBl6gm+Wto7rzgDJEGW9RXZV0Tw1wWABphPFp/1NN/CsrABss
XxtA+zDrjRnNGaa/XOLv1wVRqtAwQpWJND6GO+6NCI/O63LJwTqoOX9MdQHp
yNVsIKRL04Cki8IzTF8vN9ZKCVZibJXS5AzVXzWtOQLT3yLa8yn2Koa3huov
pPoahcv9KEcWzJw1pT0ONd2UbvbTQkPkWN1CtAJgJOEKSLrSL4w2AHOIcX9/
Sv8aJ1EsTnaRXXV4Rx7RfZ8Wug/ET/dTqjDeKI2DdKuz1OBpQKZghk/pAeCw
Z2D2I4wYYBbn+PES0WLLjOotiisfkKkx4Y/mlJ8hTR8gtW+SDBflS71Ub7PQ
2GnkgCXoPgdnngftZYF7MQPN2OFOER5GhUzhJ4cme6pL8u8AjPS46iLfMsQL
ts3ork7LPuKEADOqZURKxMvNGHMG1Z2rTIxyQ4XcQCXV3jDGudGAfnNa8sWM
5ARMdQyAKGlkXJPsMW+MeJ8y3ftc5XKzKFAtiDTLAz2OMGIGXFNcdDcj48rZ
s0fu3jlbkpv5+MHt7NsXHmZfKy3IzL93rbbsnkKA8Wlo34VUf3Qx/9W/8Ac7
5F/d6L84if83Kvqbn/vfXu5/uxf+t3biL5b5f7Xgfi2f2iJXeBA1fkyrF92j
AXeSe2tJI22s2SEdBaEhwWRYMGt2gDbdRRpv4yGH5AuTfNQgCwVRKyHaYBHF
coZsPUF0vMsMHufG0iRrNdJUZ+i5MPgca1ged++DjZsjtj3I6i+N+vVBgudj
hPU0yHQU6T1HCz5QLA6xooXq1QbVYinLlc7yXeP48t272NVvLCvfcENPSbpU
H8dXIAg+tKQmXEtcvQ+mMS+YzFKLXuMy6dUSlkMrdyvlRiZdTcerqWgjE6cl
zx+i3VQXZawNO1BPGG5CdtdO1hei+xuIEx2g1tKR+kfDdQ/RnSW4vjL+WA29
twDdfofelckbyjZwOkSKggnMD1Ccs+7QtNcxE3JCIl4Ei122lKKs7urcK0JA
HvVLE9YkFCfL7oF92jr5KZydZ4iPoVRAsRQSzWV4VZbE3u5J0fzrCPci0RIa
0oUK/etTyy+4IkcPQXFhgvARinGDpylGcW4jpWmixQrHU45hB3Xwh21paJbr
6hT7JtjuPIrtY4zie3DNBaankRMsx9uyxvmXRrin4MYbOMcFXrhQGG0ClBOp
vatOzmpWQRRXGTfYKVsfJ3sfiaO9nj22aZVg34eo13t16zjzOte6TaP6yoG0
i3Fl4X3ZlGA5M1qsX5/XrMFZkXIAPOjRbHIgh+DOZsTyZJu9vlc87QZWv4lS
bfQtBD90vpjc/G1Iv43kJyttz+Ek3yOU85wgWQf8oXy9z7bOsmxPq1Oj9j2U
dQ+pXyWSPVlkdzZUf9uwPyFYbGOFGnGue/L1Lul6n2oLot6clK2Mq3dAxn2S
Yg0lX0fZngtkm+NIb4npGdV9oPLscWPPpN/+6duNn686n6JV68O61ZnQS4Fz
n6HeBBHDV9mLdfpNjHat3LlOf/b7peC+NPxSoFoZQzi+oEaKoi+ZkRcWxeog
NVjn+pJk3p7b+Nb13T+/jD5zhp8b+aFmjOXiYfOsfY7vgGndmMHYf0xxnWN7
81D6o4lXIsP6pHMfZ92bV++OmPbhms1RgJEY0Wqc/xrSfkIcb7Fu4W27cOPa
LC+Sj3a8Nyr+IaA/EPOnxGiGIDWO99bNmC4iXffx3hJOsooaKMF5TqOdHyKt
76FMpwGMdB7gKb4CqO0nU7J30NZjlNAnnPBDXrhaFK9Fmy/Aze8sf8X66h/W
Fp/TKKbbI8zvow2XmcEsabJVtwWWrjbATO/jHZ8DphZ4QZbEWti+Uqb3EcNV
wQmUEl3vkdwf05x3gwcUzw5BEmsHagprPIrQfEy3PXRsoZ1PwFDtMbThFtmd
Myk5ijWcJ5jvI3QZM5LjJPWluH8syKpTgbLIfZco/Rc5M3fIk3dwvbc4o0XS
+aF/PNh+sRJZ9WlWHKpFrWRJK1+yyBNWXcpnj3jNZrvMGJQIvWiitQ/n6KAH
xzD2cpD61pzxGNlVQ7QV8kP9yuQIJ1ZODVUg7IVdgvem9IA13GRFarFAZPY/
UK/N6lexB79/7tkVaRYbgFikkgzy6f0C+uTsYPloY85QVUZbYVr9w6utDy93
PLrcX3J1vOL6VGUaqOoquOYqqOrybMd9PrSWOV1MGXvAHn8oB1cZyX0eHUq/
0KVDNughVTZYjR3THBZPL7tIW8vSlB5lYAy7FWjseP1EfS5uqJo0WatjT8oZ
Y+Spuv+fkYwUuEtMdUsZFiNcbgRznB2CSE/0lTb5M594EYLzVlCD7RDD5RHh
2wuuYkkCTnTWjIqP4G3X1ctT3HApJ1IM111EWH4giRYHdvBL+zqxA4wRtCHJ
VSM91wfqL4JGstDI8s72q73tlyd67k103p0byuIzms3uWYAVidZSAId6aD9s
X3h9Tn6ZE6zkBIrJzjt4y7VhwRHAaqHaG2DF+R7mGyjTWZT+Dlp/D6LJGuWk
Uc0d2iSGaG+d1RWDVI8GuRf7GJ8cnjoIN6Ed6Z3Mt6YlFydFnzehX+P46iWx
NrQ+fYj1/pTw7BDj9AD98ynBZYqjFmm4NC04ApWdRyjTEborACN1cz/Cmh6h
zPkIW+aw+NMe1rvNuLc6KB/NW67NqC92s37Sy35vTndmVn0Jqr1F9xVSvflz
pluDoktV+Ne6ee/PaR5jzYAVVkmX5sNPDLY1gTg2OKO8hLbmChb7jbsQYJ0w
o82ceC0v3iBLNQGZwro9a9nASgEicrQwnI10Z6M0NqZLIew7RFl8nOasQxnK
UIYSmquR7e4TB+csGzTXPpXl6UOYa8m+RrQ5B6Aj1eIs29eMsxZjnZkIyyWk
LW3B+5DirrXsgkzrw9FnKH14JrnP2/hKqAlNWJJQ0xLWtoyX+YaFrjrLImrp
QJc4sPo2FTR3Nc56TxzrFEf7+OEmgI7mNECuyRQvToaeOr37/OTXau8+j7/Y
uOArwXpKZw2Xqf4akruQ7CoAOIRk6Ty8SGrOHxCcBN4bwdMA1j4YV16EWbPF
SQg71kMLPeZGuhSJeVlyCmXJAZIscGRNanTB/Qhrv/s/d3DV8eJ1k/LP5zQZ
0lUQyHCsk/OjOV3OrPEixpm/ECgnersR7jy847rscCuVSma8ihpNx3jeRJr/
ju2+yYncX3A8BOtOoz1X6JE65wEPoERFol63ipalBvHeczPm1yjBO3hnFsn3
gBx4QAtcBmhfEh2VJEtn1T/hBppVy72Tog/A0h+CFG/MKY4RTDc5/hZOoF5h
m3KqiW4xysyEiGBDvLmhhZFOLmRCgJqjQSYoM7OTnVUNFVkFBVcr29LVUaRu
fQ5uvDcp+5AdrAVqRLLYyvbVMwIF/HAH8AGZrkKhvw2uu9lMfasW/0Ef7yRc
dd2SBCnjfdrkiCCeLUpkq9c6THsdrMAjpreC5s8xxMErexIsub6mIftq2oXL
Fz/PvXe+qiTn8YObVY8yMq+dvnfrwu0bJ6Fz7XIJVI4bfOnh/IOb+ifPwr84
Cf/qo/1XQgSM/1wU/t8I40960B8NU//bAP6jBvKtcCSGLrfOVRtnG5XgDs5E
62xTIXWqE0AjHQ2rY2BE6FkudJiP6GPD+oWYGT5iigpup1BH2YIxx9K4ZrEQ
ovweTPs22f+JPFUvitcDr4pUKzeaLVhO58VuiReLLZtQ28EAwXkB7z5JDeSS
XBVAsjjk0mSJMFlD9+cLI9WKeJ0iVqyNtadeKr76XWL3m4h5dYoduke03TAs
DcS2aN4ozRflWHwcs0Nkt2sNaoVWKHTKpSY+28RlmDh4+QJUS4bryTA5BsSe
6QUYCTdYRxptB+hopr1yrLUU1F0N6qyaaCwCt5TO1heiOooJ3QWU7hxKewap
6zZj4oGO0SYVlpH56WRZrtRca/NBIqsYiqC0a/R7CPKD5V22f4UqcLZQrHk8
VytN1VTX+/3eyfNiQ5dvFaUK9/N8NQhVFpDIAOt0bKD0S1Ny/4DMVy/2XA9s
joU3NdLgMNOQCSZ/5PZjt7bVC7wsKPtTfXJYlugKPzOEnmuRxjScpYriaoOo
roFln80qX2e67iuWOwnu3BHZF3DT5Xn1ZawxlxnIUa93K5J9kngPxV6oXQFb
NokYUzbZ94Aeeoh3ZHOiY6Y9Ni3YIkg0uJ6hDKsY1frMgrMJ5cxDe+7OO85M
607QQ6UEzw1erEW3hWDHywXJPlFqiBK9inFdpgdKhfH+5C+MoZci5xbfuNMC
fJWO5xOJX8k12yO0SLYSiJyxm7jAMXa0TpzsdD/n2He49ido8w7cto9wPqEq
V3p1m0OK5cHDjiSeHCAQ4T2XkdYP/E9ZrgOaYnVWujYsTFXKVkaka22s5AN2
bMz4RCBeH+Nuggy7jMCudu1leO8Xa09/t+PcFrmf4LUbXZoViPs5z/YMK93o
wHtz+IkW8z5WlwK5n8HXfr0U/krpe84GAhHwQajxckVywP2CaX/KNG4RAweS
2L762a9DL3+zsfSlMv7MqU51U723Fal+oBhVq33W3Vmc9SrG9CnVfYzmTAeo
Sbk8qF3tDR6wAs+4lm04O9BA8F0k+K/yks2USB7UdkoZg4eeKUShHkb4FFT/
BlT3Dsz09yPC74ENHxMC+dzlXpS7fN5SwAofPgjP9xdhbUeZgbtAXZNct4nO
S7LVCor/GsL6IcZ5HmX/iBJI4/uHZVGwLNFCsmVDNZ+sviT+/Pc7zhUczXF7
SvIOXH+GH6mRLjUJQ2V42zmE/oQi2hHeIy+/kOtX2qieHEBYCLYMWaKEEzhJ
9bzG991Y/Vq5950boGXg32FN6RjDLYonA/AIivsh0faYFWsG5G6a96l5fUyU
mESZAZe5gZAfNxjKw7wOBewRe+QisfccEXKXDLqL7bqN6b9rnO377tWTL3c2
nkYcKa8kKqVFzdKQTr/itibtupTLHHLoPV6tNSJX+Og0eyvR0knxdQK0gNA/
RBrTEdY0guews5hkqW3BUYVz5o6rjqFdmZTwY1a8nuhopPurfS8Y698l1n69
rFsnKBZH3Jt0s4PIlw+zWb2zveWD5TlNRVdrHp6puX++IedUU+7J5pwTnQVn
egvPDJWcmWu+DgxYy3UmtJo6V8uerNBOVysnSgA6smqgRsqgBlWnmSs1QGqN
mLa4Dr6/LNpZUSVtCCd9UI/t1dAnUdPVCzM1JHCZnNMrwPWRR8u5E3Uy+ICe
MG+n4D0iqlvPlJoQUl8T0/5YG0emvgru/XZNtoiZN+eQPAUIY8aM6jRgf8oE
khNsBik/ASk+ta/CzKsUYaIDpPwAY/0BzXHauAw2L1Mp1n6KuQ9BLQcPZQw1
XBjqSYcjSwf7b/V1XJoeSB9tSoP0Z1PJ5WrXmCI0hVQVI7S3h5ifNyJ+MCk8
QjTdQek/Z3kymPaySfnRKWka0VEGM17uor41Jjg6IfkYrr0NUdzrphxheweM
a3SsoXNWXjyjzhyRXh3gnuTHe1mBDpTxVi/jvTH+yWb8B3WYN8nOXLLrLlSe
PiU4OcL+uJ/6Kdpwl+5s4vgGx4SXQIpLYGUaSHYbosoZ4BwFeIZoLUcbcmaV
F0Z4R3oYRwZYZ6HqbLSpcFjy4zb630/IPwUpzoOVN5ihciBc4KxFaNvdUdGF
BgKAUh/PyyolQRTHMWNfo6++8sVemhVLs1DdnXnTvcM7AFPz3GgPzltGjVTj
vWWcaMvhfZKLvdLFXlmiTxDokoSmlbF5RWzauA6Xxaao9nq4OgOpygHyqWhx
iB0cpnqHaf4BiqeZ4ChHWwpwzsoh3gWCLU8UHJBFJzjBBrwzH6q6BFEfg2mu
IHTpurUJ+zbBkqQqI0MrL5i+dYLU2yENtRqS07rYuMDeIvcMLG4Znv5iM/nS
6n8iZwVLSc5HgOwAkZDhrsNa7sxpvhAlugNfyZRLUPUS3PN0AYA3aWJuwVeG
cuYseKt48TaK9zHGmMfyduFN5ST3Y6ShfFpxCesoxbkrUI6icdWpCfV5ir+F
7K9hRjpFiwPK5XHDFh5hfEAJ1GlXScLgCDdWzwiWoe2X2eHHgOrOKC/M6zP5
iTFg3mrwbyAsj5ixmhnN7Vn9PbSrFGy5qUiBgQGEWYK3AO0+gfe/g7W/gTW/
Q/al4Zw3x5U/RrouAKVn3Se7dtiCQI3zYEG12o80nwYb3iX6rhLct1nhKl6i
ZsF9a8GTBgTeBXv2pOQ9mrtYs4SeEH00I/4Ibf0ca77O9JQqlyaEkXaSsNZt
Qi2ZGGElycKAigFsmBvVEGF08Ah9dpw8OzHeVd5Sm5dfcKN7qsi2QbU8gYF1
1wAIDzyTSiLjQAYUxXrJrkc0dxXdXSYO99I9D3oZb4wKT8xqcidk5/CmzJVX
qvBTsX0TLjjsNZAmXCyRJMtR5hNI00mk/rpvB+2JYxiCts7e/PQbZ2/dOFvy
6FZ5SVZdxYOaxzm3r566ePZI3oMrOh1JyANRZ+p2TPj/FaD92bvwz1bMv7ip
/70o+Vtc9P8kxP/pJf1BNf4H7fivZcNfs3oOKO1hVIUL3SoZq6R0lcGaH8M6
K5jgfjEGzJqb5KNmeAgwebqXPtfJQQyKcbP0uSHCVBOV3SXTjzqWRo3JVqT2
40nxaxTfcfs+FGB+fuwR3X+H7D9JibxH9L3Fj9927sNFsdY5zTGc9wQzmseN
VTPCjzjRR5KlFl6smB64yQlla1P19u0WVaTOtAgK7zKWnig9mxhVclAY7HZv
YOO7DM8i3B6eMjixZgfDZpFbtWqzXOmUy408hp5N0dCQOjpKR0EYqQjl/0vS
WwbHkaUJu57p7unpngZj221mtiVLlmQxMzMzM5eqSlKVikvFzMzMjGKyzHZz
98D2zO7Mzr17Yzfi+zbiuz9uem9E/qmMysrMk+953+epqnMOco4600Oc6qTM
9lBn+2day7tK0kaaSsZby4fqC+c7q5f66+caC6fqMifL4yA1j7BtifTBTMZ0
ngTbwGFlU0U5XEseSfZAaZ6QmicHwbcru47MEmKJymySppKgrR+h3hwkXiBr
SjvHL09AHjOkw+4tvv9QYthCAZrD8/cApVMIaEukSx7p04SGpZ4cQ7RBH4EI
grVYadIE6qLZjQxvsunSGoTwAdVeS/E0eN8pyY4eiDJ9TpaxYi6a5MWN8j6B
qE4LfHX8cDNE8wjIMMvaVJQhCSqLx9sStQdj+qdzhj2YJDogCg0CmCRYbyS7
c7HWwlV3CsFVJdpe4G2+XwgSiHzT02XAzgiOlhVzHiVasmJPQ7vSWGv5y7ob
FH+B5hlUuN0p3Z8V7cyRQjmc9QZ+ZEK40a8/JBj3yUAisr5cYEcytE+Hwz/J
RTtdWHcCJVCMcd9Du2/T/JWMUIX+Bdj8etb0HOF4zfT9QLO/JvPXarlrLc63
QqQlDjDW99zizVrQfGY6RAHvkewNsNabhE/r1c+nZE+7KOFk/navYHue6Gvm
HQxLN7HOp8K9Pxpf/DW6/r0bSEqAl4W/FzlfsdUHS6y1TlKwGu/L4u9UA3cX
+VGtPhg1vkQFfxFI1+cUu0O6l1DWZqt8c1xzCJHtzZhfrR786t373v3yT8GX
f9re+tG89q1RfzAtiLS9Xyd0bUx3sKLcGVnWn4FpP4fIf4vWXbe/WJVvDcnW
hzZ/NK7/ItQ9nRaudeE8d1e9j9jhFoIrT7w1uP6DTbm+gDfl4JyXp6VHZqS/
n1N8CDBSL+vDIcGJZUsyNdwq2pliBLqprlJ2MI8RTBWuNWDM8Yvqc2D1Z/9D
SvcnhZ9iLWk4523gQai2Qa43VMUGRBqdXVLd4Xoy3M+okuAwQpsyLQLcv4C9
Vod2PCG7kuD6K3DDeePB+It/UT392WjcnSI7MhDm6zhrHN1RyPenwFQfUMwP
3Yf47e9VJFsOXHMHa364qDpLdhSR7IULikvKbQh/bXpBfo5irNj43iqN0oiO
boT24Rz9glxe7KA2ypHF5LFbqL4rOOjjlfF76IE4wmimAdr31+/33z1df+E3
Rcx8JwdrldKCOkXUqAjrJWGTwm/VBHxGm0+msNPEfhg/ME/3DeKtHURrPUz7
aE52i+LvMjxFswKNK/pssObOpPIEzPIYac4ju9tZgXHzS1rkJ83+3zzA0yS5
KxVbU+a9RW+EYQliJZoFyEx9d01qec7Voienyx6dr06+VJNyuS75YlPqhf6C
W2MV92drYiBNCTM199EjxcSZOiGsSwJtYs2UExdq7Ca0FNXGXyhRQ8oU8xUm
bHdEu7gdIL15rls3LetXe6WwTpd0RUiZQM/VLI7lktD1hIVG3HA5e6ZNhZox
keAWEtLGWbXKyDIzgm/r4bn7fS/kOz9Eo987+JHpEeENrP09JjECjTRXO9nW
RnDkjPGOTQvPyQLTms1Vwdrw/+jP2WX51yRjOcHYwvPOsezTK8RqgJF6a692
Nt9ahBXPzmYO9MeM9t8b6XiImCvC40to4iaxa4LhaEdo0lD6tN7Vo+3YI1Oc
LyfYv181xvE9LQOM06OsuyvaihVDxhDr6376VzPCazBlHliWNc27JwhNSqMw
uKpxQVI6zk8a4sSP8W4w/F1oYxVIemeIcbITf7x8/rddxFNg+R249v4U59YE
/c407+t27Icrmlzlztw4L2aA9nCSlzIvyZoWJnSufj0vSVy11U6wbvQQT41x
zrZhP23FHp/kP1iQPYHps+YUt1tWPxlkfznCOUtwVFveYIHTYe2pBG/NtCCt
h3x9gv1EFkX7v5FIQ1BlCBP51hZ8a1JtYeCacqKzVfuUqNhZle8urfqqsM4G
qn9QujMvWBvnBUfV2xDVBlixsWB9RjY/JXK8QxRbC83RSrZXI3WpM/ybEFnC
ojJ3UVGJNncsa+uhihKkEaCRGpSlfl6aPM17yPUM2Z4Rmd5OgM8BRlpUPYQq
YsCyh5K1EfNTjCoKlocHom9Itt0Fjr2GbqkWuac1oSVtaNG5RX7356ff/vXQ
+0JsOkBSnA3AIQL/PMvdBnQosq1GtjltfckVb05hLHmyTbj1NU22DZZswujB
Rqg2juBsJHuayO46lL5g1VIB8BUrXIs21pC8ZUCiRttLUM6CBf3DacWDFVMp
2plND42QvfX0YKn3BwHGUbygTRavI8TrCwz/ANXdMyu9ibKkSrYmcdYKqq9F
sLFE9nUAzot1lgBvwLvqkda6aVkWwl5qPGQClwEoKtaRi7anUPyPMbYzUPWR
92uE+YuAQwBfpoXazc9Xt35WKtf6JGtjgmgPxvJ4RnpsWnaSv9FieDX3/icw
dy7aeh9tiQXsBm64hTIkyCKwCe4JhDKeE8mlOIsNT2d0e0tURx2SUagSD7tE
yJCC6Bdgtdh5Ow1hoaAQ/S2EyT74eOdIR1FteXp+8ROSZM73LYu/PjQmugkS
Hdv+s8Z8wBKtd2ONpSAJ8ESGV82ZgO8DJDZMvUyyNSyp0yd4t/HGav0W3H6I
sxzOKHZaeOtJnLVEZigNojwHlt3E6rMDr1DuLbhA3TUFKkpKvpaeer8oP7Gg
MKmvq661riwr7dGNm1+1dhbYXezp6crZjsyIaOHPFsTf9Yv/ZUH/pwX3nzby
/xvi/58g+z/1K38TDP9NOvwzu/cdqfNwtcOzUm2EtdMGyhFtJVO1ucihZvRE
F3aqf7C2DDrQDhvpnu+pW53rJIP7ieAR1EwPCdZL5YxJLc1iT5bYX0Qw3xvn
foDQX7W/wtM8heKtanrgCd55A2b+GG45wokkGQ+g0u2uJf1ZiOE4wZPP3xgg
e4vxrlR2sA5rfYAyX2O68w274+b9XtV6vesZdPsH+d5b2w//3HnxD6/lKV63
NqcPThoCs5bIgtWH8oW4dpvErFYYRVIjn69mkKREJB81ryLDAUbSk+FixCxj
YYA61/sek+YGF7pqWotSOsuzOyqy20oyxlvKJpvLRusKhiszBkvjZyofrTQl
0AezuXMlGkIrn1fAV7ezrHlztI/FlkGVH4YUlA3DrhAtJTB58pI4h+XpHKZf
HKQcQwrTMaxKBCPPGIBHX2pCLxT2pwSqrZHqKCFYcpiuZpa3mh8sV0arRZ4Y
dThb6GpCKO/OUL8eWrmock7ovCCeCXDJbKQumxJoprjaoeoUiP7RgiZtXv1k
mPlgWZewqLpLNudQXPnj/MsTvDiirZrlr8Loi7nhJiCK+IFOeXRBu73ID/SK
o8PKvW6S5wnNBzRvCz1USwk2CNZnLK+olmerQAawv0XL9yZx9lJA28mBepKv
cNV3F22/SvTHSXfGpXtDwp1xZngQ780XbvfKdsHsaDtvrUu9uwzUbt3eLNvb
oNmGBL8VCbebmWuZq97YFdtlrCsWQCysI5ERqsLZUlR7E4FfOL5fVoEPBDSE
5MsEDIW5VrpkjqUG+4i+ygXtafUu1PmOp3jWR43U8Xb+54ugfRBwwfrXM5Ld
UWawhx0dtb8WarZgYv/Yzo+BZ398tf/j+o//9vb5X8KeNzTp9gR/Z5S+Xo3x
PgakI/CNxvOtjBIo5W10Ob5D8ILt4vV2/YslSrDO+goHsB8z3CrZAO//OfzN
v+5+828bh7/4tn60el6w1dtTQMpV7vfpn08Ev5PIt7vnFR8vqj4Fi4+w3Smh
b2nq/U6Wr8T7ihZ4J1HvTEo2ejD22wRPDM2TT3Pnhr+Tv/73ZzhD1YL0KkR7
op/5fmLhEf6RfsaHvczfTEmPQbTXFuSPKO4mZqCT+/4/6gW0QArenjQp/mRW
+un775EiXTRP5qzk9wxPAzucu6i+xAlVyrZGNLtI+TYcYb0HVhzl+PpEW31o
a+6k/CzeU4ty5o8rvlpSXyHYCzHWeE6gTL3W6T3EGTcXmK7sRe1JAITEoU7t
djdM8QVSfVrgat/7SSuOdqAMDzCmmDHOh0vKhyR3wpzkK5q7geEdIViytBHs
1vc+WYRAtk0sieNm6adF8nyvsE2CLcBP38BMXEUtPYRP3EYN38cNpBqWu97u
WZ6uWZ4HTS4l3c7CWuQAIwmiJvG6VR4yyl1aqceqtlmkRjNXaMKrQnhxGIrT
t6G1pRhj2oo2nerpZXgHgSCEqpMHeWeGhEeXDfFYS7lofVr/ghH8SWt7JlXu
LSLMGSD5PW6oRr8DkhjAAvO8yoPkyxampsrqa+9X5lwqe3y2Ku1KUfyZxvSr
fQV3B4vuTZQ/HCu+N1Z8Z7rq0XxTioY6FTGs8tCdOHA1DtaoUiyK0E306Rzx
TL5oqthM6ApoZiNe1Mtnil03zsmelCN7TVywWQbDgOshU/mwpTLMbCVhrIY9
0ylHzJioCCsVaefiDQKCxg2Tesd1G5jAG2P4GyvAP3BDdhv9I7QpjeqqE0dn
8Ib2EdqdGdH5Ue5RiOoKz9+h3l4SRkbI9kqC5fGi7DxMmbyszqPpxijKIRSp
fm4stbP2SnPDlVlQJmghY2jsUf/QjbGRRzh05cpKFgyXJ7KNajYmiLZCYbQd
o0/vwB0ZZn4wyf7s/ehFS1Mn7lQL4qt5Xh5MXTTCvtRPPwNRJiF1taPM+GHm
LaK9DWfqhMgqIcrKXnpMD+1hH/UcxlS5KM/oIx3rJx/vxH5ZsXBkkHZ2kv/1
AO3kKP3ysjx9jHW6Hf8R1d1B8/R2M78aZCVP8vNnRCUT3KRJ4X1msBdlrG9B
flS3dKQD/1nd0ifdxEt91JvdpGuzkvgR9tUu0okp4Q0AmUjOFm54CKktWrUW
0YI9wGWMs9OQ2kaOCyYNw9HKRqF3yfpMaNrjySNogX9Wv4cBXhoPuZLNZbyz
WXGAUO6hCLb2FXURw9kjj0L4nlnVLs72hqnYXFpRlYBESRRXJdNXAdfEjzC/
7KecHKDegCoLKe4enL0dZaxF6KvwthacvZPkrp/lxwl8E4F3Mq5/HGXNWlIm
Ex2NOFsJxlym3l20PafJopOWQ1DkLdG0O8QGurmtXB6c04aXxdZpW4T8/KeN
4DO1+wWNH+jmBwe5oVq0NpfhKRGE6zU7y47XdGl0SbgxuOosZARbdS9x3ChI
tAEB6A5pfIQwp1H9jRR3C0ybverKhuuTUaYclCkPIGqsrWJKnDghvgc1JmL/
/39oWxLx3mqMIxVtj9McoJeNGcOic0R/o3QbDKRHVqgPqr0N1d4kuUvh+nSS
p47xHqh6R8VnMfYqmmeYtzHFW59d0tZj3c2GpwzlHgbvLAIYieJu40VrCL6z
SPsHeHcWypE1KDgH0j5CWkskUfD6D3JVtIfuqhKGhwn2NJDqc7jxquE5WrE/
hbMVkX35KFMi1V0l3ng/SwyQ6qnuinn5GYa7nOQsQBsK2Z52uquJZC9Bs/NV
/DELa1FDmHMwYWHRapi/qkTOYgdaaTODsz01A635lRUppfVpYg/c/S2R7G6b
lT+eYnxqew5Wbc+BZbGsYJfu6aLrJZvlqlw0JLbiP8Ho8si2snHeKYS+WLmB
ozvrNVtjluejyt1mVjieFrpD8ydjzSloXQHH0eF7joq8RFtC42hKdUnFg/S0
uw8fnCuueNLX31hVVRQbd+vy7WNE1rzBRunpzW3MfyCGdf6gX/lX7cI/dZD/
tCD+t4f0317q/wkw/ksH+5U3+D2j7QWp8RW5Yx3dJBvPYY5VIjuKwE3FA2WZ
060Vo83lcz1NXeWFI00VfbWlraUZK5OtREg/ZWkCMdeNgXdyZItsSyLBfIpq
vyNdryLa0iCKM7LNdqIjXRBpoXsLuOEyqjcda70hiNSYni5LNoZwnvsLuqMA
wSr2QVRfDdGdTHA9RlnP0wMP9Qfdke8J3ldgx+H82jvxzjfBlz9bA8/F5h2S
5yX1xa/GzTcqUxBtDM+GttiHL63BgM6oEqk4TC2bbuQx1DSiFA+VYsAyLMTK
xACMxIGOUeb60SOthNl+7FTvZGtVa0lWc1HG+60wvbkwtaMks6M0rbfk8URl
/FJ9IqkvC2Ak3Wq7Xjck0Y/jlQWDuCNIcZbAPWM+wAs8nWhdNU5fK/TP6nYX
MKaEMdpxKDNB65lmaQddOyT/M542ilFG5ym2GowxA5CUOcG9RVniiuo2wXSW
Zv2DZj1R5C1bkp2Z4X4C5d4jafJxsjyhZ/D9XKaaR0h7KdactWJMGBF+saBJ
HOXFLCiSJBsjBMcThPoKzpI0K70GkgGMVKvcmDMf0BxvKGxfG8tfKN8YNe1j
TYcQzc4skIQR1nMA9vCiPerDZXakhxedAEzE+1bgfyv3vOVY30AYwXqYIZUR
rkPZUqH6zymhi+j3MzM0Kw8n2Os99Egjzpe66svjbjSQQ2UAR9GD5eK1McXm
mOMZPvQN3/2cLFivo/pTMc4LWNcFlP0e3hO36n1E9OSyArX2bxYCv7Cs3yxz
16tB+qN4bwI70sVdb4fokxG2KnKoBmmPEa0NWF9TpLsTwqcdrM1a2f44N9Ir
2epWHfTKn7Zrn08DRuZ5LbUckuTR+cBr2c5P5pd/dv35n7+8+WsYuE1eZFj1
cpGyVkgLVkZ/0hz8cU2+N070p/HfzxhTodjtsBwiNfsLlECx+RnF+pYu2RmX
bYDXv7W//evmN/8WWftW6n8tdL5adbyFmZ/D0ZaHGMt9wz5GvtMO0X4MVXwO
lfxe4q/xvSYKIjlE+03NVpfrBU8UHuCHK5GGm0RnDMH6kOkofffrs8iP1iVZ
AUR5Y5T3aQ38SDfl837OkTbCh92MI7PSM2jzA7DsPM78mOYtpweA1JRB8hUv
6W9PyI8s6S4wvBXC4ADWchei/I0oNKzaHkMY7q6YbiD1afIdEDs0jHLeQxhj
eNE+/kYfypEzoTi/bCzCuiuhlttocwI33ICxJ9A86XhtnPPpgmFjTOgvRhqv
oAx35Gu9tkMwyx0LkRyhGDNf/dXhOMQQLHEI/fUpwaejrKMjjNPD9JMoQxLD
MaDdGbbustWbyzRXC8+7iFLkT1P/QBc+MXIr+OT8Vci9lclLy9AHsOkHi/13
2JASFbIt6mXuRNXPQiYTB+/jEOxyQlBDD+rZQYPAqxU4VWKfUek2KiwqgURH
1Qd4pl0W09U7L3iE1uTzg33caOeKIW/FmAPRpM8pEuCWNIK7hOJpkG2NG19x
dIdInm+e7mtFmFNmZNeAMDPtrsjdIIKiD83vJjAHqOxhpnBsZDS7JOdiTvzJ
ooRTDZmX2zKvdGZdARhpvOzeUOHNruyrY00JEvYElzYwO5i+OJnPpvcplAtU
WBV2IoM9WyCD1lro/Q75+GYI/3xfuuXEuCXzavwAHdpiEi+R0O3wpcoVeCVs
soA4VU+f6eItTejISzYmwiMlWxV0TWBGFpxwveTYnnGN+6sAx06LrwxwP54X
xLK9vbJ1KNvXN0K/2Uv5wxDrk0nhSYA9iPYyjr9VGOom2bPA0ssQaRpUWklX
TJD4fWR6B3gmq73hanvLtfHpxBlw2jgoqWPkct/EnUV4DnQxCYHN46j72JZ2
tD5TtjkInGKYdqwD87tJzmlhuINubayBfFEwcWSCGb8gyR5kXBrinF/UpMM0
FS2Ys12kcyv68kVlKVhatqSpG+TETslSWrFH+wl3hynXmxC/aUN/0rD8u2rI
kQnOtXnFtV7SV134U3Oiuz2E07OiROHG7Jw0d0h4o5PycISfOiHIHmIAtb5X
uDk6yLjTtPLBCP1s08rRKsiJaf6TUTZAR/enpXFt+C8H6Bfh2jycuQFtrAIE
cFmZgTfVrTo7ofKqBXERVl+PVrWSjf0c11jwOzZgBKotlOmAYD0kOF+wHc/F
9jdcVnCMH4E43gnl28sQRQpEHgOUYGl4Xrm+qDkgi9chq+9He2UuyBJRhswl
VdwY+1wn8bf91BMgaQJAPhRPF8bciDTXoa31VN8wwTlIcLfC1VnqzcXtnxwA
ni1p0xDaKvH6Ai8yKoiAjc8prldK3S468B3F9WJFEm2gOdOpjjJ5ZETo6ibJ
GyxhdPSNwvGUoNtZ4Qa6AJZj+crg6vu8QLP3Dd/5gkF1VhOt9ZxQP9Pfg7YW
cDcGqN4O0fagIDpDstchzHFYaz7JVYsyZ8ONsSDFnWV1AkydirWkAgQCUWaP
CK5OK66TvO1EdyfUELtsjwfr7yDNycLoPMJSOCw9tWx7JNgCAyxEdHRD1Ikz
khsI0xOkKYvm7eOvTeNdrd300yRPF8ndTHZ1Ez0ty/oasC5l1d5MD3TgXdkE
XyogvMKNJoLnGtL2JcxxfEJxvJlyZFR2cl79gOsf873iCX0VHH8+z9+F1N9d
MVzGO2MV29OSTRDOWoY2JbODDdxQG8qQRXaWsYLVcE0MRHGVYMl5z6je+lVT
AeBfGH2qQNe+4WaGlSTaXIcOP7shJZpWQcKFQQF4TLw801WW3VGb3tiY2TCQ
SdB1yXenyO52gBKR0nhZpA9jeDLEOCkJI7b/FI7+YOX5+hvxJ8a416SbvTB5
KmCjdG+d7mAFaGrbAdH2bJEVzMBar9L8CaxAMd1Tibcl6tegwTcY3dqI2t+F
55R2DaQkJV+5fvNYfXt+fXNJVW3JjfvnE7Ov2cNsDHmosORBbsJt1GDlN5qV
Pymm/yIa/nfd3H/Z33+n9P/Y0P9UzP9M79pGlgYW89dRdfqZUmTDI0hjxnRN
xmB5VlNeaktxZktZ9khr3UBjTXdtSWtFUUlG3GBL4eJIE3FxbAXcjUC1Se2z
BONlljuO6U43Hoxp9obBii/w9hsk96P3oypc+cL1OsXOAKCxqu0JQNtZgUaE
7eYA7whEc0u83S/d6hdtNnHDFZKNJvlWBc2exbQVcB2FikCPe5+09loSOFiV
+7vJ5gysNsO6jXn2Qyj8XGXfha3vaV+9C4WCer2Sq+CRjAKaTcw1sBlyHJQF
HecvT+vJCP7yJA00iBpuQYy0QAebIf0tAO91lOc3lWQDW0lafH1hRnVWYnNx
Wm9F6nh1MrQ+ZbU3kztXZqH2RiN4rr5zkZs7xTg9zTyzosqTr8M4vmasvpxm
a1WFkLZtMlFfOM86jxY/kdsH+I5u49a0yNdL0JZLIu1AGhxjHxvjfTwtPLWs
inmvjfKP0OojDNtZrOr2BPt386IvGc7SKfqdUdI15dYwxV06p7w2KXkIl+eA
JFcG6SeG2ednRXGGF1Oml30owwW4+ixM/XDFchuivEYw13peKnf+uKHYgLND
xWjrVeVOh+cNHWhe3cGsINoJtxyHm06xwoWAAqj2UYKNHuXOjP2Qf/AXh/u5
Sr45xgo3wgzJK5Y4mPkOWPsJzPo7mO0YxVci2x+mBBuYm/WEcAbSmYAPJKEc
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
Am3Jo/pecO09DOmTn352/Ou//1tgV8rwNCK1mQBjALw3Y76BtFwalh0FK45P
qK+OK1J7hUcGRCcR2psY60WC46ow9JC7WIB3XhUs1Sz/YqW7a2d0NyCKmDFR
NBCYbGctw/qc72kzv4WQ3RXs+Q7Xh1nOfB0QC5rNEflq0wg/CiK7AJHHYy1X
KI77YME+hDpGPN/68if32i+y5e9NYmeX1DfNCXWQnU2AgZoz3ETo4qeNUZ3U
o0Pc0+q1JtMWnuQswtsKREsdyo1BsrsAQDV+qAGmuUC2v0DqnmGMlXBFHnBF
osXmWWNOH3//lCp5WHJ4zpnoekf1fRACc4MdeIFzpAC4iHFkYy03WdYGxfwE
y/kYroyiGHMt6yN4w22UOruNfGpIdARwkShNIkqfKF6usb9CsLyl4/LjWGv6
lPwi3VztWCJ//NlL0uXN6dKnJFdaKaARXozQ37j4aRRQuX76/vC7hY9/35iV
FAg9z0mmG2AWCMza10s8PMQ8BpedmxRGQrhxjtDobz8t/vYxuBdWL9rwDiXM
JEJruTgOAQKfbBkZedHc+ST/8TW6BPn25+WtD9bgDke7BFMvIxiWGra5yrwM
JqmzkbJUYaCHqC+FSZLntBkk/WOI+DLd/hitzMPos9juJrzxMdUD5MqkPt4B
uCVf/hIP9BszkE33VM1Yov9rbXyRbZni2sJpF4cXv1crVkZw+hxFGIwVD3aM
1xJYUzhad+9EcV1f1hi6AIrLY8qfTeCz5/iNNh/z0+vA316vfHbwjPjWqbqU
9oeJVXcvlWdfaH5yq+FxWtG95Nzb6bduply6fPZ60uWU5BvJKRfr2/JVPvhv
//79x7+EJa5elOASlHXUuzb08Wfjm+9VJN59vqpSanyO49xDslKHcBc6Zk62
o2Pb0WfnVA8BUiodBjVhjnQz9yM0d7j+aqT2ypzl+qQchFAfVS60GZfA2vmW
P/2y9Off995+cQidT7HqpCFGBMF8nW5/4N5DiX3gLtJhoP8puieAQatBnmih
XkKoUkj2HLrv9rTudD9nH9NZwvHnIxSJAm+xOtTPkk1i58ZwSPDsZE9/a03d
s7Li3JsAI50+8V10zOlz52Mio059XYx0/dK16/HXrsamJZ0tz09tKL7ZVJIG
7npIJfVOM5qtm3KcrrEflw6MIN5UVzkd2c86NiY/CNdc6GEeaSHua5wDdRDP
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
oRhlLBSGBkXbQ0va9BbC6W7OSYj6lmy7135MlW23ktwRjNVMuPEMafUp1ZXN
8hR6P1Pdn5dJjmTBVrFot4m5USIIvwWgguLLIrrz6N4KhD6a7i6wfxoxHcwZ
9sEAVPx4U8P1kunPUoVn2esAC/1YnVt7OOb+zABoShaqUgRm6Y4CmPa8/nDc
fjzM979ShwvNB12KYCVvLRdjjUKbYwnOaJY/VxTsJljTydYkqb8Pq37OsBTK
tiqYq7lkV7r+w7IkPC3cb5cdTlO86d4vmJ3frGRbKd4exfXlM1eT/F+X9/5k
D/1JCgAPe70AIDe0NUKy2Ykzp9Ld1URrLT84BDdkYD0vlO+6GIHXlPXzSDuI
6nkq3W5Uhns0+/3KcL/ucJDiSWN7G2jueM9PZNdP/AnxrRVz3I/nM79RgOIi
OvKYvpxFVZQqvGQ8wuk+QJnrLTRfDd6dT/PncbbSmJuvAFBU7Q16fmKKtvum
FTcBKeNvtIuDbYb9MSCzKHerWP40oveJaL3Rvr/seb/IdL8G7gIsAy1qI4wf
YABlQQ1nELYLcNNtlPUOf6NWuFVx9Hff3l9k8mCr+9OodX/I93nJ/g5N8byi
+WLZvkJ9eIznzeR4E7QHDb5fkO6PcPVGx8Z71oc/GUM/MwTeJq67WbY5zfAV
E1wVnM1p8d4kION4SzrJGvXud9tP/zgIf7e6jhbdezPunSmhuYiufc3zNRLM
BSRLBtObwvRkWI4m3Z8WZZvVWEsUWHD5x4Kl5scLmotj3B8vbPLWG6ThhSV9
xiDnfi/98rT4qfHdjMw3qfRP0gydPfB7DeDrIneXenN8jBQ/SIxcFDX0UxJG
CYlwQRlFOeALC/e2ZVRic/fQUxijgCCrrRp6EVN2YkGWgrAkjQnjwZKCJkLi
m5GLFbPPl6QTwk0WfwsF5lYhZT0L3HqZfxanrQdyuvErmr05hrN3aw8Juo8E
bhAhCZNUH0hTspJZzZsFU+qoJGKIFTMpSSB5S1lrVWRdAU1bqg70Av3CCnQy
bE0URckcLhLKjqU7W9XvIDBTxowyEWvJ0uz26g8GBKG3woNSuD0Z7S4k+mrU
x1gAjTC2FqKnBQAz2QFqQpI2qYwFFLiPfRHnylEeAlQfvyi/ffCdpd5ZRhji
51SPmcEO6nrnojYFCAL//l+//6///t+WTYzQ2q8NwNY+06zHMIK1kOapBPI7
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
OhpB6h6gTXcBwZdt1S06nmPMz7DWZ1RPLdr0EK68JPC2rP2ipi5Vzorvsy2V
zkOkarl7+6eI5y1Lud0D8Il9b+yPf3//7vd1eWiUHSznRpoAy4YzpYbei5yH
pNUfBaYtCNkeJ44WSzcKBKsvOMsJ5mMIABvitVpO9LV0o5Gw9BipOyOIlJiP
xlmBR5qtPu3OkGYLYjtG6vY7DYfd7nc4y/EY2fOE6L286LzDjeSq9ysW7Y/J
riTZRqtqu02zVSePNC7t93G86QjFJZTuIt4Qo1h/7no/s2C5xfKm7f5uEK+U
4113zCcTvNXMKfUlij9etveavf5Mstnq+I648otCtT2Att4aFZ/CGe6bt1qd
Jx3h77H7/yoLfD/rPAQ8EUqzPg98JdNer3w1lRdNxtsefl7E+w3K8WZUuzEJ
IC7Sck68ATK+g1jfIQGyYtmyIkcEqQMMF9wEuIu4dJkZvIG3f8nyJbG8T4mm
e9rVJvlyzcpH9uFvRu1GK80DMGrcvOU2zZsOgJBio4vpzmQ7ylXrFcJAsWKl
3XY4Z367YHtLYPsbdTtj0lDvFO8a05IbPRZKvV1yf6/UPeTaJri2sAxtncgD
+v84eq+otrY1UVO2tzMOOIAjDjhhAyaZnHMGEUTOCCQkIRAoJ5RRzjknEAqI
IHI2OIdte5+9T6qqU3Xvre576/bofrijH7pfupdrjPmkscZiamrO//++xZrz
166guLO1DG9KG/tiF+cq3VahXEABEX7ClMR0g4m2V5IgTLOKVawM0GxNY6rs
YVFcG+lKD/vq9FwDTlPVMXUTpYga4N2mWhNpM0UjmuhJa6pmc3L+s45m6ZKE
4NZ3fPESWrozINtG6XeJ7k9T7OVmCO8aQFC8uc5JSxLVVYXSP6N66gieLNFW
49wPnWh7iBioGPdmUJarUM5ksj8PQCB2sHTS9bxbfrFDcZm92sVYqYfaruG8
2bIdGGupmu6vYfrqRpThti2C55A2vVCH87ycXkoVruWa36BEa9UoS1SPDATT
Xe5XHO8UHR/QXGeH6smzJUOS29OuusA+f+XTlGIBMnNA2fhNo1pq1662sT0P
ec4kjjUbKz8rmyvwvaa8/sOtm+8UufNtG92zewzdThfA0rRA9NRCFG8lS7Te
xlwoxs7Gs4NF/LUcui/JsI2RrVVOBWI5Szmj5ttQ2Z025sMSzPlGTli74Foz
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
t4Yl4XAtCO+8w15I023B7a8RW39I596y9FvDxu0Bw9agYXvIuNfDmHspWy1x
vRkx7jXzgi9o7ifCQB3BFk2wPmd4kseN14Egplrrmj/SzGxPcmwv+6gXMaIX
mx8Ue+/NyrkmqavZu8WZ2+Jpgk0UXRJOVubdl7PV41wJTqtnGxxk+xpetTDE
0vWIdBiecBJLaGuFlIHra7th9TBKWTv22cDUI4q6mGEp5s9BuHNVJHs8x1PI
tjUyzKXi2WKs4kkv+8yE+QIQoIw71VMzVyVz5Zt7nP13qm9/dVjWXtFMp+wb
LdbVbq2/Z/9X19YX89EfM0tv+YtH4rndcfvi0OIuwb3Wt/3F5nqNBOQ3+JvY
/ZGif1Ph+NBtOWw7+k339ZN3xj0Y2sKuHbIcqy08TdqU+o7AljxtTZ4yXBEb
Y99sy7+vu+al1KmRHmhjY3tdc3VpaVFOTgu4ubKkqrqyqqYaXFRQmp2RX1pZ
xVISsNL6LtJzKDNpkBNL1Oaw7GVSX3cX9U75CCAXcaogkm6oqYbf7KImNmJj
ypHXiuAgtDx6VPSsiXKnlf4EKc1BK3LJtoJB4YO8IVADMQyjzZQsDGDVFT9v
AgM1jZ4nK9Kwokd8d8G44kHD5Cm8MptnqxuaetpFfc6fG+mdSqtCPATQqHw4
OqP1enZ71Ainvmk0N77uTEbb5byea0X9d9KbIhtHM1rQOY2IrDpYbl5jQnFD
el1rUXt/FXSkqbj6FbiteBQNl4olUr5YzGKwCDgCHAkwEqyjGdnXNQhpBBfm
dVWVwZpre2ryumqziCONTbWp1XUplZCEjKrbsTmXU0sfFjcmVXYm5dQ9flF0
+nn5T0Z6Xnn+adkvsdXnUxtvZrdGlXbH5zQ+ym242wRLboZl9mPLq3tf5jRH
JlaeeVF6oqArGoLJy2y/nd1zt2goIa0jqhTxpBLxKLPtanHfg5aJ1G5yegX8
bk7faQjx8RA/rZ32tJ0apwnhtCHaIKOqgfa4cuxx31TxiKiukZzSwk6uJz0b
kRUJFklEG7yHWzIoyBkSZ8NkaUhdxpgxb0xTASQvzxvxlKOV4i6btKc3Tp0f
kj5lz7f3CWNqiOd6xKfRpovAOuX4XwxJj+Msj+Sh6vkP7LWPJt+eBEhwvvcc
gR9CsBcpVpH+L1zHG6x6ecJ9IFGtDY/q7lCsWcFfScq1GrY3EWMKI9vu4MyX
UepjVHcSEDypzny6O3fKG89dSOIHy6cXszj+vKnZ7DHjjXH7JaInijz3ckh7
huBMmw4WcgPx0oUs4XyqcKF0zBQDpoZBWBcnbAUNzGsALGEs0bxgDrCUSI5n
7JkS1kySbXcSiEW2IyQgTfz5TL4/Xj6fT/Qcx9tBwU9Q+14Rz3tq2hNp2Ch0
72HXfrNZXvcrNkopjpveQ+iPf912rI+J5nJQ2kiMLQxr+1lSTbCYIFp5pt3O
0m5UWA66hIuFlNlHglCp5TXBcTRqO2pf/oEFzKsXCIP+VPcm3rzUrFvI5c7c
JZpvIuUn4JJz/Plsx9t+rrdUtJxPnY2c9r3a/N2hWW/H2W5wFh6SvGc5Sw8U
W81EVyI3mLH4DaPwlSj9z5cPmUJvDNEM4s7cE8/Fz+0hD/4sXftGkS3UiJeA
QaugBV5M+wsVS2V8V4bWB1F4qy0bnRxv+tTCHcdrlOstkeR+CVOdxxiuSxYK
Tdstxr0Oy0Hbf+5fY2//ZjRsFBhDKfvf+PPvobrV4vlPeOC20pVa6+tB/WYP
1ZmEMyfhHDGiUJNhm05zFhOdydxgnfEtSvHzzZ8u5kLqpDnatA93H/GtW6NT
2jiK9Pby6sRv//6rep9Imq1meJrx9pxJUzbdnU40ZymXhojqcqqxyLFD8r5W
OHYZ3JkuojJT4RsOflTPfiRMe7sw6iyGo4xhLVH4RoiKXOR0IlqajdZkYa0Z
I6oncHmEdGnMvD/FC9YJlhr4AajtDUEYapqwxQBDwVjKGTHF9WvDtfsYxxuh
cgfODoGHlZHN9HDxEjTwQwwwku4IJdmCUYKVPZprQ+aoPv2VVgWoV3110lXA
C/WQfWVod2q7Kmx8JtP4kS3bn2SvtZKCZYKdPsNrCne5ctQcw/DUGDbR+o2f
ew8n3M/h+is492PibBxcd5Eym8LylYuCXcBY0dxZqsMJ7lYFyfpi8ZCz931W
s9HDW06nz8XZ9iZYs3GihWKA5LG2uxO6a7b1/nc/PLt/0jBmsrn+EuMWbHaX
5N0V2raQaF08ez5XsFJgPBxwfeBa3hGmAsUkb47zi3B6DcyaL1n8XSdZRY9o
ounufGA2arZGMcasNk403tbg+2bwfRPjrK9a2Cc6aAAm3UFrr0BF1xHyn5v0
9ZuMPuHTWtLZYUVMM/1mCzOygRoO4Eo5AVRFOlVF/aWSfKqBEdklfIbQJXZw
bye1g5Kbz0DGz+BMZ7nLV1jBJyR30oTxRRP5VG4/qApxCoILJ2hyTatoqr4W
Qrw6rosn2aqggggAcsievBFtfAsHNG45DZOfhkl/luTung5DGC4PqS4CLARV
3gQYqZYOAtNAfbyIEcnDTnZ4Of5ENhJUQzxDmXmO0sU2MMIxjiRmoKCHfXtM
8QgmuQ6TX+ibPj0kvjwgONvJOTauj+EHWwclsSV4UNXkuTFdmmEHjjPmDkse
dDCv10yeLcWAyrGgChxoWB4O5H1A1jp4oDb+T0YatSTqAfaeH1FuYeRb44xA
K1yX1CW+N6RPQGqSeLPdAKvTHeUcfxvT1zUofdLAiugSxrD91bpNlHShh2DJ
mA42sf1NPaKnCE0ONwjW7sC4cwWMmVeAPvQLj6E0Z9meTPF8F8dTiVadgnJP
hD5i/+W/vvn6Zf39r6Zf/2lh+ZNctvLzIVivOGxQETYouYJUX6W7EtZ+F/7l
//i+9/vM/FuFfY/BW6wbs96jutJMm5ilN5L5I7Y4UD0ii67FHkcqI4S+XPNG
w/wH0uIXpm17fO4NybwLnZqJRahO9wlO4SwP0IbrOPsLycKg7xNh+ZPetSfS
bFcBcVWzXaffGTK+buEsxIlDFfqdDuFSHhBJgOit3qgj2h7QnWmAhGJ0UdL5
bvFytW0brfSDWcacHsoZsjplbptClSdBmb9QNelzByi5v0o5D9Ytol2bQteW
dILVOcVH2j18jQtN0ZcQTAACdY9z+iGd+Qh07eAQuL2zDjJY0DqW0oF90Um8
1zp+vQsfNanIli+1cH3FXE+lJtRJMWWMy2IQwvuD02FEZ/h0MEm5lsjyXHBu
9u+9UVv9XfYViMD1WO7L8R0QrauDlhDizR9Luz+sm9/Fnv3JlY+K+SOyNtDu
3RuzLre7NnDyUK79fXforyrHZ4Lufb7udYNiqeTwq+LHl6B/Dre+iwtswn7+
r222mWu8I7OXiKwpOPExjbXw84H9MKBxs8nI1rq2isq6kpqctIyygqLO5s7S
gvKqqpr0tJy8nMKi/LLSygootnVCXC/wdFN1YDD2+rgqk26tJuvrWvAR1ahf
SEpw6JNyQlzdgHrWQ8vsY+RXo550Tz0fl77qJD2EEG8P8V9CeYn97HiyrQhr
TC9FnajFnkepU9RrCLq1CUK4WQ4/VoM4C0aeb0SdQ0kTO6YiSxG/9DNfYkRF
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
RRexsbA1sW4os7w3Pr3xfllfIhiR24DKrxpOywQ/TSp6UNNW0DNYX1mVkZsT
U1jwsrO9aqC/S8DhCxhcEZPBJhBo6EmAkYbbm6AtkB5wfWNJYXVeRnlWcndd
eW9DRUVW0lBPNXQYXNORnlJ281nuZQCQ4gvvJpbfSm+88yj/1OPC4y3YuBpE
dC3iRfNYRi08tazjeXb9vcSiS/GFp4uaonrHy/onKgoh0S/yT76qOlc98KKs
+3lKbXh2y/3MpkdZbXfrEamFPfcy2y4AhFkxFF3c/6QCFlfY97iDmjwiyq8e
u5HeDSpFnoVyMgiadtUiuY2SXomKmdCCJ3W1LZT4auyTekpcn7ykk53VPPWo
TxA7JE5CqdLQquJ+XuGIrKR7Oh9rbiGYeojW/hF1KUyVg5Dl4/VFMEkMwVQy
LH4GoMu4+Qpl7rlguUK/M+F+J3QdUsmAOQquyr0QhrWC5sidmq2luHNoMyXT
gVrtJky6AB+RpBCcCaSZV/a3RMcRj7uYizZe6Zceg2tBosVyINEsvxcr5+Az
+3jfewJW+5Q3/1K4UMGeyxOt1jN9VZO2OECRuIF6ti9/wvSE6onGW57SXDd5
3jveI7JwvmlYf6pXFjGkegqIcwv/eL/mFMoShXcmIAxhgzIQ11Pm3mEF3+oc
+yTlWqNmu3nSETbpvEnwXKPPXp1yP3Ae9Cx/EsuW0siuU/qdovmvZMNmC3/5
Ad1/3XbY5dgiAYlJGCwwbpGInmcI8zm4EYR3P6AGzlP8x/krt4jOq6yZeOAC
+uxz88HwwjexJFSmWKlb+6YPfeHrl6rtK03BI6J0uQRtvDckP0G23SM5ng7L
zyL1xy2HnQu/8nVbPRPWCKLrgSxUL1qs5C9kSEJFTG8cxR1t2hsAgi3OGoOU
nRnjnRBqk2eCnZ6VAcVMmn8T/elP7ndflg9+VRz+RaxfLZcsZlkOoN7vBNc+
duWLXLfYbFseVwbTuTMP9JslNE8E3nXW+rZTslbD8D81bY7pNupZ/od0/+2p
2QjVarT9MCv4Y8T+oZDtBS29G9EtNqpCZY43CNJMHNWdzJ2rEgQqNCvQqZkC
qPQByZ7KC+ZNWqIA3DIdjgB0JN5otb7luT8TmXO5opUq8xukentg5i3587+9
fv/ndcU6FO+uIfszEMY4qq9fvDnMmGvUrsIc+zj3a+bckfhnZfNl+syRTb9D
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
oap+PKm4K6aqP7EXmVU3llDa97gTmUk1jDTPZJX3JcYXXX5ReC67/lk2KCqv
Lsq9w9r4qiKr+lrG0ytbYwegDXQB1u4w7G1tb4ZW9XIpETXFpMGnYa1dg8VN
PUV13QVwaieR29E5kF9TU1RV86qiKrcSlDOBbBxFV+Q2PXmY9XPlaEL10NPc
+lugvrjczie5Qy8rZ8rSWqJKem5PEROq+693wVKnaaDWyaTchmspVRfSm66y
dP1EeRVKlg0U3Pq5R9FVEdHVP7bh07tIaUXDt162/NQ8+7wXlzE0X4qS98xK
uutRGWWTD+qgj9qRWY2zBbnDT0GzL/CaPqK+B4ROzpyOTR65WzT5VLQ4qtpp
hsijMyZ/qkCd7+fcAmQNb0yZEiXmDv9cDb82TIsVhsbQxrYG4ot+XlYN7n7R
9LkeWiLLOWw7IOk3Mc3ES+WIK020xx30mAlhMcVeBpFdJltKWd72CUEKXFWN
tRaBxdHf9zkNdhKc+YD6iTf7pOuTtvcEwUoXkKA66Vfh2mKatweuzwFIiWBt
gakK+tgJI+K4Ttbtbs7tUdHzOW3OuPjlmDhpWJg9JEiCKJ91Ui7202+SzcWi
YP+8uXxIGDHEfIBQZXZRI0tRp9p4dwmubu0hmb7eTPKlet9DgydY7+dJfhhE
dCQijTeA1DRnyAPLYtoZj+a9w/RFSBc7toN7Y1j4qIFwpol0Dq7NxBtzRljn
EeIn+19VrrfzyjUI2hQDU98CahnNUo3T5XTRr2D0LwB3BgAJob82p72DNycL
Qu1Ec5F+Hek9glo36+Z4l6CCmxRHgfE1Akiq2u1G8WJV6B1D4KolaRO0q6NU
KwhjvsV1Z7iPxrVrVYLAc6TiyoQoYt73xHg8Jd4eoi6mkfxPWCvPaN4XVHMW
01rgO8S592d0a6DwB+LH/+7xvYXqNyq9B1BzeELp6xUHC6ThBn6ohGSOpToe
uo7h8t1y0UaB/LCbu9VB8CTOm9KV/hHFUq9+f0q50c0OpZF8N78/omJ7RvJE
zugi+OFiTjgWbrhM9l2hBK7JD9OCf0AkBy8x7ksI01OSo0y01iNYqyV7U3kr
eVTfM95ysvY9aGEl8fu6hXv584s/clbv8NaTWOuJjs8zvm8o4Xoxb/UFw/dy
XHTNuIs7/Nei61eO5YSmO0QSXXkzuiiMK5vgLyQtlYj2WhG2q+qD8qWvbPFW
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
/HDjiOBgFTTFuobw7uGnhFdH+McnZMemlfdI7q4hyb02zo9APZNtz627/WL/
jGXZTDJP091T/DAZbWmYUmcPCR/0Mi/KI1Ag2An6PIajiebqBcvLR0S3mvEH
pgWXCMaHSM2Tipk/t5J/HOBe7mWcaCce76SemzUV0H1djFD3nL+xi3ekZPqL
LvKfSdbrykSFIPqQ6n5EDmaoV3pi7/Sv/3hn32AA610WnxCGO907HOsqigDg
h/y0bqFTu/hqznGMbE8fU37PDmfJYvWWxUHj/FBwB6qPd1mXIILQK1GwIvEB
HFpCLW0qNn9yuNfI8niPKtzqXJywzY/pwq3m5SZJtESzWGteGl5+I1v9TWTf
BLO8FTjD7T7yPmCJiRPF0lgX2XMTob8oivUIolXcQJ40kmfbqEm+I7qXxkJr
2OQeTx58JAze/nS4qrVak5xlBkqh2tPU4FOi/1YP7ysAUfTr07TYPdVmr3C5
gjp/hZW8jPF+jnSksKIXA+9nFn4RRX9jWV4P0YNFcMs1pOsy0nGbHX3CCBTq
12Z8P1Gkiz1kfyEheAdmuQa0cmGiYf43uX69m+JLk68WBN6g+YHr7MgN/Va/
IPmCvVBNiuRSYsXc5Ub6QqV+q5effITzXMIHTys22gUrNbrXE6LlHu+vQn58
nD3fKljsmrHcZs+XoO2PEJab9h2MdQsNBLh4oVK5Uk5zFsnnB9VLnbOWY9LI
qMDbqIu9Cqwid351BnbEwtBAB+WrWfWzEfblfvoxmPiRKjHC87VNi65R7LfU
0fL4Jknvm6CqSznWen1sMLo9F34tsa6DAUYCCBanqBC5JlUJyCAvdZz3FGvO
BqkvDck+R9pPSJbr5EutiqVedqyKEXouW+qfUtwfkhwXxOp7Kd9hlelrb+SL
65LoItOXhEs9ryiWJzPyi0x7mcDZhNOdI5jPwVWHSLZLxqVRfWKK7X2C0p0l
G5+pY2PSUOuc4RnQ/bnRpln7dYKvxPJGpNtDY92ZAPkgtDdnFKkgyT6AXlQL
HSRbzqTkRwCKTMsUkuUF8CmgnwJCQXS/oDgHCcpaErf897/s+TYNVEPXMB1w
kH3tpKM4SxXFOTDEzegV/dhC3j+lvk8J9qKdxUhbhm4T5P6ZJl+D09zPwdKr
KFkelH1/cO7IOOWqeQG1+7cFuLSisP+HaX4W1VZLNdUxrE0ISQ5eW8jQFg6g
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
hfEakjMDYzytS/a8/WN142ff5q/mjV98psU+kvkBcIHA2ADBsW4SFfMQ4XwD
3VqljlZi5If4tuqtX92OONIYGvSu4kPb9I//ueHdYbC8ZXhz9qhoXxf9S6Bu
yZYKU5JoW0W6tkbV0W5ZoAmnumeJg3//r9213yyxn/gUZ+a4MoXguoC1Xjau
ojne7inZcfsWYelXlzzSrp8fMy12WOY7DNFmgbeY6//0cCDQC+bM+Xhr2qzh
qiTUQDWVwtS3Rnk3huinVMlB3y801w5ftYAzrOKU8xC2tXOCnJnXsq8NlUY0
ZAF6ktu9/27t1wLf4BDpXgvqNDtYolzsx1nTwarj09LUXsaPg/R0qq1JHcfv
/LFoXUZD5ce5wdo527M+3plJ/fF+0Vm8K5PozO6k7a/H/FiO/LaR9v2A6I4o
0adaHGV4qlULCMcWGyAltD5rVveQ4S2dMxXBVWkQeeq05CzwgzBWQ/U/nNWX
lE4ceIU6T3c2gmXXx/nXCcbKVtzxUcaTMUYN0z4icI1xLZP1ozlpz4/eqjrY
THioXUaqEii+HwC2/FlVrioC0yZGMZoMjq9dGp7iOduNfvTapjUUoNPoPXzx
tMo8jmU0j6Eqp8lVDeMP7pTsh7Nr6NqmAeyr4rbbxU1XuyfyM4vOj4DrRTr0
CKzKGMIT5dXdyLQZdjGCXwWiZ2vDMKahYVr2hOgo4AUbgaD779M/S6G66zDd
I7QRsKEGfrARJi2iO/qQmpfCwLgsiFfMY1jeri7S6QHGcaDv6xdR6nk0190H
E5f1ka8gpJmlo0drEGfLoGeej5193LpvlPlpAxacrHiCeaOHdr4CfIJirSRo
09m2Z+JoD1h9HyJ7KrQN/Of//t/OpBQqz6rDfDvneOF6LzRsUnD2FyPSM1Rv
JdJ2dtaQBpbfhcgy+T4YPzg0Kbwxq37C9ZZbVmmqGKobf04dRUTeqnjeLoyu
EKnNAfBSv4JwblNC78WG9T6U+RzO+oRoblYmQTB5YRP2ajv5XCPu1LSilOTu
6qRmTqnKiJ66Pva5JsKRAc6DDsrNbloaQl5qWFaM8e51zaW5lw3OeS1V3dCO
O4W1F3g+4HRrOIyhblycPik/zgpmLPzCXP1dSnWdn5SmcH2lDFvvGPsJ2pA/
IboOUdyVR/r5wTq654VlheXbsNBMIxPscn4YJotCKbZ2nKViUnyTbhk0JWR0
+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
9j6F+r7eUB8LUX0Ois+HUhh7WapqjKwIr30osdXzFA8Y7HyTqcLufeIM9egd
Q+EUVKppJnGvcOUPMNR8HL1QbMknyQ5PMj5j6wBKqRM5bpLUp/nWZzj1hSn5
ZqL9MsddapoDG+bayaYDTMNFqjYbq9tC9xzXzpWr44/si40E/fFexrd4+wm6
+4LYV8ZwnsHodzNdBRgDIAHrSfaTmgQwpqMM3z3DAiiwytDEHr/4Le3MjEn9
paZUr8BexDQUmuO9EtejccYGpXM0usLmOy4nV3GLbxy2NEK/MAlEBNR2rJ+3
E6U9itXmYA05a1UFws1sf6VmbnhIuIXgOE90X5Bn1h6NhX/j2uZp6vQwM1hI
8ecgLfvg+gOC0C1R8A5IebxbcrmNXSBO1VhXhuSzraRAKUh/AOfJhRh24+wn
mOFrwki+OtkA0Igi1i4O9avifapgE0a2nqc+q3OUGT1VGleDI4YAZAUsu4R3
FpHdj3sEO1vZWRDNHqz5rDTezbbep8uy5xc7hbKrXNVpnacByjqKFV8kya/i
JKcY5uOAVZx7646/FK0VqDffQ/Py+yHHR1E7MNyjWOFxqaNa75rgKdp0jj6L
c1Lna2AaL6HVv0Jlh70rAu8KTuEvIyi34BRfyh2FjmC30VmvtT8S6W6IzLc5
+kIk5+AgYsPA9AYAgAXS2yZnezzNFBtqiOpfxynbkML1Qu2x//k98zwmFfHv
otGnZmi/DKG2QGknRvEnCaLH5R0/P+3JapvOQnB+EvuKRNFaqOFMM3lHj2Bz
O/ebNuGnM+bTHF9P5K3Cs8xn2qtloTZFsIGiLllZcQT9NKt9eH7ZoPaPjtAO
4dUn9f5KdxjlCIHUxr5AHCo11LMVj3jax3TVJZa5muWowluKSM4qlPWSONYb
fmdwLFDsiyjfawHNUQbT/DxE2wIk6j7aF3BNrn4RmEUkmObmgPjbSdUZ9TyS
6GhBWApI7hJ2sNXzVm1d5QsTXdYX2OgfWt0CzLLEif2hdqwSjIsw/weDOAWH
aK8rkyhJcowbfYayFIK1e0iey5J4nzTVyggUAVqgi8MiH1SaDJbifTgmywFJ
zgCyKI+S6a5hvK1uRv1IEBiShEa5gWd4x2VJogegrHHFOlHkUfANC6O/zvAV
yRJjADmjTQWKzDRC+VQemeY621Hm7EnVaZK3gxXta2X9Ujz1WR1uWz3+q37+
ti7G5iH2liHyNjB1j9TZK4tOIxy36sk/tVH3dvB2tTK/bSV/iTMV0p3taMOz
GWWxODxMsdZ7VgTBV1JRYErhpQSTlsic2pYm2fwEMq8YgS0zmsEifY09ThN5
YWBFkSZO8L4wed5qCba2ZsauTs4uhK6cYms3pNDOMDwSxQDUyrBUTsh2k2w3
VLMgQXwQ4E+48bZ+TuR/q/OuasiGGqTqbOaNwRCFBlZpljk8P1QP05+qxW+a
VJ8bVW3G2HL5yTp+ariL+S1GdnD+Hf/F32G6r4HhLWG7KsWRNrq/AqQ50M39
mgk49EjDpPzQlCYbablZS87qoH2P0B6E6z7FWL9Bmb9mB6/rV+HChX5Oegxi
utzN/RZw68ElA0rzEKp9QHY/o7nqjBn47EeDJoFj2FvY/mq0vojiuo0yXsQ5
D6vn28bUu7sEX0zp9mOs9+Cm68Oi02O8fXL/2r7MAJgNKr4b0XzeSv18SnYM
Zcolee63sX4og2cVgz4HSfMBuRzg7JiR5Fkz0PnfrdYEASTIa2UdqaceESfG
HM+pkujEqPIUgGHApIUZzwOcL/KAFOEp90uGOoIlaJ+Q9MWGCB6tvdeA/QKq
Og6TX2onfA0Sb4BJjxK1hVxPNc1yH6c5N80/iBCfA2CJ66ph2mu1ob7oknz5
vSeywHMlqPoAypAYxWoK+rk76hCfNyGy6iY31I5vImkeMo19JFM13VJDsT2e
kp2B6a/P6C91s/cS7EUYc540WQ1g+YwiRx7ppZgf0R1FcGXuIGcjTHqca3tq
CmAXXhqTC7KFVdXzFyF7cJzleghXnRwT7aa4iqDKSzPSy9rYjD1DlLhrwLxd
UMFBkvIeWn4aJs8ReHr5/naut5lkLxrg/1Q+8+Uz9Hc9rF/YrkmqvWZKugem
uky11kgTnarUgH2FxHM3wZSHJzR7p015k4YTWM85XqyUaCsA7EMLI6tPvB2k
OQczlU8ZrtWQ1oOVN3neUZj0OsVSrY7hZZHRGcPP3dzPmklftdLWYUy3k3/Y
xKFBVWJKnBhlRDpEi30ETyXEeBhhvoB3FTICNUDEiSJD+kXomOAMHrDb0VaE
8hd55Gnqg8S1ROP5noDkW+DG/TjrLYKjjBPqAskK+/mHBwXHQZKzUE0Ox9HB
8TZSHY2aNIHpGMCpHxhD46tvIoZAM0FSwNVVudMoU7ILqdjJNFQ5M9TMC7s9
NUZQn5b7a0Wueon/kdTfbE6ima4HBMtxaxzpiZEUrrsUZb4qUos15BLs55iu
amG0DsB4sG6HeZnED3QB/aYKd0deSsMvZPJ4PS9SplkYVM22qKKNxoVpsusC
y3tTu1DBcVd6nvP8r8m6FEgQbF67Ye6u87zDeVcp7kVi6C31/5ZrK8E5C+Dm
4jHNDqR1lyharUogaN5WsOEWxdXlXWL9/d+Z939nBJHH1ECRMNArijQqMs+Y
vjsz+h1YyyngCiTzY6T2mjQ46J7nUa3tDGfzuz/ir94mdQFceFY1v2qVOyel
nv7Z14Gllxa5tik8N/3nf/7z1b/mXr+Kvl2N+efI1vmZ+FuhMQ0WRXtwlgK0
9RTGeoHovCSJNanSvUAwNvM/a2ZtIvge4HwnpclJeRo8Y94B05/lhKpZgQGC
5RbfWwmMwqT44Dj7O7apUBUapGmuQzinhc4yk39IZrjn8nbanO1Y5vZeQtYA
YV0/kELRW4WGh3Zv31yK9XKRvRRQrSY5dl1HxN0dtvXadbUmTadEc1OlrkzF
mPEQw2DsUBir4Ow8qukGzX6XayrhKgs4/BsWY6dUky/Rl7AV99GsE70TG7rG
v6AJC1iKQpWjRunNh7K/nmb9Ayc7TdPcoGjyhLYipu4BWnEAxP+aaiiQBlst
czPq8ABVf1LuuGuPdhhjLSTjMXWmRx6ulPpugvnbMbpTAAGiTXsF7iqp7wnZ
dJyov0B35VGd2Xx/sTY2zXLdE8aaPC952mhPaF4890Ym9l5Wx1q0iTFZ4KE6
XCfzP6HoTvDt59/+hyuQxnPMx/wrSOcsQZ4sV81PM5ONk8YjPcxPMOJsdahJ
HqwR+esgyuPsYKl1lUh03Mbaz8xYflDO9ehmJ6mOqwzXHfsSN/6H2f5qWv+i
QTk7oEp3032XeqQ/tYgv9UnvMgMl9udjupWuCc2lLvGOGevRYU0W3LqbE63m
BHJ5/jx1okoYKdSk+pWRPpbpMtdwQai8SuX/avbcU1tqASPGtdeMca+DVbfQ
1psgzZEm2lcz2hyqq0SdgbPsVyDUT5XSW2ZTjUxfqjKPw9g5Pcgt0+x9U4xD
YOE/hO7HplQ/zZILjH5s3qCxwkYQRzGk40zRTRQrV+K8z9KWwKj59uBoZl7g
TU3LveVYVd6I4FuBr9maRkdXmFLHHab+uDUw8eKlze4ZVZjuYViHWaoLInMR
VVqEpt7HUQu44psma68vhOdra8iq03hl3jh1xxQnS++58f/+R0InaRRyHxHx
+QOwT8DUH8eIe9qgO8myRij9Yf34N/3IPQDGUAxXJLGuCtiuZ/gfekXbG+lb
2yWfMvz1mgxYn4Kk/tBo0xBJeJJsrupAnDE7sQ4HhcooMdgQCk8/zXSXZbgj
MFwLxCFOH2w2bZudVTp802zFXZbiwSThAE59hWsd4vn62P4BQaxPO4cU+3vp
truaKDj6m1oU7Omn7mqHb2bqb40zDqK1eQT3aXG8A7lWQvkQPfiQ4X8GZDlR
qlWcGqL5GgTRAf8HnWmFTvM0KefA8rkB4yIp/pvTtcrkhaqMK6TQP03CxIg8
imcEqpnBKrS1YES1keC9KIz38uK1ZFfRNH8319qU/BgE4IoVLZ4xZY8rftKk
cL4XBlUSJ4hMMD3j5gWWYRYFcB3aeUIUbyLby6Y125juInVimOq4b1icgqtL
YPozQGMIrluD/B0sxzOy5SZEBSTGo6K5EXZsCGq80Uj6eUJxrpm8oYOxsZez
GSzZPEbeTRJd1nmnUapaqPkmSHW7nryxi322h3MQJDxBszbwPONs/wjOUC+N
gybE+ZZ5hjZBVmdmfC94Og/TGmXw3CN8Wa9Y0WsyTdit00xuTXhWIXT3IzSl
qti4a9lsWBCirBXPKFtryBuGJQUER4/3hXx+xRaLc30pDt/TOiz6cVp5WhAA
cZP9WE8p1vUA767A2ypVqQm2pw4sPSj3glxzbFsGI/b265IworW8mbprSnel
mf5lP28P4A0ls+AhwWYwbffz18bX/8wwo7fw9uOq8KQs2sT0tKJsF5pIn2JU
pdF3YmWyH6a9PCY7XkfIGmLlSIPlHHc2w32YE9w3odzYxPyenCyjp0Bg06Vu
1vfOOOrDf78hGqtIridEZw1S+8i5SE6+8OLUT0iWh3jjfbQxH2s9NyU/SfLk
KDPdI4p91djPIerzbH8TznFjXJIN0x43JqZA6mxAmofV34zINnVQttDdRWR7
NcVT38PfU0f+smTy62r4frK9Bqt7OC24yLbU+Z/LRK7OduKBDt6JKVOJagEk
i/VgDaX3Jr8EQHdGVzihOSD0tUKV+zDaAtsCWRbpJBlL2JZez3MyVH6tBfdV
P/uTCaBD+D/jdNlQaQ7VWioM1wPaR3QUDPH3tJG/HuefIehKGdbHGM0FSaDN
/5zqm8OaA8PAIff0yP09BH1uI/yTNtzXfbQfgHDgOp+JPANY1WNptJdiqX0K
/npCfI3haWC4q0e4x+ie2xx/B9NdyXE84AO44n4i9tTi9ZfHRBsnOEe6CT93
En5gGcs8UdzKsu/Db8GV5aA5jsAr7jAtD1XhLoQsH6u6rAi029Iojq2kE/c5
1/lQ6H42JTqEVhYIvG1sRz3QJJzhEoC1DYT1LYStk9wS3SyJFWyclJ+hOip4
wTpJtFUcmDDM4RDawkHR1mlNHjDVZwxHkba9CNuxcdUvXYINNeTPGpgbwYaL
JE8jzHKmjp4Fkl6FGwtGJScx5key+KAgXD2l2d5C+7yO9Fk7Y70i2SkNjzF9
1aqFEYK5i2xulSQaCa6LWE8eMXgbpMwVRBsZrrrgG500CO2k/YNsK1al6zQx
kG1uShJsEgUH8LZLZGu+yFfGdTWzfE/J9h6MvQpizB+XX+xi/6Of9zXL+UAV
neB7ByRhENvZh9Hmso2NmXdKfbxHYLqncTRGZjGGSBdWf1oZmkp/cPmXCGzL
PYr2V1NoDJifkSW+NY7WRDoBm0wBjEZkzL2EU4Ra8NrbovBjtOXQiHQDwDCK
xZ5x1dFB8feGWTTP1zIiW4fU5wpcI8Z5pCDazAo3yGbHDfNowyxorbBnssow
2xd6wfG/wKbfuhLvLPYFDMtbJon06GdnYu899nmuOc1M/WkyLmEFvmF2pAph
vzcsO0tyPKB771D9lRj/Y5C6BOV+JoqCF97GwgsigJFYgRKRqx0IE5bjMcr4
C0j/DcpyGqctcGSY8ki/b4Hz9q+I2o4U27sWP3j++OcHu4fsyxDfvrctLzvf
vIr8/jGTmTcZnbDZV+p//vfH16+Xfv8r/Oq91R3B+zL4lT/dskiNOF5J8xYC
hzBWQbLflad7+PEmlPNsr+jIsOosxnuJGrhjfoWjh1pA+gNTxi2SeJttmUh2
PBCG+miWqh7CNwzNTZmjWOasZhkaIPxfwbz9HFMlV1/ujPeanG1E9u4B6mdD
jPUdmC31U5/jpCdUxja3B/L6pfT1omopTTeoKvTyUp24NuTst1qe8iWXdcaa
+Qgm6UW6PVNCbRtZWkIBDJe5alp+A83/lUY5KmXnk6hHqNIDXHUOnnqwF/zV
QP8WmbiKprlEtR8jaQ8hubto2vNI3n6MfB9CvpdkukYy3xjn/oCWHzcGp/wp
EddWR/efZ7uuBeaGFhZ4OucTknK/MFKlStYS9Pug7H3GwCRVex6rOqmO9xGN
+XDdbnHweuYlzBNvMURr9JEBgfmJMt5hzqAUoTFTAm6dHRK6HlJ02TLffU8G
rZ6tmNJ9M85fP/8C919/LbjjSKLtsC5cZYi2GpKdzkW4OtpONV4TmCqSq8Tg
nEgV6JgRHqev7fLTZlkiqedGx9TbsfYSzRJoWrtrSLCR5SiNfqCGXnME/sfc
0BWe/5F5Ee39gNYvwsmWLoypyPIcClgt6zJIlqkkOgvH5Dt7RFkIy0FeqFkc
v0SxnwHytthbLHBes8YHZI6HBl9PapGbiUCSiWFXBO6OTrB1FYANGddcGlWe
heoPtZOzZuS/4k15Qm8zSr6/fTpLxLs+nxGLtFUSY7XU0I5gnqgf+7Ibu4Vk
vMVzP0CrTkwL93RDj82QH/mS0OScTO8cZfAu/v8kvXVwHOe67qskK+SgYydO
zE7MzGyZZJYtW5YsWZLFzDwjjTSkYWZm6GFmRs2IyTI7cZKVZK2svc5ee+9z
7tl17626ddt1qlTzj6Z7uvv73uf5PTP99UvnbPZG29xhVHaKOzuvcEcHyMLN
ZOVhtG5dNTlnRLnPlILYMm1AuEzrKUxNsOaW5NZQSzA2+nzBBHKyLz5qdUMJ
jHNw3BoibXc6QUomuGZ/LVaytp38DZq3g6L8i9S5S2m5AUWu0oOZKEqmim5i
hcdHGJuQtAO9Yzs6iXvh3CtEwRmzt8sUGqYAj661fVKG/rKWtqqJ/2WT5HNV
uhO0XZr5eviZyvdczQyUDovutOB24bm5KsOo1tGldnYIrfdAsBRbL7liELcT
ojP2Jae0kazWHsHzVNUmf5/O00y1XaTZy2TJNmBiRBQYUMaaKM4tisg9XbIk
suB2L3Eotnts+wN7Bs4xluhjTThHLi9WTLSVabJYevBan3Jtv2q9KPUQmKXR
/aUE1zlwP+M/R3RTJJr/ATtRbFhAeJ7KQ88Vb5syp1t0U8PeF0r1zCgrWYUP
3Bw0ru1Wrh4x7BSmikXJKpzzhNh7y5DoyL5WJ18GhZGBMdfeZnGOJtM1/sau
y4ITsg6muqJMQC2TCIrzDBzYRfeekMZLlakGuPFrRug4WPg41+F20WpFHCKK
t8GNJ5DmMyxPjShaAQO2gAZNCRSCrzTfPaa9XRCohQoP9nP3gZF/QLiyg/UX
nPaa2APFawrRymKhd5BseoDV58PEp+Gyc1TvXU6gjesrVcc7gTRjQH3CmMXy
fVBFgpR+4bRlBFRbH9fRhGGeYArzFZqeIepGgrzEt6RF6W9B5XkMa6duiiUb
58GdVbXyDfnYd3uUuXhHOWgHzimaJUJR+6AMWx3ScGhYv5LrL6K67nADVaJo
P9ld2q/axgo9UiboitSYLgyxjQ/LfPWm5HDoiYAfaCB7bqDMl6uJ79fQP6IH
SnRJ6oh+7xDn4+cLquBPVoztMlT2iTBYCGRGVZFBtq+kkpDTS14l9JUYkj3a
eA/FcW1QtYvkOjOm2sPUnTSP9wpiuUjHCqj+G1biITlRN2w+0kzL8Uf7Z3+a
Zri6SO7aFtnuPvEZa4IDpOFdgm/Rhp3dgtUDsrUI02Fh5KEi3ByYGxNH395f
LU11csL1o8CFAek+vOkG39PVJ1tJch4b1a8dNXxPdd3lhcoNkziE4Uyd4KMH
hPfyOj4cEOTSbA9IxpIW5qdw1UlbhjGqzaebSx0pumIcwox3U0LF9YIvCjGr
IMBRCLC+S/QZ21WI1R+mW+5bxpl8ZxvP3mgdZxpSIx3cL/vFKwYk7wyKPsBo
N6MUO4nGE0TTaYLx7Jj2BFx5DkQajOEY3ngcodxFNd7G6vaDYOOcQHriXJUO
oTD0qt2d6lAPw3IeqdgCvodsuIKSn2HZ76rj7QxrqSw8SDVX9It3dgnXYQz5
gnApVLb17dKDSKM8Ws22XQBZyz+JlboqMarDUNkqjGZHF+eDWty7UNZWlubi
4rJ24Yl8fIaXmPVY45TxVyLQ09XhZpb1Gk13y5wc4tsLkdLtI8Lvwc2RkpOg
1wsC1+nWqzxLA8N9vYn9UZ/sO46/SBJukSc6qPYKkv22LF3DcBey3PfV8VF1
egCm3QZTHyI575GcBdzoVZRl+7BmO9Kyt0f1dTklp477FS1UJE/Die5b7eKV
SN3NAfmBDt56kus23nIVb7o4KNvSwl9Zy/4AqtkAZKGazJAwXkcPVtICd+Tp
BlmyluQ/RA2dl04+GDUe4QZqrDO09I8u8yQRJjtOMT8MPRPpUl1c1z1V8pEm
3UW0XDRnB4PTcmsWJ4nUKjNQbrQSoj0JURzvk66CKb8FYrDgYxFKdQurv4lU
XezhrpO4m7PP9M5xqsRaag1A0jNiiaOW7boaXBKElkTheYHG3632VcdmWRPP
+bFFriHeSzNeRur3YI0n6Y6L1qkBcD6DHCLy1jDstwcUKyjuS6JU3RCwY0S9
P/BYo05ABhRfDcn3s7wPZLFOYawCot0DA07zgqUgsClT9c55hDxS7pjATL0B
Zt44x1/oHdNosvuoYaon+JwVfwUYJ7Hy6HDgiTiwTNWMd2qm6mjBUpQlXxBr
p/oLKJ5iTrSZ4q0fMp3lx+sTj9WRWYprjqzJdhizEGW6kem4hDftg2pXDyjX
Eo2nJl/avQt0e4Y79dSaWZarg/2pJc/vv//VZCMF0sL5Jd3jJe8//3z62y9L
y8vhKPi2x5o3v7/417/98/XrZCBBAFw144+5L/+cEQcf8YJ3yN5brGgBN14C
SgQ78lA73yGfvQ/R7urSbCQGLivSw8rpBpI/f8RyYMS4FUxh4BlFXui5ntYx
/dYR8Uq1t0xiy/NlUMYIrI+xvpW4gqjOBQFDYrsM2MsY8s1w6coe5kedtC8q
ht6F0ffqnPUe7/DitO7NM7vXAeGwT0hFpxyGao+jVaW9I1ZdlmnyA+7uVGQs
OUGwRiEGX7PIXCYw16OMF4ZZmxHo76TcfIOhRe95KDEdxzG+6Rt5n0E+5fcO
cY0XBYHjcMkHo6x1muAtuubAmGTtiGQVy3WJab2HVZ3UxWpAXIzPoOW+YqJr
FT9wwRjqt0UaONYjXP9uZbpSFDk3BnzKNZ0NTZLf3uMdLw4/wzG858fMO8eA
nVzTPl8KsvBjwjuLZRiv+BdY/iWCLtYHMo86fhMLrBwRrdaE6iZe6r2Px4jO
g8OiDTOLhv/5j//hSSCY/g1Mx05J4LYmWeuYg5uz0NDiyMwzcXicBjgGZI5i
tukWiDGmiX7nvFA3BQVFkh9rlCf6me58VaQzOCc1jY9wvbcpzj04+5eswGms
dS8YLe2LJNciUzfZ65hneqbJinCTOtnA8ucOKD5CGTeIEnniWDHPd4lg3k6x
7+S5rsmDBTzLRa7lkDFYO7Mo/HXJHnQPOz0j6Um83PoQotjcrz4A0x1HGjc3
03Oo9sOiyI0x3b5R2cpOYo5efjcdw+M4P3CBs/Fptj5QXjWS00vbKXDf5Tgv
oBX7axEfF7a8c7fq87KGNTxJZWpK5rBDPC7o5Lzcmxj1hTpBwnG6euj8S0p7
VS/vyxpKDsmaZwelz1PCM183uHvDCbIvhuFpiv1R9L/9mvj335/+9Hr+2ZLb
aYPazV0uy9BcVvh4ThNLjsII35R05yCY2wBPLl6+pmn4w8bOj5G4vTb/mDNI
HGHuHOGsp8qOt6JX12O/RMkOsjS5Gkeb0PaI63pYBPmiBrumCvtJIzunT/UR
TH4IDEpcc6NzUup9IhyS5cLFpVDm7TF+gd6H1PshHH1BN2WV0H49MkleeGLR
qYbFsqZQhqb3wpiKAobsmic+EsqQjHEkEIewvPkd7O/H9OdlkQ5J+KHrcS/H
ftGcJmR+MeuTKLH3oWsS5cqSHFM4URCCMZ9VZwbNE3KWu3lE930z90NJ+p73
mR5kJFboPtVZaJ/nJN/EdXMISbZCOw23LbH0E6OhF0zD5CjTUy6IN1FDpdxE
P85/Hu3d1qNci7B/w4nlg4wEFrXC1+Cf5oByFHtqtizAUZbTo8B+UJTCSybT
BA0iPw9VHTVMYI2TsDHLBrj5W26ggBO8LQhXdEvfxTuOEWx5SPMPVPdDUfxe
l2grynQF57gqjFaxfLeHDZ81Cz5vFqx8RPwSpT+nTSK1iUF+4BbJdAH0r076
u0jRKZa+lWtq1Sdh7mm2fZLFMFe10LY2oI4SgDsEa4kg2oQz5nLdD5xzANJ2
g+1q1WbJynFC6qXVNaMhmtt76ecpgny+5iaOc7ii9z0o67ogPAhKbq9sD9V0
X5OAq1I0drSzTbGxiv0ZVJuLsz4YVV3iuBqAMEzq6+a5uscMee3CHLR5PVx3
nhup5yWaOfGqTvmmQd0uTqiZ4a9W+nv9M9T0E336sVMbHaXaC8WJVoq3upz4
Xgk+Z8x5WBbuJbmvw4Wf//rCGfnRT/SegIo/I5lzleMN5skheWywV7K5h/Uh
RLyKqLlmTPaHnvB4/lqi4zhBf4qgPGXM9LLCx5nRg9rJJv0SfNR1uVG0sl/2
qcZVZMpS0IZ8qOrCI9bnUPlhewanTHV18lfVU99rZX/YQPscpT8ji7dY05jY
jAynLWa6HpFsBWOWiyP6E+283SjDdZK1aESzm+Te3SX+gOA8rki3MjzFsnhf
C/vrctJHNwdyiiE/qKNDYm+T0Fk5wFtN1V8zxdDicJspjZ567uOHBtCOGrjp
zojlAt57B6z6OvpfoJpVZP0trrOYZiwWe9qZ1iKeozY4JxS6St+ucQA2ILXf
9Qr+0sddMabdi1Bub2d/MCBchVYfJJuu4nWXqOYChGpvJ+cdhHInXLmFbc/z
ZBBzy9bJCXMoRgX9l2W/wHFco1uPs13XNdF+KOd86dCXIxKQlB5oExihv5Vg
yUPrTzDtrcJwLdtTJI1VA+l2VbSFZjieWeZll+VSRwVCsg0q/mRQuKaX+zVM
fBDK3YgT7Xn6JP7kqXfphXr+x7AnS7VPdrJsV5i2czTrEaLmjG181J5CMU0X
0PJdfMcdjrEKLb6OUR4B9VDs6wDzfrdsDd59jOsvo9ruMZz3RMFOlOEqP1TD
9VcSrOeEoSZhqKFXtorovClOdXBClei3pbQXZzuFshyC6ja0Sb5oE6+keAt1
01S6p3ZYe0AUaQFRdki9A2U9MSDbSnffHjOeh+n29KrWIc1HVAmYPNNH9BaM
mHPRjotoy0687TAvVMmNlrIi9zjRO6rxPvMk25xlmCZwfH8T2VaAMR2n2Qss
GYouBeUFynmBYvcs8fHPac8cSRopk8SrmYEHaMMdtO46RLYBpTnomiHYJvA9
nL0U2y209hxKdcozQwCZKr4sd0x0eicGYwtIeaBUGi7yzHBsWaIhDWGY7qiC
tcYoROmv5FhvMJ3n6fYrwlgpxnx4SPO5JFyiiQ5Ig48UoU5w51D5RrLzGitU
PGzYwAkUjL92Oqc5IAoSnYVY23lZ/G2DmwH1jiHNSdV4kyJaxg8VuObwoPeF
FrhLf/Wlnokij7n+eTw9cEQe6XNOim3zDM1MPzNUoggNBueIxqkB7XQlP/wI
73yAc5cN6s5Svc2WGbYyjUGY72Gdt92z5PFn5MwrtSzWDZqgJFaD1K4d0+4D
41srZwVCsS7zXB9cUhkzZHuG4JvFiv3NkTnj3/7xJhwXTy/Z0+PC8bT2v/71
89//+uanHyfjWU44zf79z5f//e//OTsHmF3dYBae/1G//EdUmajkhu6wE1WU
0D2i9zbacY4ZKxSnQTG5B9FtqBWuAEFOlhzhxu6RQrl433l+vFqTGTZl2L7H
ClANEKrNCPnnYtsFhet6bFqYnFdTtddwytMc8wOW5SzbdMYSbqHKd3Qx3uuk
floJz6lDvd+BXUWTXIvHafPTkoVpph4oF0uOGwxX4hGo3dbJFp0Rak9QuYdV
yjvh4KgjBA/PoSXGcpW5Tu9uJ9gvwDgbOyHvUsiHPP4erauQplhLlXzC4R4I
eesN5nKBuVgcuTKm/QjGXIXh7ydIt6LE34CMRNQfYVlvEoGDFGCXNlhs8bdq
wneIlh2yWInC14OQ7aB49nCjRTxvDdGyDSpcYU8OZpcBofOmbbLXOTuCMO6A
Gr4AtUtsrfIkqa5JIsl4g+u5uvDzuGsK55zEJp+xmOYrSPkGsafQNTEWeyYO
PZexw1eHxCvjE5S//21S5bpPsHzJDe2WJ+6RrJc02RppsNoUg8QnlItL9sQE
By84SFTsEfqOKBNFriWKPNNGD96jB25bZ/GZnxSReXliCQAStWjjNqr/GJj6
eZHrJO8WrPWkMPKIH6hVpis8C8ToAseZxTmnRvjBk1jTt4p4sXmilu08rY6U
KaNFWMMWuvO0yFcGhFv0gYdGX0M4PeTUtagk1/Wm+lAIZvEODEmODyr3QOR7
hzUbe3graLZcjicPZ1iHUn4Fpa9NukiAuoIm+UFmzXfGSECgdZC5nWa6QwQO
I6R7mOZb3aRdBc3vlbV/9KAupxv2lUhR5nL2zkwJpxa11miDwnBhIjVm1jR6
Al3+ceSA8OsW7rtYw3ldHCHz1trSkPSsQO+uHCbtQAq3ysy3uJxL2Zjotzcz
//vvP/5///6f//XXnyejinSYujwvWJjDyBTnmkfeofKPqu0PxiRbH3bn1LR/
WdnwPoV/48krE1WZy9XdQ7GON6BWNOB3ohVXR3lb1M5HYkeVwFWPVd+AcA81
478c4K1EyA8jFdu8swjPJEnoGOC6G5GaPJTiLlYJJu4Khb89saQFxxSnPgWK
rT7QFs4gVOomrrgqmKarnR0Y/t4x3vcs9TVjsMcawWiDQ2TjkRbaJ2T7VdM0
wjw9qo71+ubggSXmxBuPd0qr9LfqY5C3/dTSHRN/2GWJHiCLtC0QNSkS0nCg
R/aZNN6e/rvJMIcUp+qEkQautyv40pT42auahMqSrbYlpDLdqk73uZ7ipCkw
XlXg/Oe4qRZiMI+VvAk3H+Qlr4pTtYL4I5LrvjpSb0/SZl57Aot8+wKG7asS
hRtRmr3BeUCfJvaJzuOst53z4L/wOPtOgueoIFoiTBQw/bf6FF9wwzdo7it4
6xnDBGbMcLYQmVND+w5hPsGP3mf6bkKBLzqVH7TyP6rAfYDWXLZkqOpYG9V2
HCyKNtqnPZQPaeqr+uBIfEkx/3PYkSUSgLwW0hoUcE7oahcHqoSRAbq3HCrd
KwpU2GbFneJcjrfVMMMSJ1GeBWHgsXkMqO8gH0PTrg5hjnUgVjXAvmnC7hPE
ulHmwib+Dr610j/LCSyotCnsKHABpr1IclSy/F29oksjyjyctkTkGwCVEw7s
6RTlQBTvktx3eNEBcWpEkOpD2+/0qLaBf2RPAcdWGV5gvvhj4uXvT7ThTpLt
nDDeQ/Y/KqPlVNE+71GtAsVfkqghKHa+mAv6nukJjhNE/SG+t1QQLk28EsVf
hNjh6lbaRxxnmToME3rupV84Q8tiUaTEP6c3jHcKIvkU/wFpqtK7xPU8o5JC
d+r4KxtY742KtncJDoNHDldfruetGpTuFDprFKkWkuU+XHV0QLKum/8NznKS
4y1WeLr9aR7bVs71FHVyN8PUB6Hqkx38QwTnHVakiOa6j7Ud6JWuJTkvMP13
8NY8/dRot2htFfGzEsT7bHule5LG0j8CgnU04Kgp2hWfEihC7eA+X/yWEUVG
Ry0PkbYrUNNRgv96m+jbHsmaAdl68OyMaRjbWsMylfAcRXJvd2RRwbTd6hd+
g9HvB3N6N3dFN+dztvs8Qrmrhfr+qHgT2XgYDKEUUx7D+oBtLwKRaUiynma+
LvGWO5LwxSf2169i0RSZKDvWx/uAbs6lmk9Iw8W2SSTLXjYqP0SxFrBcpUxn
OdtdDlef5nnb9ON0abTDOAFn+26757CGKEzpv6P11YWyeHemH6vaCuF/DhWu
gUq+HRRs6qGsk1vv//QmMjOverzsjC5g9JFaonY3SvX1iPQrpPIbqvGIMd4J
hJsQwr0w/now2wqsDSO8Y2jFdropT5Ma4IZK4YZjI7qjSM0Fpv2+ONwgCfdg
LfmSZIcw3IrUnQULRxCp7FetJzkLBPFWeuA+3HCE4DhF9+WhTAdgxs29ylXt
0g/QpouaCTQP/CDdMY6/ske4A6bZ2yZejTLtE0capYkWvPt8p3g7xXNbmRiU
pQbhhgtDhiMw4Egr5y+i0N30S69mvJUevMMOlWsn3j60zTaP02VHQEZqZn01
rD4nilSZp2E0N5iO9wuDNf+HkUILAhnIcr4HglCNKNxNsd/p5q/oZK4iGs5S
jXfHNGeE/mYscFuT6Em+EmlCWEsGa0i1K0NlXMclWaDMmG21T6EMmUE0sHdI
vFkdK9clqqmmU3jDQYb7NMdTJkt3DKrWdUhyOP6bpnGMKtYg9Zd7pkkgFWNN
ubzYQ7R1By9wT5fAeGaF4mDn28a15oucYBfD2/IW/0y34z+K7BMjglCxNtkZ
ekJZ/Gtk4qXenh1yZtGBOSI7eE0VH3bPyaVxsDz7ZVMtlnF8coahy0CF4asg
KlN9DW2q0/XS3eLkmHdRpkwNkTzlHYqv6e7L5vgQCELqBNb6lKEe70TrvwYP
e1i9pZb8zrDkY+80wZYRSOOdIl8d1/kAb7yqi2Ff/zKbmVBPL5pmp1WpuPz/
+tdf/+Mf//znn89jaZo7RPjXf/z8X3++nMiwo3Ha7LJx4Uebd4ZMd1wWJ4p4
4YecUK1mEoZ3FDDCt6iBUqQxr5H3+bDppGKiix0qI7tvol1HCJ58zfSwPNFv
mWKZJqm6cbwlC+dZL1hC9Z7EUGSC8vzXrC2JVAZqhPZKvOoUTnEYCNbgJAfq
0O/0M74v6c8BMaliOGeIut/lHQXdMxbpVSmvcThbZfIT4fCgx99HFRzGc9cK
JRcl/CtGQ7M50KeJVHH1+YHUsCPUT7KfgvPX9I9+hMfvc/taDc4SruwQjbde
p75ks5RBUBu1/iYQCSjG/aOCNTDa9xjBMabhzIj4u0H+13jgAEb9PUqyjme+
oHQVSH03yNbTlukxw8TIoOo9sucUNVAmCjbBNetaiJ+7xomhWSbXcdmY6lYn
akjOYwT7OVm4NrUgCqQppnT3sHw913M9saRPPGX7ZvCqcLnAlS/xlLgmCZ65
0eAy27MsIDiPwhSrY5Pcl69CQksu2fqVPlUaf06zTo4ASYhvjuSdxIezdKt3
mK/K68WswEs3iv2nVdESINMjjFYKkxUk29XYc/nEC0tkSpJcNJpSQ2T3Ubx3
N9l92LrUKUvVEWyXMI61ovAjQ6Z/6U/P01+Df/6vP57+Hg0soN1zbd75Vu/U
gCvb6xsfdGeGlaFqbaJ9/JXYOwllavdimT/wtXlKUSGbsx+wFVls9RJdKUp5
HA1cGtFuGZJshUg+B+FK7D7LNGwhyNZg6Aem4yqe8DpHcVphKzOFoY7kCMd0
j6Q5DoIrx3JNFihFyY42Ib+t6v2gefBDtiCXzTqvktx98kSYWRYKbFfQjI12
c4NRVTIxhfKnEGPqnc2cd2DKHZpwtzkOTT6WWAIdAsMpGHUXWXHZ6GuWKW9m
4ri5Wf7ilOJff332f//r9z9/nViYAlIRYjw8YDdW4xk79OYSmf4eVXeqeviz
yrYvIPAtYu2VcBITnaEJDZUV3SvhvFySpQCpPcoy5qemOIG0ROxoEXrzsaqj
I4JdFP0pvOYk05jnmSA8+SOgjaDIOlA3IChZ/hAfNMRSjOK0OQ7jmeswygKS
6TJeeZYkO88Q3e/Db6VoLil99QTpBY7+RnAG6Z+i8ewF4BwY02waVWymO28K
guXG9LArQ9OFh/Sxofhz2exP4Se/x1PPAKY3f1B1aPLXWW0WRnXf5EfKrPME
qu8URLtSlyEnf9Onf7cq072maYo6ParKdHmfaiwLNH6wQp5+pEjXWuYQ5gUo
P9qhmMRifdeJgXysG6xNgmKyQzc7LMtWySYawUQmjd7yzOBARgL9yD5LEscf
YowHRYHC1HOFNjXE9bVJE0P6Cbw604o07iZ7b/Kityi+w0THeYh6PcV9ihvK
By+dItGNAs5WEr/ulx8Zs15q464ZUm3skX7Tq17dLdgAER23T79dAMJ23mI5
zuJ0h4m6yzj5KbmnLr4sBKL9ONWdFvKGIfG+DtaWfsFxpvkR3VJinGHQfSW9
gk0CXxOQwXZJLsrjMFECSfJ0kIwtunE2NzDSxzwxRNwOwx8jca+JTR1IWR4v
Uj0K3Bw1XnGkKZE5VWBWAsRw0mgXqK6yDIiUo0zfCMNXD+KWJsEWB/sHJfvg
6kMIYFen6l28K08yDqH4KkFYQptu1XNysJabdHOpZ5o888r94tdZINJGNJ9k
B9vo0dIW6RqI7FC/eg1Ms5sbqKHpLr5+PGOcIqIMx7nOPMNUH96cH3kijj1L
0Pz1D+DvdPOOyKPdfdytWOXt4JJCnxmRxJvB8h8GvkY5Numm+4OLUvdjvGyq
rVd98BH1/VrC5z3KPeJouyo2ClUd72D+IHJVs1y1CN2JIeWOXt63cM0eXuC+
KtYmd3c5E7jIM53AX1eGWgFTnSRYbo8AJ0e1eWBOZ4dKcY4zDH8xwZ4LDhnO
mgsGbZqztI2zvpqUMyI/Qdc9EtoemeMtWk9FcJz6+HHAmhzzjOOf/zwpCSFh
5rtdyq09uo3DuoOtws9I7qMgreH0pxUhqDVDASJDINymlp2RBTsRyB+SbqE6
jiB0P7TQViA0PxDNx3H6E8PinSzTZbrlCEl/EqPKpVlvgTaqjxFRilNyf70x
1eXIwLxxciQhsfsweFHusPg7mvUIxXiS477GcZRgtRdozuuKWBfd/rCLtwWr
z0MDp3muHlV0TBioB12VF80bf2r0TTA1gUq191F8lmAJD1G1J6SOChB1epjf
9DK/o6vuaR0tM/OiqRnR1LTZEuvQeGsx4iMk4ABWtWdEvJZs3CXx3mKbbsFl
a3DKkwpPL9d+Y4i3Wep5ZEo3W2dH+aE6cG5Xk78GpY/vaWPamljuaqLzgTjd
THKUkh2V4ngvwXGtT7mN6Cwie8tAzhlUf092nwY5FmM+gHVsR5jXdcpWUL13
RPEOXrS8T7qhk7cVBJtu0fpu+SaQkVjORl0WQ3HfH1SepHmL1SmoJomRpXtw
9kswzVa65YZ/Uh5f0stjRbTAFXAEQUZyLTJl0QGm5xEvWDui3ycMwZm+uxjj
EZRpGzvwtq2POlkWXRRO/+RQhJsF/vuCYAVYTUTLxT7RZ6Py7SC1sqwlPHeF
1N9HNN5XJbuA8SFtAvKWPJ218nCrIHDPNgXzLb5tlSUM52GtW8nmy4pgn8BV
CFIu03kNBFS2t5QXKu9VftiveZcTvOFZYuhT/WL/Hdc0Sh1vRwCHQJwjO6+R
LFcE3sroC451FoF2XiF5i9mhtz8j9qsP9ctOWqaxQKxTEn4IxCHTb6xLv8Qj
iyxbtguM85bxIW7wviRSC4Y+hq+Z7OxTZ1ETz11zy3r9eA/Xn6dO9oqSQ63K
s+3ao+pZrD6LQusvEmyFIND2Sr4alRwNLI6FnivkUzDDFIxuOce0XkLpNndz
v8KoNluTw64ZLt1dIvBWSCNlGNNJvqPpza/z42l9ZkK5tGDMppX/+rc3//r7
v/72x2IogY0k6P/zP3/7z7/NTWUUj5fNiy+1wUkaEGuj269Jo3UyV31kQf30
H3PKOIYWuCuZrOYkymp5X9JC1bJMN91fiHfmjlpOkL0V3GilJjMUfq73zOst
E1xQpizB/lCSsvTCvvDMO/lEq3B0oESHQd8Bqwar2UbTHcZKdij8pQJ7YSNy
VQtubVH/h63YjSZPt1Jeb7c0Wo33RcJtMuV+l6/WE27nKk4zRLsMqgqNpEip
LAcC1STDYab5lC/bFZxCMCznEbyvMNS1KNQOOvuoSp9nclym81bwuFuYrEu9
iH1ydzH4oZpIrcB1YZj1zQDxsMJXgZDsHJasHtNuGJWuppl3sk3nuPZ7HPd9
buBh6JnOPq2ius/DVbksf7EiVdUjfL+FvErmr+I7r/G8p7TRDm2ywTwB88wa
QME3eftf/hwefyYcA3YyDfe8E5zEssQ3i2XbTzHM5yzp3vQLmTnTZpvH6KaG
R3TfEaxr43PM8VmR1HNZmTwfm4ONL4vNyWFrZiSyTCNrbnRht+CE+6nSLSLD
BbnjVmRpwLPQBc5VprtMEuvg+So9M4L0c7E922WId1omewn240TfQWCiH0wN
smStJNqMte6lO++QTBcU0TJ7qjf2BG3N1FvTXZElrHuiJzxFffXbpCvc4QgP
Z55IvLN9mnAZWbFngJBD5e53xahGUxWBscca6lPb3t79TtHnweW7CcZDLPtd
nGa3wn2frtxD5q3ny7dxuWcASzVLfkVqLdQEKsABtScH1fbKHsyHcPZGkuwM
VXeVYb4+zDnQObaRJbmq0zUx8ZfsysZ4EBedYWpjZQJjrsXcEgl0Z9KcSJZM
NebWEN9vpX8q9za7U4TIFMfoa+LrTtMVF1SeRpMHqlbVTKd5c7Nyn48ZCGM9
PsLcjOunl7GJcZFKXgEf3UynXhDwblA416jaa2PSgyzlWZ25UKa6zVPcCGZw
GMGpUdY+kvou0ZqHVp82BtDxOMUZRMhdFfrIsC7aOSJb1Sf4rF+wkefIVfia
vLNcRbC7i3YQD9wY4B6FSY4QgLtQzjpQcmWuZoatju59WIna1o7bQwUOwhWf
IVTfc+wVMm81mAW6SD/w7Y98cyqpt5dpKmLbyui2fKbjrnucHslytcEBnrXW
kBpOPbH9+p8/TbwOMPxXetU/hJ5pDLMdnZIcnH03OGf4oZIx23rDJNy9JLHO
soyTDOMU2fecKYo2qbJNljm8LguTp6pkqTLzPILhreElmo1LbGakc9R8CQqc
1kyQA6/k6olhVvSyNNPISeSPGff5FihLvyQnXpum3sStczCi8XzkCd8+hRSF
6g0zI9pJFKjGvMhVhP1bfqqQ4b86oPmI5s0bs38P065j+a8htWc43lqK4+Yj
/Dq8/S7i7aP2PmtgvFcIz2nkr2iifySJVisj3TzPHbr5rtTXacwMZX4yg9JE
0t9Vxzu7Obsbqd80UdfjDRX9wlONpI0U/X1ZsNswTaN7y8vHciThFvM8ecx8
1zYtkKRhCOsjmrOZHxxUZZm9jJN92O/w3KPuEH5mMSRwVHdxt9bRPu6X7NYn
kNYMyzlLMs+MiWLVSN2DHslliOquboIuiSHEiU7zLM+/bDJmqUCawPPXDqg/
hWmPCcL9vFAbMIWh2MqHgQ1w7WFBsBEMv/HHwPybkD7ey/ffVmdHReNt1EA1
Acgnuo51izZSXA9IwIU3P8/JU0NI436UdpMs9RBjuggkunUpXJ/q8ANUTjFy
DdJwsY7xLhhgSbYzRMcJZvgGO3kXbd2AcH6tm+8KP+F4FhCKbHu/9uAj+opH
pI+bBRtVMWx4wURzVPXx9isCzURdTa90bRv3i37Ryn7hN3jT254FhiTKO0HS
z6ApztulqJx+8U66Jxem/Roi3kB3XIRod0J1P3DCFYOqXS2893G2U8ooRp1A
jQLXS3E57ZwtkmCtJtqkcNUYvYPjM+rlx4nwrDoxq3v581NZmEAOVoyYDzfx
N1UQvmjigJvvGzMdAkdcGYWFliRCe7M5gZv9OW5KU0mWG2PAQaL9AFSxbki5
Ycy4C6n9HgVsgwi34LVb3rKH6gzTWgTyFZAYCS0asUDuiPB7sadMFa4hak+Q
pddMPqLeP0QzH8YCW5i2c3z/Zab9+pDowKg8VxFF8gO1ENkuirmE7apWRQbd
c0zQ0HHWXapM7fQbjX9+gKg8QlPnOlIdYksJSbXTFkNyTQ8G2etHhbtdSYTG
WuoNdidSmMVlZnqB4UmjhJZSsiaXbT03Jt+OUexgms4xzVdQ0v0KX0PssYCg
OtdK+JxtKjFEh9wLOHmiAwYcrqV9RXeUycPDIKxyg+UYewHVX8XwV4kT7dxQ
M9lzf8xxhRZ8iLUXdUk3Q4HN7PBVhi+P7DqOd+yA6VY3cj+muIuY/iqi60qX
/ItaxseNvL90SdeAQNsn3cRy1LkXFFx/P+jvONMtdRIReKw2TmPg2jMk863I
E2FkXgxEOhiOCzTfeU7onjzZ7JqX6DMkWbqKG6kQxJudjyVUZzHecpbiuiCM
VinGmwmWvZY0PPPcKgvW8QPXKfa8t4+/MB0bEG4Q+or1SagxhVJH+nmuOqI5
TxJ99Pb7sVidNF5Pst+SJVtZgava8VrXLMaYHWCHjtK954XBGtskQRGpYztu
8wKXR9R7mf5bVM+VXtU7fcoVaONBwzTEmIHJIw99czjXPIsTussNV1G9d8eM
x8DaMWR7dBko2naVYKtgBWsIzrsQ4OiA8rAuM2jN9mnjNcnHupkf7cFpjnsS
Z822mVMIvrtUna5guO/irfd54S6KrUrgalx6HXj9a9g+PaJK1BumhniJhk7F
+S71CWa0BeSoAeVBob81tuwi2nIHFKu0E9WxV3p2uMP7lOydoVgznRT7Trjy
B475pj1JsE2SQPzmg8MaeYQznRC46n/+dXl63DOe1r58Gpif1f35x5M/f/9j
6bHLYG+dmBH+P//9H//+y/PprDIYQ2SWcJFZmjxQqo1XgS68/Crwt3/9Ovfj
hGmCxQk2CVItOE9BLf9DeuihPI1gBcuIviMY+x1a5D7ecVsQ6bDMML2PtZbp
scgib/IJe2Je/PKnQGxCqnJXSuzleNUhtvWK1FtO1R8Z4n46Jv/cEu/hGq6y
gAKpt66R/B1ccimclQjFZUZLazDUYbXetLrybf4GjfMRiXeQwt2pkBRqZWUa
dZ0p0oTTH0TKN45ytymDxVxn7pj0LyTJp0jCSiThC5H8jMV6jyf8livc2DG0
pht53pZuck1VywKFPE9uN/WLOvgaTaQKpznazfwULgcDxU6O8yDNeESVauWG
7iCM29jBu9ZptmlqmOG+zvHkS+NlA5LPqJZckvkoiFXqxD3nFAPMgE//mGZb
a2j607/8NvnPfy5rfW0EzXGZqzH1xBR7ylJH6qV+8NTKLSmoLtYm9J43Tg8r
xxsg6i8R2pVApMES61NHCoHxR2pPgSXSqw5XuxYGVeE+qbeWoLrIt9zg6+74
MmPGeKUqXEAEDkBEazWpRl263zYzYs0Q9Iluse8eQXdBk64DJnrVmUHNeGcb
cy3Fu98xx9Nl0AxPHlq3HasH9WcN3fmNMHBQET8DpK/bsx2RaWpyVuWPDT39
Uff0xxAQKuTZ95CU6/pQX/gCpPnXdpW2Gs3e4ptBuWIQrqJIYq3VBauNiWJ9
tIVnuSy2HVeaTrJEW7jiTSLlIbL0BIy6W2ioNMV7sIoTrnGYzYNF4jexxVfJ
wjy65qHU3UnR3SRIzqkMDSzu9aG+VTZtpd3WFZsn8OwFpmBVNsWL+VjZhC42
weQ78iGi7X3MTeYQem7ZGs/wHGG0zHSfoz1jCJYJNHf4/IJIGBMflzrDJJ66
snNk2xjtfCot+vOvz54uOpSaErmkgEW/lIyLItMiFnAbzzwkEuf6fB2RMGNi
Xm30D/vHqVTNgxbKtzD+QYbsGp1zwRcb82XIrnG22F03wFvdw/1uRLMZpdjU
QlpTi1sPkx9DKE4gZaeHxYc7WJv7GEf7ibuXX7pnn/vJpgdEz9s+rWjtIazx
XZzhO4HvIagwbEt+7ehHD3rf62duE4e6qNardPMllOIk2Xqd7SixhvG+GMYU
79PF2yX+DtekavaX6NTPAU6gYsx+xjw7okxAMeZDuql235JWnRxBGnYIQo8Y
7kK8/qEhw9NmYbrpfnmyW56qMU3QQq9YwDiK6Svkx8tk472y8X5+DCpJw7Ge
MwP6TXjvUf0MRj+Dk6ab+MmH9MgFjOWId54782Pg2d8z2Vfx0FO5c4YORDFC
XxWoS8JkBYgTzkUuWAs4zzpZpo4fKUVY1hCcRwfVXzWzPuqTrB1S7FKnIHhD
YTtvJ9VX3Kde3y7O6ZetbmJ/VEn9eER+mWTNa8BvF3obNYkOqqVUNz4qDHRS
HPeG1fsksa5a/I6H6BWgd/O8fQRzEdZwhu8oZTuLOcE6+fgITLFXGqsWRrs5
3pKpn0K8cE8d9zjR8RDveKTMMKThbr0XqrI2Ts5Z51/42OZyqPhIj3hlO3s1
21PpXBSoM2hpapjqzx8FrrZx9tI9tVIfdJhfUwT/ckSTp58gylKNwOSQbooA
N+3tk+0G9VwUH5Am+0EstMyNonW5SOCyIUt2zQmdM1QwifMjV3WTA7rJUftj
oSNJ1mZbBhQb0LbTRNPN2IySHqrFOY938d4nOfKo3nyeM18ZawIB4x485zZk
ZRXl6xp2TgtjWxtr1aDsQ3my0fq0j+TaNWJdJ0xVaVMtpskWeaptyHCgjvtu
Oe6dSsqXoIBnXzgYjtZh6Qmlr50KtIOzi+Y+jQDWdIs+6BF9S3FdB1OSItQu
iDUyvSXDqp0o1SmG/cqIZIvIXW5KDQ1o9wwCGyneuwOqH+oZH6KMuxmeOzxf
NcnRC1EfZATuMV0VJOCewtOcnlUFo8JE2mBP09UeSHrBjFY2jBruUvzneuUb
a2nvNXHeGwW2kuznEZorqgTMkqHTdA+AyFDsiUYUrqT7zlFsp9D6/VDFNpTh
QJ94I0y9HmPcNKr8Dir4EC75nqrLB1GZbMkX+pvd8wKavQCv2acItXK95X3i
1d30tQoHzJ7E4NU7x7Tr6JYzNPsJuvUq2XSV7aoETYftrYCAKcxTqwyNaBOD
lnEmz9GOtx4KPON7smyVtwsItZuCqNAkTaB/hBEejM4IdT4oXnmUYyzJzhut
rr6pSfaTJenykjIxxbaGBgF/LVl9bEy5CS3fhBTvxCuPyENFdFMe11omcbcO
C7/v467g2PO1sXr/AofhLhpQ7hzVnSFZH4wqLw4rT2At+Sj7dYq3luqpQJhO
wjR5klQvLfTgbetwdz0xcBFtO0h2XmN4brH85ynufXD96hbhx+BWNF8JwnS2
R7WqgftJDeu9VsH6Lu5BiGwH21mffOU2T4p5wW4w3jpmWY5ZEdn5EGO5zPI0
yEJtTPsNYaBUEKhk+PIJzsMM7zVQ28GsxImUwA3nwMMAJmC8QBUYh1m+u8xA
KTdUDwf2cNwFwXlAFW2hWHORqsNE27ER5UaI6HtlotqeRUl8zWOyArTyMg64
TLOVioP9yvFO8OzowTvc5COEdTPLf9EzjwOSUKLtOC/4gOW5LQjc47rzOc47
aP0GcP+mhT6uv3AE2AxRr4dqNrCDl00zfbp0rzU7Zp+SqjO9olQdyX0VadjF
8d+h2u5xvQ1vl0XbisArSbTfJ7pv9MuPm2eGHFM4Uww6/kQfmqMB4RbXBFaX
bFBG6/n+AmW4nOl+QPFW80N9eO1Fnb8ZpJGF12b3NNYwMaKeHASPdhi40qc8
PwQUw8xlUN15aaBh9pVfECzvUa6leUot00JepF6bgUy8snpn+zC6bUjlRn2k
Nvtc5Zojq6NdPEuhyF1AMJ1QBlseP4kvz4YWpx1//rbw5Int99/m//bHL4ms
WG4sX3qq+X//+3//9momnRlVmyqnn0oW3ug55nyQXed+Cvz0t6nnf8zKA8PC
SCM31kYPtkK0l3uAb2nhu9LkCN3z9kkFBHcxzneJFqgCR8cw12mfZ6uifZln
iswC5/Ubd2ZGJrXdYgHXSPILcOF2gvKyyt+lCBQhBN8iBB/ghcf68J8rbGV8
x4Mm5ipRqD0+Z7K4+vwZYmycaHU2APYyZxKii7RSZCdxzF1md5XF3KbVNRqi
dQjZdrTy2376p0L3ZVmggqzdjhGuHSGvJgk2aMzXTJYyhfokQ7DnUX8OlH5u
+hXnya8iPLADrv62nbyiEfMVz3uLZD7UTH0HJt4sCRTQDXkU4DKQhQpCVRDN
JyPabbJ4u3V2NPqSkXwpAUF6VLtFHKyAijbBZJtlwcbggmryVSq2aHr7w1Ow
6t/+7Y0vjlK4OziuXP88IrwIqJPlNMtxc6bLNQX1TA9KvDdIhg2grbB99+HA
Fpx+n30cmXwidcx08YJnUaoNAne1It7mXCKm37iTr8365JDY/QCv2c4w5bHs
R+WRy9pYBchak6+t4TmNNt4lDXTp0t22GZLYN6KJY4OPDf5lvjxWQXMeZYcP
yqPDznmhMtVFtl1Bmdagze9K47nGbJs6VaSM3wovERd/tYam6LEJ+rNfbK9/
n3ImkK7xPn243BRsWnxpUbsbdeZSfagw+lhk9kNDUezL175gABkex0QmGI5k
vylYHkwOOD29bOlVtuwuWXhxCH9Abm7yTdJZ1pvaSEsiA8RSQy77KGDsML9t
5YMROB8yNLc05m6FpgyB/c7jaE5mId7pTpn/vjvREvUT3iw5//pjKjuv0EZr
UbKDcP4BRwC3vGyNRpj2MEmgekjmH5IbqtWGKo+ny+yq845TbHEKW9mNYZ5n
yY8pteWhAHt2RqIGqgB1tUHd9I+/Pn7+ckasbWRx8wB5ucvaHvCTgkni+AJn
ctGcXbJTteVkxRWXfzA7DcTnKdrggDzQjZAcbqd81sX8ZkCwmaC/PCjZ18b7
fsx0k++rh4suQ3m57bQDhX3f9uNPzi6aX/40b8y+7T3dyvp2RLJmTPOJJARG
5lqw3jlAIZ59nyJqAi2A4XoIEW7Eq48JvEWSSCfPX68J9vKUj3jmEmO6Qxio
14/TQ89E07+F7TMShrdOEK5gBS6RHLmRlwp1ug9pXgc3fo22bkAbt9EcxZpx
uCLTJUqVG+e7TdNo9wLPPA+zzjJJrhtE32nVVD8wRfK9FlqWsVj/gSHjun7t
Z2jzWUG8WpUdYkdKyL6rnGhh8JkSnMPhZYEy2ulaxIdfEMnmM2/7XpmOjdlP
ccKNwWc6rr8CZ98ujjVLo3VU72Gi/VT321vFPq+mvI/Un2T6H6F1F9jhQmag
ulf1bbcqp1+5Yki7EWO9TjSXgigF1xwBMqPcQAlSdxZnvA9GaYTpNM5xhRts
7RBsG1IcV2Wbhb4hmvMuXHVymHcQodxF99/VThIFwboR+QlQS+Whkme/z7A8
PQ3CPd3Sk0jLXfU0NfZKGV902BPkUFbpmSIqwj0sd3WfaFsD/eM+0UH7okA7
zeCGx7COQpS+oI+3X+RptMVJAutoJf6zEeD42y6loo9xzouyCTjOc7lDvh7j
O8lNNhHdpRRvIdFWNqw60CHYyw10WRZo4lgD0riX5juhTne8XQszR3v5JpZ4
ohrRbR027GL566jGUoj1FNZxqU+6huIpYb59LvFV9xwWNK9q0ttH65QTPqyk
vlcM+7QSsWJY8uGYdgPdcQGpXQMzfceM3Wd68zXpGlGkA24+2CH9uAL7ThE8
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
3avM3BvX6gt3LE0Jz01Jzf1a64DY+UThbTZF4JpQB5Siv3y/+vxXzy//I778
xhdd4aRfq2ffR9LvA6BCxlV7ROFBdQqNM98BnOxZEZtm4ZJINydUMqb/Qbcy
ocoMYPWH+b5mwMkM93UALdEoKp3E+0NjanO/2Tsxo9jcTljXR/0rw3LSEOtx
pPFk/SUASL4lhSk3RDLeVcYbwSACSc2YHLDmEI5ZumptVbcjvHAxL1CLNZ0l
26/R3Oc47hJQCZbMoNhTQ9Iewag3cGxHpa4bIlshXbnX4i1/88K/8s6lCZUw
bCewhh0D/D/0MD6lGAsFznK5rdaW7LLn+qTBOss8AtgHJ3ST5rnTb1zXIvgt
XLs58FQQe2nRzw6Cvp7UX4i9kroXJLbFfmVsHG+/SHI/IHrKAaKA7Bz/Va3K
9uJcx/qk36MMJ5meUmHs4ZTuLMN/TRSvRRh39EjXIc2b1JkBkCbogQqyq4rm
qyC7y6asR6btx4ney+xwPc56Tptp9K3wjPN0krdAmei2ztKEqUc0zynz/Ig0
WWJaGFOkBoB0E6Aritke3TxSkepQ5Fs4sVbLEivxWhV9apWlBwiuQrztIMm+
UxqqVGfbeelLVM8V4Mux52ap7yHZ8rUoeFIRbU+/sWWfeaLzGEsCpQj1cv0P
eP4qAOSuPCa6Ilv6u9W7guN57mtig4pIE8m5U5NsF7umJuX7OY5KpOA46LsJ
wTcyX6syNGxNoOnGgmnlTmumTwzVT8v2iaAaiukMOGzkpTz0Uq6Iw0jQmVHN
l+Pqn6SpcqbnFsdTow6Mq/yj1mzX3Hulc36YZj3Dd1dhDJtwqt2jnG945ru2
6JTIVkHRXlL5x8JP1fJkuyR9mx9+NKHZRXBcwjqPcUL16qRAHu9Ym67muTcp
KeBCj1HiI0p/HU3aXFX1u9HRwxzlGZziR2uu2zWHU3jKnQFCPiOIZofktlJD
qIPjvtHB/qRXvAllvuhcZqdeQbrgYHKRbfa3CvU1QksVz9g2zCzEa4tBjNUl
CVxfuTLW4l8VOPMsQwKlirXYMlR7lkEy3pkxX8BZr0rSzXj/FU68mONr4QSq
fC+UgkBd4rl+4a3WkphkOk+BxgS9LI7UEOxnmO5yaaxDHOyUJ3osc5zgC4U9
P7zyPvfsbwtQniQLN774VxLKUNmuIlmykxF6KIhWQ0tM8zIxOi83Z+BI5znV
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
2R6UdyfcsbFf9RrCfooTagF1ay9idRkGwniO6r1bfJ6MPfSMKc9D1IfZ/jt4
dzk30U6xViC1R0jmUo6vWZUd8T5lC1OtI5qvG+ivVcJ/AZXvE/rr9RmSc5kv
jt/jh8oJ/isdgs8mlGdIrlqapx6qvTSl/Q5oF2BIea5nQnYQqt1PdZ8nW2+T
7RfWH41ZoBhmoQjdsUnN51DNsXb277r5r5MdZaJsL8pyekS6RRodAgjK8DXq
5qYgmoNY5yFJtJ/nL6HazwhCQJPPIo1XNXm8ODCuy0xbF5jCyCTBVgXXVFCd
HdIEjOxqEseAojarIsPholoZGUCq93ez32xjbEDpLlLt1WAVgMiTeCIxJFDy
0IQsQBjjlveyt3VzNnYLPphR7u1kb27nbsGu918+BdPsGJOdVXlI6iCJ4+yn
Oq6iTUegqvN4ewnWcXFSt5Pqq+ZHBymee2PaXT2yD4fVWzHOqzD9OYq7mRlp
oQUq6a772gwCYN60+gRcd0OdJLuLMkMOwXTXswPV3Ogt4IwI+9YJ87+N6X7V
ytowrdwZeqT1PhAJg33gXRCGEry7Ylx9muipluYmIZobQ9LvMY57cEvJgHxP
t3A7VFtiyFNAqKc7Lo3I3gN5BGk4gNCfgmh3Dcs+7mL/eUa9lxvtQJiOjyt3
ESzl2nkI1VvRL/myT/LppProjPYM1HASaT1OdNQT3DV9si0gEQTmRfkHHouf
TtfdQCv3qaPj0aIhOideP4BiRe5+zFfnRkHmhdkvI21lJFOjK6kKzXJNUej6
2fjxCYbzPjfQqpiDepfVoSe6uafetR/z9qKQH60kuXbgvN+hLF9NqN+B6Dax
AyU032Wy8zYrcEdd6Ab6g7GdntBtgxoPE923RuRbe4WvjUjfNGW6XEUYx38O
Z9/FCV0DvI0xH5zQ/m5AuoHqOSLP3IHqvsLav0FZNgFGmtT9AmF5m+zeSXUe
orsOks17CZYP1Kmz6hgApMsM/y1OaP0BIv+qJP3c6J7nSfzVUPVGvOULTbyB
77pG1h+2pajeZWJgVRQsSky5Yba7XDfb5XyA1uahYB41OQg7UDZj+Bhm/W5I
+yHUvhHt2CdKXMk8dz7/x9KDv3l8K4Oa3Elz/ubCc9yDl7RUcSiQHRH72ujB
u441+sJPidyayZKe4YRuKaJNXP9lqPEPSPt7eNcuVqCMGTrPjlxUpJpMeap2
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
    "], {{0, 520}, {780, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->{394., Automatic},
  ImageSizeRaw->{780, 520},
  PlotRange->{{0, 780}, {0, 520}}]], "ItemParagraph",
 CellChangeTimes->{3.6410290848204837`*^9}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DFA", "@", "\"\<Buffalo\>\""}], "=", 
   RowBox[{
    RowBox[{"MapAt", "[", 
     RowBox[{
      RowBox[{"Range", "@*", "Length"}], ",", "1"}], "]"}], "@", 
    RowBox[{"REToDFA", "[", 
     RowBox[{"\"\<Buffalo\>\"", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"\"\< \>\"", 
         RowBox[{"(", 
          RowBox[{"\"\<B\>\"", "+", "\"\<b\>\""}], ")"}], "\"\<uffalo\>\""}], 
        ")"}], "*"], "\"\<.\>\""}], "]"}]}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.641028849986052*^9, 3.641028960291361*^9}, {
   3.6410290954430914`*^9, 3.6410291136281314`*^9}, 3.641029189286459*^9, {
   3.6410292258885527`*^9, 3.641029232517932*^9}, 3.6410300932691636`*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Non-deterministic", "Section",
 CellChangeTimes->{{3.6400761527625914`*^9, 3.6400761694375453`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"NFA", "=", 
   RowBox[{"<|", "|>"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6400735387010756`*^9, 3.6400735405911837`*^9}, {
   3.6400738081084847`*^9, 3.6400738099425898`*^9}, {3.6400740446720157`*^9, 
   3.6400741008652296`*^9}, {3.640074825089653*^9, 3.6400748364473023`*^9}, {
   3.6400748784457045`*^9, 3.6400749271874924`*^9}, {3.640074960816416*^9, 
   3.6400749822666426`*^9}, {3.6400751529664063`*^9, 
   3.6400751900195255`*^9}, {3.6400752382652855`*^9, 
   3.6400752659798703`*^9}, {3.640075801533502*^9, 3.6400758021745386`*^9}, {
   3.6400758441439395`*^9, 3.6400758456580257`*^9}, {3.6400782694446588`*^9, 
   3.640078302846569*^9}, {3.6400784386243353`*^9, 3.640078447763858*^9}, {
   3.640078484706971*^9, 3.6400785096463976`*^9}, {3.640080557830547*^9, 
   3.6400805854501266`*^9}, {3.6400806405762796`*^9, 3.640080641037306*^9}, 
   3.6400874544910135`*^9, 3.6400876490161395`*^9, {3.6400876879883685`*^9, 
   3.640087721348277*^9}, {3.6401372772917147`*^9, 3.6401372782897716`*^9}, {
   3.640424592850268*^9, 3.640424593046279*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"NFA", "@", "\"\<Real\>\""}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\<S\>\"", ",", "\"\<+-\>\"", ",", "\"\<D\>\"", ",", "\"\<.\>\"", 
       ",", "\"\<D.\>\"", ",", "\"\<F\>\"", ",", "\"\<E\>\"", ",", 
       "\"\<E+-\>\"", ",", "\"\<ED\>\""}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<\>\"", ",", "\"\<+\>\"", ",", "\"\<-\>\""}], "}"}], "~", 
      "Join", "~", 
      RowBox[{"CharacterRange", "[", 
       RowBox[{"\"\<0\>\"", ",", "\"\<9\>\""}], "]"}], "~", "Join", "~", 
      RowBox[{"{", 
       RowBox[{"\"\<.\>\"", ",", "\"\<E\>\""}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "2", "}"}], ",", 
         RowBox[{"{", "2", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "4", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "4", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "5", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "7", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "7", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "8", "}"}], ",", 
         RowBox[{"{", "8", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
     "1", ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "5", ",", "6", ",", "9"}], "}"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"NFA", "@", "\"\<Real short\>\""}], "=", 
   RowBox[{
    RowBox[{"MapAt", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Drop", "[", 
        RowBox[{"#", ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"5", ",", "13"}], "}"}]}], "]"}], "&"}], ",", "3"}], "]"}], 
    "@", 
    RowBox[{
     RowBox[{"MapAt", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"ReplacePart", "[", 
         RowBox[{
          RowBox[{"Drop", "[", 
           RowBox[{"#", ",", 
            RowBox[{"{", 
             RowBox[{"5", ",", "13"}], "}"}]}], "]"}], ",", 
          RowBox[{"4", "\[Rule]", "\"\<D\>\""}]}], "]"}], "&"}], ",", "2"}], 
      "]"}], "@", 
     RowBox[{"NFA", "@", "\"\<Real\>\""}]}]}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.6404246044789333`*^9, {3.640424642073084*^9, 3.6404246424241037`*^9}, {
   3.640424681362331*^9, 3.640424683317443*^9}, {3.6404266150329304`*^9, 
   3.640426747810525*^9}, {3.6404267868107557`*^9, 3.6404268947219276`*^9}, {
   3.6404269406805563`*^9, 3.6404269515051756`*^9}}],

Cell["\<\
The Thue\[Dash]Morse sequence is the binary sequence obtained by starting \
with 0 and successively appending the Boolean complement of the sequence \
obtained thus far.\
\>", "Subitem",
 CellChangeTimes->{{3.6401372487060795`*^9, 3.640137271111361*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"NFA", "@", "\"\<TM\>\""}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Range", "[", 
      RowBox[{"0", ",", "5"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<\>\"", ",", "\"\<0\>\"", ",", "\"\<1\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"5", ",", "4"}], "}"}], ",", 
         RowBox[{"{", "6", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "1", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "2", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}]}], "}"}], ",", "3", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "4"}], "}"}]}], "}"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6401372854221797`*^9, 3.6401372971498504`*^9}}],

Cell[CellGroupData[{

Cell["Moves on a Chessboard", "Subitem",
 CellChangeTimes->{{3.6401372487060795`*^9, 3.640137271111361*^9}, {
  3.640849488687337*^9, 3.6408494976728506`*^9}}],

Cell["States = squares", "SubitemParagraph",
 CellChangeTimes->{{3.640849514011785*^9, 3.640849526757514*^9}}],

Cell["Inputs = Moves to adjacent colors (Red, Black)", "SubitemParagraph",
 CellChangeTimes->{{3.640849514011785*^9, 3.640849554578105*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"NFA", "@", "\"\<Chessboard 3x3\>\""}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Range", "@", "9"}], ",", 
     RowBox[{"{", 
      RowBox[{",", "Red", ",", "Black"}], "}"}], ",", 
     RowBox[{"ArrayFlatten", "@", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"ConstantArray", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"{", "}"}], "}"}], ",", "9"}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"2", ",", "4"}], "}"}], ",", 
             RowBox[{"{", "5", "}"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"4", ",", "6"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "3", ",", "5"}], "}"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"2", ",", "6"}], "}"}], ",", 
             RowBox[{"{", "5", "}"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"2", ",", "8"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "5", ",", "7"}], "}"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "3", ",", "7", ",", "9"}], "}"}]}], "}"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"2", ",", "8"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"3", ",", "5", ",", "9"}], "}"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"4", ",", "8"}], "}"}], ",", 
             RowBox[{"{", "5", "}"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"4", ",", "6"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"5", ",", "7", ",", "9"}], "}"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"6", ",", "8"}], "}"}], ",", 
             RowBox[{"{", "5", "}"}]}], "}"}]}], "}"}]}], "}"}], "}"}]}], ",",
      "1", ",", 
     RowBox[{"{", "9", "}"}]}], "}"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.640849196105602*^9, 3.640849436403346*^9}, {
   3.6408498341040936`*^9, 3.6408499516398163`*^9}, 3.6409317128679276`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NFAPlot", "[", 
  RowBox[{"NFA", "@", "\"\<Chessboard 3x3\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.640849608610196*^9, 3.6408496222319746`*^9}, {
  3.64084966602948*^9, 3.640849733239324*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[{{
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.028579636450635548`, 
       1.7908742022928765`}, {0.12178664019205337`, 1.8028385134809086`}, {
       0.14679844917846968`, 1.805605170918073}, {0.17189174747690153`, 
       1.8074949758427965`}, {0.19703580428757356`, 1.8085056138834874`}, {
       0.22219982664870772`, 1.8086358473505069`}, {0.24735299714748227`, 
       1.807885516751925}, {0.27246451166093505`, 1.8062555409888408`}, {
       0.29750361708059103`, 1.8037479162300407`}, {0.6491614760464053, 
       1.7623032249852901`}, {0.6740975079404288, 1.7589210222226164`}, {
       0.6988999281071766, 1.7546683835100416`}, {0.7235383619741627, 
       1.7495505168910537`}, {0.7479826357966307, 1.743573690020565}, {
       0.7722028136101827, 1.7367452224891555`}, {0.7961692338922058, 
       1.7290734768590512`}, {0.8198525458872012, 1.7205678484228155`}, {
       0.9077242838651725, 1.6872624741809998`}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "RGBColor[1, 0, 0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["RGBColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         RGBColor[1, 0, 0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.4731867725310935, 1.7817886791605675`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.028579636450635548`, 
       1.7908742022928765`}, {0.05894248159524529, 1.7018426991431115`}, {
       0.0666548271145675, 1.6778626528881513`}, {0.0735233929044502, 
       1.6536274368629227`}, {0.0795397672958682, 1.6291667310067597`}, {
       0.0846965822659097, 1.6045104914077413`}, {0.0889875224611113, 
       1.579688913616621}, {0.09240733293162828, 1.554732395667492}, {
       0.0949518255667714, 1.5296715008504842`}, {0.12458002735151141`, 
       1.1764631986298382`}, {0.1262460860087644, 1.1513286180614253`}, {
       0.1270316703300045, 1.1261511330981955`}, {0.1269358182402508, 
       1.1009615776401025`}, {0.12595864712588034`, 1.075790800369373}, {
       0.12410135369086972`, 1.0506696269713067`}, {0.12136621249123791`, 
       1.0256288223832446`}, {0.11775657314948418`, 1.0006990531179283`}, {
       0.1026501409124857, 0.9078534467412606}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "RGBColor[1, 0, 0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["RGBColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         RGBColor[1, 0, 0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.1085235816147932, 1.3529631380228735`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.028579636450635548`, 
       1.7908742022928765`}, {0.14072525592276086`, 1.720967830491698}, {
       0.17042417811613375`, 1.7017252480532261`}, {0.1994316204725609, 
       1.6814552888453744`}, {0.22771205869019667`, 1.6601827767095712`}, {
       0.25523085880127466`, 1.6379337632753548`}, {0.28195431958699885`, 
       1.6147354960559421`}, {0.3078497138501332, 1.590616385079245}, {
       0.33288532849474545`, 1.5656059680951984`}, {0.6789536351038212, 
       1.2075702713967817`}, {0.7030988099730937, 1.1816991777035946`}, {
       0.7263239753976422, 1.154999090637224}, {0.7486006884083551, 
       1.1275027087700082`}, {0.7699016675694066, 1.0992437058659803`}, {
       0.7902008263887845, 1.0702566896419003`}, {0.8094733052654169, 
       1.040577159384513}, {0.827695501933771, 1.0102414624759328`}, {
       0.8937504029733262, 0.8957849605468343}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "GrayLevel[0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["GrayLevelColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         GrayLevel[0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.5046601574881351, 1.3853708885149993`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.9077242838651725, 1.6872624741809998`}, {
       0.8145172801237547, 1.6752981629929686`}, {0.7895054711373384, 
       1.6725315055558045`}, {0.7644121728389066, 1.6706417006310805`}, {
       0.7392681160282346, 1.66963106259039}, {0.7141040936671005, 
       1.6695008291233702`}, {0.6889509231683258, 1.670251159721952}, {
       0.663839408654873, 1.671881135485036}, {0.6388003032352171, 
       1.6743887602438363`}, {0.2871424442694028, 1.715833451488587}, {
       0.26220641237537934`, 1.7192156542512609`}, {0.23740399220863143`, 
       1.7234682929638354`}, {0.21276555834164543`, 1.7285861595828234`}, {
       0.1883212845191774, 1.7345629864533123`}, {0.1641011067056254, 
       1.7413914539847215`}, {0.14013468642360227`, 1.7490631996148256`}, {
       0.11645137442860692`, 1.7575688280510617`}, {0.028579636450635548`, 
       1.7908742022928765`}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "GrayLevel[0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["GrayLevelColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         GrayLevel[0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.4631171477847145, 1.6963479973133095`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.9077242838651725, 1.6872624741809998`}, {
       0.8448801252683644, 1.5862666598432027`}, {0.8275806618012703, 
       1.5595199561510784`}, {0.8093559292927212, 1.5333949352011258`}, {
       0.7902282468734672, 1.5079235913042723`}, {0.7702210394823746, 
       1.4831371182382342`}, {0.7493588091788015, 1.4590658710456959`}, {
       0.7276671051358657, 1.4357393288596514`}, {0.705172492351353, 
       1.4131860588014433`}, {0.3831428351702787, 1.101422447825548}, {
       0.3598728619335082, 1.0796700700198092`}, {0.3358560260880004, 
       1.058745223769154}, {0.3111217401312608, 1.038673534930049}, {
       0.28570029519442225`, 1.0194795845298081`}, {0.25962282394585967`, 
       1.0011868786631515`}, {0.2329212624642047, 0.9838178197051934}, {
       0.2056283111274556, 0.9673936788761128}, {0.1026501409124857, 
       0.9078534467412606}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "RGBColor[1, 0, 0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["RGBColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         RGBColor[1, 0, 0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.5430610929488723, 1.2584369330433065`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.9077242838651725, 1.6872624741809998`}, {
       1.008620239585479, 1.6243927772039575`}, {1.0353400869266034`, 
       1.6070869438514424`}, {1.0614380450894574`, 1.5888567850565238`}, {
       1.0868821529058712`, 1.5697246265953169`}, {1.1116412499531103`, 
       1.5497138988883241`}, {1.1356850147148516`, 1.5288491083061002`}, {
       1.1589840017147788`, 1.507155807157237}, {1.1815096775773286`, 
       1.4846605623954359`}, {1.4928849101151376`, 1.1626288079250495`}, {
       1.5146096885092308`, 1.139359168613587}, {1.535506963932193, 
       1.1153436321870387`}, {1.5555511442924927`, 1.0906116095515608`}, {
       1.574717682251395, 1.0651933890664842`}, {1.5929831052851453`, 
       1.039120099451321}, {1.610325044430867, 1.0124236716636168`}, {
       1.6267222616809758`, 0.9851367997943323}, {1.6861623652096958`, 
       0.8821830880050332}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "RGBColor[1, 0, 0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["RGBColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         RGBColor[1, 0, 0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.3360646067395954`, 1.3225494803975886`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.9077242838651725, 1.6872624741809998`}, {
       0.9966292710767992, 1.717656047503477}, {1.0205755872485496`, 
       1.7253772131568348`}, {1.044777402459337, 1.7322557738890603`}, {
       1.069205077674524, 1.738283305790706}, {1.0938286972573903`, 
       1.743452427174685}, {1.1186181056056648`, 1.7477568076163408`}, {
       1.1435429440819365`, 1.751191175706075}, {1.1685726881927114`, 
       1.7537513255050399`}, {1.5213465859849857`, 1.7836074776383806`}, {
       1.5464505827628643`, 1.7852902738293326`}, {1.5715980883060536`, 
       1.7860936555563331`}, {1.5967583054292454`, 1.7860166389486014`}, {
       1.6219004213797468`, 1.785059318325422}, {1.6469936455726768`, 
       1.7832228660806368`}, {1.672007247299014, 1.7805095312468588`}, {
       1.6969105933603177`, 1.7769226367411668`}, {1.7896590283458595`, 
       1.7619028545143514`}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "GrayLevel[0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["GrayLevelColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         GrayLevel[0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.3450646505793067`, 1.7674385846645555`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.9077242838651725, 1.6872624741809998`}, {
       0.92666289959588, 1.6053917911917892`}, {0.9313500128028367, 
       1.583382551316153}, {0.9352641568608318, 1.5612227871835773`}, {
       0.9384005382677957, 1.5389396370070836`}, {0.9407553160177395, 
       1.5165603901058475`}, {0.9423256063046892, 1.4941124534850168`}, {
       0.9431094860543708, 1.4716233182714038`}, {0.943105995279327, 
       1.4491205260461575`}, {0.9375164429225885, 1.1325295205924917`}, {
       0.9367255858978376, 1.1100406296619783`}, {0.9351483311556381, 
       1.0875931813081825`}, {0.932786610299365, 1.0652146660599546`}, {
       0.9296433156379484, 1.0429324900264152`}, {0.9257222966437744, 
       1.0207739413337447`}, {0.9210283552383836, 0.9987661567064617}, {
       0.9155672399117424, 0.9769360882341172}, {0.8937504029733262, 
       0.8957849605468343}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "GrayLevel[0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["GrayLevelColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         GrayLevel[0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.9391976688222142, 1.2908446835354324`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.1026501409124857, 0.9078534467412606}, {
       0.07228729576787596, 0.9968849498910262}, {0.06457495024855375, 
       1.0208649961459864`}, {0.057706384458671045`, 1.045100212171215}, {
       0.051690010067253045`, 1.069560918027378}, {0.046533195097211544`, 
       1.0942171576263964`}, {0.042242254902009946`, 1.1190387354175166`}, {
       0.038822444431492964`, 1.1439952533666455`}, {0.03627795179634985, 
       1.1690561481836534`}, {0.006649750011609834, 1.5222644504042995`}, {
       0.004983691354356834, 1.5473990309727124`}, {0.004198107033116738, 
       1.5725765159359422`}, {0.00429395912287045, 1.5977660713940351`}, {
       0.005271130237240906, 1.6229368486647646`}, {0.007128423672251527, 
       1.648058022062831}, {0.009863564871883335, 1.6730988266508933`}, {
       0.013473204213637069`, 1.6980285959162094`}, {0.028579636450635548`, 
       1.7908742022928765`}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "GrayLevel[0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["GrayLevelColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         GrayLevel[0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.022706195748328047`, 1.3457645110112635`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.1026501409124857, 0.9078534467412606}, {
       0.16549429950929384`, 1.008849261079058}, {0.18279376297638794`, 
       1.0355959647711823`}, {0.2010184954849371, 1.061720985721135}, {
       0.2201461779041911, 1.0871923296179886`}, {0.24015338529528363`, 
       1.1119788026840265`}, {0.2610156155988568, 1.1360500498765653`}, {
       0.2827073196417925, 1.1593765920626096`}, {0.3052019324263052, 
       1.1819298621208176`}, {0.6272315896073796, 1.4936934730967129`}, {
       0.6505015628441501, 1.5154458509024518`}, {0.6745183986896579, 
       1.5363706971531068`}, {0.6992526846463976, 1.5564423859922119`}, {
       0.7246741295832361, 1.5756363363924528`}, {0.7507516008317986, 
       1.5939290422591095`}, {0.7774531623134537, 1.6112981012170675`}, {
       0.8047461136502028, 1.627722242046148}, {0.9077242838651725, 
       1.6872624741809998`}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "RGBColor[1, 0, 0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["RGBColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         RGBColor[1, 0, 0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.46731333182878604`, 1.3366789878789547`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.1026501409124857, 0.9078534467412606}, {
       0.20359814680571853`, 0.8451348732020045}, {0.2303326384487802, 
       0.8278692585714882}, {0.25644663919178845`, 0.8096787814700873}, {
       0.28190816821984127`, 0.790585719077269}, {0.306686043775115, 
       0.7706134539340812}, {0.3307499213439675, 0.7497864453074516}, {
       0.3540703308186994, 0.7281301992358614}, {0.3766187125884645, 
       0.705671237293079}, {0.6883223278549914, 0.3841443554844165}, {
       0.7100710677816571, 0.36091018229954314`}, {0.7309935310177786, 
       0.3369292518731488}, {0.7510640946252769, 0.3122309327307498}, {
       0.7702581789548657, 0.2868454719563013}, {0.7885522777478067, 
       0.2608039581497549}, {0.8059239869231221, 0.23413828335404263`}, {
       0.8223520320150136, 0.206881103998115}, {0.8819091790788038, 
       0.10403624221960339`}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "RGBColor[1, 0, 0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["RGBColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         RGBColor[1, 0, 0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.5313396089112548, 0.5438114366006103},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.1026501409124857, 0.9078534467412606}, {
       0.18443291524000133`, 0.9269785780898472}, {0.20641949191405198`, 
       0.9317160419063354}, {0.22855836848059635`, 0.9356812987237124}, {
       0.25082243230681417`, 0.9388694924440721}, {0.27318441744785066`, 
       0.941276718608874}, {0.2956169380383733, 0.942900029180582}, {
       0.3180925218309907, 0.9437374361530134}, {0.3405836438404597, 
       0.943787913985975}, {0.6570237486647954, 0.9389605195082044}, {
       0.679502864876815, 0.9382240063834301}, {0.7019424459801233, 
       0.9367014042802894}, {0.7243150110805899, 0.9343945778711664}, {
       0.7465931613560118, 0.9313063522378682}, {0.7687496136104004, 
       0.9274405094118543}, {0.7907572336866646, 0.9228017837425292}, {
       0.8125890696967724, 0.9173958560992652}, {0.8937504029733262, 
       0.8957849605468343}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "GrayLevel[0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["GrayLevelColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         GrayLevel[0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.4987867167858275, 0.9402611972333865},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.1026501409124857, 0.9078534467412606}, {
       0.1146956882741137, 0.8147423748658074}, {0.11748454582490431`, 
       0.7897558705561701}, {0.11939742267523179`, 0.7646870846619628}, {
       0.12043197619820067`, 0.7395667179635599}, {0.1205869394157999, 
       0.7144255344103675}, {0.11986212255052175`, 0.6892943234453954}, {
       0.1182584132577752, 0.6642038622986073}, {0.11577777553880797`, 
       0.6391848782952279}, {0.07471771917381387, 0.2878034630946843}, {
       0.07136319097047616, 0.26288659602462244`}, {0.06713888044476923, 
       0.23810236061909656`}, {0.062049960947737515`, 0.21348110918041352`}, {
       0.056102664683863046`, 0.18905299441066864`}, {0.049304275078725146`, 
       0.164847932484888}, {0.04166311785926757, 0.1408955664138366}, {
       0.033188550857600196`, 0.11722522974136038`}, {0., 
       0.029399908739900615`}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "GrayLevel[0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["GrayLevelColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         GrayLevel[0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.09401182824900328, 0.4636385918453452},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{1.6861623652096958`, 0.8821830880050332}, {
       1.5852664094893898`, 0.9450527849820761}, {1.5585465621482655`, 
       0.9623586183345912}, {1.5324486039854113`, 0.9805887771295096}, {
       1.5070044961689977`, 0.9997209355907167}, {1.4822453991217586`, 
       1.0197316632977094`}, {1.458201634360017, 1.0405964538799333`}, {
       1.43490264736009, 1.0622897550287962`}, {1.4123769714975403`, 
       1.0847849997905976`}, {1.1010017389597313`, 1.406816754260984}, {
       1.079276960565638, 1.4300863935724464`}, {1.0583796851426759`, 
       1.4541019299989948`}, {1.038335504782376, 1.478833952634473}, {
       1.0191689668234738`, 1.5042521731195495`}, {1.0009035437897236`, 
       1.5303254627347125`}, {0.9835616046440019, 1.5570218905224167`}, {
       0.9671643873938931, 1.5843087623917014`}, {0.9077242838651725, 
       1.6872624741809998`}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "RGBColor[1, 0, 0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["RGBColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         RGBColor[1, 0, 0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.2578220423352733`, 1.2468960817884447`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{1.6861623652096958`, 0.8821830880050332}, {
       1.6741713967010163`, 0.975446358304553}, {1.6713978655316422`, 
       1.0004733573104259`}, {1.6695017225795756`, 1.02558207683757}, {
       1.668485289978349, 1.0507417672004227`}, {1.668349812513976, 
       1.0759216162913943`}, {1.6690954561005091`, 1.1010907873152742`}, {
       1.670721307576854, 1.1262184565538709`}, {1.673225375825079, 
       1.1512738511146374`}, {1.7146240410795444`, 1.5031617577183645`}, {
       1.7180032594633299`, 1.5281141932207787`}, {1.722253489583557, 
       1.5529331113743279`}, {1.7273695263464488`, 1.577588117402074}, {
       1.733345104338048, 1.6020490172639716`}, {1.7401729054972277`, 
       1.6262858546343497`}, {1.7478445680778432`, 1.6502689475882752`}, {
       1.7563506968890383`, 1.673968924951868}, {1.7896590283458595`, 
       1.7619028545143514`}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "GrayLevel[0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["GrayLevelColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         GrayLevel[0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.6951624090494077`, 1.3270721922720008`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{1.6861623652096958`, 0.8821830880050332}, {
       1.6233702567858144`, 0.7813383971050227}, {1.6060854376206575`, 
       0.754631912134897}, {1.5878767476922628`, 0.7285465728784623}, {
       1.568766486484648, 0.7031143250499974}, {1.5487780576015897`, 
       0.6783663145477641}, {1.527935940105128, 0.6543328493108199}, {
       1.506265658536997, 0.6310433622020483}, {1.4837937516596997`, 
       0.6085263749628593}, {1.1620924772073433`, 0.2972676366486877}, {
       1.138846465503145, 0.2755507249695376}, {1.1148548174707966`, 
       0.2546604847190368}, {1.0901469147612555`, 0.2346224993730105}, {
       1.0647530161951033`, 0.21546130868339786`}, {1.0387042207057315`, 
       0.197200378625358}, {1.0120324292536702`, 0.17986207265939158`}, {
       0.9847703057587041, 0.16346762434366813`}, {0.8819091790788038, 
       0.10403624221960339`}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "RGBColor[1, 0, 0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["RGBColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         RGBColor[1, 0, 0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.3218483194177426`, 0.4540285305101008},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{1.6861623652096958`, 0.8821830880050332}, {
       1.6042050252200972`, 0.8631821019928654}, {1.5821722910859293`, 
       0.8584786954697443}, {1.5599884769810706`, 0.8545490901320871}, {
       1.5376807505716208`, 0.8513980984168005}, {1.5152764312743254`, 
       0.849029579222557}, {1.4928029567995338`, 0.8474464331839502}, {
       1.4702878495492884`, 0.8466505991192002}, {1.4477586829116946`, 
       0.8466430516557552}, {1.130793898017147, 0.8520838006724757}, {
       1.1082782625983028`, 0.8528645490534248}, {1.0858037324331413`, 
       0.8544326371261776}, {1.0633978312165684`, 0.8567861445134274}, {
       1.0410879985962493`, 0.8599221889649649}, {1.0189015565683253`, 
       0.8638369298874576}, {0.9968656760172128, 0.8685255730478784}, {
       0.9750073434404627, 0.8739823764448187}, {0.8937504029733262, 
       0.8957849605468343}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "GrayLevel[0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["GrayLevelColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         GrayLevel[0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.2892954272923145`, 0.850478291142877},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{1.6861623652096958`, 0.8821830880050332}, {
       1.7165962904251568`, 0.7932610144322867}, {1.724328180053139, 
       0.769309934392077}, {1.7312172915065238`, 0.7451029830000764}, {
       1.7372551879548008`, 0.7206698055810071}, {1.742434475017821, 
       0.6960403245099275}, {1.7467488098214097`, 0.671244702567448}, {
       1.750192908765244, 0.6463133060005303}, {1.7527625539934724`, 
       0.6212766673341102}, {1.7827505998381714`, 0.2684034321320974}, {
       1.7844426444048622`, 0.2432922127770727}, {1.785255016127946, 
       0.21813716548044915`}, {1.7851867201269385`, 0.19296909666363124`}, {
       1.7842378400413321`, 0.16781882869497983`}, {1.782409537928166, 
       0.14271716214283978`}, {1.779704052838899, 0.1176948380552657}, {
       1.7761246980773302`, 0.0927825003126397}, {1.7611324798214443`, 0.}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "GrayLevel[0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["GrayLevelColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         GrayLevel[0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.76651541060771, 0.4447345723309221},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{1.7896590283458595`, 1.7619028545143514`}, {
       1.7007540411342328`, 1.7315092811918746`}, {1.6768077249624824`, 
       1.7237881155385164`}, {1.652605909751695, 1.716909554806291}, {
       1.628178234536508, 1.7108820229046455`}, {1.6035546149536417`, 
       1.7057129015206667`}, {1.5787652066053672`, 1.7014085210790109`}, {
       1.5538403681290955`, 1.6979741529892767`}, {1.5288106240183206`, 
       1.6954140031903115`}, {1.1760367262260463`, 1.6655578510569713`}, {
       1.1509327294481677`, 1.6638750548660193`}, {1.1257852239049784`, 
       1.6630716731390187`}, {1.1006250067817867`, 1.6631486897467505`}, {
       1.0754828908312852`, 1.6641060103699297`}, {1.0503896666383554`, 
       1.6659424626147148`}, {1.025376064912018, 1.6686557974484928`}, {
       1.0004727188507143`, 1.6722426919541848`}, {0.9077242838651725, 
       1.6872624741809998`}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "RGBColor[1, 0, 0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["RGBColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         RGBColor[1, 0, 0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.3523186616317253`, 1.6817267440307964`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{1.7896590283458595`, 1.7619028545143514`}, {
       1.8016499968545392`, 1.668639584214832}, {1.8044235280239134`, 
       1.6436125852089591`}, {1.80631967097598, 1.618503865681815}, {
       1.8073361035772064`, 1.5933441753189623`}, {1.8074715810415796`, 
       1.5681643262279907`}, {1.8067259374550462`, 1.5429951552041108`}, {
       1.8051000859787014`, 1.5178674859655141`}, {1.8025960177304765`, 
       1.4928120914047476`}, {1.7611973524760112`, 1.1409241848010205`}, {
       1.7578181340922256`, 1.1159717492986063`}, {1.7535679039719985`, 
       1.0911528311450571`}, {1.7484518672091067`, 1.066497825117311}, {
       1.7424762892175076`, 1.0420369252554136`}, {1.7356484880583278`, 
       1.0178000878850355`}, {1.7279768254777124`, 0.9938169949311096}, {
       1.7194706966665172`, 0.970117017567517}, {1.6861623652096958`, 
       0.8821830880050332}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "RGBColor[1, 0, 0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["RGBColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         RGBColor[1, 0, 0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.780658984506148, 1.3170137502473847`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{1.7896590283458595`, 1.7619028545143514`}, {
       1.71969265686494, 1.6496385982026642`}, {1.7004334539001467`, 
       1.61990819267367}, {1.6801457827473545`, 1.5908698678088684`}, {
       1.6588544889391312`, 1.5625591857307293`}, {1.6365856471062088`, 
       1.5350108174455142`}, {1.6133665290448838`, 1.5082585003830276`}, {
       1.5892255703182938`, 1.4823349970796804`}, {1.564192335432475, 
       1.4572720550554692`}, {1.2058288852834624`, 1.1108248974684627`}, {
       1.1799340314808329`, 1.0866532103469975`}, {1.153209271195444, 
       1.0634023802662007`}, {1.1256873332159791`, 1.0411008816257046`}, {
       1.0974019226040612`, 1.0197760262153448`}, {1.0683876794169573`, 
       0.9994539297674594}, {1.0386801362852291`, 0.9801594799739544}, {
       1.0083156748972841`, 0.9619163060073017}, {0.8937504029733262, 
       0.8957849605468343}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "GrayLevel[0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["GrayLevelColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         GrayLevel[0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.383792046588767, 1.2853089533852284`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.8819091790788038, 0.10403624221960339`}, {
       0.7809611731855713, 0.16675481575885975`}, {0.7542266815425095, 
       0.184020430389376}, {0.7281126807995013, 0.20221090749077686`}, {
       0.7026511517714487, 0.22130396988359513`}, {0.6778732762161749, 
       0.24127623502678286`}, {0.6538093986473223, 0.26210324365341253`}, {
       0.6304889891725906, 0.28375948972500276`}, {0.6079406074028253, 
       0.30621845166778516`}, {0.2962369921362984, 0.6277453334764477}, {
       0.2744882522096327, 0.650979506661321}, {0.2535657889735111, 
       0.6749604370877152}, {0.23349522536601286`, 0.6996587562301143}, {
       0.21430114103642406`, 0.7250442170045629}, {0.1960070422434831, 
       0.7510857308111093}, {0.1786353330681676, 0.7777514056068217}, {
       0.16220728797627615`, 0.8050085849627493}, {0.1026501409124857, 
       0.9078534467412606}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "RGBColor[1, 0, 0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["RGBColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         RGBColor[1, 0, 0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.4532197110800351, 0.46807825236025397`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.8819091790788038, 0.10403624221960339`}, {
       0.9447012875026858, 0.20488093311961408`}, {0.9619861066678426, 
       0.2315874180897397}, {0.9801947965962374, 0.25767275734617456`}, {
       0.9993050578038521, 0.2831050051746394}, {1.0192934866869106`, 
       0.3078530156768727}, {1.040135604183372, 0.33188648091381684`}, {
       1.0618058857515031`, 0.35517596802258855`}, {1.0842777926288005`, 
       0.37769295526177743`}, {1.405979067081157, 0.688951693575949}, {
       1.4292250787853553`, 0.7106686052550991}, {1.4532167268177036`, 
       0.7315588455055999}, {1.4779246295272448`, 0.7515968308516262}, {
       1.5033185280933972`, 0.7707580215412388}, {1.5293673235827683`, 
       0.7890189515992787}, {1.5560391150348298`, 0.8063572575652451}, {
       1.583301238529796, 0.8227517058809686}, {1.6861623652096958`, 
       0.8821830880050332}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "RGBColor[1, 0, 0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["RGBColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         RGBColor[1, 0, 0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.2462232248707577`, 0.532190799714536},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.8819091790788038, 0.10403624221960339`}, {
       0.8627439475130866, 0.18587994710744618`}, {0.8579960325440757, 
       0.20788302555445057`}, {0.8540209083676118, 0.23003875947322835`}, {
       0.8508234431657767, 0.2523200155864066}, {0.8484075527515396, 
       0.27469950689439626`}, {0.8467761957732097, 0.29714982609273377`}, {
       0.8459313700910954, 0.31964347913675545`}, {0.8458741103307991, 
       0.34215291891249927`}, {0.8506105998886079, 0.6588524062433913}, {
       0.8513409761739618, 0.6813500663034906}, {0.8528580940411484, 
       0.703808394626744}, {0.8551600955341168, 0.7261998873600202}, {
       0.8582441614799501, 0.7484971225011703}, {0.8621065149413976, 
       0.7706727934817027}, {0.8667424258423462, 0.7926997426080901}, {
       0.8721462167605627, 0.8145509943207538}, {0.8937504029733262, 
       0.8957849605468343}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "GrayLevel[0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["GrayLevelColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         GrayLevel[0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.8493562869533765, 0.5004860028523799},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.8819091790788038, 0.10403624221960339`}, {
       0.7930067205471991, 0.07364374388340622}, {0.769061086454928, 
       0.06592285420428523}, {0.7448599625622472, 0.059044545411478855`}, {
       0.7204329870571633, 0.05301724110589423}, {0.6958100747194887, 
       0.04784832269588957}, {0.6710213802853582, 0.04354412035754718}, {
       0.6460972615178797, 0.04010990528234937}, {0.6210682420291473, 
       0.037549883221752345`}, {0.2683045703976263, 0.007695349829871301}, {
       0.24320130226762302`, 0.00601265594468281}, {0.21805452850579443`, 
       0.005209350965551196}, {0.1928950454012644, 0.005286418669267157}, {
       0.1677536648078012, 0.006243764673970809}, {0.14266117640972237`, 
       0.008080216554736452}, {0.11764831001494933`, 0.010793525279397476`}, {
       0.09274569792139056, 0.014380367962848917`}, {0., 
       0.029399908739900615`}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "GrayLevel[0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["GrayLevelColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         GrayLevel[0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.44458139841655236`, 0.02386339746433853},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.8819091790788038, 0.10403624221960339`}, {
       0.9751352127181463, 0.11595885954686769`}, {1.0001519215112853`, 
       0.11871426447678335`}, {1.025249722893065, 0.12059265234121774`}, {
       1.0503978805489569`, 0.12159172275061325`}, {1.075565596495035, 
       0.1217102521817669}, {1.1007220487950857`, 0.12094809547623153`}, {
       1.1258364293070509`, 0.11930618601808562`}, {1.1508779814125767`, 
       0.11678653459085442`}, {1.5025673017096322`, 0.07517203770301317}, {
       1.5275053579805211`, 0.07177773002713861}, {1.5523093777359531`, 
       0.06751292298101574}, {1.576948984444487, 0.062382839510224164`}, {
       1.6013940029250329`, 0.05639376223118542}, {1.6256144963012382`, 
       0.0495530257370852}, {1.6495808026640326`, 0.041869007615477516`}, {
       1.6732635713974302`, 0.03335111818857506}, {1.7611324798214443`, 0.}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "GrayLevel[0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["GrayLevelColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         GrayLevel[0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.3265762702687713`, 0.0947422840404249},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.8937504029733262, 0.8957849605468343}, {
       0.781604783501201, 0.9656913323480133}, {0.751905861307828, 
       0.9849339147864853}, {0.7228984189514008, 1.0052038739943372`}, {
       0.6946179807337651, 1.02647638613014}, {0.6670991806226871, 
       1.0487253995643566`}, {0.6403757198369628, 1.0719236667837693`}, {
       0.6144803255738286, 1.0960427777604664`}, {0.5894447109292164, 
       1.121053194744513}, {0.24337640432014063`, 1.4790888914429299`}, {
       0.21923122945086815`, 1.504959985136117}, {0.1960060640263197, 
       1.5316600722024873`}, {0.17372935101560683`, 1.5591564540697034`}, {
       0.15242837185455527`, 1.5874154569737313`}, {0.13212921303517733`, 
       1.616402473197811}, {0.11285673415854491`, 1.6460820034551986`}, {
       0.0946345374901909, 1.6764177003637788`}, {0.028579636450635548`, 
       1.7908742022928765`}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "GrayLevel[0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["GrayLevelColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         GrayLevel[0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.4176698819358268, 1.301288274324712},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.8937504029733262, 0.8957849605468343}, {
       0.8748117872426188, 0.9776556435360452}, {0.8701246740356622, 
       0.9996648834116814}, {0.8662105299776669, 1.021824647544257}, {
       0.863074148570703, 1.0441077977207507`}, {0.8607193708207591, 
       1.0664870446219867`}, {0.8591490805338096, 1.0889349812428175`}, {
       0.8583652007841279, 1.1114241164564305`}, {0.8583686915591717, 
       1.1339269086816768`}, {0.8639582439159104, 1.4505179141353426`}, {
       0.8647491009406613, 1.473006805065856}, {0.8663263556828608, 
       1.4954542534196518`}, {0.8686880765391339, 1.5178327686678796`}, {
       0.8718313712005505, 1.540114944701419}, {0.8757523901947245, 
       1.5622734933940896`}, {0.8804463316001152, 1.5842812780213724`}, {
       0.8859074469267565, 1.606111346493717}, {0.9077242838651725, 
       1.6872624741809998`}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "RGBColor[1, 0, 0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["RGBColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         RGBColor[1, 0, 0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.8622770180162849, 1.2922027511924021`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.8937504029733262, 0.8957849605468343}, {
       0.8119676286458108, 0.8766598291982478}, {0.7899810519717602, 
       0.8719223653817597}, {0.7678421754052157, 0.8679571085643828}, {
       0.7455781115789979, 0.8647689148440229}, {0.7232161264379615, 
       0.862361688679221}, {0.7007836058474388, 0.860738378107513}, {
       0.6783080220548214, 0.8599009711350816}, {0.6558169000453524, 
       0.8598504933021202}, {0.33937679522101655`, 0.8646778877798907}, {
       0.31689767900899707`, 0.8654144009046651}, {0.2944580979056887, 
       0.8669370030078059}, {0.2720855328052221, 0.8692438294169288}, {
       0.24980738252980017`, 0.872332055050227}, {0.2276509302754116, 
       0.8761978978762408}, {0.20564331019914742`, 0.8808366235455659}, {
       0.18381147418903965`, 0.8862425511888299}, {0.1026501409124857, 
       0.9078534467412606}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "RGBColor[1, 0, 0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["RGBColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         RGBColor[1, 0, 0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.4976138270999846, 0.8633772100547085},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.8937504029733262, 0.8957849605468343}, {
       0.9757077429629251, 0.9147859465590022}, {0.997740477097093, 
       0.9194893530821235}, {1.0199242912019517`, 0.9234189584197805}, {
       1.0422320176114015`, 0.9265699501350673}, {1.0646363369086969`, 
       0.9289384693293108}, {1.0871098113834885`, 0.9305216153679174}, {
       1.109624918633734, 0.9313174494326675}, {1.1321540852713277`, 
       0.9313249968961126}, {1.4491188701658753`, 0.9258842478793922}, {
       1.4716345055847195`, 0.9251034994984431}, {1.494109035749881, 
       0.9235354114256904}, {1.516514936966454, 0.9211819040384404}, {
       1.538824769586773, 0.918045859586903}, {1.561011211614697, 
       0.9141311186644103}, {1.5830470921658095`, 0.9094424755039894}, {
       1.6049054247425596`, 0.9039856721070492}, {1.6861623652096958`, 
       0.8821830880050332}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "RGBColor[1, 0, 0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["RGBColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         RGBColor[1, 0, 0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.2906173408907073`, 0.9274897574089908},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.8937504029733262, 0.8957849605468343}, {
       0.9637167744542458, 1.0080492168585218`}, {0.9829759774190393, 
       1.037779622387516}, {1.0032636485718316`, 1.066817947252317}, {
       1.0245549423800546`, 1.0951286293304565`}, {1.046823784212977, 
       1.1226769976156716`}, {1.0700429022743023`, 1.1494293146781582`}, {
       1.0941838610008923`, 1.175352817981505}, {1.119217095886711, 
       1.2004157600057166`}, {1.4775805460357239`, 1.546862917592723}, {
       1.5034753998383534`, 1.5710346047141883`}, {1.5302001601237423`, 
       1.5942854347949846`}, {1.5577220981032072`, 1.6165869334354808`}, {
       1.586007508715125, 1.637911788845841}, {1.615021751902229, 
       1.6582338852937264`}, {1.644729295033957, 1.6775283350872312`}, {
       1.675093756421902, 1.6957715090538839`}, {1.7896590283458595`, 
       1.7619028545143514`}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "GrayLevel[0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["GrayLevelColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         GrayLevel[0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.2996173847304193`, 1.3723788616759574`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.8937504029733262, 0.8957849605468343}, {
       0.9129156345390436, 0.8139412556589917}, {0.9176635495080546, 
       0.7919381772119872}, {0.9216386736845184, 0.7697824432932096}, {
       0.9248361388863535, 0.7475011871800312}, {0.9272520293005908, 
       0.7251216958720416}, {0.9288833862789205, 0.702671376673704}, {
       0.929728211961035, 0.6801777236296824}, {0.9297854717213312, 
       0.6576682838539386}, {0.9250489821635223, 0.34096879652304657`}, {
       0.9243186058781683, 0.31847113646294745`}, {0.9228014880109817, 
       0.29601280813969394`}, {0.9204994865180134, 0.27362131540641776`}, {
       0.9174154205721801, 0.25132408026526765`}, {0.9135530671107326, 
       0.22914840928473512`}, {0.9089171562097839, 0.2071214601583479}, {
       0.9035133652915676, 0.18527020844568412`}, {0.8819091790788038, 
       0.10403624221960339`}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "RGBColor[1, 0, 0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["RGBColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         RGBColor[1, 0, 0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.9263032950987538, 0.4993351999140581},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.8937504029733262, 0.8957849605468343}, {
       0.8240131760074387, 0.7835487573227945}, {0.8048154568841788, 
       0.7538247891966692}, {0.7845894571679617, 0.724790746485085}, {
       0.7633599468647128, 0.6964821860663221}, {0.7411529249412755, 
       0.6689337763483278}, {0.7179955874854748, 0.642179254811648}, {
       0.6939162944001107, 0.6162513866924284}, {0.6689445346716745, 
       0.5911819248560874}, {0.3114443734823445, 0.24462790413331437`}, {
       0.2856107290669874, 0.22044755018802675`}, {0.2589468374379722, 
       0.19718591688564158`}, {0.23148535284047367`, 0.17487149185608153`}, {
       0.2032599063011774, 0.15353160271963495`}, {0.17430506444165106`, 
       0.13319238361986818`}, {0.14465628714592926`, 0.11387874321814184`}, {
       0.11434988413415403`, 0.0956143341889295}, {0., 0.029399908739900615`}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "GrayLevel[0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["GrayLevelColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         GrayLevel[0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.48897551443650206`, 0.4191623551587932},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.8937504029733262, 0.8957849605468343}, {
       1.006141668178386, 0.8258638729862557}, {1.035906291940536, 
       0.8066161994691671}, {1.0649792174987796`, 0.7863388534148237}, {
       1.0933248403565063`, 0.7650566677110411}, {1.1209084467168215`, 
       0.7427957058342051}, {1.1476962559952022`, 0.7195832299303321}, {
       1.1736554621892816`, 0.6954476674281646}, {1.1987542740551038`, 
       0.6704185762251895}, {1.5457071047943507`, 0.3121045920064563}, {
       1.5699147847798858`, 0.28621262427048255`}, {1.5932016866681311`, 
       0.25948948890110624`}, {1.6155392918836966`, 0.23196791269703843`}, {
       1.6369002444184093`, 0.20368160027684956`}, {1.6572583843331672`, 
       0.17466519280221682`}, {1.6765887797950128`, 0.14495422555422188`}, {
       1.694867757610194, 0.11458508441465576`}, {1.7611324798214443`, 0.}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "GrayLevel[0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["GrayLevelColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         GrayLevel[0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.370970386288721, 0.49004124173487956`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0., 
       0.029399908739900615`}, {-0.012045547361627995`, 
       0.122510980615354}, {-0.014834404912418608`, 
       0.1474974849249912}, {-0.01674728176274609, 
       0.17256627081919845`}, {-0.017781835285714975`, 
       0.1976866375176015}, {-0.0179367985033142, 
       0.2228278210707939}, {-0.017211981638036056`, 
       0.24795903203576591`}, {-0.015608272345289498`, 
       0.27304949318255395`}, {-0.013127634626322271`, 
       0.29806847718593343`}, {0.02793242173867183, 0.649449892386477}, {
       0.031286949942009534`, 0.674366759456539}, {0.035511260467716466`, 
       0.6991509948620648}, {0.040600179964748184`, 0.7237722463007479}, {
       0.04654747622862265, 0.7482003610704927}, {0.05334586583376044, 
       0.7724054229962735}, {0.060987023053218126`, 0.7963577890673248}, {
       0.0694615900548855, 0.820028125739801}, {0.1026501409124857, 
       0.9078534467412606}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "RGBColor[1, 0, 0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["RGBColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         RGBColor[1, 0, 0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.008638312663482391, 0.4736147636358161},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0., 0.029399908739900615`}, {
       0.08890245853160479, 0.05979240707609779}, {0.11284809262387582`, 
       0.06751329675521878}, {0.13704921651655674`, 0.07439160554802515}, {
       0.16147619202164065`, 0.08041890985360978}, {0.18609910435931515`, 
       0.08558782826361444}, {0.2108877987934457, 0.08989203060195683}, {
       0.2358119175609242, 0.09332624567715464}, {0.26084093704965655`, 
       0.09588626773775166}, {0.6136046086811776, 0.1257408011296327}, {
       0.638707876811181, 0.1274234950148212}, {0.6638546505730095, 
       0.1282267999939528}, {0.6890141336775395, 0.12814973229023685`}, {
       0.7141555142710028, 0.1271923862855332}, {0.7392480026690816, 
       0.12535593440476756`}, {0.7642608690638547, 0.12264262568010653`}, {
       0.7891634811574134, 0.11905578299665509`}, {0.8819091790788038, 
       0.10403624221960339`}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "RGBColor[1, 0, 0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["RGBColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         RGBColor[1, 0, 0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.4373277806622515, 0.10957275349516547`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0., 0.029399908739900615`}, {
       0.06973722696588758, 0.14163611196394055`}, {0.08893494608914754, 
       0.17136008009006587`}, {0.10916094580536462`, 0.20039412280165003`}, {
       0.13039045610861355`, 0.22870268322041304`}, {0.15259747803205082`, 
       0.2562510929384072}, {0.17575481548785155`, 0.2830056144750872}, {
       0.1998341085732156, 0.3089334825943067}, {0.22480586830165183`, 
       0.33400294443064765`}, {0.5823060294909819, 0.6805569651534207}, {
       0.608139673906339, 0.7047373190987083}, {0.6348035655353542, 
       0.7279989524010935}, {0.6622650501328528, 0.7503133774306535}, {
       0.6904904966721489, 0.7716532665671001}, {0.7194453385316755, 
       0.7919924856668669}, {0.7490941158273973, 0.8113061260685932}, {
       0.7794005188391723, 0.8295705350978055}, {0.8937504029733262, 
       0.8957849605468343}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "GrayLevel[0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["GrayLevelColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         GrayLevel[0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.40477488853682425`, 0.506022514127942},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{1.7611324798214443`, 0.}, {
       1.7306985546059837`, 0.08892207357274662}, {1.722966664978002, 
       0.11287315361295647`}, {1.7160775535246167`, 0.13708010500495693`}, {
       1.7100396570763396`, 0.16151328242402624`}, {1.70486037001332, 
       0.18614276349510586`}, {1.7005460352097308`, 0.21093838543758547`}, {
       1.6971019362658968`, 0.23586978200450315`}, {1.6945322910376681`, 
       0.2609064206709231}, {1.664544245192969, 0.6137796558729358}, {
       1.6628522006262783`, 0.6388908752279605}, {1.6620398289031946`, 
       0.6640459225245842}, {1.662108124904202, 0.689213991341402}, {
       1.6630570049898084`, 0.7143642593100534}, {1.6648853071029743`, 
       0.7394659258621935}, {1.6675907921922413`, 0.7644882499497676}, {
       1.6711701469538103`, 0.7894005876923936}, {1.6861623652096958`, 
       0.8821830880050332}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "RGBColor[1, 0, 0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["RGBColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         RGBColor[1, 0, 0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.6807794344234304`, 0.43744851567411125`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{1.7611324798214443`, 0.}, {
       1.667906446182102, -0.011922617327264184`}, {
       1.642889737388963, -0.014678022257179846`}, {
       1.6177919360071833`, -0.01655641012161424}, {
       1.5926437783512915`, -0.01755548053100975}, {
       1.5674760624052133`, -0.017674009962163395`}, {
       1.5423196101051626`, -0.01691185325662803}, {
       1.5172052295931975`, -0.015269943798482122`}, {
       1.4921636774876716`, -0.012750292371250915`}, {1.1404743571906162`, 
       0.02886420451659033}, {1.1155363009197272`, 0.032258512192464894`}, {
       1.0907322811642952`, 0.03652331923858776}, {1.0660926744557613`, 
       0.04165340270937934}, {1.0416476559752155`, 0.047642479988418085`}, {
       1.0174271625990101`, 0.054483216482518304`}, {0.9934608562362156, 
       0.06216723460412599}, {0.9697780875028181, 0.07068512403102845}, {
       0.8819091790788038, 0.10403624221960339`}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "RGBColor[1, 0, 0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["RGBColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         RGBColor[1, 0, 0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.3164653886314766`, 0.00929395817917861},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{1.7611324798214443`, 0.}, {
       1.6487412146163847`, 0.06992108756057869}, {1.6189765908542348`, 
       0.08916876107766736}, {1.5899036652959908`, 0.10944610713201075`}, {
       1.5615580424382638`, 0.13072829283579335`}, {1.5339744360779488`, 
       0.15298925471262936`}, {1.5071866267995682`, 0.17620173061650235`}, {
       1.4812274206054885`, 0.20033729311866988`}, {1.4561286087396668`, 
       0.2253663843216449}, {1.10917577800042, 0.5836803685403781}, {
       1.084968098014885, 0.6095723362763518}, {1.0616811961266397`, 
       0.6362954716457282}, {1.039343590911074, 0.663817047849796}, {
       1.0179826383763613`, 0.692103360269985}, {0.9976244984616036, 
       0.7211197677446175}, {0.9782941029997577, 0.7508307349926127}, {
       0.9600151251845768, 0.7811998761321787}, {0.8937504029733262, 
       0.8957849605468343}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "GrayLevel[0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["GrayLevelColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         GrayLevel[0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.283912496506049, 0.405743718811955},
       Background->GrayLevel[1]]}}, {
     {RGBColor[1, 1, 0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{0.028579636450635548`, 1.7908742022928765`}, 0.1], 
      InsetBox["1", {0.028579636450635548`, 1.7908742022928765`},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{0.9077242838651725, 1.6872624741809998`}, 0.1], InsetBox["2", {0.9077242838651725, 1.6872624741809998`},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{0.1026501409124857, 0.9078534467412606}, 0.1], InsetBox["4", {0.1026501409124857, 0.9078534467412606},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{1.6861623652096958`, 0.8821830880050332}, 0.1], InsetBox["6", {1.6861623652096958`, 0.8821830880050332},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{1.7896590283458595`, 1.7619028545143514`}, 0.1], 
      InsetBox["3", {1.7896590283458595`, 1.7619028545143514`},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{0.8819091790788038, 0.10403624221960339`}, 0.1], 
      InsetBox["8", {0.8819091790788038, 0.10403624221960339`},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{0.8937504029733262, 0.8957849605468343}, 0.1], InsetBox["5", {0.8937504029733262, 0.8957849605468343},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{0., 0.029399908739900615`}, 0.1], InsetBox["7", {0., 0.029399908739900615`},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{1.7611324798214443`, 0.}, 0.1], 
      DiskBox[{1.7611324798214443`, 0.}, 0.06999999999999999], InsetBox["9", {1.7611324798214443`, 0.},
       BaseStyle->{
         GrayLevel[0], 12}]}}},
   Annotation[#, 
    VertexCoordinateRules -> {{0.028579636450635548`, 1.7908742022928765`}, {
     0.9077242838651725, 1.6872624741809998`}, {0.1026501409124857, 
     0.9078534467412606}, {1.6861623652096958`, 0.8821830880050332}, {
     1.7896590283458595`, 1.7619028545143514`}, {0.8819091790788038, 
     0.10403624221960339`}, {0.8937504029733262, 0.8957849605468343}, {0., 
     0.029399908739900615`}, {1.7611324798214443`, 0.}}]& ],
  AspectRatio->Automatic,
  FrameTicks->None,
  ImageSize->{340., Automatic},
  PlotRange->All,
  PlotRangePadding->Scaled[0.1]]], "Output",
 CellChangeTimes->{
  3.640849735460451*^9, {3.6408498845529785`*^9, 3.6408499256623297`*^9}, 
   3.64084995800218*^9, 3.640931715635086*^9}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"NFA", "@", "\"\<Sea\>\""}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Range", "@", "26"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<\>\"", ",", "\"\<>\>\"", ",", "\"\<<\>\"", ",", "\"\<,\>\"", ",", 
       "\"\<.\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "2", "}"}], ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", "4", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "5", "}"}], ",", 
         RowBox[{"{", "6", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "7", "}"}], ",", 
         RowBox[{"{", "8", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "9", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "10", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "11", "}"}], ",", 
         RowBox[{"{", "12", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "13", "}"}], ",", 
         RowBox[{"{", "14", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "15", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "16", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "17", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "18", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "19", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "20", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "21", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "22", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "23", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "24", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "25", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "26", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}]}], "}"}], ",", "1", ",", 
     RowBox[{"{", 
      RowBox[{
      "11", ",", "14", ",", "17", ",", "18", ",", "21", ",", "22", ",", "24", 
       ",", "25", ",", "27"}], "}"}]}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6404396377396183`*^9, 3.6404396499943194`*^9}, {
  3.6409311636055117`*^9, 3.640931262064143*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NFAManipulate", "[", 
  RowBox[{
   RowBox[{"NFA", "@", "\"\<Sea\>\""}], ",", 
   RowBox[{"ControlPlacement", "\[Rule]", "Left"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.640931238967822*^9, 3.640931309596862*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`arrowPosition$$ = 
    0.758, $CellContext`arrowSize$$ = 
    0.018000000000000002`, $CellContext`edgeLabelPosition$$ = 
    0.398, $CellContext`F$$ = {11, 14, 17, 18, 21, 22, 24, 25, 
    27}, $CellContext`FSel$$ = {
    False, False, False, False, False, False, False, False, False, False, 
     True, False, False, True, False, False, True, True, False, False, True, 
     True, False, True, True, 
     False}, $CellContext`headingsQ\[CapitalSigma]$$ = 
    False, $CellContext`imageSize$$ = Medium, $CellContext`lay$$ = 
    Left, $CellContext`out$$ = {
    "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, \
$CellContext`outForm$$ = 
    Column, $CellContext`plot$$ = $CellContext`NFAPlot, \
$CellContext`plotLabel$$ = None, $CellContext`Q$$ = {1, 2, 3, 4, 5, 6, 7, 8, 
    9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
    26}, $CellContext`s$$ = 1, $CellContext`sSel$$ = {
    True, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False, False, False, False, False, 
     False, False, False, False, False, False}, $CellContext`type$$ = 
    2, $CellContext`vertexSize$$ = 
    0.182, $CellContext`\[Delta]$$ = {{{}, {2}, {3}, {4}, {}}, {{}, {5}, {
      6}, {}, {}}, {{}, {7}, {8}, {}, {}}, {{}, {}, {}, {9}, {}}, {{}, {}, {
      10}, {}, {}}, {{}, {11}, {12}, {}, {}}, {{}, {13}, {14}, {}, {}}, {{}, {
      15}, {}, {}, {}}, {{}, {}, {}, {}, {16}}, {{}, {17}, {}, {}, {}}, {{}, {
      18}, {}, {}, {}}, {{}, {}, {19}, {}, {}}, {{}, {
      20}, {}, {}, {}}, {{}, {}, {21}, {}, {}}, {{}, {}, {
      22}, {}, {}}, {{}, {}, {}, {}, {
      23}}, {{}, {}, {}, {}, {}}, {{}, {}, {}, {}, {}}, {{}, {
      24}, {}, {}, {}}, {{}, {}, {
      25}, {}, {}}, {{}, {}, {}, {}, {}}, {{}, {}, {}, {}, {}}, {{}, {
      26}, {}, {}, {}}, {{}, {}, {}, {}, {}}, {{}, {}, {}, {}, {}}, {{}, {}, \
{}, {}, {}}}, $CellContext`\[Delta]Elements$$ = 
    "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", \
$CellContext`\[Delta]Output$$ = MatrixForm, $CellContext`\[CapitalSigma]$$ = {
    "", ">", "<", ",", "."}, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`Q$$], {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,
        15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26}}}, {{
       Hold[$CellContext`\[CapitalSigma]$$], {"", ">", "<", ",", "."}}}, {{
       Hold[$CellContext`\[Delta]$$], {{{}, {2}, {3}, {4}, {}}, {{}, {5}, {
         6}, {}, {}}, {{}, {7}, {8}, {}, {}}, {{}, {}, {}, {
         9}, {}}, {{}, {}, {10}, {}, {}}, {{}, {11}, {12}, {}, {}}, {{}, {
         13}, {14}, {}, {}}, {{}, {15}, {}, {}, {}}, {{}, {}, {}, {}, {
         16}}, {{}, {17}, {}, {}, {}}, {{}, {18}, {}, {}, {}}, {{}, {}, {
         19}, {}, {}}, {{}, {20}, {}, {}, {}}, {{}, {}, {
         21}, {}, {}}, {{}, {}, {22}, {}, {}}, {{}, {}, {}, {}, {
         23}}, {{}, {}, {}, {}, {}}, {{}, {}, {}, {}, {}}, {{}, {
         24}, {}, {}, {}}, {{}, {}, {
         25}, {}, {}}, {{}, {}, {}, {}, {}}, {{}, {}, {}, {}, {}}, {{}, {
         26}, {}, {}, {}}, {{}, {}, {}, {}, {}}, {{}, {}, {}, {}, {}}, {{}, \
{}, {}, {}, {}}}}}, {{
       Hold[$CellContext`sSel$$], {
       True, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False, False, False, False, False, 
        False, False, False, False, False, False}}}, {{
       Hold[$CellContext`FSel$$], {
       False, False, False, False, False, False, False, False, False, False, 
        True, False, False, True, False, False, True, True, False, False, 
        True, True, False, True, True, False}}}, {{
       Hold[$CellContext`s$$], 1}}, {{
       Hold[$CellContext`F$$], {11, 14, 17, 18, 21, 22, 24, 25, 27}}}, {{
       Hold[$CellContext`type$$], 2}}, {
      Hold[
       OpenerView[{
        "\:0412\:0438\:0437\:043d\:0430\:0447\:0435\:043d\:043d\:044f", 
         Dynamic[
          Grid[
           ArrayFlatten[{{
              Transpose[{
                Join[{SetterBar[
                    Dynamic[$CellContext`type$$], 
                    
                    Thread[{1, 2} -> {
                    "\:0414\:0421\:0410", "\:041d\:0421\:0410"}], Enabled -> 
                    False]; Null, "s"}, 
                 Array[Toggler[
                   Dynamic[
                    Part[$CellContext`sSel$$, #], 
                    Function[$CellContext`v$, Part[$CellContext`sSel$$, 
                    Part[
                    FirstPosition[$CellContext`sSel$$, True], 1]] = False; 
                    Part[$CellContext`sSel$$, #] = 
                    True; $CellContext`s$$ = #]], 
                   
                   Thread[{True, False} -> 
                    Map[Style[#, Bold]& , {"\[Rule]", " "}]]]& , 
                  Length[$CellContext`Q$$]], {Null}]}], 
              Transpose[{
                Join[{$CellContext`\[SpanFromLeft], "F"}, 
                 Array[Toggler[
                   Dynamic[
                    Part[$CellContext`FSel$$, #], 
                    
                    Function[$CellContext`v$, 
                    Part[$CellContext`FSel$$, #] = $CellContext`v$; \
$CellContext`F$$ = Pick[
                    Range[
                    Length[$CellContext`Q$$]], $CellContext`FSel$$]]], 
                   
                   Thread[{True, False} -> 
                    Map[Style[#, 15]& , {"*", " "}]]]& , 
                  Length[$CellContext`Q$$]], {Null}]}], 
              
              ArrayFlatten[{{{{$CellContext`\[SpanFromLeft], 
                   "\[CapitalSigma]"}, {"Q", "\[Delta]"}}, 
                 Transpose[
                  Prepend[{"\[CurlyEpsilon]", Null}][
                   Array[{
                    Function[Null, 
                    InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                    HoldAll}][
                    Dynamic[
                    Part[$CellContext`\[CapitalSigma]$$, #], 
                    Function[$CellContext`v$, 
                    If[
                    FreeQ[
                    
                    ReplacePart[$CellContext`\[CapitalSigma]$$, # -> 
                    ""], $CellContext`v$], 
                    Part[$CellContext`\[CapitalSigma]$$, #] = $CellContext`v$, 
                    Beep[]]]]], 
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["-", 
                    Catch[
                    If[
                    Length[$CellContext`\[CapitalSigma]$$] > 
                    1, {$CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$} = {
                    Drop[$CellContext`\[CapitalSigma]$$, {#}], 
                    Drop[$CellContext`\[Delta]$$, {}, {#}]}, 
                    Throw[
                    Beep[]]]]]}& , Length[$CellContext`\[CapitalSigma]$$] - 1,
                     2]]], {{
                   Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["+", 
                    
                    Catch[{$CellContext`\[CapitalSigma]$$, $CellContext`\
\[Delta]$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`\[CapitalSigma]$$, $CellContext`\
\[Placeholder] :> Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    ArrayFlatten[{{$CellContext`\[Delta]$$, {}}}]}]]}, {
                  Null}}}, {
                 MapAt[Null& , {$CellContext`s$$, 2}][
                  Array[
                   Function[$CellContext`qi$, {
                    Function[Null, 
                    InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                    HoldAll}][
                    Dynamic[
                    Part[$CellContext`Q$$, $CellContext`qi$], 
                    Function[$CellContext`v$, 
                    
                    Catch[{$CellContext`s$$, $CellContext`F$$} = 
                    ReplaceAll[{$CellContext`s$$, $CellContext`F$$}, 
                    Part[$CellContext`Q$$, $CellContext`qi$] -> If[
                    FreeQ[$CellContext`Q$$, $CellContext`v$], 
                    Part[$CellContext`Q$$, $CellContext`qi$] = \
$CellContext`v$, 
                    Throw[
                    Beep[]]]]]]]], 
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["-", 
                    Catch[
                    If[
                    Length[$CellContext`Q$$] > 
                    1, $CellContext`Q$$ = 
                    Drop[$CellContext`Q$$, {$CellContext`qi$}]; $CellContext`\
\[Delta]$$ = ReplaceAll[
                    DeleteCases[
                    
                    Drop[$CellContext`\[Delta]$$, {$CellContext`qi$}, {}], \
$CellContext`qi$, {3}], Pattern[$CellContext`q$, 
                    Blank[]] :> 
                    Condition[$CellContext`q$ - 
                    1, $CellContext`q$ > $CellContext`qi$]]; \
$CellContext`sSel$$ = 
                    Drop[$CellContext`sSel$$, {$CellContext`qi$}]; \
$CellContext`FSel$$ = 
                    Drop[$CellContext`FSel$$, {$CellContext`qi$}]; \
$CellContext`s$$ = Part[
                    FirstPosition[$CellContext`sSel$$, True], 
                    1]; $CellContext`F$$ = Pick[
                    Range[
                    Length[$CellContext`Q$$]], $CellContext`FSel$$], 
                    Throw[
                    Beep[]]]]]}], 
                   Length[$CellContext`Q$$]]], 
                 Outer[Function[Null, 
                   InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                   HoldAll}][
                   Dynamic[
                    Part[$CellContext`Q$$, 
                    Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]]], 
                    Function[$CellContext`v$, 
                    Catch[
                    If[
                    Head[$CellContext`v$] === List, 
                    Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]] = Map[Replace[
                    Part[
                    FirstPosition[$CellContext`Q$$, #], 1], "NotFound" :> 
                    Throw[
                    Beep[]]]& , $CellContext`v$], 
                    Throw[
                    Beep[]]]]]]]& , 
                  Apply[Sequence, 
                   Map[Range, 
                    Dimensions[$CellContext`\[Delta]$$]]]], 
                 Transpose[{
                   ConstantArray[Null, 
                    Length[$CellContext`Q$$]]}]}, {{{
                   Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["+", 
                    
                    Catch[{$CellContext`Q$$, $CellContext`\[Delta]$$, \
$CellContext`sSel$$, $CellContext`FSel$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`Q$$, $CellContext`\[Placeholder] :> 
                    Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    Append[$CellContext`\[Delta]$$, 
                    ConstantArray[{}, 
                    Length[$CellContext`\[CapitalSigma]$$]]], 
                    Append[$CellContext`sSel$$, False], 
                    Append[$CellContext`FSel$$, False]}]], Null}}, {
                  ConstantArray[Null, 
                   Length[$CellContext`\[CapitalSigma]$$]]}, Null}}]}}], 
           Alignment -> {Null, Null, {{1, 1} -> {Center, Center}}}, 
           ReplaceAll[
           Dividers -> {{
              False, True, True, True, True, {False}, True, False}, {
              False, True, True, {False}, True, False}}, True -> Gray]]]}, 
        True]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`out$$], {
       "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, 
       "\:0412\:0438\:0432\:0456\:0434 \:0414\:0421\:0410"}, {
      "\:0422\:0430\:0431\:043b\:0438\:0446\:044f", 
       "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}}, {{
       Hold[$CellContext`outForm$$], Column, 
       "\:0424\:043e\:0440\:043c\:0430\:0442"}, {Column, Row, InputForm}}, {{
       Hold[$CellContext`\[Delta]Elements$$], 
       "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
       "\:0415\:043b\:0435\:043c\:0435\:043d\:0442\:0438"}, {
      "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
       "\:0421\:0442\:0430\:043d\:0438"}}, {{
       Hold[$CellContext`\[Delta]Output$$], MatrixForm, 
       "\:0424\:043e\:0440\:043c\:0430 \
\:0432\:0438\:0432\:043e\:0434\:0443"}, {MatrixForm, TableForm}}, {{
       Hold[$CellContext`headingsQ\[CapitalSigma]$$], False, 
       "\:0417\:0430\:0433\:043e\:043b\:043e\:0432\:043a\:0438"}, {
      True, False}}, {{
       Hold[$CellContext`plot$$], $CellContext`NFAPlot, 
       "\:0424\:0443\:043d\:043a\:0446\:0456\:044f"}, {$CellContext`NFAPlot, \
$CellContext`NFALayeredPlot}}, {{
       Hold[$CellContext`lay$$], Left, 
       "\:041e\:0440\:0456\:0454\:043d\:0442\:0430\:0446\:0456\:044f"}, {
      Left, Right, Top, Bottom}}, {{
       Hold[$CellContext`imageSize$$], Medium, "ImageSize"}, {
      Tiny, Small, Medium, Large, Full, Automatic}}, {{
       Hold[$CellContext`plotLabel$$], None, "PlotLabel"}, ""}, {{
       Hold[$CellContext`arrowSize$$], Automatic, "ArrowSize"}, 0., 1.}, {{
       Hold[$CellContext`arrowPosition$$], 0.8, "ArrowPosition"}, 0., 1.}, {{
       Hold[$CellContext`edgeLabelPosition$$], 0.5, "EdgeLabelPosition"}, 0., 
      1.}, {{
       Hold[$CellContext`vertexSize$$], 0.1, "VertexSize"}, 0., 1.}, {
      Hold[
       Dynamic[
        Column[
         ReplaceAll[$CellContext`out$$, {
          "\:0422\:0430\:0431\:043b\:0438\:0446\:044f" -> 
           OpenerView[{
             "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0442\:0430\:0431\:043b\:0438\:0446\:0456 \:043f\:0435\:0440\
\:0435\:0445\:043e\:0434\:0456\:0432", 
              Column[{
                Manipulate`Place[1], 
                Manipulate`Place[2], 
                Manipulate`Place[3]}]}], 
           "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430" -> 
           OpenerView[{
             "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0434\:0456\:0430\:0433\:0440\:0430\:043c\:0438 \:043f\:0435\
\:0440\:0435\:0445\:043e\:0434\:0456\:0432", 
              Column[{
                Manipulate`Place[4], 
                Manipulate`Place[5], 
                Manipulate`Place[6], 
                Manipulate`Place[7], 
                Manipulate`Place[8], 
                Manipulate`Place[9], 
                Manipulate`Place[10], 
                Manipulate`Place[11]}]}]}]]]], 
      Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = {
    795., {476., 483.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`out$14067$$ = 
    False, $CellContext`outForm$14068$$ = 
    0, $CellContext`\[Delta]Elements$14069$$ = 
    False, $CellContext`\[Delta]Output$14070$$ = 
    False, $CellContext`headingsQ\[CapitalSigma]$14071$$ = 
    False, $CellContext`plot$14072$$ = False, $CellContext`lay$14073$$ = 
    0, $CellContext`imageSize$14074$$ = 0, $CellContext`arrowSize$14075$$ = 
    0, $CellContext`arrowPosition$14076$$ = 
    0, $CellContext`edgeLabelPosition$14077$$ = 
    0, $CellContext`vertexSize$14078$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`arrowPosition$$ = 
        0.8, $CellContext`arrowSize$$ = 
        Automatic, $CellContext`edgeLabelPosition$$ = 
        0.5, $CellContext`F$$ = {11, 14, 17, 18, 21, 22, 24, 25, 
         27}, $CellContext`FSel$$ = {
         False, False, False, False, False, False, False, False, False, False,
           True, False, False, True, False, False, True, True, False, False, 
          True, True, False, True, True, 
          False}, $CellContext`headingsQ\[CapitalSigma]$$ = 
        False, $CellContext`imageSize$$ = Medium, $CellContext`lay$$ = 
        Left, $CellContext`out$$ = {
         "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, \
$CellContext`outForm$$ = 
        Column, $CellContext`plot$$ = $CellContext`NFAPlot, \
$CellContext`plotLabel$$ = 
        None, $CellContext`Q$$ = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 
         14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
         26}, $CellContext`s$$ = 
        1, $CellContext`sSel$$ = {
         True, False, False, False, False, False, False, False, False, False, 
          False, False, False, False, False, False, False, False, False, 
          False, False, False, False, False, False, 
          False}, $CellContext`type$$ = 2, $CellContext`vertexSize$$ = 
        0.1, $CellContext`\[Delta]$$ = {{{}, {2}, {3}, {4}, {}}, {{}, {5}, {
           6}, {}, {}}, {{}, {7}, {8}, {}, {}}, {{}, {}, {}, {
           9}, {}}, {{}, {}, {10}, {}, {}}, {{}, {11}, {12}, {}, {}}, {{}, {
           13}, {14}, {}, {}}, {{}, {15}, {}, {}, {}}, {{}, {}, {}, {}, {
           16}}, {{}, {17}, {}, {}, {}}, {{}, {18}, {}, {}, {}}, {{}, {}, {
           19}, {}, {}}, {{}, {20}, {}, {}, {}}, {{}, {}, {
           21}, {}, {}}, {{}, {}, {22}, {}, {}}, {{}, {}, {}, {}, {
           23}}, {{}, {}, {}, {}, {}}, {{}, {}, {}, {}, {}}, {{}, {
           24}, {}, {}, {}}, {{}, {}, {
           25}, {}, {}}, {{}, {}, {}, {}, {}}, {{}, {}, {}, {}, {}}, {{}, {
           26}, {}, {}, {}}, {{}, {}, {}, {}, {}}, {{}, {}, {}, {}, {}}, {{}, \
{}, {}, {}, {}}}, $CellContext`\[Delta]Elements$$ = 
        "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", \
$CellContext`\[Delta]Output$$ = 
        MatrixForm, $CellContext`\[CapitalSigma]$$ = {
         "", ">", "<", ",", "."}}, "ControllerVariables" :> {
        Hold[$CellContext`out$$, $CellContext`out$14067$$, False], 
        Hold[$CellContext`outForm$$, $CellContext`outForm$14068$$, 0], 
        Hold[$CellContext`\[Delta]Elements$$, \
$CellContext`\[Delta]Elements$14069$$, False], 
        Hold[$CellContext`\[Delta]Output$$, \
$CellContext`\[Delta]Output$14070$$, False], 
        Hold[$CellContext`headingsQ\[CapitalSigma]$$, $CellContext`headingsQ\
\[CapitalSigma]$14071$$, False], 
        Hold[$CellContext`plot$$, $CellContext`plot$14072$$, False], 
        Hold[$CellContext`lay$$, $CellContext`lay$14073$$, 0], 
        Hold[$CellContext`imageSize$$, $CellContext`imageSize$14074$$, 0], 
        Hold[$CellContext`arrowSize$$, $CellContext`arrowSize$14075$$, 0], 
        Hold[$CellContext`arrowPosition$$, $CellContext`arrowPosition$14076$$,
          0], 
        Hold[$CellContext`edgeLabelPosition$$, \
$CellContext`edgeLabelPosition$14077$$, 0], 
        Hold[$CellContext`vertexSize$$, $CellContext`vertexSize$14078$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      ReplaceAll[$CellContext`outForm$$, {Column -> (Column[#, Center]& )}][
        ReplaceAll[$CellContext`out$$, {
         "\:0422\:0430\:0431\:043b\:0438\:0446\:044f" :> 
          Replace[$CellContext`\[Delta]Output$$, Blank[] :> 
            Condition[$CellContext`\[Delta]Output$$[#, 
               TableHeadings -> {$CellContext`Q$$, $CellContext`\
\[CapitalSigma]$$}]& , $CellContext`headingsQ\[CapitalSigma]$$]][
            
            ReplaceAll[$CellContext`\[Delta]Elements$$, {
             "\:0406\:043d\:0434\:0435\:043a\:0441\:0438" -> Identity, 
              "\:0421\:0442\:0430\:043d\:0438" -> 
              ReplaceAll[Pattern[$CellContext`q$, 
                  Blank[Integer]] :> 
                Part[$CellContext`Q$$, $CellContext`q$]]}][$CellContext`\
\[Delta]$$]], "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430" :> 
          Replace[$CellContext`plot$$, {$CellContext`DFALayeredPlot -> \
($CellContext`DFALayeredPlot[#, $CellContext`lay$$, 
               SlotSequence[
               2]]& ), $CellContext`NFALayeredPlot -> \
($CellContext`NFALayeredPlot[#, $CellContext`lay$$, 
               SlotSequence[
               2]]& )}][{$CellContext`Q$$, $CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$, $CellContext`s$$, $CellContext`F$$}, 
            ImageSize -> $CellContext`imageSize$$, 
            PlotLabel -> $CellContext`plotLabel$$, $CellContext`ArrowSize -> \
$CellContext`arrowSize$$, $CellContext`ArrowPosition -> \
$CellContext`arrowPosition$$, $CellContext`EdgeLabelPosition -> \
$CellContext`edgeLabelPosition$$, VertexSize -> $CellContext`vertexSize$$]}]],
       "Specifications" :> {{{$CellContext`Q$$, {1, 2, 3, 4, 5, 6, 7, 8, 9, 
          10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 
          26}}, ControlType -> 
         None}, {{$CellContext`\[CapitalSigma]$$, {"", ">", "<", ",", "."}}, 
         ControlType -> 
         None}, {{$CellContext`\[Delta]$$, {{{}, {2}, {3}, {4}, {}}, {{}, {
            5}, {6}, {}, {}}, {{}, {7}, {8}, {}, {}}, {{}, {}, {}, {
            9}, {}}, {{}, {}, {10}, {}, {}}, {{}, {11}, {12}, {}, {}}, {{}, {
            13}, {14}, {}, {}}, {{}, {15}, {}, {}, {}}, {{}, {}, {}, {}, {
            16}}, {{}, {17}, {}, {}, {}}, {{}, {18}, {}, {}, {}}, {{}, {}, {
            19}, {}, {}}, {{}, {20}, {}, {}, {}}, {{}, {}, {
            21}, {}, {}}, {{}, {}, {22}, {}, {}}, {{}, {}, {}, {}, {
            23}}, {{}, {}, {}, {}, {}}, {{}, {}, {}, {}, {}}, {{}, {
            24}, {}, {}, {}}, {{}, {}, {
            25}, {}, {}}, {{}, {}, {}, {}, {}}, {{}, {}, {}, {}, {}}, {{}, {
            26}, {}, {}, {}}, {{}, {}, {}, {}, {}}, {{}, {}, {}, {}, {}}, \
{{}, {}, {}, {}, {}}}}, ControlType -> 
         None}, {{$CellContext`sSel$$, {
          True, False, False, False, False, False, False, False, False, False,
            False, False, False, False, False, False, False, False, False, 
           False, False, False, False, False, False, False}}, ControlType -> 
         None}, {{$CellContext`FSel$$, {
          False, False, False, False, False, False, False, False, False, 
           False, True, False, False, True, False, False, True, True, False, 
           False, True, True, False, True, True, False}}, ControlType -> 
         None}, {{$CellContext`s$$, 1}, ControlType -> 
         None}, {{$CellContext`F$$, {11, 14, 17, 18, 21, 22, 24, 25, 27}}, 
         ControlType -> None}, {{$CellContext`type$$, 2}, ControlType -> 
         None}, 
        OpenerView[{
         "\:0412\:0438\:0437\:043d\:0430\:0447\:0435\:043d\:043d\:044f", 
          Dynamic[
           Grid[
            ArrayFlatten[{{
               Transpose[{
                 Join[{SetterBar[
                    Dynamic[$CellContext`type$$], 
                    
                    Thread[{1, 2} -> {
                    "\:0414\:0421\:0410", "\:041d\:0421\:0410"}], Enabled -> 
                    False]; Null, "s"}, 
                  Array[Toggler[
                    Dynamic[
                    Part[$CellContext`sSel$$, #], 
                    Function[$CellContext`v$, Part[$CellContext`sSel$$, 
                    Part[
                    FirstPosition[$CellContext`sSel$$, True], 1]] = False; 
                    Part[$CellContext`sSel$$, #] = 
                    True; $CellContext`s$$ = #]], 
                    
                    Thread[{True, False} -> 
                    Map[Style[#, Bold]& , {"\[Rule]", " "}]]]& , 
                   Length[$CellContext`Q$$]], {Null}]}], 
               Transpose[{
                 Join[{$CellContext`\[SpanFromLeft], "F"}, 
                  Array[Toggler[
                    Dynamic[
                    Part[$CellContext`FSel$$, #], 
                    
                    Function[$CellContext`v$, 
                    Part[$CellContext`FSel$$, #] = $CellContext`v$; \
$CellContext`F$$ = Pick[
                    Range[
                    Length[$CellContext`Q$$]], $CellContext`FSel$$]]], 
                    
                    Thread[{True, False} -> 
                    Map[Style[#, 15]& , {"*", " "}]]]& , 
                   Length[$CellContext`Q$$]], {Null}]}], 
               
               ArrayFlatten[{{{{$CellContext`\[SpanFromLeft], 
                    "\[CapitalSigma]"}, {"Q", "\[Delta]"}}, 
                  Transpose[
                   Prepend[{"\[CurlyEpsilon]", Null}][
                    Array[{
                    Function[Null, 
                    InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                    HoldAll}][
                    Dynamic[
                    Part[$CellContext`\[CapitalSigma]$$, #], 
                    Function[$CellContext`v$, 
                    If[
                    FreeQ[
                    
                    ReplacePart[$CellContext`\[CapitalSigma]$$, # -> 
                    ""], $CellContext`v$], 
                    Part[$CellContext`\[CapitalSigma]$$, #] = $CellContext`v$, 
                    Beep[]]]]], 
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["-", 
                    Catch[
                    If[
                    Length[$CellContext`\[CapitalSigma]$$] > 
                    1, {$CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$} = {
                    Drop[$CellContext`\[CapitalSigma]$$, {#}], 
                    Drop[$CellContext`\[Delta]$$, {}, {#}]}, 
                    Throw[
                    Beep[]]]]]}& , Length[$CellContext`\[CapitalSigma]$$] - 1,
                     2]]], {{
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["+", 
                    
                    Catch[{$CellContext`\[CapitalSigma]$$, $CellContext`\
\[Delta]$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`\[CapitalSigma]$$, $CellContext`\
\[Placeholder] :> Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    ArrayFlatten[{{$CellContext`\[Delta]$$, {}}}]}]]}, {
                   Null}}}, {
                  MapAt[Null& , {$CellContext`s$$, 2}][
                   Array[
                    Function[$CellContext`qi$, {
                    Function[Null, 
                    InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                    HoldAll}][
                    Dynamic[
                    Part[$CellContext`Q$$, $CellContext`qi$], 
                    Function[$CellContext`v$, 
                    
                    Catch[{$CellContext`s$$, $CellContext`F$$} = 
                    ReplaceAll[{$CellContext`s$$, $CellContext`F$$}, 
                    Part[$CellContext`Q$$, $CellContext`qi$] -> If[
                    FreeQ[$CellContext`Q$$, $CellContext`v$], 
                    Part[$CellContext`Q$$, $CellContext`qi$] = \
$CellContext`v$, 
                    Throw[
                    Beep[]]]]]]]], 
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["-", 
                    Catch[
                    If[
                    Length[$CellContext`Q$$] > 
                    1, $CellContext`Q$$ = 
                    Drop[$CellContext`Q$$, {$CellContext`qi$}]; $CellContext`\
\[Delta]$$ = ReplaceAll[
                    DeleteCases[
                    
                    Drop[$CellContext`\[Delta]$$, {$CellContext`qi$}, {}], \
$CellContext`qi$, {3}], Pattern[$CellContext`q$, 
                    Blank[]] :> 
                    Condition[$CellContext`q$ - 
                    1, $CellContext`q$ > $CellContext`qi$]]; \
$CellContext`sSel$$ = 
                    Drop[$CellContext`sSel$$, {$CellContext`qi$}]; \
$CellContext`FSel$$ = 
                    Drop[$CellContext`FSel$$, {$CellContext`qi$}]; \
$CellContext`s$$ = Part[
                    FirstPosition[$CellContext`sSel$$, True], 
                    1]; $CellContext`F$$ = Pick[
                    Range[
                    Length[$CellContext`Q$$]], $CellContext`FSel$$], 
                    Throw[
                    Beep[]]]]]}], 
                    Length[$CellContext`Q$$]]], 
                  Outer[Function[Null, 
                    InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                    HoldAll}][
                    Dynamic[
                    Part[$CellContext`Q$$, 
                    Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]]], 
                    Function[$CellContext`v$, 
                    Catch[
                    If[
                    Head[$CellContext`v$] === List, 
                    Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]] = Map[Replace[
                    Part[
                    FirstPosition[$CellContext`Q$$, #], 1], "NotFound" :> 
                    Throw[
                    Beep[]]]& , $CellContext`v$], 
                    Throw[
                    Beep[]]]]]]]& , 
                   Apply[Sequence, 
                    Map[Range, 
                    Dimensions[$CellContext`\[Delta]$$]]]], 
                  Transpose[{
                    ConstantArray[Null, 
                    Length[$CellContext`Q$$]]}]}, {{{
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["+", 
                    
                    Catch[{$CellContext`Q$$, $CellContext`\[Delta]$$, \
$CellContext`sSel$$, $CellContext`FSel$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`Q$$, $CellContext`\[Placeholder] :> 
                    Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    Append[$CellContext`\[Delta]$$, 
                    ConstantArray[{}, 
                    Length[$CellContext`\[CapitalSigma]$$]]], 
                    Append[$CellContext`sSel$$, False], 
                    Append[$CellContext`FSel$$, False]}]], Null}}, {
                   ConstantArray[Null, 
                    Length[$CellContext`\[CapitalSigma]$$]]}, Null}}]}}], 
            Alignment -> {Null, Null, {{1, 1} -> {Center, Center}}}, 
            ReplaceAll[
            Dividers -> {{
               False, True, True, True, True, {False}, True, False}, {
               False, True, True, {False}, True, False}}, True -> Gray]]]}, 
         True], Delimiter, {{$CellContext`out$$, {
          "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, 
          "\:0412\:0438\:0432\:0456\:0434 \:0414\:0421\:0410"}, {
         "\:0422\:0430\:0431\:043b\:0438\:0446\:044f", 
          "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, ControlType -> 
         TogglerBar}, {{$CellContext`outForm$$, Column, 
          "\:0424\:043e\:0440\:043c\:0430\:0442"}, {
         Column, Row, InputForm}}, {{$CellContext`\[Delta]Elements$$, 
          "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
          "\:0415\:043b\:0435\:043c\:0435\:043d\:0442\:0438"}, {
         "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
          "\:0421\:0442\:0430\:043d\:0438"}, ControlPlacement -> 
         1}, {{$CellContext`\[Delta]Output$$, MatrixForm, 
          "\:0424\:043e\:0440\:043c\:0430 \
\:0432\:0438\:0432\:043e\:0434\:0443"}, {MatrixForm, TableForm}, 
         ControlPlacement -> 
         2}, {{$CellContext`headingsQ\[CapitalSigma]$$, False, 
          "\:0417\:0430\:0433\:043e\:043b\:043e\:0432\:043a\:0438"}, {
         True, False}, ControlPlacement -> 
         3}, {{$CellContext`plot$$, $CellContext`NFAPlot, 
          "\:0424\:0443\:043d\:043a\:0446\:0456\:044f"}, \
{$CellContext`NFAPlot, $CellContext`NFALayeredPlot}, ControlPlacement -> 
         4}, {{$CellContext`lay$$, Left, 
          "\:041e\:0440\:0456\:0454\:043d\:0442\:0430\:0446\:0456\:044f"}, {
         Left, Right, Top, Bottom}, ControlPlacement -> 
         5}, {{$CellContext`imageSize$$, Medium, "ImageSize"}, {
         Tiny, Small, Medium, Large, Full, Automatic}, ControlPlacement -> 
         6}, {{$CellContext`plotLabel$$, None, "PlotLabel"}, "", 
         FieldSize -> {{6, 15}, {1, 
            DirectedInfinity[1]}}, ControlPlacement -> 
         7}, {{$CellContext`arrowSize$$, Automatic, "ArrowSize"}, 0., 1., 
         ControlPlacement -> 
         8}, {{$CellContext`arrowPosition$$, 0.8, "ArrowPosition"}, 0., 1., 
         ControlPlacement -> 
         9}, {{$CellContext`edgeLabelPosition$$, 0.5, "EdgeLabelPosition"}, 
         0., 1., ControlPlacement -> 
         10}, {{$CellContext`vertexSize$$, 0.1, "VertexSize"}, 0., 1., 
         ControlPlacement -> 11}, 
        Dynamic[
         Column[
          
          ReplaceAll[$CellContext`out$$, {
           "\:0422\:0430\:0431\:043b\:0438\:0446\:044f" -> 
            OpenerView[{
              "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0442\:0430\:0431\:043b\:0438\:0446\:0456 \:043f\:0435\:0440\
\:0435\:0445\:043e\:0434\:0456\:0432", 
               Column[{
                 Manipulate`Place[1], 
                 Manipulate`Place[2], 
                 Manipulate`Place[3]}]}], 
            "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430" -> 
            OpenerView[{
              "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0434\:0456\:0430\:0433\:0440\:0430\:043c\:0438 \:043f\:0435\
\:0440\:0435\:0445\:043e\:0434\:0456\:0432", 
               Column[{
                 Manipulate`Place[4], 
                 Manipulate`Place[5], 
                 Manipulate`Place[6], 
                 Manipulate`Place[7], 
                 Manipulate`Place[8], 
                 Manipulate`Place[9], 
                 Manipulate`Place[10], 
                 Manipulate`Place[11]}]}]}]]]}, 
      "Options" :> {ControlPlacement -> Left}, "DefaultOptions" :> {}],
     ImageSizeCache->{1155., {540., 547.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.6409312488833895`*^9, 3.640931310005885*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeleteDuplicates", "@", 
  RowBox[{
  "Characters", "@", 
   "\"\<><> <><  >><> <><<  ><>> <<><  ><<<> <>>><  ,<..>,\>\""}]}]], "Input",
 CellChangeTimes->{{3.640440034591317*^9, 3.6404400492881575`*^9}, {
  3.640440438572424*^9, 3.64044047645759*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\">\"\>", ",", "\<\"<\"\>", ",", "\<\" \"\>", ",", "\<\",\"\>", 
   ",", "\<\".\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.64044005020321*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NFAManipulate", "[", 
  RowBox[{
   RowBox[{"NFA", "@", "\"\<TM\>\""}], ",", 
   RowBox[{"ControlPlacement", "\[Rule]", "Left"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.64043969563293*^9, 3.6404397104047747`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`arrowPosition$$ = 
    0.8, $CellContext`arrowSize$$ = 
    Automatic, $CellContext`edgeLabelPosition$$ = 0.5, $CellContext`F$$ = {1, 
    2, 4}, $CellContext`FSel$$ = {
    True, True, False, True, False, 
     False}, $CellContext`headingsQ\[CapitalSigma]$$ = 
    False, $CellContext`imageSize$$ = Medium, $CellContext`lay$$ = 
    Left, $CellContext`out$$ = {
    "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, \
$CellContext`outForm$$ = 
    Column, $CellContext`plot$$ = $CellContext`NFAPlot, \
$CellContext`plotLabel$$ = None, $CellContext`Q$$ = {0, 1, 2, 3, 4, 
    5}, $CellContext`s$$ = 3, $CellContext`sSel$$ = {
    False, False, True, False, False, False}, $CellContext`type$$ = 
    2, $CellContext`vertexSize$$ = 
    0.1, $CellContext`\[Delta]$$ = {{{3}, {}, {}}, {{3}, {}, {}}, {{}, {5, 
      4}, {6}}, {{}, {}, {}}, {{}, {}, {1}}, {{}, {
      2}, {}}}, $CellContext`\[Delta]Elements$$ = 
    "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", \
$CellContext`\[Delta]Output$$ = MatrixForm, $CellContext`\[CapitalSigma]$$ = {
    "", "0", "1"}, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`Q$$], {0, 1, 2, 3, 4, 5}}}, {{
       Hold[$CellContext`\[CapitalSigma]$$], {"", "0", "1"}}}, {{
       Hold[$CellContext`\[Delta]$$], {{{3}, {}, {}}, {{3}, {}, {}}, {{}, {5, 
         4}, {6}}, {{}, {}, {}}, {{}, {}, {1}}, {{}, {2}, {}}}}}, {{
       Hold[$CellContext`sSel$$], {
       False, False, True, False, False, False}}}, {{
       Hold[$CellContext`FSel$$], {True, True, False, True, False, False}}}, {{
       Hold[$CellContext`s$$], 3}}, {{
       Hold[$CellContext`F$$], {1, 2, 4}}}, {{
       Hold[$CellContext`type$$], 2}}, {
      Hold[
       OpenerView[{
        "\:0412\:0438\:0437\:043d\:0430\:0447\:0435\:043d\:043d\:044f", 
         Dynamic[
          Grid[
           ArrayFlatten[{{
              Transpose[{
                Join[{SetterBar[
                    Dynamic[$CellContext`type$$], 
                    
                    Thread[{1, 2} -> {
                    "\:0414\:0421\:0410", "\:041d\:0421\:0410"}], Enabled -> 
                    False]; Null, "s"}, 
                 Array[Toggler[
                   Dynamic[
                    Part[$CellContext`sSel$$, #], 
                    Function[$CellContext`v$, Part[$CellContext`sSel$$, 
                    Part[
                    FirstPosition[$CellContext`sSel$$, True], 1]] = False; 
                    Part[$CellContext`sSel$$, #] = 
                    True; $CellContext`s$$ = #]], 
                   
                   Thread[{True, False} -> 
                    Map[Style[#, Bold]& , {"\[Rule]", " "}]]]& , 
                  Length[$CellContext`Q$$]], {Null}]}], 
              Transpose[{
                Join[{$CellContext`\[SpanFromLeft], "F"}, 
                 Array[Toggler[
                   Dynamic[
                    Part[$CellContext`FSel$$, #], 
                    
                    Function[$CellContext`v$, 
                    Part[$CellContext`FSel$$, #] = $CellContext`v$; \
$CellContext`F$$ = Pick[
                    Range[
                    Length[$CellContext`Q$$]], $CellContext`FSel$$]]], 
                   
                   Thread[{True, False} -> 
                    Map[Style[#, 15]& , {"*", " "}]]]& , 
                  Length[$CellContext`Q$$]], {Null}]}], 
              
              ArrayFlatten[{{{{$CellContext`\[SpanFromLeft], 
                   "\[CapitalSigma]"}, {"Q", "\[Delta]"}}, 
                 Transpose[
                  Prepend[{"\[CurlyEpsilon]", Null}][
                   Array[{
                    Function[Null, 
                    InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                    HoldAll}][
                    Dynamic[
                    Part[$CellContext`\[CapitalSigma]$$, #], 
                    Function[$CellContext`v$, 
                    If[
                    FreeQ[
                    
                    ReplacePart[$CellContext`\[CapitalSigma]$$, # -> 
                    ""], $CellContext`v$], 
                    Part[$CellContext`\[CapitalSigma]$$, #] = $CellContext`v$, 
                    Beep[]]]]], 
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["-", 
                    Catch[
                    If[
                    Length[$CellContext`\[CapitalSigma]$$] > 
                    1, {$CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$} = {
                    Drop[$CellContext`\[CapitalSigma]$$, {#}], 
                    Drop[$CellContext`\[Delta]$$, {}, {#}]}, 
                    Throw[
                    Beep[]]]]]}& , Length[$CellContext`\[CapitalSigma]$$] - 1,
                     2]]], {{
                   Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["+", 
                    
                    Catch[{$CellContext`\[CapitalSigma]$$, $CellContext`\
\[Delta]$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`\[CapitalSigma]$$, $CellContext`\
\[Placeholder] :> Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    ArrayFlatten[{{$CellContext`\[Delta]$$, {}}}]}]]}, {
                  Null}}}, {
                 MapAt[Null& , {$CellContext`s$$, 2}][
                  Array[
                   Function[$CellContext`qi$, {
                    Function[Null, 
                    InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                    HoldAll}][
                    Dynamic[
                    Part[$CellContext`Q$$, $CellContext`qi$], 
                    Function[$CellContext`v$, 
                    
                    Catch[{$CellContext`s$$, $CellContext`F$$} = 
                    ReplaceAll[{$CellContext`s$$, $CellContext`F$$}, 
                    Part[$CellContext`Q$$, $CellContext`qi$] -> If[
                    FreeQ[$CellContext`Q$$, $CellContext`v$], 
                    Part[$CellContext`Q$$, $CellContext`qi$] = \
$CellContext`v$, 
                    Throw[
                    Beep[]]]]]]]], 
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["-", 
                    Catch[
                    If[
                    Length[$CellContext`Q$$] > 
                    1, $CellContext`Q$$ = 
                    Drop[$CellContext`Q$$, {$CellContext`qi$}]; $CellContext`\
\[Delta]$$ = ReplaceAll[
                    DeleteCases[
                    
                    Drop[$CellContext`\[Delta]$$, {$CellContext`qi$}, {}], \
$CellContext`qi$, {3}], Pattern[$CellContext`q$, 
                    Blank[]] :> 
                    Condition[$CellContext`q$ - 
                    1, $CellContext`q$ > $CellContext`qi$]]; \
$CellContext`sSel$$ = 
                    Drop[$CellContext`sSel$$, {$CellContext`qi$}]; \
$CellContext`FSel$$ = 
                    Drop[$CellContext`FSel$$, {$CellContext`qi$}]; \
$CellContext`s$$ = Part[
                    FirstPosition[$CellContext`sSel$$, True], 
                    1]; $CellContext`F$$ = Pick[
                    Range[
                    Length[$CellContext`Q$$]], $CellContext`FSel$$], 
                    Throw[
                    Beep[]]]]]}], 
                   Length[$CellContext`Q$$]]], 
                 Outer[Function[Null, 
                   InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                   HoldAll}][
                   Dynamic[
                    Part[$CellContext`Q$$, 
                    Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]]], 
                    Function[$CellContext`v$, 
                    Catch[
                    If[
                    Head[$CellContext`v$] === List, 
                    Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]] = Map[Replace[
                    Part[
                    FirstPosition[$CellContext`Q$$, #], 1], "NotFound" :> 
                    Throw[
                    Beep[]]]& , $CellContext`v$], 
                    Throw[
                    Beep[]]]]]]]& , 
                  Apply[Sequence, 
                   Map[Range, 
                    Dimensions[$CellContext`\[Delta]$$]]]], 
                 Transpose[{
                   ConstantArray[Null, 
                    Length[$CellContext`Q$$]]}]}, {{{
                   Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["+", 
                    
                    Catch[{$CellContext`Q$$, $CellContext`\[Delta]$$, \
$CellContext`sSel$$, $CellContext`FSel$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`Q$$, $CellContext`\[Placeholder] :> 
                    Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    Append[$CellContext`\[Delta]$$, 
                    ConstantArray[{}, 
                    Length[$CellContext`\[CapitalSigma]$$]]], 
                    Append[$CellContext`sSel$$, False], 
                    Append[$CellContext`FSel$$, False]}]], Null}}, {
                  ConstantArray[Null, 
                   Length[$CellContext`\[CapitalSigma]$$]]}, Null}}]}}], 
           Alignment -> {Null, Null, {{1, 1} -> {Center, Center}}}, 
           ReplaceAll[
           Dividers -> {{
              False, True, True, True, True, {False}, True, False}, {
              False, True, True, {False}, True, False}}, True -> Gray]]]}, 
        True]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`out$$], {
       "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, 
       "\:0412\:0438\:0432\:0456\:0434 \:0414\:0421\:0410"}, {
      "\:0422\:0430\:0431\:043b\:0438\:0446\:044f", 
       "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}}, {{
       Hold[$CellContext`outForm$$], Column, 
       "\:0424\:043e\:0440\:043c\:0430\:0442"}, {Column, Row, InputForm}}, {{
       Hold[$CellContext`\[Delta]Elements$$], 
       "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
       "\:0415\:043b\:0435\:043c\:0435\:043d\:0442\:0438"}, {
      "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
       "\:0421\:0442\:0430\:043d\:0438"}}, {{
       Hold[$CellContext`\[Delta]Output$$], MatrixForm, 
       "\:0424\:043e\:0440\:043c\:0430 \
\:0432\:0438\:0432\:043e\:0434\:0443"}, {MatrixForm, TableForm}}, {{
       Hold[$CellContext`headingsQ\[CapitalSigma]$$], False, 
       "\:0417\:0430\:0433\:043e\:043b\:043e\:0432\:043a\:0438"}, {
      True, False}}, {{
       Hold[$CellContext`plot$$], $CellContext`NFAPlot, 
       "\:0424\:0443\:043d\:043a\:0446\:0456\:044f"}, {$CellContext`NFAPlot, \
$CellContext`NFALayeredPlot}}, {{
       Hold[$CellContext`lay$$], Left, 
       "\:041e\:0440\:0456\:0454\:043d\:0442\:0430\:0446\:0456\:044f"}, {
      Left, Right, Top, Bottom}}, {{
       Hold[$CellContext`imageSize$$], Medium, "ImageSize"}, {
      Tiny, Small, Medium, Large, Full, Automatic}}, {{
       Hold[$CellContext`plotLabel$$], None, "PlotLabel"}, ""}, {{
       Hold[$CellContext`arrowSize$$], Automatic, "ArrowSize"}, 0., 1.}, {{
       Hold[$CellContext`arrowPosition$$], 0.8, "ArrowPosition"}, 0., 1.}, {{
       Hold[$CellContext`edgeLabelPosition$$], 0.5, "EdgeLabelPosition"}, 0., 
      1.}, {{
       Hold[$CellContext`vertexSize$$], 0.1, "VertexSize"}, 0., 1.}, {
      Hold[
       Dynamic[
        Column[
         ReplaceAll[$CellContext`out$$, {
          "\:0422\:0430\:0431\:043b\:0438\:0446\:044f" -> 
           OpenerView[{
             "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0442\:0430\:0431\:043b\:0438\:0446\:0456 \:043f\:0435\:0440\
\:0435\:0445\:043e\:0434\:0456\:0432", 
              Column[{
                Manipulate`Place[1], 
                Manipulate`Place[2], 
                Manipulate`Place[3]}]}], 
           "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430" -> 
           OpenerView[{
             "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0434\:0456\:0430\:0433\:0440\:0430\:043c\:0438 \:043f\:0435\
\:0440\:0435\:0445\:043e\:0434\:0456\:0432", 
              Column[{
                Manipulate`Place[4], 
                Manipulate`Place[5], 
                Manipulate`Place[6], 
                Manipulate`Place[7], 
                Manipulate`Place[8], 
                Manipulate`Place[9], 
                Manipulate`Place[10], 
                Manipulate`Place[11]}]}]}]]]], 
      Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = {
    360., {151., 158.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`out$2511$$ = 
    False, $CellContext`outForm$2512$$ = 
    0, $CellContext`\[Delta]Elements$2513$$ = 
    False, $CellContext`\[Delta]Output$2514$$ = 
    False, $CellContext`headingsQ\[CapitalSigma]$2515$$ = 
    False, $CellContext`plot$2516$$ = False, $CellContext`lay$2517$$ = 
    0, $CellContext`imageSize$2518$$ = 0, $CellContext`arrowSize$2519$$ = 
    0, $CellContext`arrowPosition$2520$$ = 
    0, $CellContext`edgeLabelPosition$2521$$ = 
    0, $CellContext`vertexSize$2522$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`arrowPosition$$ = 
        0.8, $CellContext`arrowSize$$ = 
        Automatic, $CellContext`edgeLabelPosition$$ = 
        0.5, $CellContext`F$$ = {1, 2, 4}, $CellContext`FSel$$ = {
         True, True, False, True, False, 
          False}, $CellContext`headingsQ\[CapitalSigma]$$ = 
        False, $CellContext`imageSize$$ = Medium, $CellContext`lay$$ = 
        Left, $CellContext`out$$ = {
         "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, \
$CellContext`outForm$$ = 
        Column, $CellContext`plot$$ = $CellContext`NFAPlot, \
$CellContext`plotLabel$$ = 
        None, $CellContext`Q$$ = {0, 1, 2, 3, 4, 5}, $CellContext`s$$ = 
        3, $CellContext`sSel$$ = {
         False, False, True, False, False, False}, $CellContext`type$$ = 
        2, $CellContext`vertexSize$$ = 
        0.1, $CellContext`\[Delta]$$ = {{{3}, {}, {}}, {{3}, {}, {}}, {{}, {5,
            4}, {6}}, {{}, {}, {}}, {{}, {}, {1}}, {{}, {
           2}, {}}}, $CellContext`\[Delta]Elements$$ = 
        "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", \
$CellContext`\[Delta]Output$$ = 
        MatrixForm, $CellContext`\[CapitalSigma]$$ = {"", "0", "1"}}, 
      "ControllerVariables" :> {
        Hold[$CellContext`out$$, $CellContext`out$2511$$, False], 
        Hold[$CellContext`outForm$$, $CellContext`outForm$2512$$, 0], 
        Hold[$CellContext`\[Delta]Elements$$, \
$CellContext`\[Delta]Elements$2513$$, False], 
        Hold[$CellContext`\[Delta]Output$$, \
$CellContext`\[Delta]Output$2514$$, False], 
        Hold[$CellContext`headingsQ\[CapitalSigma]$$, $CellContext`headingsQ\
\[CapitalSigma]$2515$$, False], 
        Hold[$CellContext`plot$$, $CellContext`plot$2516$$, False], 
        Hold[$CellContext`lay$$, $CellContext`lay$2517$$, 0], 
        Hold[$CellContext`imageSize$$, $CellContext`imageSize$2518$$, 0], 
        Hold[$CellContext`arrowSize$$, $CellContext`arrowSize$2519$$, 0], 
        Hold[$CellContext`arrowPosition$$, $CellContext`arrowPosition$2520$$, 
         0], 
        Hold[$CellContext`edgeLabelPosition$$, \
$CellContext`edgeLabelPosition$2521$$, 0], 
        Hold[$CellContext`vertexSize$$, $CellContext`vertexSize$2522$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      ReplaceAll[$CellContext`outForm$$, {Column -> (Column[#, Center]& )}][
        ReplaceAll[$CellContext`out$$, {
         "\:0422\:0430\:0431\:043b\:0438\:0446\:044f" :> 
          Replace[$CellContext`\[Delta]Output$$, Blank[] :> 
            Condition[$CellContext`\[Delta]Output$$[#, 
               TableHeadings -> {$CellContext`Q$$, $CellContext`\
\[CapitalSigma]$$}]& , $CellContext`headingsQ\[CapitalSigma]$$]][
            
            ReplaceAll[$CellContext`\[Delta]Elements$$, {
             "\:0406\:043d\:0434\:0435\:043a\:0441\:0438" -> Identity, 
              "\:0421\:0442\:0430\:043d\:0438" -> 
              ReplaceAll[Pattern[$CellContext`q$, 
                  Blank[Integer]] :> 
                Part[$CellContext`Q$$, $CellContext`q$]]}][$CellContext`\
\[Delta]$$]], "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430" :> 
          Replace[$CellContext`plot$$, {$CellContext`DFALayeredPlot -> \
($CellContext`DFALayeredPlot[#, $CellContext`lay$$, 
               SlotSequence[
               2]]& ), $CellContext`NFALayeredPlot -> \
($CellContext`NFALayeredPlot[#, $CellContext`lay$$, 
               SlotSequence[
               2]]& )}][{$CellContext`Q$$, $CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$, $CellContext`s$$, $CellContext`F$$}, 
            ImageSize -> $CellContext`imageSize$$, 
            PlotLabel -> $CellContext`plotLabel$$, $CellContext`ArrowSize -> \
$CellContext`arrowSize$$, $CellContext`ArrowPosition -> \
$CellContext`arrowPosition$$, $CellContext`EdgeLabelPosition -> \
$CellContext`edgeLabelPosition$$, VertexSize -> $CellContext`vertexSize$$]}]],
       "Specifications" :> {{{$CellContext`Q$$, {0, 1, 2, 3, 4, 5}}, 
         ControlType -> 
         None}, {{$CellContext`\[CapitalSigma]$$, {"", "0", "1"}}, 
         ControlType -> 
         None}, {{$CellContext`\[Delta]$$, {{{3}, {}, {}}, {{
            3}, {}, {}}, {{}, {5, 4}, {6}}, {{}, {}, {}}, {{}, {}, {
            1}}, {{}, {2}, {}}}}, ControlType -> 
         None}, {{$CellContext`sSel$$, {
          False, False, True, False, False, False}}, ControlType -> 
         None}, {{$CellContext`FSel$$, {
          True, True, False, True, False, False}}, ControlType -> 
         None}, {{$CellContext`s$$, 3}, ControlType -> 
         None}, {{$CellContext`F$$, {1, 2, 4}}, ControlType -> 
         None}, {{$CellContext`type$$, 2}, ControlType -> None}, 
        OpenerView[{
         "\:0412\:0438\:0437\:043d\:0430\:0447\:0435\:043d\:043d\:044f", 
          Dynamic[
           Grid[
            ArrayFlatten[{{
               Transpose[{
                 Join[{SetterBar[
                    Dynamic[$CellContext`type$$], 
                    
                    Thread[{1, 2} -> {
                    "\:0414\:0421\:0410", "\:041d\:0421\:0410"}], Enabled -> 
                    False]; Null, "s"}, 
                  Array[Toggler[
                    Dynamic[
                    Part[$CellContext`sSel$$, #], 
                    Function[$CellContext`v$, Part[$CellContext`sSel$$, 
                    Part[
                    FirstPosition[$CellContext`sSel$$, True], 1]] = False; 
                    Part[$CellContext`sSel$$, #] = 
                    True; $CellContext`s$$ = #]], 
                    
                    Thread[{True, False} -> 
                    Map[Style[#, Bold]& , {"\[Rule]", " "}]]]& , 
                   Length[$CellContext`Q$$]], {Null}]}], 
               Transpose[{
                 Join[{$CellContext`\[SpanFromLeft], "F"}, 
                  Array[Toggler[
                    Dynamic[
                    Part[$CellContext`FSel$$, #], 
                    
                    Function[$CellContext`v$, 
                    Part[$CellContext`FSel$$, #] = $CellContext`v$; \
$CellContext`F$$ = Pick[
                    Range[
                    Length[$CellContext`Q$$]], $CellContext`FSel$$]]], 
                    
                    Thread[{True, False} -> 
                    Map[Style[#, 15]& , {"*", " "}]]]& , 
                   Length[$CellContext`Q$$]], {Null}]}], 
               
               ArrayFlatten[{{{{$CellContext`\[SpanFromLeft], 
                    "\[CapitalSigma]"}, {"Q", "\[Delta]"}}, 
                  Transpose[
                   Prepend[{"\[CurlyEpsilon]", Null}][
                    Array[{
                    Function[Null, 
                    InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                    HoldAll}][
                    Dynamic[
                    Part[$CellContext`\[CapitalSigma]$$, #], 
                    Function[$CellContext`v$, 
                    If[
                    FreeQ[
                    
                    ReplacePart[$CellContext`\[CapitalSigma]$$, # -> 
                    ""], $CellContext`v$], 
                    Part[$CellContext`\[CapitalSigma]$$, #] = $CellContext`v$, 
                    Beep[]]]]], 
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["-", 
                    Catch[
                    If[
                    Length[$CellContext`\[CapitalSigma]$$] > 
                    1, {$CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$} = {
                    Drop[$CellContext`\[CapitalSigma]$$, {#}], 
                    Drop[$CellContext`\[Delta]$$, {}, {#}]}, 
                    Throw[
                    Beep[]]]]]}& , Length[$CellContext`\[CapitalSigma]$$] - 1,
                     2]]], {{
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["+", 
                    
                    Catch[{$CellContext`\[CapitalSigma]$$, $CellContext`\
\[Delta]$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`\[CapitalSigma]$$, $CellContext`\
\[Placeholder] :> Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    ArrayFlatten[{{$CellContext`\[Delta]$$, {}}}]}]]}, {
                   Null}}}, {
                  MapAt[Null& , {$CellContext`s$$, 2}][
                   Array[
                    Function[$CellContext`qi$, {
                    Function[Null, 
                    InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                    HoldAll}][
                    Dynamic[
                    Part[$CellContext`Q$$, $CellContext`qi$], 
                    Function[$CellContext`v$, 
                    
                    Catch[{$CellContext`s$$, $CellContext`F$$} = 
                    ReplaceAll[{$CellContext`s$$, $CellContext`F$$}, 
                    Part[$CellContext`Q$$, $CellContext`qi$] -> If[
                    FreeQ[$CellContext`Q$$, $CellContext`v$], 
                    Part[$CellContext`Q$$, $CellContext`qi$] = \
$CellContext`v$, 
                    Throw[
                    Beep[]]]]]]]], 
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["-", 
                    Catch[
                    If[
                    Length[$CellContext`Q$$] > 
                    1, $CellContext`Q$$ = 
                    Drop[$CellContext`Q$$, {$CellContext`qi$}]; $CellContext`\
\[Delta]$$ = ReplaceAll[
                    DeleteCases[
                    
                    Drop[$CellContext`\[Delta]$$, {$CellContext`qi$}, {}], \
$CellContext`qi$, {3}], Pattern[$CellContext`q$, 
                    Blank[]] :> 
                    Condition[$CellContext`q$ - 
                    1, $CellContext`q$ > $CellContext`qi$]]; \
$CellContext`sSel$$ = 
                    Drop[$CellContext`sSel$$, {$CellContext`qi$}]; \
$CellContext`FSel$$ = 
                    Drop[$CellContext`FSel$$, {$CellContext`qi$}]; \
$CellContext`s$$ = Part[
                    FirstPosition[$CellContext`sSel$$, True], 
                    1]; $CellContext`F$$ = Pick[
                    Range[
                    Length[$CellContext`Q$$]], $CellContext`FSel$$], 
                    Throw[
                    Beep[]]]]]}], 
                    Length[$CellContext`Q$$]]], 
                  Outer[Function[Null, 
                    InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                    HoldAll}][
                    Dynamic[
                    Part[$CellContext`Q$$, 
                    Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]]], 
                    Function[$CellContext`v$, 
                    Catch[
                    If[
                    Head[$CellContext`v$] === List, 
                    Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]] = Map[Replace[
                    Part[
                    FirstPosition[$CellContext`Q$$, #], 1], "NotFound" :> 
                    Throw[
                    Beep[]]]& , $CellContext`v$], 
                    Throw[
                    Beep[]]]]]]]& , 
                   Apply[Sequence, 
                    Map[Range, 
                    Dimensions[$CellContext`\[Delta]$$]]]], 
                  Transpose[{
                    ConstantArray[Null, 
                    Length[$CellContext`Q$$]]}]}, {{{
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["+", 
                    
                    Catch[{$CellContext`Q$$, $CellContext`\[Delta]$$, \
$CellContext`sSel$$, $CellContext`FSel$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`Q$$, $CellContext`\[Placeholder] :> 
                    Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    Append[$CellContext`\[Delta]$$, 
                    ConstantArray[{}, 
                    Length[$CellContext`\[CapitalSigma]$$]]], 
                    Append[$CellContext`sSel$$, False], 
                    Append[$CellContext`FSel$$, False]}]], Null}}, {
                   ConstantArray[Null, 
                    Length[$CellContext`\[CapitalSigma]$$]]}, Null}}]}}], 
            Alignment -> {Null, Null, {{1, 1} -> {Center, Center}}}, 
            ReplaceAll[
            Dividers -> {{
               False, True, True, True, True, {False}, True, False}, {
               False, True, True, {False}, True, False}}, True -> Gray]]]}, 
         True], Delimiter, {{$CellContext`out$$, {
          "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, 
          "\:0412\:0438\:0432\:0456\:0434 \:0414\:0421\:0410"}, {
         "\:0422\:0430\:0431\:043b\:0438\:0446\:044f", 
          "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, ControlType -> 
         TogglerBar}, {{$CellContext`outForm$$, Column, 
          "\:0424\:043e\:0440\:043c\:0430\:0442"}, {
         Column, Row, InputForm}}, {{$CellContext`\[Delta]Elements$$, 
          "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
          "\:0415\:043b\:0435\:043c\:0435\:043d\:0442\:0438"}, {
         "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
          "\:0421\:0442\:0430\:043d\:0438"}, ControlPlacement -> 
         1}, {{$CellContext`\[Delta]Output$$, MatrixForm, 
          "\:0424\:043e\:0440\:043c\:0430 \
\:0432\:0438\:0432\:043e\:0434\:0443"}, {MatrixForm, TableForm}, 
         ControlPlacement -> 
         2}, {{$CellContext`headingsQ\[CapitalSigma]$$, False, 
          "\:0417\:0430\:0433\:043e\:043b\:043e\:0432\:043a\:0438"}, {
         True, False}, ControlPlacement -> 
         3}, {{$CellContext`plot$$, $CellContext`NFAPlot, 
          "\:0424\:0443\:043d\:043a\:0446\:0456\:044f"}, \
{$CellContext`NFAPlot, $CellContext`NFALayeredPlot}, ControlPlacement -> 
         4}, {{$CellContext`lay$$, Left, 
          "\:041e\:0440\:0456\:0454\:043d\:0442\:0430\:0446\:0456\:044f"}, {
         Left, Right, Top, Bottom}, ControlPlacement -> 
         5}, {{$CellContext`imageSize$$, Medium, "ImageSize"}, {
         Tiny, Small, Medium, Large, Full, Automatic}, ControlPlacement -> 
         6}, {{$CellContext`plotLabel$$, None, "PlotLabel"}, "", 
         FieldSize -> {{6, 15}, {1, 
            DirectedInfinity[1]}}, ControlPlacement -> 
         7}, {{$CellContext`arrowSize$$, Automatic, "ArrowSize"}, 0., 1., 
         ControlPlacement -> 
         8}, {{$CellContext`arrowPosition$$, 0.8, "ArrowPosition"}, 0., 1., 
         ControlPlacement -> 
         9}, {{$CellContext`edgeLabelPosition$$, 0.5, "EdgeLabelPosition"}, 
         0., 1., ControlPlacement -> 
         10}, {{$CellContext`vertexSize$$, 0.1, "VertexSize"}, 0., 1., 
         ControlPlacement -> 11}, 
        Dynamic[
         Column[
          ReplaceAll[$CellContext`out$$, {
           "\:0422\:0430\:0431\:043b\:0438\:0446\:044f" -> 
            OpenerView[{
              "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0442\:0430\:0431\:043b\:0438\:0446\:0456 \:043f\:0435\:0440\
\:0435\:0445\:043e\:0434\:0456\:0432", 
               Column[{
                 Manipulate`Place[1], 
                 Manipulate`Place[2], 
                 Manipulate`Place[3]}]}], 
            "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430" -> 
            OpenerView[{
              "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0434\:0456\:0430\:0433\:0440\:0430\:043c\:0438 \:043f\:0435\
\:0440\:0435\:0445\:043e\:0434\:0456\:0432", 
               Column[{
                 Manipulate`Place[4], 
                 Manipulate`Place[5], 
                 Manipulate`Place[6], 
                 Manipulate`Place[7], 
                 Manipulate`Place[8], 
                 Manipulate`Place[9], 
                 Manipulate`Place[10], 
                 Manipulate`Place[11]}]}]}]]]}, 
      "Options" :> {ControlPlacement -> Left}, "DefaultOptions" :> {}],
     ImageSizeCache->{625., {181., 188.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.6404396970950136`*^9, 3.640439710903803*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Acceptance", "Subsubsection",
 CellChangeTimes->{{3.640071580190055*^9, 3.6400715838862667`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DFAAcceptedQ", "[", 
   RowBox[{"\[Omega]_", ",", 
    RowBox[{"{", 
     RowBox[{
     "_", ",", "\[CapitalSigma]_", ",", "\[Delta]_", ",", "s_", ",", "F_"}], 
     "}"}]}], "]"}], ":=", 
  RowBox[{"Catch", "@", 
   RowBox[{"MemberQ", "[", 
    RowBox[{"F", ",", 
     RowBox[{"Fold", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
        "\[Delta]", "\[LeftDoubleBracket]", "##", "\[RightDoubleBracket]"}], 
        "&"}], ",", "s", ",", 
       RowBox[{"StringCases", "[", 
        RowBox[{"\[Omega]", ",", 
         RowBox[{"Append", "[", 
          RowBox[{
           RowBox[{"Thread", "[", 
            RowBox[{"\[CapitalSigma]", "\[Rule]", 
             RowBox[{"Range", "@", 
              RowBox[{"Length", "@", "\[CapitalSigma]"}]}]}], "]"}], ",", 
           RowBox[{"_", "\[RuleDelayed]", 
            RowBox[{"Throw", "@", "False"}]}]}], "]"}]}], "]"}]}], "]"}]}], 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NFAAcceptedQ", "[", 
   RowBox[{"\[Omega]_", ",", 
    RowBox[{"{", 
     RowBox[{
     "_", ",", "\[CapitalSigma]_", ",", "\[Delta]_", ",", "s_", ",", "F_"}], 
     "}"}]}], "]"}], ":=", 
  RowBox[{"Catch", "@", 
   RowBox[{"AnyTrue", "[", 
    RowBox[{
     RowBox[{"Fold", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Union", "@@", 
         RowBox[{
         "\[Delta]", "\[LeftDoubleBracket]", "##", 
          "\[RightDoubleBracket]"}]}], "&"}], ",", 
       RowBox[{"{", "s", "}"}], ",", 
       RowBox[{"StringCases", "[", 
        RowBox[{"\[Omega]", ",", 
         RowBox[{"Append", "[", 
          RowBox[{
           RowBox[{"Thread", "[", 
            RowBox[{
             RowBox[{"Rest", "@", "\[CapitalSigma]"}], "\[Rule]", 
             RowBox[{"Range", "[", 
              RowBox[{"2", ",", 
               RowBox[{"Length", "@", "\[CapitalSigma]"}]}], "]"}]}], "]"}], 
           ",", 
           RowBox[{"_", "\[RuleDelayed]", 
            RowBox[{"Throw", "@", "False"}]}]}], "]"}]}], "]"}]}], "]"}], ",", 
     RowBox[{
      RowBox[{"MemberQ", "[", 
       RowBox[{"F", ",", "#"}], "]"}], "&"}]}], "]"}]}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6384222009069347`*^9, 3.6384222145087123`*^9}, {
  3.6384222914121113`*^9, 3.6384223420700083`*^9}, {3.638422629330439*^9, 
  3.638422660260208*^9}, {3.6384259134892817`*^9, 3.638425915961424*^9}, {
  3.6386111541227245`*^9, 3.638611157024891*^9}, {3.638872033108532*^9, 
  3.6388720338975773`*^9}, {3.640075492258813*^9, 3.6400755906394396`*^9}, {
  3.6400756563181963`*^9, 3.6400757037869115`*^9}, {3.6400794658300877`*^9, 
  3.6400794985529594`*^9}, {3.6400799356529603`*^9, 3.640079942443349*^9}, {
  3.6400806880219936`*^9, 3.6400807068160686`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "@", 
  RowBox[{"Transpose", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"InputForm", "@", "#"}], ",", 
       RowBox[{"DFAAcceptedQ", "[", 
        RowBox[{"#", ",", 
         RowBox[{"DFA", "@", "\"\<Even both ab\>\""}]}], "]"}]}], "}"}], 
     "&"}], "/@", 
    RowBox[{"{", 
     RowBox[{
     "\"\<\>\"", ",", "\"\<baba\>\"", ",", "\"\<bab\>\"", ",", 
      "\"\<aba\>\""}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6384226699067597`*^9, 3.638422708709979*^9}, {
   3.6384228923784847`*^9, 3.638422969661905*^9}, {3.6384259200726585`*^9, 
   3.6384259277460976`*^9}, {3.638611071921023*^9, 3.638611106454998*^9}, {
   3.6386112343523135`*^9, 3.6386112423237696`*^9}, {3.6386116459798574`*^9, 
   3.6386116566314664`*^9}, {3.6386157522477226`*^9, 3.6386157522907248`*^9}, 
   3.6386296617937145`*^9, {3.6388712176518908`*^9, 3.638871221506111*^9}, {
   3.640076265889062*^9, 3.6400762821079893`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     InterpretationBox[
      StyleBox["\"\<\>\"",
       ShowStringCharacters->True,
       NumberMarks->True],
      InputForm[""],
      AutoDelete->True,
      Editable->True], 
     InterpretationBox[
      StyleBox["\"\<baba\>\"",
       ShowStringCharacters->True,
       NumberMarks->True],
      InputForm["baba"],
      AutoDelete->True,
      Editable->True], 
     InterpretationBox[
      StyleBox["\"\<bab\>\"",
       ShowStringCharacters->True,
       NumberMarks->True],
      InputForm["bab"],
      AutoDelete->True,
      Editable->True], 
     InterpretationBox[
      StyleBox["\"\<aba\>\"",
       ShowStringCharacters->True,
       NumberMarks->True],
      InputForm["aba"],
      AutoDelete->True,
      Editable->True]},
    {"True", "True", "False", "False"}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.640076283747083*^9, {3.640079938740137*^9, 3.640079944301455*^9}, 
   3.6400807124853926`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "@", 
  RowBox[{"Transpose", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"InputForm", "@", "#"}], ",", 
       RowBox[{"NFAAcceptedQ", "[", 
        RowBox[{"#", ",", 
         RowBox[{"{", 
          RowBox[{",", 
           RowBox[{"{", 
            RowBox[{"\"\<\>\"", ",", "\"\<a\>\"", ",", "\"\<b\>\""}], "}"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{",", 
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"1", ",", "5"}], "}"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "3", "}"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "4", "}"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{",", 
               RowBox[{"{", "8", "}"}], ",", 
               RowBox[{"{", "}"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{",", 
               RowBox[{"{", "6", "}"}], ",", 
               RowBox[{"{", "}"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{",", 
               RowBox[{"{", "7", "}"}], ",", 
               RowBox[{"{", "}"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{",", 
               RowBox[{"{", "}"}], ",", 
               RowBox[{"{", "8", "}"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{",", 
               RowBox[{"{", "8", "}"}], ",", 
               RowBox[{"{", "8", "}"}]}], "}"}]}], "}"}], ",", "1", ",", 
           RowBox[{"{", "8", "}"}]}], "}"}]}], "]"}]}], "}"}], "&"}], "/@", 
    RowBox[{"{", 
     RowBox[{
     "\"\<aabba\>\"", ",", "\"\<baaba\>\"", ",", "\"\<abbba\>\"", ",", 
      "\"\<ababa\>\""}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.63842328479593*^9, 3.6384233011028624`*^9}, {
   3.638425319309297*^9, 3.638425431331704*^9}, {3.638425478896425*^9, 
   3.6384255482543917`*^9}, {3.638426000416254*^9, 3.6384260122549314`*^9}, {
   3.638437638351906*^9, 3.638437645378308*^9}, {3.638611461560309*^9, 
   3.638611462713375*^9}, {3.638611604122463*^9, 3.6386116305569754`*^9}, {
   3.6386157535077944`*^9, 3.6386157535907993`*^9}, 3.6386713385620604`*^9, {
   3.6388712301676064`*^9, 3.638871232861761*^9}, {3.6400705689132137`*^9, 
   3.6400705739154997`*^9}, {3.640076267617161*^9, 3.6400762678191724`*^9}, {
   3.640080721827927*^9, 3.6400807387068925`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     InterpretationBox[
      StyleBox["\"\<aabba\>\"",
       ShowStringCharacters->True,
       NumberMarks->True],
      InputForm["aabba"],
      AutoDelete->True,
      Editable->True], 
     InterpretationBox[
      StyleBox["\"\<baaba\>\"",
       ShowStringCharacters->True,
       NumberMarks->True],
      InputForm["baaba"],
      AutoDelete->True,
      Editable->True], 
     InterpretationBox[
      StyleBox["\"\<abbba\>\"",
       ShowStringCharacters->True,
       NumberMarks->True],
      InputForm["abbba"],
      AutoDelete->True,
      Editable->True], 
     InterpretationBox[
      StyleBox["\"\<ababa\>\"",
       ShowStringCharacters->True,
       NumberMarks->True],
      InputForm["ababa"],
      AutoDelete->True,
      Editable->True]},
    {"True", "True", "False", "False"}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.640079947694649*^9, 3.640080713871472*^9, 
  3.640081145784176*^9}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Trace", "Subsubsection",
 CellChangeTimes->{{3.6400792139856834`*^9, 3.6400792218181314`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DFATrace", "[", 
   RowBox[{"\[Omega]_", ",", 
    RowBox[{"{", 
     RowBox[{
     "Q_", ",", "\[CapitalSigma]_", ",", "\[Delta]_", ",", "s_", ",", "_"}], 
     "}"}]}], "]"}], ":=", 
  RowBox[{"Catch", "@", 
   RowBox[{"Q", "\[LeftDoubleBracket]", 
    RowBox[{"FoldList", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
       "\[Delta]", "\[LeftDoubleBracket]", "##", "\[RightDoubleBracket]"}], 
       "&"}], ",", "s", ",", 
      RowBox[{"StringCases", "[", 
       RowBox[{"\[Omega]", ",", 
        RowBox[{"Append", "[", 
         RowBox[{
          RowBox[{"Thread", "[", 
           RowBox[{"\[CapitalSigma]", "\[Rule]", 
            RowBox[{"Range", "@", 
             RowBox[{"Length", "@", "\[CapitalSigma]"}]}]}], "]"}], ",", 
          RowBox[{"_", "\[RuleDelayed]", 
           RowBox[{"Throw", "@", 
            RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}]}], "]"}], 
    "\[RightDoubleBracket]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NFATrace", "[", 
   RowBox[{"\[Omega]_", ",", 
    RowBox[{"{", 
     RowBox[{
     "Q_", ",", "\[CapitalSigma]_", ",", "\[Delta]_", ",", "s_", ",", "_"}], 
     "}"}]}], "]"}], ":=", 
  RowBox[{"Catch", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Q", "\[LeftDoubleBracket]", "#", "\[RightDoubleBracket]"}], 
     "&"}], "/@", 
    RowBox[{"FoldList", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"Join", "[", 
         RowBox[{"#", ",", 
          RowBox[{"Flatten", "@", 
           RowBox[{"\[Delta]", "\[LeftDoubleBracket]", 
            RowBox[{"#", ",", "1"}], "\[RightDoubleBracket]"}]}]}], "]"}], 
        "&"}], "@*", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{
          RowBox[{"CompoundExpression", "[", 
           RowBox[{
            RowBox[{"Sow", "@", 
             RowBox[{"\[Delta]", "\[LeftDoubleBracket]", 
              RowBox[{"#", ",", "1"}], "\[RightDoubleBracket]"}]}], ",", 
            "#"}], "]"}], "&"}], "@*"}], "*)"}], 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Union", "@@", 
          RowBox[{
          "\[Delta]", "\[LeftDoubleBracket]", "##", 
           "\[RightDoubleBracket]"}]}], "&"}], ")"}]}], ",", 
      RowBox[{"Prepend", "[", 
       RowBox[{
        RowBox[{"\[Delta]", "\[LeftDoubleBracket]", 
         RowBox[{"s", ",", "1"}], "\[RightDoubleBracket]"}], ",", "s"}], 
       "]"}], ",", 
      RowBox[{"StringCases", "[", 
       RowBox[{"\[Omega]", ",", 
        RowBox[{"Append", "[", 
         RowBox[{
          RowBox[{"Thread", "[", 
           RowBox[{
            RowBox[{"Rest", "[", "\[CapitalSigma]", "]"}], "\[Rule]", 
            RowBox[{"Range", "[", 
             RowBox[{"2", ",", 
              RowBox[{"Length", "@", "\[CapitalSigma]"}]}], "]"}]}], "]"}], 
          ",", 
          RowBox[{"_", "\[RuleDelayed]", 
           RowBox[{"Throw", "@", 
            RowBox[{"{", "}"}]}]}]}], "]"}]}], "]"}]}], "]"}]}], 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6388701696359477`*^9, 3.6388702712307587`*^9}, {
   3.638870497196683*^9, 3.638870507878294*^9}, {3.6388705418582373`*^9, 
   3.638870548274605*^9}, {3.6388705827365756`*^9, 3.6388707116909513`*^9}, {
   3.638871164187833*^9, 3.6388711698831587`*^9}, {3.638872051050558*^9, 
   3.6388720512705708`*^9}, {3.6388722491908913`*^9, 
   3.6388722721492043`*^9}, {3.6400792276424646`*^9, 3.640079251797846*^9}, 
   3.640079285929798*^9, {3.6400793439491167`*^9, 3.6400793760399523`*^9}, {
   3.6400794554034915`*^9, 3.6400794565985603`*^9}, {3.6400795045903053`*^9, 
   3.64007952146027*^9}, {3.640079599845753*^9, 3.640079634478734*^9}, {
   3.6400796709258184`*^9, 3.6400796730489407`*^9}, {3.640079754099576*^9, 
   3.64007997009093*^9}, {3.6400800505435314`*^9, 3.6400801391445994`*^9}, {
   3.6400802264575934`*^9, 3.640080339977086*^9}, 3.640080372531948*^9, {
   3.640080462131073*^9, 3.6400805195523577`*^9}, {3.640081150905469*^9, 
   3.64008136405066*^9}, {3.6400814205518913`*^9, 3.6400815472251368`*^9}, {
   3.6400816014622393`*^9, 3.64008160217128*^9}, {3.6400816520111303`*^9, 
   3.6400816864701014`*^9}, 3.640081727336439*^9, 3.640081884217412*^9, 
   3.6400819156172075`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NFATrace", "[", 
  RowBox[{"\"\<0110100110000110\>\"", ",", 
   RowBox[{"NFA", "@", "\"\<TM\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{3.6400820995667295`*^9, 3.6404288725040503`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "2", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "2"}], "}"}], ",", 
   RowBox[{"{", "5", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", "5", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "2"}], "}"}], ",", 
   RowBox[{"{", "5", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.6400821001147604`*^9, 3.6404288734121027`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"#", "\[LeftDoubleBracket]", 
          RowBox[{";;", 
           RowBox[{"-", "3"}]}], "\[RightDoubleBracket]"}], ",", 
         RowBox[{"#", "\[LeftDoubleBracket]", 
          RowBox[{"-", "1"}], "\[RightDoubleBracket]"}]}], "}"}], "&"}], "@", 
      RowBox[{"FixedPointList", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"StringQ", "@", "#"}], ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"EvenQ", "@", 
              RowBox[{"StringLength", "@", "#"}]}], ",", 
             RowBox[{"StringJoin", "[", 
              RowBox[{"ToString", "/@", 
               RowBox[{"Cases", "[", 
                RowBox[{
                 RowBox[{"Flatten", "@", 
                  RowBox[{"NFATrace", "[", 
                   RowBox[{"#", ",", 
                    RowBox[{"NFA", "@", "\"\<TM\>\""}]}], "]"}]}], ",", 
                 RowBox[{"0", "|", "1"}]}], "]"}]}], "]"}], ",", 
             RowBox[{"#", "\[Equal]", "\"\<0\>\""}]}], "]"}], ",", "#"}], 
          "]"}], "&"}], ",", "#"}], "]"}]}], "&"}], "/@", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
     "\"\<0110100110010110\>\"", ",", "\[IndentingNewLine]", 
      "\"\<0110100110000110\>\"", ",", "\[IndentingNewLine]", 
      "\"\<0110100110010111\>\"", ",", "\[IndentingNewLine]", 
      "\"\<01101001\>\""}], "}"}]}], ",", 
   RowBox[{"Alignment", "\[Rule]", "Left"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6400796375949125`*^9, 3.640079656981021*^9}, {
   3.6400815532834835`*^9, 3.6400815540155253`*^9}, 3.6400817226601715`*^9, {
   3.6400817643435555`*^9, 3.640081769108828*^9}, {3.6400818159945097`*^9, 
   3.6400820003380537`*^9}, {3.640082159243142*^9, 3.640082352580201*^9}, {
   3.64008239750277*^9, 3.640082419617035*^9}, {3.640082481262561*^9, 
   3.640082523766992*^9}, {3.640082620720537*^9, 3.640082625423806*^9}, {
   3.6400826581356773`*^9, 3.6400826672271976`*^9}, {3.6400826983119755`*^9, 
   3.6400826984859858`*^9}, {3.6400827418804674`*^9, 
   3.6400827645157623`*^9}, {3.640090177922785*^9, 3.640090231831868*^9}, {
   3.6400902799056177`*^9, 3.6400903443813057`*^9}, {3.640090388441826*^9, 
   3.640090390108921*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"{", 
      RowBox[{"\<\"0110100110010110\"\>", ",", "\<\"01101001\"\>", 
       ",", "\<\"0110\"\>", ",", "\<\"01\"\>", ",", "\<\"0\"\>"}], "}"}], 
     "True"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"0110100110000110\"\>", ",", "\<\"01101\"\>"}], "}"}], 
     "False"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"0110100110010111\"\>", ",", "\<\"0110100\"\>"}], "}"}], 
     "False"},
    {
     RowBox[{"{", 
      RowBox[{"\<\"01101001\"\>", ",", "\<\"0110\"\>", ",", "\<\"01\"\>", 
       ",", "\<\"0\"\>"}], "}"}], "True"}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.6400903934771137`*^9}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  RowBox[{"NFAConfigurations", "[", 
   RowBox[{"\[Omega]_", ",", 
    RowBox[{"{", 
     RowBox[{
     "Q_", ",", "\[CapitalSigma]_", ",", "\[Delta]_", ",", "s_", ",", "_"}], 
     "}"}]}], "]"}], ":=", 
  RowBox[{"Thread", "/@", 
   RowBox[{"Transpose", "@", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"Q", "\[LeftDoubleBracket]", "#", "\[RightDoubleBracket]"}], 
        "&"}], "/@", 
       RowBox[{"FoldList", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Union", "@@", 
           RowBox[{
           "\[Delta]", "\[LeftDoubleBracket]", "##", 
            "\[RightDoubleBracket]"}]}], "&"}], ",", 
         RowBox[{"{", "s", "}"}], ",", 
         RowBox[{
          RowBox[{"Characters", "@", "\[Omega]"}], "/.", 
          RowBox[{"Thread", "[", 
           RowBox[{"\[CapitalSigma]", "\[Rule]", 
            RowBox[{"Range", "@", 
             RowBox[{"Length", "@", "\[CapitalSigma]"}]}]}], "]"}]}]}], 
        "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Array", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"StringDrop", "[", 
           RowBox[{"\[Omega]", ",", "#"}], "]"}], "&"}], ",", 
         RowBox[{"StringLength", "@", "\[Omega]"}], ",", "0"}], "]"}], "//", 
       RowBox[{"Append", "[", "\"\<\>\"", "]"}]}]}], "}"}]}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6388701696359477`*^9, 3.6388702712307587`*^9}, {
   3.638870497196683*^9, 3.638870507878294*^9}, {3.6388705418582373`*^9, 
   3.638870548274605*^9}, {3.6388705827365756`*^9, 3.6388707116909513`*^9}, {
   3.638871164187833*^9, 3.6388711698831587`*^9}, {3.638872051050558*^9, 
   3.6388720512705708`*^9}, {3.6388722491908913`*^9, 
   3.6388722721492043`*^9}, {3.6400792276424646`*^9, 3.6400792357089257`*^9}, 
   3.6400792914931164`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"\:041f\:0440\:0438\:043a\:043b\:0430\:0434", " ", "3."}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{"NFAConfigurations", "[", 
   RowBox[{"\"\<abba\>\"", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"CharacterRange", "[", 
       RowBox[{
       "\"\<\[DoubleStruckOne]\>\"", ",", "\"\<\[DoubleStruckEight]\>\""}], 
       "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"\"\<a\>\"", ",", "\"\<b\>\""}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "5"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "3", "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "4", "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "8", "}"}], ",", 
          RowBox[{"{", "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "6", "}"}], ",", 
          RowBox[{"{", "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "7", "}"}], ",", 
          RowBox[{"{", "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "8", "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "8", "}"}], ",", 
          RowBox[{"{", "8", "}"}]}], "}"}]}], "}"}], ",", "1", ",", 
      RowBox[{"{", "8", "}"}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6388709128154554`*^9, 3.638871011761114*^9}, {
  3.63887105294147*^9, 3.63887105416754*^9}, {3.6388713390758357`*^9, 
  3.638871360153041*^9}, {3.6388722984487085`*^9, 3.6388722985837164`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"\<\"\[DoubleStruckOne]\"\>", ",", "\<\"abba\"\>"}], "}"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\<\"\[DoubleStruckOne]\"\>", ",", "\<\"bba\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"\[DoubleStruckTwo]\"\>", ",", "\<\"bba\"\>"}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\<\"\[DoubleStruckOne]\"\>", ",", "\<\"ba\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"\[DoubleStruckThree]\"\>", ",", "\<\"ba\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"\[DoubleStruckFive]\"\>", ",", "\<\"ba\"\>"}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\<\"\[DoubleStruckOne]\"\>", ",", "\<\"a\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"\[DoubleStruckFour]\"\>", ",", "\<\"a\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"\[DoubleStruckFive]\"\>", ",", "\<\"a\"\>"}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\<\"\[DoubleStruckOne]\"\>", ",", "\<\"\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"\[DoubleStruckTwo]\"\>", ",", "\<\"\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"\[DoubleStruckSix]\"\>", ",", "\<\"\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\<\"\[DoubleStruckEight]\"\>", ",", "\<\"\"\>"}], "}"}]}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.64007929505232*^9}]
}, Closed]]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Transition diagram", "Subchapter",
 CellChangeTimes->{{3.6400706809526215`*^9, 3.6400706997246957`*^9}, {
   3.6408568213197393`*^9, 3.640856835865571*^9}, 3.6410301294122305`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DFA\[Delta]Edges", "@", "\[Delta]_"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"rd", "=", 
      RowBox[{"Range", "/@", 
       RowBox[{"Dimensions", "[", 
        RowBox[{"\[Delta]", ",", "2"}], "]"}]}]}], "}"}], ",", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{"Inner", "[", 
       RowBox[{
        RowBox[{"Reverse", "@*", "List"}], ",", 
        RowBox[{"rd", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
        ",", 
        RowBox[{"Inner", "[", 
         RowBox[{"Rule", ",", 
          RowBox[{
          "rd", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
          "\[Delta]", ",", "List"}], "]"}], ",", "List"}], "]"}], ",", "1"}], 
     "]"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NFA\[Delta]Edges", "@", "\[Delta]_"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"rd", "=", 
      RowBox[{"Range", "/@", 
       RowBox[{"Dimensions", "[", 
        RowBox[{"\[Delta]", ",", "2"}], "]"}]}]}], "}"}], ",", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{"Inner", "[", 
       RowBox[{
        RowBox[{"Thread", "@*", "Reverse", "@*", "List"}], ",", 
        RowBox[{"rd", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
        ",", 
        RowBox[{"Inner", "[", 
         RowBox[{
          RowBox[{"Thread", "@*", "Rule"}], ",", 
          RowBox[{
          "rd", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
          "\[Delta]", ",", 
          RowBox[{"Flatten", "@*", "List"}]}], "]"}], ",", "List"}], "]"}], 
      ",", "1"}], "]"}]}], "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.6346703135309534`*^9, {3.634670367382248*^9, 3.634670377709466*^9}, {
   3.6346704789848437`*^9, 3.6346704988280787`*^9}, 3.6347378907300215`*^9, {
   3.6347963328543406`*^9, 3.6347963419088583`*^9}, {3.6347964272017365`*^9, 
   3.634796466387978*^9}, {3.637920911879547*^9, 3.637920950996784*^9}, {
   3.6379216611254015`*^9, 3.6379217396878953`*^9}, {3.6379287071434107`*^9, 
   3.6379287073834243`*^9}, {3.638612007505535*^9, 3.6386120174831057`*^9}, 
   3.6386712787826414`*^9, {3.63867131634979*^9, 3.6386713254533105`*^9}, {
   3.638671869493428*^9, 3.638671895532917*^9}, {3.638769556007847*^9, 
   3.638769638745579*^9}, {3.6400833220246496`*^9, 3.640083330958161*^9}, {
   3.64008919456854*^9, 3.6400891991578026`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MapAt", "[", 
     RowBox[{"MatrixForm", ",", "1"}], "]"}], "@", 
    RowBox[{"{", 
     RowBox[{"#", ",", 
      RowBox[{"DFA\[Delta]Edges", "@", "#"}]}], "}"}]}], "&"}], "@", 
  RowBox[{
   RowBox[{"DFA", "[", "\"\<Substr aa\>\"", "]"}], "\[LeftDoubleBracket]", 
   "3", "\[RightDoubleBracket]"}]}]], "Input",
 CellChangeTimes->{
  3.6379287128107347`*^9, {3.6384325467796845`*^9, 3.6384325553971777`*^9}, {
   3.6384326045249877`*^9, 3.638432622140995*^9}, {3.6384326868196945`*^9, 
   3.6384327114681044`*^9}, {3.638612030863871*^9, 3.63861205985353*^9}, {
   3.638615763540368*^9, 3.6386157635663695`*^9}, {3.6387714730364943`*^9, 
   3.638771485215191*^9}, {3.6400775499065037`*^9, 3.640077555669833*^9}, {
   3.64008909980812*^9, 3.6400891064725013`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {"2", "1"},
       {"3", "1"},
       {"3", "3"}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "1"}], ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "3"}], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "1"}], ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"3", "\[Rule]", "3"}], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"3", "\[Rule]", "3"}], ",", "2"}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.6400775561118584`*^9, {3.6400891008181777`*^9, 3.640089107274547*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MapAt", "[", 
     RowBox[{"MatrixForm", ",", "1"}], "]"}], "@", 
    RowBox[{"{", 
     RowBox[{"#", ",", 
      RowBox[{"NFA\[Delta]Edges", "@", "#"}]}], "}"}]}], "&"}], "@", 
  RowBox[{
   RowBox[{"NFA", "[", "\"\<Real\>\"", "]"}], "\[LeftDoubleBracket]", "3", 
   "\[RightDoubleBracket]"}]}]], "Input",
 CellChangeTimes->{{3.6386717540268235`*^9, 3.6386717938030987`*^9}, {
   3.63867184155783*^9, 3.638671850016314*^9}, {3.638671944766733*^9, 
   3.638671950548064*^9}, {3.63876900988161*^9, 3.6387690406593704`*^9}, {
   3.6387694187049932`*^9, 3.6387695197487726`*^9}, 3.638771496478835*^9, {
   3.6400887578585615`*^9, 3.6400887689931984`*^9}, {3.640088912649415*^9, 
   3.6400889150645533`*^9}, {3.6400889637453375`*^9, 
   3.6400890345773892`*^9}, {3.6400890651201363`*^9, 3.640089160226576*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", "2", "}"}], 
        RowBox[{"{", "2", "}"}], 
        RowBox[{"{", "2", "}"}], 
        RowBox[{"{", "2", "}"}], 
        RowBox[{"{", "2", "}"}], 
        RowBox[{"{", "2", "}"}], 
        RowBox[{"{", "2", "}"}], 
        RowBox[{"{", "2", "}"}], 
        RowBox[{"{", "2", "}"}], 
        RowBox[{"{", "2", "}"}], 
        RowBox[{"{", "2", "}"}], 
        RowBox[{"{", "2", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}]},
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "2", "}"}], 
        RowBox[{"{", "2", "}"}], 
        RowBox[{"{", "2", "}"}], 
        RowBox[{"{", "2", "}"}], 
        RowBox[{"{", "2", "}"}], 
        RowBox[{"{", "2", "}"}], 
        RowBox[{"{", "2", "}"}], 
        RowBox[{"{", "2", "}"}], 
        RowBox[{"{", "2", "}"}], 
        RowBox[{"{", "2", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}]},
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "4", "}"}], 
        RowBox[{"{", "4", "}"}], 
        RowBox[{"{", "4", "}"}], 
        RowBox[{"{", "4", "}"}], 
        RowBox[{"{", "4", "}"}], 
        RowBox[{"{", "4", "}"}], 
        RowBox[{"{", "4", "}"}], 
        RowBox[{"{", "4", "}"}], 
        RowBox[{"{", "4", "}"}], 
        RowBox[{"{", "4", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}]},
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "4", "}"}], 
        RowBox[{"{", "4", "}"}], 
        RowBox[{"{", "4", "}"}], 
        RowBox[{"{", "4", "}"}], 
        RowBox[{"{", "4", "}"}], 
        RowBox[{"{", "4", "}"}], 
        RowBox[{"{", "4", "}"}], 
        RowBox[{"{", "4", "}"}], 
        RowBox[{"{", "4", "}"}], 
        RowBox[{"{", "4", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "5", "}"}]},
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", "6", "}"}], 
        RowBox[{"{", "6", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}]},
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}]},
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "7", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}]},
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}], 
        RowBox[{"{", "}"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"5", "\[Rule]", "6"}], ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"5", "\[Rule]", "6"}], ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "2"}], ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"3", "\[Rule]", "4"}], ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"4", "\[Rule]", "4"}], ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"5", "\[Rule]", "7"}], ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"6", "\[Rule]", "7"}], ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"7", "\[Rule]", "7"}], ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "2"}], ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"3", "\[Rule]", "4"}], ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"4", "\[Rule]", "4"}], ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"5", "\[Rule]", "7"}], ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"6", "\[Rule]", "7"}], ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"7", "\[Rule]", "7"}], ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "2"}], ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"3", "\[Rule]", "4"}], ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"4", "\[Rule]", "4"}], ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"5", "\[Rule]", "7"}], ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"6", "\[Rule]", "7"}], ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"7", "\[Rule]", "7"}], ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "2"}], ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"3", "\[Rule]", "4"}], ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"4", "\[Rule]", "4"}], ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"5", "\[Rule]", "7"}], ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"6", "\[Rule]", "7"}], ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"7", "\[Rule]", "7"}], ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "2"}], ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"3", "\[Rule]", "4"}], ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"4", "\[Rule]", "4"}], ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"5", "\[Rule]", "7"}], ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"6", "\[Rule]", "7"}], ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"7", "\[Rule]", "7"}], ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", "9"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "2"}], ",", "9"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"3", "\[Rule]", "4"}], ",", "9"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"4", "\[Rule]", "4"}], ",", "9"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"5", "\[Rule]", "7"}], ",", "9"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"6", "\[Rule]", "7"}], ",", "9"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"7", "\[Rule]", "7"}], ",", "9"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "2"}], ",", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"3", "\[Rule]", "4"}], ",", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"4", "\[Rule]", "4"}], ",", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"5", "\[Rule]", "7"}], ",", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"6", "\[Rule]", "7"}], ",", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"7", "\[Rule]", "7"}], ",", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", "11"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "2"}], ",", "11"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"3", "\[Rule]", "4"}], ",", "11"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"4", "\[Rule]", "4"}], ",", "11"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"5", "\[Rule]", "7"}], ",", "11"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"6", "\[Rule]", "7"}], ",", "11"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"7", "\[Rule]", "7"}], ",", "11"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", "12"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "2"}], ",", "12"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"3", "\[Rule]", "4"}], ",", "12"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"4", "\[Rule]", "4"}], ",", "12"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"5", "\[Rule]", "7"}], ",", "12"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"6", "\[Rule]", "7"}], ",", "12"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"7", "\[Rule]", "7"}], ",", "12"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", "13"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "2"}], ",", "13"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"3", "\[Rule]", "4"}], ",", "13"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"4", "\[Rule]", "4"}], ",", "13"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"5", "\[Rule]", "7"}], ",", "13"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"6", "\[Rule]", "7"}], ",", "13"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"7", "\[Rule]", "7"}], ",", "13"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"4", "\[Rule]", "5"}], ",", "15"}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.6400887698672485`*^9, 3.6400889155755825`*^9, 3.6400889948611174`*^9, {
   3.640089062459984*^9, 3.6400890939357843`*^9}, {3.640089123951501*^9, 
   3.6400891607506056`*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  RowBox[{"DFACollapseEdges", "@", "e_"}], ":=", 
  RowBox[{
   RowBox[{"MapAt", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Replace", "[", 
       RowBox[{"#", ",", 
        RowBox[{"l_List", "\[RuleDelayed]", 
         RowBox[{"Flatten", "@", "l"}]}]}], "]"}], "&"}], ",", 
     RowBox[{"{", 
      RowBox[{"All", ",", "2"}], "}"}]}], "]"}], "[", 
   RowBox[{"e", "//.", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"h___", ",", 
       RowBox[{"{", 
        RowBox[{"x_", ",", "l1_"}], "}"}], ",", "u___", ",", 
       RowBox[{"{", 
        RowBox[{"x_", ",", "l2_"}], "}"}], ",", "t___"}], "}"}], 
     "\[RuleDelayed]", 
     RowBox[{"{", 
      RowBox[{"h", ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", 
         RowBox[{"{", 
          RowBox[{"l1", ",", "l2"}], "}"}]}], "}"}], ",", "u", ",", "t"}], 
      "}"}]}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6379306803992743`*^9, 3.6379307376775503`*^9}, 
   3.640088638815753*^9, {3.6400886782530084`*^9, 3.640088752337246*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "@", "DFARenderState"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"StartColor", "\[Rule]", "LightYellow"}], ",", 
     RowBox[{"Color", "\[Rule]", "LightGray"}], ",", 
     RowBox[{"PreRender", "\[Rule]", "Null"}], ",", 
     RowBox[{"VertexSize", "\[Rule]", ".1"}], ",", 
     RowBox[{"VertexLabeling", "\[Rule]", "Automatic"}], ",", 
     RowBox[{"VertexLabelStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"Black", ",", "12"}], "}"}]}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DFARenderState", "[", 
   RowBox[{"q_", ",", "s_", ",", "F_", ",", "p_", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"q", "===", "s"}], ",", 
      RowBox[{"OptionValue", "@", "StartColor"}], ",", 
      RowBox[{"OptionValue", "@", "Color"}]}], "]"}], ",", 
    RowBox[{"EdgeForm", "@", "Black"}], ",", 
    RowBox[{"OptionValue", "@", "PreRender"}], ",", 
    RowBox[{"Disk", "[", 
     RowBox[{"p", ",", 
      RowBox[{"OptionValue", "@", "VertexSize"}]}], "]"}], ",", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"MemberQ", "[", 
       RowBox[{"F", ",", "q"}], "]"}], ",", 
      RowBox[{"Disk", "[", 
       RowBox[{"p", ",", 
        RowBox[{".7", 
         RowBox[{"OptionValue", "@", "VertexSize"}]}]}], "]"}]}], "]"}], ",", 
    RowBox[{"Text", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Replace", "[", 
        RowBox[{
         RowBox[{"OptionValue", "@", "VertexLabeling"}], ",", 
         RowBox[{"Automatic", "\[Rule]", "Identity"}]}], "]"}], "@", "q"}], 
      ",", "p", ",", 
      RowBox[{"BaseStyle", "\[Rule]", 
       RowBox[{"OptionValue", "@", "VertexLabelStyle"}]}]}], "]"}]}], 
   "}"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.6346703135309534`*^9, {3.634670367382248*^9, 3.634670377709466*^9}, {
   3.6346704789848437`*^9, 3.6346704988280787`*^9}, 3.6347378907300215`*^9, {
   3.6347949860028887`*^9, 3.634795038434581*^9}, {3.634795172250815*^9, 
   3.634795211484884*^9}, {3.634795244198141*^9, 3.634795246506945*^9}, {
   3.6347953592327433`*^9, 3.63479538030838*^9}, {3.634795506481402*^9, 
   3.6347955575246916`*^9}, {3.6347960546663647`*^9, 3.634796106240055*^9}, {
   3.634796322640756*^9, 3.6347963280300646`*^9}, 3.634796577731346*^9, {
   3.6348015421262937`*^9, 3.6348015586652393`*^9}, {3.6348016991312737`*^9, 
   3.634801722869632*^9}, {3.6348017624818974`*^9, 3.634801984873617*^9}, 
   3.634802107041605*^9, {3.6348023389678707`*^9, 3.6348023779200983`*^9}, {
   3.6348053325360403`*^9, 3.6348054322867455`*^9}, {3.634805546760293*^9, 
   3.63480554845039*^9}, {3.634805588476679*^9, 3.634805595324071*^9}, {
   3.634995153885273*^9, 3.634995155606371*^9}, {3.6351389655248837`*^9, 
   3.6351389659399076`*^9}, {3.637921029166256*^9, 3.637921069389556*^9}, {
   3.6379272478999467`*^9, 3.6379273152367983`*^9}, {3.637927369077878*^9, 
   3.6379274550557957`*^9}, {3.6379275213365865`*^9, 3.637927533236267*^9}, {
   3.637927574089604*^9, 3.637927600404109*^9}, {3.6379276480028315`*^9, 
   3.6379276484928594`*^9}, {3.637928010221549*^9, 3.6379280211301727`*^9}, {
   3.637928134514658*^9, 3.6379281890437775`*^9}, {3.6379282305741525`*^9, 
   3.637928332645991*^9}, {3.6379374176356225`*^9, 3.6379374194017234`*^9}, {
   3.6379384966103363`*^9, 3.6379385005875635`*^9}, {3.6379385685134487`*^9, 
   3.6379385969580755`*^9}, {3.6379386462678957`*^9, 3.637938678204723*^9}, {
   3.6379388240730658`*^9, 3.6379388251531277`*^9}, {3.6379397756754947`*^9, 
   3.6379397779726257`*^9}, {3.637939848652669*^9, 3.6379398565021176`*^9}, {
   3.637939910317196*^9, 3.6379399178706274`*^9}, {3.637940307390907*^9, 
   3.6379403085899754`*^9}, {3.6379403444830284`*^9, 3.637940345189069*^9}, {
   3.637941049636361*^9, 3.6379411260657325`*^9}, {3.637989350601206*^9, 
   3.6379894035682354`*^9}, {3.637989551141676*^9, 3.6379895751200476`*^9}, {
   3.637989785595086*^9, 3.637989812293613*^9}, {3.637990159196455*^9, 
   3.637990162625651*^9}, {3.6384336942713175`*^9, 3.638433694631338*^9}, {
   3.6385342839275413`*^9, 3.638534315737361*^9}, {3.6400724239173136`*^9, 
   3.6400724437204466`*^9}, {3.640429014088148*^9, 3.640429016863307*^9}, {
   3.6404290785648365`*^9, 3.6404291719271765`*^9}, {3.6404292084802675`*^9, 
   3.6404292106563916`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\:041f\:0440\:0438\:043a\:043b\:0430\:0434", " ", "1.", " ", 
     "\:041f\:043e\:0447\:0430\:0442\:043a\:043e\:0432\:0438\:0439"}], ",", 
    " ", 
    RowBox[{
    "\:0437\:0432\:0438\:0447\:0430\:0439\:043d\:0438\:0439", " ", 
     "\:0442\:0430", " ", 
     "\:0437\:0430\:043a\:043b\:044e\:0447\:043d\:0438\:0439", " ", 
     RowBox[{"\:0441\:0442\:0430\:043d\:0438", "."}]}]}], " ", "*)"}], 
  RowBox[{"Row", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Graphics", "[", 
      RowBox[{
       RowBox[{"DFARenderState", "[", 
        RowBox[{"#", ",", "1", ",", 
         RowBox[{"{", "3", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}], "]"}], ",", 
       RowBox[{"ImageSize", "\[Rule]", "60"}]}], "]"}], "&"}], "/@", 
    RowBox[{"Range", "@", "3"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6379283447006803`*^9, 3.6379283506330194`*^9}, {
   3.637928381206768*^9, 3.6379285126052837`*^9}, {3.6379384589731836`*^9, 
   3.6379384786813107`*^9}, 3.6379386857531548`*^9, {3.6384344979402847`*^9, 
   3.638434500595436*^9}, {3.63853421135439*^9, 3.6385343451120405`*^9}, {
   3.638541272311254*^9, 3.6385413318316584`*^9}, {3.638542229557005*^9, 
   3.638542254417427*^9}, {3.6386127088666506`*^9, 3.638612740477459*^9}, {
   3.638615767853615*^9, 3.6386157679306192`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "@", "DFARenderTransition"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"ArrowSize", "\[Rule]", "Automatic"}], ",", 
     RowBox[{"ArrowPosition", "\[Rule]", ".8"}], ",", 
     RowBox[{"EdgeLabeling", "\[Rule]", "Automatic"}], ",", 
     RowBox[{"EdgeLabelPosition", "\[Rule]", ".5"}], ",", 
     RowBox[{"EdgeLabelStyle", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"Black", ",", "12"}], "}"}]}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DFARenderTransition", "[", 
   RowBox[{"t_", ",", "p_", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"{", 
   RowBox[{"Black", ",", 
    RowBox[{"Arrowheads", "@", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"OptionValue", "@", "ArrowSize"}], ",", 
        RowBox[{"OptionValue", "@", "ArrowPosition"}]}], "}"}], "}"}]}], ",", 
    RowBox[{"Arrow", "@", 
     RowBox[{"BSplineCurve", "[", 
      RowBox[{"p", ",", 
       RowBox[{"SplineDegree", "\[Rule]", 
        RowBox[{
         RowBox[{"Length", "@", "p"}], "-", "1"}]}]}], "]"}]}], ",", 
    RowBox[{"Text", "[", 
     RowBox[{
      RowBox[{"Style", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Replace", "[", 
          RowBox[{
           RowBox[{"OptionValue", "@", "EdgeLabeling"}], ",", 
           RowBox[{"Automatic", "\[Rule]", "Identity"}]}], "]"}], "@", "t"}], 
        ",", 
        RowBox[{"Sequence", "@@", 
         RowBox[{"OptionValue", "@", "EdgeLabelStyle"}]}]}], "]"}], ",", 
      RowBox[{
       RowBox[{"BSplineFunction", "[", 
        RowBox[{"p", ",", 
         RowBox[{"SplineDegree", "\[Rule]", 
          RowBox[{
           RowBox[{"Length", "@", "p"}], "-", "1"}]}]}], "]"}], "@", 
       RowBox[{"OptionValue", "@", "EdgeLabelPosition"}]}], ",", 
      RowBox[{"Background", "\[Rule]", "White"}]}], "]"}]}], 
   "}"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.6346703135309534`*^9, {3.634670367382248*^9, 3.634670377709466*^9}, {
   3.6346704789848437`*^9, 3.6346704988280787`*^9}, 3.6347378907300215`*^9, {
   3.6347949860028887`*^9, 3.634795038434581*^9}, {3.634795172250815*^9, 
   3.634795211484884*^9}, {3.634795244198141*^9, 3.634795246506945*^9}, {
   3.6347953592327433`*^9, 3.63479538030838*^9}, {3.634795506481402*^9, 
   3.6347955575246916`*^9}, {3.6347960546663647`*^9, 3.634796106240055*^9}, {
   3.634796322640756*^9, 3.6347963280300646`*^9}, 3.634796577731346*^9, {
   3.6348015421262937`*^9, 3.6348015586652393`*^9}, {3.6348016991312737`*^9, 
   3.634801722869632*^9}, {3.6348017624818974`*^9, 3.634801984873617*^9}, 
   3.634802107041605*^9, {3.6348023389678707`*^9, 3.6348023779200983`*^9}, {
   3.6348053325360403`*^9, 3.6348054322867455`*^9}, {3.634805546760293*^9, 
   3.63480554845039*^9}, {3.634805588476679*^9, 3.634805595324071*^9}, {
   3.634995153885273*^9, 3.634995155606371*^9}, {3.6351389655248837`*^9, 
   3.6351389659399076`*^9}, {3.637921029166256*^9, 3.637921069389556*^9}, {
   3.6379272478999467`*^9, 3.6379273152367983`*^9}, {3.637929001785263*^9, 
   3.637929056361385*^9}, {3.637929112771611*^9, 3.6379292142804174`*^9}, {
   3.6379292638552527`*^9, 3.637929266112382*^9}, {3.6379293848541737`*^9, 
   3.637929401291114*^9}, {3.63792963970275*^9, 3.6379296416668625`*^9}, {
   3.6379296763268447`*^9, 3.6379296813651333`*^9}, {3.63792975456632*^9, 
   3.6379299284322643`*^9}, {3.637930052473359*^9, 3.637930115181946*^9}, {
   3.637930154259181*^9, 3.6379302528858223`*^9}, {3.637930299072464*^9, 
   3.637930302979687*^9}, {3.637930503475155*^9, 3.6379305042321987`*^9}, {
   3.637930890280279*^9, 3.637930942366258*^9}, {3.6379309979174356`*^9, 
   3.637931005094846*^9}, {3.637931101765375*^9, 3.6379311576065693`*^9}, {
   3.637933689492385*^9, 3.6379337033281765`*^9}, {3.6379361395195184`*^9, 
   3.637936182256963*^9}, {3.6379387390692043`*^9, 3.6379388619602327`*^9}, {
   3.6379403800180607`*^9, 3.637940390786677*^9}, {3.637941904666266*^9, 
   3.6379419257114697`*^9}, {3.637989955862825*^9, 3.637989974327881*^9}, {
   3.6379901340520163`*^9, 3.637990134597048*^9}, {3.637990175427383*^9, 
   3.6379901884621286`*^9}, {3.637990224351181*^9, 3.637990224955216*^9}, {
   3.6379903356025443`*^9, 3.637990359021884*^9}, {3.6379904794967747`*^9, 
   3.637990540325254*^9}, {3.637990840745437*^9, 3.637990850049969*^9}, {
   3.6379913216369424`*^9, 3.637991337009822*^9}, {3.6382812433127365`*^9, 
   3.6382813069283752`*^9}, {3.638434641165477*^9, 3.6384346414514933`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\:041f\:0440\:0438\:043a\:043b\:0430\:0434", " ", "1.", " ", 
     "\:0420\:0435\:0431\:0440\:0430"}], ",", " ", 
    RowBox[{
    "\:0449\:043e", " ", 
     "\:0437\:0443\:0441\:0442\:0440\:0456\:0447\:0430\:044e\:0442\:044c\:0441\
\:044f", " ", "\:0432", " ", "\:0433\:0440\:0430\:0444\:0456", " ", 
     "\:0430\:0432\:0442\:043e\:043c\:0430\:0442\:0430", " ", 
     RowBox[{"\"\<\:0410\:0410\>\"", "."}]}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"Row", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Graphics", "@", 
      RowBox[{"DFARenderTransition", "[", 
       RowBox[{"#", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"3", ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"4", ",", "1"}], "}"}]}], "}"}], ",", 
        RowBox[{"ArrowSize", "\[Rule]", ".1"}]}], "]"}]}], "&"}], "/@", 
    RowBox[{"DeleteDuplicates", "@", 
     RowBox[{
      RowBox[{"DFACollapseEdges", "[", 
       RowBox[{"DFA\[Delta]Edges", "@", 
        RowBox[{
         RowBox[{"DFA", "[", "\"\<AA\>\"", "]"}], "\[LeftDoubleBracket]", "3",
          "\[RightDoubleBracket]"}]}], "]"}], "\[LeftDoubleBracket]", 
      RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}]}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.6379305063043165`*^9, 3.6379305698849535`*^9}, {
   3.6379306564929075`*^9, 3.6379306617372074`*^9}, 3.6379307852132697`*^9, {
   3.637930836842222*^9, 3.637930878605611*^9}, {3.637931132775149*^9, 
   3.6379311344092426`*^9}, {3.6379312151838627`*^9, 3.6379313211739244`*^9}, 
   3.6379388856025853`*^9, {3.6382813151008425`*^9, 3.638281315361858*^9}, {
   3.638426200018671*^9, 3.6384262099892406`*^9}, {3.6384347050101285`*^9, 
   3.638434705772172*^9}, {3.6384351209519186`*^9, 3.6384351603031693`*^9}, {
   3.6385341265785418`*^9, 3.6385342039049644`*^9}, {3.6386128142666793`*^9, 
   3.6386128386150723`*^9}, {3.6386128869838386`*^9, 3.638612976122937*^9}, {
   3.6386130108149214`*^9, 3.6386132045380015`*^9}, {3.638613235595778*^9, 
   3.6386132588741093`*^9}, {3.63861338231817*^9, 3.638613777480772*^9}, {
   3.638615772926905*^9, 3.6386157729619074`*^9}, {3.6387716975943384`*^9, 
   3.638771783401246*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "@", "DFACustomPlot"}], "=", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"FilterRules", "[", 
        RowBox[{
         RowBox[{"Options", "@", "GraphPlot"}], ",", 
         RowBox[{"Except", "[", "#", "]"}]}], "]"}], "~", "Join", "~", 
       RowBox[{"{", 
        RowBox[{"EdgeCollapsing", "\[Rule]", "True"}], "}"}], "~", "Join", 
       "~", "#"}], "&"}], "@", 
     RowBox[{"Options", "@", "DFARenderState"}]}], "~", "Join", "~", 
    RowBox[{"Options", "@", "DFARenderTransition"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DFACustomPlot", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "Q_", ",", "\[CapitalSigma]_", ",", "\[Delta]_", ",", "s_", ",", "F_"}], 
     "}"}], ",", "Edges_", ",", "PrePlot_", ",", "Plot_", ",", 
    RowBox[{"opts", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Qf", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"Null", "=!=", "Q"}], ",", 
         RowBox[{
          RowBox[{"Q", "\[LeftDoubleBracket]", "#", "\[RightDoubleBracket]"}],
           "&"}], ",", "Identity"}], "]"}]}], ",", 
      RowBox[{"\[CapitalSigma]f", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"Null", "=!=", "\[CapitalSigma]"}], ",", 
         RowBox[{
          RowBox[{
          "\[CapitalSigma]", "\[LeftDoubleBracket]", "#", 
           "\[RightDoubleBracket]"}], "&"}], ",", 
         RowBox[{
          RowBox[{"Characters", "@", 
           RowBox[{"FromCharacterCode", "[", 
            RowBox[{"96", "+", "#"}], "]"}]}], "&"}]}], "]"}]}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{"Plot", "@@", 
     RowBox[{"PrePlot", "@", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"OptionValue", "@", "EdgeCollapsing"}], ",", 
           "DFACollapseEdges", ",", "Identity"}], "]"}], "@", 
         RowBox[{"Edges", "@", "\[Delta]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"Sequence", "@@", 
         RowBox[{"FilterRules", "[", 
          RowBox[{
           RowBox[{"FilterRules", "[", 
            RowBox[{
             RowBox[{"{", "opts", "}"}], ",", 
             RowBox[{"Options", "@", "Plot"}]}], "]"}], ",", 
           RowBox[{"Except", "@", 
            RowBox[{"{", 
             RowBox[{
             "VertexRenderingFunction", ",", "EdgeRenderingFunction"}], 
             "}"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"VertexRenderingFunction", "\[Rule]", 
         RowBox[{"Replace", "[", 
          RowBox[{
           RowBox[{"OptionValue", "@", "VertexRenderingFunction"}], ",", 
           RowBox[{"Automatic", "\[Rule]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"DFARenderState", "[", 
               RowBox[{"#2", ",", 
                RowBox[{"Replace", "[", 
                 RowBox[{"s", ",", 
                  RowBox[{"Null", "\[Rule]", "1"}]}], "]"}], ",", "F", ",", 
                "#1", ",", 
                RowBox[{"VertexLabeling", "\[Rule]", "Qf"}], ",", 
                RowBox[{"Sequence", "@@", 
                 RowBox[{"FilterRules", "[", 
                  RowBox[{
                   RowBox[{"{", "opts", "}"}], ",", 
                   RowBox[{"Options", "@", "DFARenderState"}]}], "]"}]}]}], 
               "]"}], "&"}], ")"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"EdgeRenderingFunction", "\[Rule]", 
         RowBox[{"Replace", "[", 
          RowBox[{
           RowBox[{"OptionValue", "@", "EdgeRenderingFunction"}], ",", 
           RowBox[{"Automatic", "\[Rule]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"DFARenderTransition", "[", 
               RowBox[{"#3", ",", "#1", ",", 
                RowBox[{"EdgeLabeling", "\[Rule]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"Null", "=!=", "\[CapitalSigma]"}], ",", 
                   RowBox[{"(", 
                    RowBox[{"l", "\[Function]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "@", "l"}], "\[Equal]", 
                    RowBox[{"Length", "@", "\[CapitalSigma]"}]}], ",", 
                    "\"\<\[CapitalSigma]\>\"", ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "@", "l"}], ">", 
                    RowBox[{
                    RowBox[{"Length", "@", "\[CapitalSigma]"}], "/", "2."}]}],
                     ",", 
                    RowBox[{"Row", "@", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\[CapitalSigma]\>\"", ",", "\"\<\[Backslash]\>\"", 
                    ",", 
                    RowBox[{"\[CapitalSigma]f", "@", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"Range", "@", 
                    RowBox[{"Length", "@", "\[CapitalSigma]"}]}], ",", "l"}], 
                    "]"}]}]}], "}"}]}], ",", 
                    RowBox[{"\[CapitalSigma]f", "@", "l"}]}], "]"}]}], 
                    "]"}]}], ")"}], ",", 
                   RowBox[{
                    RowBox[{"FromCharacterCode", "[", 
                    RowBox[{"#", "+", "96"}], "]"}], "&"}]}], "]"}]}], ",", 
                RowBox[{"Sequence", "@@", 
                 RowBox[{"FilterRules", "[", 
                  RowBox[{
                   RowBox[{"{", "opts", "}"}], ",", 
                   RowBox[{"Options", "@", "DFARenderTransition"}]}], 
                  "]"}]}]}], "]"}], "&"}], ")"}]}]}], "]"}]}]}], "}"}]}]}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DFAPlot", "[", 
   RowBox[{"M_", ",", 
    RowBox[{"opts", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
  RowBox[{"DFACustomPlot", "[", 
   RowBox[{
   "M", ",", "DFA\[Delta]Edges", ",", "Identity", ",", "GraphPlot", ",", 
    "opts"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "@", "DFALayeredPlot"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DFALayeredPlot", "[", 
   RowBox[{"M_", ",", "pos_", ",", 
    RowBox[{"opts", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
  RowBox[{"DFACustomPlot", "[", 
   RowBox[{"M", ",", "DFA\[Delta]Edges", ",", 
    RowBox[{"Insert", "[", 
     RowBox[{"pos", ",", "2"}], "]"}], ",", "LayeredGraphPlot", ",", "opts"}],
    "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NFAPlot", "[", 
   RowBox[{"M_", ",", 
    RowBox[{"opts", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
  RowBox[{"DFACustomPlot", "[", 
   RowBox[{
   "M", ",", "NFA\[Delta]Edges", ",", "Identity", ",", "GraphPlot", ",", 
    "opts"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NFALayeredPlot", "[", 
   RowBox[{"M_", ",", "pos_", ",", 
    RowBox[{"opts", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
  RowBox[{"DFACustomPlot", "[", 
   RowBox[{"M", ",", "NFA\[Delta]Edges", ",", 
    RowBox[{"Insert", "[", 
     RowBox[{"pos", ",", "2"}], "]"}], ",", "LayeredGraphPlot", ",", "opts"}],
    "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6379395358147755`*^9, 3.637939590427899*^9}, {
   3.637939624469846*^9, 3.6379396485632243`*^9}, {3.6379400791628532`*^9, 
   3.6379401277206306`*^9}, {3.63794044136057*^9, 3.637940484253023*^9}, {
   3.6379405962514286`*^9, 3.63794059627143*^9}, {3.637940640277947*^9, 
   3.6379407825890865`*^9}, 3.6379408145099125`*^9, {3.6379408928723946`*^9, 
   3.637941030443263*^9}, {3.6379412136997447`*^9, 3.6379412290856247`*^9}, {
   3.6379413970262303`*^9, 3.6379414019775133`*^9}, {3.6379414332733035`*^9, 
   3.637941446298049*^9}, {3.6379414806850157`*^9, 3.637941638308031*^9}, {
   3.6379416965543623`*^9, 3.637941698526475*^9}, {3.6379908744803667`*^9, 
   3.63799092489725*^9}, {3.6379909711418953`*^9, 3.6379910284951754`*^9}, {
   3.6379912180790195`*^9, 3.6379912880300207`*^9}, {3.638280139876624*^9, 
   3.6382801435648346`*^9}, {3.6382803839035816`*^9, 3.638280506127572*^9}, {
   3.638280543384703*^9, 3.638280555439393*^9}, {3.63828061064155*^9, 
   3.638280689457058*^9}, {3.638280950985017*^9, 3.638280951288034*^9}, {
   3.638280985358983*^9, 3.6382809928214097`*^9}, {3.6382810396270866`*^9, 
   3.638281067727694*^9}, {3.638281130369277*^9, 3.6382811564887705`*^9}, {
   3.638426461259613*^9, 3.6384264885401735`*^9}, {3.63843526713328*^9, 
   3.6384352783289204`*^9}, {3.638436511669463*^9, 3.638436526624319*^9}, 
   3.6384365696437793`*^9, {3.6384381742625585`*^9, 3.6384381892254143`*^9}, 
   3.638532965227116*^9, {3.638541383284601*^9, 3.6385414596439686`*^9}, {
   3.6386217080324774`*^9, 3.638621709436558*^9}, {3.6386979065907145`*^9, 
   3.6386979091788626`*^9}, {3.638697939261203*^9, 3.6386979668647823`*^9}, {
   3.6386980439209867`*^9, 3.6386982160746727`*^9}, {3.638698259400151*^9, 
   3.63869839148517*^9}, {3.6386984633409*^9, 3.6386985297616987`*^9}, {
   3.6386985617787285`*^9, 3.638698639620801*^9}, {3.6386986773929615`*^9, 
   3.638698716038172*^9}, {3.6386987537585487`*^9, 3.6386987935558248`*^9}, {
   3.6386989514244747`*^9, 3.6386990086075635`*^9}, {3.6386990490288754`*^9, 
   3.638699062491646*^9}, {3.638768239584552*^9, 3.638768255679472*^9}, 
   3.6387920152945857`*^9, 3.6387939352434006`*^9, {3.640425474485695*^9, 
   3.640425508002612*^9}, {3.6404255773515787`*^9, 3.640425582197856*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\:041f\:0440\:0438\:043a\:043b\:0430\:0434", " ", "1.", " ", 
     "\:0417\:043e\:0431\:0440\:0430\:0437\:0438\:043c\:043e", " ", 
     "\:0430\:0432\:0442\:043e\:043c\:0430\:0442", " ", 
     RowBox[{
     "\"\<\:0410\:0410\>\"", ".", " ", 
      "\:0424\:0443\:043d\:043a\:0446\:0456\:044f"}], " ", "DFAPlot", " ", 
     "\:043f\:0440\:043e\:043c\:0430\:043b\:044c\:043e\:0432\:0443\:0454", 
     " ", "\:0439\:043e\:0433\:043e", " ", "\:0437\:043b\:0456\:0432\:0430", 
     " ", "\:043d\:0430\:043f\:0440\:0430\:0432\:043e"}], ",", " ", 
    RowBox[{
    "\:0430", " ", "DFALayeredPlot", " ", "\:043c\:043e\:0436\:0435", " ", 
     "\:043f\:0440\:043e\:043c\:0430\:043b\:044e\:0432\:0430\:0442\:0438", 
     " ", "\:0439\:043e\:0433\:043e", " ", 
     "\:0441\:043f\:0440\:0430\:0432\:0430", " ", 
     RowBox[{"\:043d\:0430\:043b\:0456\:0432\:043e", "."}]}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"DFAPlot", "[", 
    RowBox[{
     RowBox[{"DFA", "@", "\"\<Substr aa\>\""}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "700"}]}], "]"}], "\[IndentingNewLine]", 
   RowBox[{"DFALayeredPlot", "[", 
    RowBox[{
     RowBox[{"DFA", "@", "\"\<Substr aa\>\""}], ",", "Right", ",", 
     RowBox[{"ImageSize", "\[Rule]", "700"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.6379396078128934`*^9, 3.637939614277263*^9}, {
   3.6379413657664423`*^9, 3.6379413875996914`*^9}, {3.6379417078920107`*^9, 
   3.6379417611580577`*^9}, {3.6379417940409384`*^9, 
   3.6379417951570024`*^9}, {3.6379418316510897`*^9, 3.637941862235839*^9}, {
   3.6379429393524466`*^9, 3.637942952367191*^9}, {3.637942986705155*^9, 
   3.6379430730170918`*^9}, {3.6379910371986732`*^9, 
   3.6379910424819756`*^9}, {3.6379912944753885`*^9, 3.637991306352068*^9}, 
   3.6379913949101334`*^9, {3.6382798811888275`*^9, 3.6382799006449404`*^9}, {
   3.638279989161003*^9, 3.6382799965424256`*^9}, {3.6382800464032774`*^9, 
   3.6382801083198185`*^9}, {3.638280196034836*^9, 3.6382801969348874`*^9}, {
   3.6382807360447226`*^9, 3.638280747502378*^9}, {3.6382810763691883`*^9, 
   3.6382810765141964`*^9}, {3.638281164672239*^9, 3.6382812065836363`*^9}, 
   3.638426109602499*^9, {3.638426173363146*^9, 3.638426179227482*^9}, {
   3.6384264993917937`*^9, 3.638426506616207*^9}, 3.6384357378412027`*^9, {
   3.6384359229957933`*^9, 3.6384359234468193`*^9}, {3.638436595067233*^9, 
   3.6384365952492437`*^9}, {3.638436866192741*^9, 3.638436873656168*^9}, {
   3.6386143418280506`*^9, 3.638614397378228*^9}, {3.6386145022132244`*^9, 
   3.638614534347062*^9}, {3.638615779564285*^9, 3.638615779922305*^9}, {
   3.6387718008852463`*^9, 3.638771802631346*^9}, {3.640425538088333*^9, 
   3.640425546886836*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[{{
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0., 2.6937955301856953`*^-10}, {
       0.10298574998777865`, 0.025746437756498874`}, {0.13068035128327116`, 
       0.03215737701557175}, {0.1585823118568767, 0.037595361867406085`}, {
       0.18665746124787994`, 0.04205373262057022}, {0.21487141689786476`, 
       0.045527029279438636`}, {0.24318962625771473`, 
       0.048010998230838986`}, {0.27157740910279454`, 
       0.049502597453288555`}, {0.3000000000044903, 0.05000000024244167}, {
       0.7000000000044898, 0.0500000002065244}, {0.7284225909060962, 
       0.049502597412266924`}, {0.7568103737509082, 0.04801099818471932}, {
       0.7851285831103121, 0.04552702922823337}, {0.8133425387596731, 
       0.04205373256429801}, {0.8414176881498757, 0.03759536180609191}, {
       0.8693196487225047, 0.03215737694924692}, {0.8970142500168459, 
       0.025746437685200352`}, {1., 1.7958636867904636`*^-10}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.5000000000043636, 0.0485930742416706},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQOnpkxe/rPpky3Diedv2rQF9kdsPyIfLFqwX2Bt
cqPry7b9Nzu06uY+37S/RMr+fJn10v2xl2W9bi05uJ9r1ropk5dt2/+0qMl5
RvaJ/aca2NM9GQ7vF2l66fbY5uz+E2pCnPY7Tu+3XPp+/7mt5/c/OpG2QTDl
0v49x79ZT1t8fn+EY9eBD7uu7Q+ZuOHBevaz+80Xrv20sP3W/iOaYZnrxE/s
/7R94nP5mrv7k7PPCH21OLi/J6pu157o+/ubVy9N1/64cT/E9Q/2//v9K+Hs
jK+2N59UgeWzT4VlAeXtZwh3g/V/E1MSAeq3nxW2BGx+pNvyLKD59o789WD7
My7+fgi0395sahTYfWph1rZA99mnbPzJAXK/q5nuQaD77ad+/pAG8t+0SAUP
oP/sld51gP1/OG6zC9D/9idWcYDDR0TayxsYPvYfWN83gMKvTra2ARh+9gwX
zr4EhW/PnVMuwPC1Rw9/AL/s1G8=
       "],
       SplineDegree->24]], InsetBox[
       StyleBox["\<\"b\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {-0.4460555994731605, 3.0943220312508723`*^-10},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{1., 1.7958636867904636`*^-10}, {2., 0.}},
       SplineDegree->1]], InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.5, 8.979318433952318*^-11},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{1., 1.7958636867904636`*^-10}, {
       0.8970142500122213, -0.0257464373075329}, {
       0.8693196487167288, -0.03215737656660578}, {
       0.8414176881431233, -0.03759536141844011}, {
       0.8133425387521201, -0.04205373217160424}, {
       0.7851285831021353, -0.04552702883047266}, {
       0.7568103737422853, -0.04801099778187301}, {
       0.7284225908972056, -0.04950259700432258}, {
       0.6999999999955098, -0.04999999979347569}, {
       0.29999999999551036`, -0.04999999975755842}, {
       0.2715774090939039, -0.04950259696330095}, {
       0.24318962624909202`, -0.04801099773575335}, {
       0.21487141688968808`, -0.0455270287792674}, {
       0.18665746124032703`, -0.04205373211533203}, {
       0.15858231185012447`, -0.037595361357125934`}, {
       0.13068035127749553`, -0.03215737650028094}, {
       0.10298574998315435`, -0.025746437236234376`}, {0., 
       2.6937955301856953`*^-10}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"b\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.4999999999956364, -0.04859307379270463},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQUOMMbLO7zhCkA+/wx3o2DRAnuGeY2uL8UYHLbO
Dayf+3yTvWem7e23IQwOMvfXe91actC+gXvZHJOtDA6TdIRcZmSfsC/TKZzG
YsDo8Nm1zP2xzVl78WcTPzTvZnQI4ak8cG7refuwObxmTT5MDpobamymLT5v
7/NbUCLuOpPDewXjh+vZz9pf8Aiz+xLA7KBw+mrmOvET9s4LP/1pXs/s4HzU
U/irxUH7NUwB08tfMzukV8/N0P640R7iahaHuZbWp6euu7HXQdUfLN/wKy4T
KL9f78cHsH6xvUtA+vdrfQsGm/93iXoW0Pz9x/X4wfafdawE2b8/p58L7L6d
uVtB7tufc70P7H6t84tB7t9/ISoP7L/tUyeD/Lf/4IbFYP8LLlUG+X//ma3W
4PAJ5d8BCp/9m7c0gMNvEUcYKPz2N12AhO/V3+Dw3Y8e/gCpk6gO
       "],
       SplineDegree->24]], InsetBox[
       StyleBox["\<\"\[CapitalSigma]\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {2.44605559947316, -8.010488955759261*^-11},
       Background->GrayLevel[1]]}}, {
     {RGBColor[1, 1, 0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{0., 2.6937955301856953`*^-10}, 0.1], 
      InsetBox["\<\"\\!\\(\\*SubscriptBox[\\(A\\), \\(0\\)]\\)\"\>", {0., 2.6937955301856953`*^-10},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{1., 1.7958636867904636`*^-10}, 0.1], 
      InsetBox["\<\"\\!\\(\\*SubscriptBox[\\(A\\), \\(1\\)]\\)\"\>", {1., 1.7958636867904636`*^-10},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], DiskBox[{2., 0.}, 0.1], 
      DiskBox[{2., 0.}, 0.06999999999999999], 
      InsetBox["\<\"\\!\\(\\*SubscriptBox[\\(A\\), \\(2\\)]\\)\"\>", {2., 0.},
       BaseStyle->{
         GrayLevel[0], 12}]}}},
   Annotation[#, 
    VertexCoordinateRules -> {{0., 2.6937955301856953`*^-10}, {1., 
     1.7958636867904636`*^-10}, {2., 0.}}]& ],
  AspectRatio->Automatic,
  FrameTicks->None,
  ImageSize->700,
  PlotRange->All,
  PlotRangePadding->Scaled[0.1]]], "Output",
 CellChangeTimes->{{3.640425532461011*^9, 3.640425547270858*^9}, 
   3.640425584863008*^9, {3.64042920154687*^9, 3.640429212779513*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[{{
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{2., 1.2246467991473532`*^-16}, {
       1.8970142500145335`, -0.025746437496366625`}, {
       1.8693196487196166`, -0.03215737675792629}, {
       1.8414176881464992`, -0.037595361612265954`}, {
       1.8133425387558963`, -0.04205373236795107}, {
       1.7851285831062236`, -0.045527029029352906`}, {
       1.7568103737465965`, -0.04801099798329611}, {
       1.7284225909016506`, -0.04950259720829464}, {
       1.6999999999999995`, -0.04999999999999993}, {
       1.3000000000000003`, -0.04999999999999993}, {
       1.2715774090983492`, -0.04950259720829464}, {
       1.2431896262534032`, -0.048010997983296}, {
       1.2148714168937764`, -0.045527029029352906`}, {
       1.1866574612441034`, -0.04205373236795096}, {
       1.1585823118535006`, -0.03759536161226584}, {
       1.1306803512803834`, -0.03215737675792618}, {
       1.1029857499854665`, -0.025746437496366403`}, {1., 
       6.123233995736766*^-17}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.4999999999999998`, -0.04859307401718751},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQUO7DEixmrLFtpsu8YbrgDkN5xyNwoWLbCP1Gx0
fSnG4GBzObh+7vNN9l39NrffhjA42H3f7HVryUF7hXtL5phsZXC480LKZUb2
CftFh/OnsRgwOtx/2+L+2Oas/cG4CR+adzM6nM3tO3Bu63n7h6I8Zk0+TA5M
/DNtpi0+b885VUAi7jqTQ6Fh2MP17Gfta+RD7b4EMDuo7PiXuU78hP2OMx//
NK9ndnB1LBf+anHQ/ttk/+nlr4Hy1v8ytD9utIc4n8WBRa9LUvjyCRuY/GEr
sPz+nVD9ohD9+2uh5v/cDjZ/PxfUfm+I/fsfQd33kA/svv2HoO7fBHH//iVQ
/52C+G+/ItT/xyD+398NDR9DSPjsj4KGnxQk/PbDwjf1JDh896OHPwDR6667

       "],
       SplineDegree->24]], InsetBox[
       StyleBox["\<\"b\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {2.4460555994731594`, 6.429475458405574*^-16},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{1., 6.123233995736766*^-17}, {0., 0.}},
       SplineDegree->1]], InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.5, 3.061616997868383*^-17},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{1., 6.123233995736766*^-17}, {
       1.102985749985467, 0.025746437496366847`}, {1.1306803512803838`, 
       0.032157376757926515`}, {1.1585823118535012`, 0.037595361612266176`}, {
       1.186657461244104, 0.04205373236795129}, {1.2148714168937769`, 
       0.04552702902935313}, {1.243189626253404, 0.04801099798329633}, {
       1.2715774090983498`, 0.04950259720829486}, {1.300000000000001, 
       0.050000000000000155`}, {1.7000000000000002`, 0.050000000000000155`}, {
       1.7284225909016513`, 0.04950259720829486}, {1.7568103737465972`, 
       0.04801099798329622}, {1.785128583106224, 0.04552702902935313}, {
       1.813342538755897, 0.04205373236795118}, {1.8414176881464999`, 
       0.037595361612266065`}, {1.869319648719617, 0.032157376757926404`}, {
       1.897014250014534, 0.025746437496366625`}, {2., 
       1.2246467991473532`*^-16}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"b\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.5000000000000007`, 0.04859307401718773},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQjQEuRL1u0xbY/+mku1GwaMH+CZGaja4v2/YbXw6u
n/t80/45j5TPl1kv3W/xfbPXrSUH94sdmT1l8rJt+6++kHKZkX1iv57VnzRP
hsP7r75tcX9sc3a/yBtWTvsdp/cfyO07cG7r+f086xM2CKZc2v+Jb6bNtMXn
9/usaDnwYde1/QmGYQ/Xs5/d/+L3ik8L22/tF9jxL3Od+In9R1L7nsvX3N2v
71gu/NXi4P5N82t27Ym+v/+H1b8M7Y8b90Mc/WA/e4yIsdqyiXtg8t8h8vZH
ofq1IfrtYebzQsy394XaHwux3x7mvg8Q99mLQ92/H+J+ewOo/65A/GcP8/9l
iP/tF6CGj30BNPxUIOFnDwvfz5DwtUcPfgCWb8nH
       "],
       SplineDegree->24]], InsetBox[
       StyleBox["\<\"\[CapitalSigma]\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {-0.44605559947316037`, -2.350306324755095*^-17},
       Background->GrayLevel[1]]}}, {
     {RGBColor[1, 1, 0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{2., 1.2246467991473532`*^-16}, 0.1], 
      InsetBox["\<\"\\!\\(\\*SubscriptBox[\\(A\\), \\(0\\)]\\)\"\>", {2., 1.2246467991473532`*^-16},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{1., 6.123233995736766*^-17}, 0.1], 
      InsetBox["\<\"\\!\\(\\*SubscriptBox[\\(A\\), \\(1\\)]\\)\"\>", {1., 6.123233995736766*^-17},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], DiskBox[{0., 0.}, 0.1], 
      DiskBox[{0., 0.}, 0.06999999999999999], 
      InsetBox["\<\"\\!\\(\\*SubscriptBox[\\(A\\), \\(2\\)]\\)\"\>", {0., 0.},
       BaseStyle->{
         GrayLevel[0], 12}]}}},
   Annotation[#, 
    VertexCoordinateRules -> {{2., 1.2246467991473532`*^-16}, {1., 
     6.123233995736766*^-17}, {0., 0.}}]& ],
  AspectRatio->Automatic,
  FrameTicks->None,
  ImageSize->700,
  PlotRange->All,
  PlotRangePadding->Scaled[0.1]]], "Output",
 CellChangeTimes->{{3.640425532461011*^9, 3.640425547270858*^9}, 
   3.640425584863008*^9, {3.64042920154687*^9, 3.6404292128065147`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "\:041f\:0440\:0438\:043a\:043b\:0430\:0434", " ", "2.", " ", 
    "\:041a\:043e\:0440\:0438\:0441\:0442\:0443\:0432\:0430\:0447", " ", 
    "\:043c\:043e\:0436\:0435", " ", "\:0442\:0430\:043a\:043e\:0436", " ", 
    "\:0437\:0430\:0434\:0430\:0442\:0438", " ", 
    "\:0437\:0430\:0433\:043e\:043b\:043e\:0432\:043e\:043a", " ", 
    RowBox[{
    "\:0437\:043e\:0431\:0440\:0430\:0436\:0435\:043d\:043d\:044f", "."}]}], 
   " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"DFAPlot", "[", 
      RowBox[{
       RowBox[{"DFA", "@", "#"}], ",", 
       RowBox[{"ImageSize", "\[Rule]", "400"}], ",", 
       RowBox[{"PlotLabel", "\[Rule]", "#"}]}], "]"}], "&"}], "@", 
    "\"\<Even both ab\>\""}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"DFALayeredPlot", "[", 
      RowBox[{
       RowBox[{"DFA", "@", "#"}], ",", "Left", ",", 
       RowBox[{"ImageSize", "\[Rule]", "700"}], ",", 
       RowBox[{"PlotLabel", "\[Rule]", "#"}]}], "]"}], "&"}], "@", 
    "\"\<Dif abc\>\""}]}]}]], "Input",
 CellChangeTimes->{{3.6384376684886293`*^9, 3.638437689919855*^9}, {
  3.6384377229107423`*^9, 3.6384377519774046`*^9}, {3.6384380553647575`*^9, 
  3.6384380635122232`*^9}, {3.638441605959154*^9, 3.6384418372553835`*^9}, {
  3.63845479123678*^9, 3.6384548000262833`*^9}, {3.6385340833580694`*^9, 
  3.6385341159919357`*^9}, {3.6385398442845755`*^9, 3.6385398917642913`*^9}, {
  3.6386145879811296`*^9, 3.638614667607684*^9}, {3.6386147350445414`*^9, 
  3.6386147804871407`*^9}, {3.638615781733409*^9, 3.638615791664977*^9}, {
  3.63861898701174*^9, 3.6386190044847393`*^9}, {3.638791997677578*^9, 
  3.6387919980205975`*^9}, {3.6387920511236353`*^9, 3.6387920526387215`*^9}, {
  3.640425591796405*^9, 3.6404256047041426`*^9}, {3.640425634991875*^9, 
  3.6404256629264727`*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[{{
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0., 0.029945404196222936`}, {
       0.10376607004466129`, 0.05261022492826195}, {0.13165515919533224`, 
       0.05819241912012285}, {0.15972249090213908`, 0.06279536127811203}, {
       0.18793369218068365`, 0.0664134143555507}, {0.21625421385502258`, 
       0.06904214746163373}, {0.2446493728687176, 0.07067834128777195}, {
       0.27308439475984425`, 0.07131999205015538}, {0.3015244562479413, 
       0.070966313943711}, {0.7015607042987799, 0.058988152265221805`}, {
       0.7299709759315851, 0.05763957842595846}, {0.758316664739329, 
       0.05529776040052192}, {0.7865630568443508, 0.051965566123609364`}, {
       0.8146755599738515, 0.047647076405718636`}, {0.8426197458237249, 
       0.04234757993553806}, {0.8703613922215794, 0.036073566803090706`}, {
       0.8978665250373206, 0.0288327205515706}, {1.0000906201270983`, 0.}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.5015004493061312, 0.06357017962584259},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0., 
       0.029945404196222936`}, {-0.02254198670633001, 
       0.13373785010290024`}, {-0.02809116906263598, 
       0.1616334257169873}, {-0.03266089263912286, 
       0.18970608483754953`}, {-0.036245561070634036`, 
       0.21792144795590962`}, {-0.038840784351259705`, 
       0.24624496079927854`}, {-0.040443384210608224`, 
       0.27464193664804815`}, {-0.041051398006112017`, 
       0.3030775988152856}, {-0.04066408112660136, 
       0.3315171232364083}, {-0.028212787660530814`, 
       0.7315375330456423}, {-0.02683061443812884, 
       0.7599460909261132}, {-0.024455277567357436`, 
       0.7882888913949295}, {-0.021089686032157218`, 
       0.8165312241116683}, {-0.016737961543367708`, 
       0.8446385017749082}, {-0.01140543349102563, 
       0.8725763024799702}, {-0.005098632417665616, 0.9003104118741054}, {
       0.0021747179793846216`, 0.9278068650574982}, {0.031128233665176586`, 
       1.0299964287193093`}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"b\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {-0.033031436623026315`, 0.531483533020283},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{1.0000906201270983`, 0.}, {
       0.8963245500824372, -0.022664820732039015`}, {
       0.8684354609317662, -0.028247014923899916`}, {
       0.8403681292249593, -0.03284995708188909}, {
       0.8121569279464147, -0.03646801015932777}, {
       0.7838364062720758, -0.039096743265410794`}, {
       0.7554412472583809, -0.040732937091549015`}, {
       0.7270062253672542, -0.04137458785393244}, {
       0.6985661638791573, -0.041020909747488066`}, {
       0.2985299158283183, -0.02904274806899887}, {
       0.27011964419551315`, -0.027694174229735524`}, {
       0.24177395538776922`, -0.025352356204298987`}, {
       0.2135275632827476, -0.022020161927386428`}, {
       0.18541506015324682`, -0.0177016722094957}, {
       0.15747087430337348`, -0.012402175739315124`}, {
       0.12972922790551894`, -0.006128162606867771}, {0.10222409508977767`, 
       0.0011126836446523347`}, {0., 0.029945404196222936`}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.49859017082096724`, -0.03362477542961967},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{1.0000906201270983`, 0.}, {
       0.9774534583305471, 0.10366186823846248`}, {0.9718781814425639, 
       0.13152292823312137`}, {0.967281171617977, 0.15956200591189518`}, {
       0.9636680586383644, 0.1877447628920101}, {0.9610432673445823, 
       0.2160366848321637}, {0.9594100122178343, 0.24440312370091513`}, {
       0.9587702934430177, 0.2728093402087996}, {0.9591248944591741, 
       0.3012205463522037}, {0.9711089360472085, 0.7008506012238015}, {
       0.9724574225880772, 0.7292320028884967}, {0.9747981432139237, 
       0.7575488424606558}, {0.9781282313339938, 0.78576644139317}, {
       0.982443608717119, 0.8138502426751346}, {0.9877389904861681, 
       0.8417658531524944}, {0.9940078915902345, 0.8694790856480207}, {
       1.0012426347466294`, 0.896956000829035}, {1.0300507240971837`, 
       0.999075137178996}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"b\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.9665225400224704, 0.5009934221392793},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.031128233665176586`, 
       1.0299964287193093`}, {0.053670220371506594`, 0.9262039828126322}, {
       0.059219402727812565`, 0.898308407198545}, {0.06378912630429945, 
       0.8702357480779829}, {0.06737379473581062, 0.8420203849596227}, {
       0.06996901801643629, 0.8136968721162539}, {0.07157161787578481, 
       0.7852998962674843}, {0.0721796316712886, 0.7568642341002466}, {
       0.07179231479177794, 0.7284247096791241}, {0.0593410213257074, 
       0.32840429986989}, {0.05795884810330543, 0.2999957419894192}, {
       0.05558351123253402, 0.2716529415206027}, {0.0522179196973338, 
       0.24341060880386395`}, {0.04786619520854429, 0.21530333114062417`}, {
       0.042533667156202215`, 0.18736553043556206`}, {0.0362268660828422, 
       0.15963142104142697`}, {0.028953515685791964`, 0.13213496785803408`}, {
       0., 0.029945404196222936`}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"b\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.0641596702882029, 0.5284582998952495},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.031128233665176586`, 
       1.0299964287193093`}, {0.13479912861961676`, 1.0525306717831335`}, {
       0.1626621232386105, 1.0580783503555664`}, {0.19070216869731732`, 
       1.0626477110717671`}, {0.21888492542776034`, 1.0662331580109607`}, {
       0.24717587908894303`, 1.0688303002138284`}, {0.2755403828352385, 
       1.0704359570599484`}, {0.3039436997470523, 1.0710481621629788`}, {
       0.33235104537179505`, 1.070666165778816}, {0.7319200415445973, 
       1.0582976491626903`}, {0.7602966264958695, 1.056921919107651}, {
       0.7886076990586883, 1.0545541401855574`}, {0.8168185877485798, 
       1.0511972121244202`}, {0.8448947437724161, 1.0468552460252543`}, {
       0.8728017833389965, 1.0415335593273713`}, {0.9005055297675576, 
       1.0352386692963154`}, {0.9279720553426434, 1.0279782850424166`}, {
       1.0300507240971837`, 0.999075137178996}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.5320920394897058, 1.0630764974641485`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{1.0300507240971837`, 0.999075137178996}, {
       1.052687885893735, 0.8954132689405335}, {1.058263162781718, 
       0.8675522089458746}, {1.062860172606305, 0.8395131312671008}, {
       1.0664732855859178`, 0.811330374286986}, {1.0690980768796996`, 
       0.7830384523468323}, {1.0707313320064478`, 0.7546720134780809}, {
       1.0713710507812644`, 0.7262657969701964}, {1.071016449765108, 
       0.6978545908267924}, {1.0590324081770737`, 0.29822453595519455`}, {
       1.057683921636205, 0.26984313429049944`}, {1.0553432010103587`, 
       0.24152629471834033`}, {1.0520131128902885`, 0.21330869578582606`}, {
       1.0476977355071635`, 0.18522489450386154`}, {1.0424023537381142`, 
       0.15730928402650166`}, {1.0361334526340478`, 0.12959605153097536`}, {
       1.028898709477653, 0.10211913634996099`}, {1.0000906201270983`, 0.}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"b\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.063618804201812, 0.49808171503971677`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{1.0300507240971837`, 0.999075137178996}, {
       0.9263798291427437, 0.9765408941151718}, {0.89851683452375, 
       0.9709932155427392}, {0.8704767890650431, 0.9664238548265383}, {
       0.8422940323346002, 0.9628384078873449}, {0.8140030786734174, 
       0.960241265684477}, {0.785638574927122, 0.9586356088383571}, {
       0.7572352580153081, 0.9580234037353267}, {0.7288279123905654, 
       0.9584054001194896}, {0.32925891621776304`, 0.970773916735615}, {
       0.3008823312664909, 0.9721496467906542}, {0.2725712587036721, 
       0.9745174257127478}, {0.2443603700137805, 0.9778743537738852}, {
       0.2162842139899442, 0.982216319873051}, {0.1883771744233639, 
       0.9875380065709339}, {0.1606734279948028, 0.9938328966019899}, {
       0.13320690241971692`, 1.0010932808558888`}, {0.031128233665176586`, 
       1.0299964287193093`}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.5290869182726543, 0.9659950684341571},
       Background->GrayLevel[1]]}}, {
     {RGBColor[1, 1, 0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{0., 0.029945404196222936`}, 0.1], 
      DiskBox[{0., 0.029945404196222936`}, 0.06999999999999999], 
      InsetBox["1", {0., 0.029945404196222936`},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{1.0000906201270983`, 0.}, 0.1], InsetBox["4", {1.0000906201270983`, 0.},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{0.031128233665176586`, 1.0299964287193093`}, 0.1], 
      InsetBox["2", {0.031128233665176586`, 1.0299964287193093`},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{1.0300507240971837`, 0.999075137178996}, 0.1], InsetBox["3", {1.0300507240971837`, 0.999075137178996},
       BaseStyle->{
         GrayLevel[0], 12}]}}},
   Annotation[#, 
    VertexCoordinateRules -> {{0., 0.029945404196222936`}, {
     1.0000906201270983`, 0.}, {0.031128233665176586`, 1.0299964287193093`}, {
     1.0300507240971837`, 0.999075137178996}}]& ],
  AspectRatio->Automatic,
  FrameTicks->None,
  ImageSize->400,
  PlotLabel->FormBox["\"Even both ab\"", TraditionalForm],
  PlotRange->All,
  PlotRangePadding->Scaled[0.1]]], "Output",
 CellChangeTimes->{
  3.6400775727448096`*^9, {3.640425605671198*^9, 3.640425663606512*^9}, 
   3.6404292143256016`*^9}],

Cell[BoxData[
 GraphicsBox[
  TagBox[{{
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQECBxwvTtZU9/+8Z9od9okhs/gPhN/m2Hc7a+f+
fbVXl8TK8x845xGQ6i1yZn/p4wxr6X6+A0wnCz19+K7v38l7KKT3Je+BoEnv
I6dufrC/78+DD5v1eA+slP5RkdD1bP+n9Uf5++N4DjQ3XGps5367/6l6wUa5
Su4DhQn2Vq3Sn/ZnpDy4mlTHdSApr25FCdu3/VWpYrXReZwHxLKWcU9y+7V/
foXDvChxzgNzjs6xUKz6vd9/2YlQ7a0cB/zZI/IbO//sb3m3bvFZd44Devo3
1m8q+bvfPvBzu+N59gOWtrK/tlj/299wbipTuzf7gQJDdb+Oe//2e6RNE563
h+3ANe5vq3Vi/++fJvF1V5sS24G0M53Ci7b/35/7dOMPh1rWA0rFj1pevP2/
X88YBJgPsEEC6kD4ZS1VuQamA4arteo2ffy/f/qp2j1fLzEeWLpm1Y+Tx/7v
fyWh83OnNuOBTJaGfLf6//tD9pnezupiOFC2adUjden/+xeVmh4VuPd//6Vt
WkF5s/7tPyGzTU5187/9NYIM+yT//t0vXvT2kNCUv/sLD2mpaTn/3T+p9PbG
mw1/9m87uaprfs6f/abqDa8rK3/vd4PSbPNmO53c9HO/KJT+mDePW4fnx/7/
UPrzzA63Ra3f9jPOgtA88lGfteW/7peC0vb/hIRO3vi83xtKd5lvXlS56dP+
aVD6zSmrpbZrPu7/DqUzdqyUFD32YX8RlP72HwTe72cFB8+H/QBdXTmC
       "],
       SplineDegree->36]], InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {-2.481055279005338, -1.964241417014602},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWIQDQECBxwvTtZU9/+854SydvHXOfwHzLnNTRcfWmHf
PitJ96Em/4FPa9cE3zq8y94qZZne4WV8B57tnil6dvJR+3sN38pmC/MdmPZx
+gSPY+fsyz8EsWUV8B5gqck4u77mij3r5t139PbyHJiXriTVKXbLvu2Ewa+X
P7kPnL1rIx4h8cD+l8GmuNlq3Af+WJu3Tkp9bJ/8xp7L2ZnrQLQfw/XPn57Z
m7gKqU/ez3nAfHKoqP3NF/af3DrnfTPlPLCxJdQnpO2V/ayPSwpyl3EcOKLE
UGP867W9rmvq3O8CHAcKc0OX3DF5a7/K8ZTK1FL2A7tSQo/6m72zF3p+mc3t
CtuBeRwM93v+vbNPM21y5tJlOyAVGfpxcu97+2U6V289rGc9YBIW+ifl8Xv7
82dAgOXAi/8g8N4+882jr+elEfw/iRONPpQww/ltujeadG8wHXgF5bP6b3/W
7org1xzTi/u/h/HAayj/zWS7l5PtGA+8gfIDQcpPMRx4C+WvM1C3EklA8KFx
BucDAIw893g=
       "],
       SplineDegree->27]], InsetBox[
       StyleBox["\<\"b\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {-2.9631204568917506`, 0.9044928035562259},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{-4., -4.287501758288913*^-15}, {-3., \
-3.2156263187166847`*^-15}},
       SplineDegree->1]], InsetBox[
       StyleBox["\<\"c\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {-3.5, -3.751564038502799*^-15},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{-0.9999999999999989, -1.000000000000001}, {
       0., 0.}},
       SplineDegree->1]], InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {-0.49999999999999944`, -0.5000000000000006},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{-0.9999999999999989, -1.000000000000001}, \
{-1.1544786249781995`, -0.8197749375254344}, {-1.1949951047962357`, \
-0.7707966741971604}, {-1.2337730350780323`, -0.7204307379052657}, \
{-1.2707649259800056`, -0.668738809879745}, {-1.3059254749524822`, \
-0.6157841952418011}, {-1.3392116222199957`, -0.5616317454764904}, \
{-1.3705826035149387`, -0.5063477790115973}, {-1.4000000000000004`, \
-0.4500000000000004}, {-1.8000000000000007`, 
       0.349999999999998}, {-1.8274277853182412`, 
       0.4073425845950055}, {-1.8528323697131899`, 
       0.46560974950989575`}, {-1.8761826411649307`, 
       0.5247301371830929}, {-1.8974500034917998`, 
       0.5846313451438407}, {-1.9166084113710324`, 
       0.6452400146807316}, {-1.9336344022354706`, 
       0.7064819206813057}, {-1.9485071250072679`, 
       0.7682820625326992}, {-2.000000000000001, 0.9999999999999979}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"b\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {-1.5971861480343756`, -0.048593074017188785`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[CompressedData["
1:eJwB0QEu/iFib1JlAgAAABwAAAACAAAA9v//////778FAAAAAADwv3z30feC
x/C/Gc4CsoBU8L+FFp8/BqTxv6DL1+W8nvC/Fl1n14mV8r+X+H6btN7wvyvL
Kr8NnPO//1T40mcU8b/JYOn2kbf0v9ngQ4zWP/G/7h2jfhbo9b8knGHHAGHx
v5kCWFabLfe/4IZRhOZ38b/KDgh+IIj4vw6hE8OHhPG/hEKz9aX3+b+s6qeD
5Ibxv1D1F9+Ya/u//G/aroB18b++fvRbZtP8v0A9dy3gRvG/y95IbA4v/r94
Un7/Avvwv3UVFRCRfv+/oK/vJOmR8L9gkawj92AAwL5Uy52SC/C/VoMKCZP8
AMCagyLU/s/uv5tgJDgckgHAoO2CE19O7b8wKfqwkiECwIvnt/lFkuu/Fd2L
c/aqAsBdccGGs5vpv0jTryaGkgPA6VVxsuL45b+wPpzbHGYEwJ8aPsGriOK/
SR9RkrolBcD/fk9mHZbevxJ1zkpf0QXAEIlcEBeA2L8RQBQFC2kGwHNTo4BE
z9K/QYAiwb3sBsBTvEduSwfLv6Q1+X53XAfAY1K8Z3U6wb84YJg+OLgHwDTS
SNsNcLC/AAAAAAAACMDiuV2+uvbsvOwh+Z4=
       "],
       SplineDegree->27]], InsetBox[
       StyleBox["\<\"c\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {-2.000358525610723, -0.9946626296231261},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{-2.000000000000001, 
       0.9999999999999979}, {-1.8455213750218007`, 
       0.8197749375254313}, {-1.8050048952037645`, 
       0.7707966741971572}, {-1.7662269649219677`, 
       0.7204307379052625}, {-1.7292350740199947`, 
       0.6687388098797418}, {-1.6940745250475178`, 
       0.615784195241798}, {-1.6607883777800043`, 
       0.5616317454764872}, {-1.6294173964850616`, 
       0.5063477790115941}, {-1.5999999999999999`, 
       0.44999999999999724`}, {-1.1999999999999995`, -0.3500000000000013}, \
{-1.172572214681759, -0.4073425845950088}, {-1.1471676302868101`, \
-0.4656097495098991}, {-1.1238173588350693`, -0.5247301371830962}, \
{-1.1025499965082004`, -0.5846313451438441}, {-1.0833915886289678`, \
-0.6452400146807349}, {-1.0663655977645297`, -0.706481920681309}, \
{-1.0514928749927324`, -0.7682820625327025}, {-0.9999999999999989, \
-1.000000000000001}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {-1.4028138519656246`, 0.04859307401718553},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWImKAaCA2//g8B7+zXzNnZft/+//w2UnzrR6ENJ9r/9
MHmTG026N5r+7v8A5fMXL3JmbPuz/z2U/y8RpOE3XP7/Ev9fQLT/I5QvaHN3
lrzYTzjfTN1KJOHE9/2foPzsNBD4BufvWxbqZcPwdb99WOiflMfv7W2m/q54
vfTzfs3I0I+Te9/bPzGM+FQc/mn/eg6G+z3/3tlvrcnedlXk4/7TKaFH/c3e
2Se9zupS3PN+f0tu6JI7Jm/t11jm2Hqlvd1/Q4mhxvjXa3uvJ7daVTVe7z/R
EuoT0vbK3vb1tuTNjC/3B04OFbW/+cK+2Y/h+udPz/aXQmh7ZRvz1kmpj/eL
Q2j7b3dtxCMkHux/A6Ht36UrSXWK3dp/D0LbB9dknF1fc2W/G4S2N/w0fYLH
sXP75SC0fdOemaJnJx/dXwqh7dXXrwm+dXjXfnEIbb+U19x08aEV+6dBaHtI
dDE0QGkGADL5A2Y=
       "],
       SplineDegree->27]], InsetBox[
       StyleBox["\<\"b\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {-1.0368795431082507`, 0.9044928035562277},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{-2.000000000000001, 
       0.9999999999999979}, {-2.0772393124891013`, 
       0.8712678125181643}, {-2.0985229745224583`, 
       0.8371622719616876}, {-2.1209869502412357`, 
       0.8038223265342307}, {-2.1446037288761537`, 
       0.7712888063879427}, {-2.1693443878644247`, 
       0.7396015540768679}, {-2.1951786282701082`, 
       0.7087993757632977}, {-2.2220748118900557`, 
       0.6789199936933534}, {-2.2500000000000013`, 
       0.6499999999999968}, {-2.6500000000000004`, 
       0.2499999999999971}, {-2.6789199936933565`, 
       0.2220748118900513}, {-2.7087993757633013`, 
       0.19517862827010402`}, {-2.739601554076871, 
       0.16934438786442008`}, {-2.771288806387946, 
       0.14460372887614903`}, {-2.8038223265342337`, 
       0.1209869502412313}, {-2.837162271961691, 
       0.09852297452245362}, {-2.871267812518168, 
       0.07723931248909655}, {-3., -3.2156263187166847`*^-15}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"c\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {-2.451406925982813, 0.45140692598280935`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[CompressedData["
1:eJwB0QEu/iFib1JlAgAAABwAAAACAAAAAAAAAAAACMDiuV2+uvbsvF1p8e2y
gQfAkOHocTWloL92B5r0S/cGwJaJ+VPfErO/Str5E8tgBsCppYfoZiDAv9fh
EEwwvgXA/doaGDPux78hHt+cew8FwGUyWxxqedC/Jo9kBq1UBMCFIS0lJZfV
v+Q0oYjEjQPA4jqDpkpQ279fD5UjwroCwDy/LlBt0uC/lB5A16XbAcAm9l2J
akrkv+vhCiqlXQHADdwkKWMg5r/OD8p03tkAwCsYLmtqvue/Pah9t1FQAMB9
qnlPgCTpv29WS+T9gf+/BJMH1qRS6r98MYRJzFf+v8HR1/7XSOu/ouGlng4i
/b+0ZurJGQfsv+BmsOPE4Pu/2lE/N2qN7L82waMY75P6vziT1kbJ2+y/pPB/
PY07+b/KKrD4NvLsv8mig1kf5/e/Br7YefD27L9Ehe1zJab2v17yXPcyEO2/
FJi9jJ949b/Wxzxx/j3tvznb86ONXvS/aT5451KA7b+1TpC571fzvxtWD1ow
1+2/hvKSzcVk8r/sDgLJlkLuv6zG+98PhfG/2GhQNIbC7r8py8rwzbjwv+Jj
+pv+Vu+/9v//////778FAAAAAADwv+Ot/ug=
       "],
       SplineDegree->27]], InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {-1.9258957244898245`, -0.8143311405256981},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{-3., -3.2156263187166847`*^-15}, \
{-2.9227606875109, 0.12873218748183046`}, {-2.9014770254775426`, 
       0.16283772803830698`}, {-2.879013049758765, 
       0.19617767346576398`}, {-2.855396271123847, 
       0.22871119361205194`}, {-2.830655612135576, 
       0.2603984459231268}, {-2.8048213717298927`, 
       0.291200624236697}, {-2.777925188109945, 
       0.32108000630664135`}, {-2.7499999999999996`, 
       0.3499999999999978}, {-2.3500000000000005`, 
       0.7499999999999977}, {-2.3210800063066443`, 
       0.7779251881099436}, {-2.2912006242366996`, 
       0.8048213717298908}, {-2.26039844592313, 
       0.8306556121355747}, {-2.228711193612055, 
       0.8553962711238458}, {-2.196177673465767, 
       0.8790130497587635}, {-2.16283772803831, 
       0.9014770254775412}, {-2.1287321874818335`, 
       0.9227606875108982}, {-2.000000000000001, 0.9999999999999979}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"b\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {-2.5485930740171874`, 0.5485930740171855},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQDQEcBx7tjN2369ubPSHnbxx9PZ/9QJyoa9bxpjd7
NnlIVuwyZT/wYtHUtvlMb/aI5xwUyznIdqAxyV/Yuez1njbLiwsZnNkOqIQU
CWy6+2rP3w0gDawHrpT/q31j8WpP3SX12kvqrAcmn/0c/an95R6OeXln+btZ
DsSFBq06fOrFnpnCslwGT5gPmPNLZSYwvthjYgwCzAdkfnvNOKH9fM8VkPZa
pgMcDRvqxQKe7SmUOQ5EjAe+sIilp5Q83SMkCAKMBx52VvttmvFkz0bW6A2s
0QwHzvA9NGXY+3jPgi+e8794/t+/Y7KbrN/DR3vu3QWBv/sXS6xhmcP6aI8s
yLjCP/snzBV881Lz4Z6YDSADfu+vUSq/bO73YE8aGHzb/1WFiT2L4/aexf6/
lvj/+rL/rN7Zq6yBN/c8tugDos/7l1rMWLJw5vU9ykog8Gl/nVNyse2jq3sS
ubclcG/7sD/ER8/pptaVPfYvJ9u9nPxuv27YT4HS4kt79uwGgdf7WROO3BfY
c2GPJci4xy/2774sFxvJeW4PSHcC97P9Oc+3/Jow69QecPAYP94vDQ6f43vm
bey+bp//YP/GVXyhmVcP7znH3z2lcfnt/UKTdAPurD8Aja9r+xvA8bV7Dyg2
7XUu7c8X+MVU9G7rnhXpbx59PX96/3fd6HzXExv2TLEDOfDwfr2ypxuq2Ffs
efDy2p8NHjv3m95n+pnWPG/PP60znXysK/bfVdBku/qnZw80ATXAUhIAdEow
4Q==
       "],
       SplineDegree->36]], InsetBox[
       StyleBox["\<\"c\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {-1.4867939400428443`, -1.5936579080367484`*^-15},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQUNcNYDi3s698Tsr7/edu/YvjJ7BYGa3njjCfaa
m6Pu2e/ZZb/ghaLJC7Z19tHRU6NOfz5hb3RVvNyM5YD90yfzOrtdLtoXFei9
UL5/yp6z6Wb23DVX7NPePDx+duZle0OlZFWNnGv27FPTRc2Zbtlz2j296hp/
zT704Ifdc4Qe2L92c+L933bF3v+F1eWMQ4/sq7s4J5tyXrRfI8bWFHLziX3g
RT8+0+gT9h957VeW6zyzr/D7wrQzfqf9Wev6tHkLntk3yzNMY7t3xuYzVJ4d
Ir9/A1S/DET//hCo+SkQ8/fHQO2/DrF/vxjUfT9twe7bXwJ1vxrE/ft7of5j
hPhvvz3U/3ch/t//ABo+4ZDw2R8ADT9BSPjth4XvNUj47kcPfwD9dLgc
       "],
       SplineDegree->24]], InsetBox[
       StyleBox["\<\"\[CapitalSigma]\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.6308178783474049, 6.969116568860854*^-16},
       Background->GrayLevel[1]]}}, {
     {RGBColor[1, 1, 0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{-4., -4.287501758288913*^-15}, 0.1], 
      DiskBox[{-4., -4.287501758288913*^-15}, 0.06999999999999999], 
      InsetBox["0", {-4., -4.287501758288913*^-15},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{-0.9999999999999989, -1.000000000000001}, 0.1], 
      DiskBox[{-0.9999999999999989, -1.000000000000001}, 0.06999999999999999],
       InsetBox["1", {-0.9999999999999989, -1.000000000000001},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{-2.000000000000001, 0.9999999999999979}, 0.1], 
      DiskBox[{-2.000000000000001, 0.9999999999999979}, 0.06999999999999999], 
      InsetBox["2", {-2.000000000000001, 0.9999999999999979},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{-3., -3.2156263187166847`*^-15}, 0.1], 
      DiskBox[{-3., -3.2156263187166847`*^-15}, 0.06999999999999999], 
      InsetBox["3", {-3., -3.2156263187166847`*^-15},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], DiskBox[{0., 0.}, 0.1], 
      InsetBox["4", {0., 0.},
       BaseStyle->{
         GrayLevel[0], 12}]}}},
   Annotation[#, 
    VertexCoordinateRules -> {{-4., -4.287501758288913*^-15}, \
{-0.9999999999999989, -1.000000000000001}, {-2.000000000000001, 
     0.9999999999999979}, {-3., -3.2156263187166847`*^-15}, {0., 0.}}]& ],
  AspectRatio->Automatic,
  FrameTicks->None,
  ImageSize->700,
  PlotLabel->FormBox["\"Dif abc\"", TraditionalForm],
  PlotRange->All,
  PlotRangePadding->Scaled[0.1]]], "Output",
 CellChangeTimes->{
  3.6400775727448096`*^9, {3.640425605671198*^9, 3.640425663606512*^9}, 
   3.6404292143916054`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "\:041f\:0440\:0438\:043a\:043b\:0430\:0434", " ", "3.", " ", 
    "\:0417\:043e\:0431\:0440\:0430\:0437\:0438\:043c\:043e", " ", 
    "\:0434\:0435\:044f\:043a\:0438\:0439", " ", 
    RowBox[{"\[CurlyEpsilon]\:041d\:0421\:0410", "."}]}], " ", "*)"}], 
  RowBox[{"NFAPlot", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<\>\"", ",", "\"\<0\>\"", ",", "\"\<1\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "2", "}"}], ",", 
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "3", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", "1", "}"}], ",", 
         RowBox[{"{", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "3"}], "}"}], ",", 
         RowBox[{"{", "2", "}"}]}], "}"}]}], "}"}], ",", "1", ",", 
     RowBox[{"{", "1", "}"}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.638682487701598*^9, 3.638682496379094*^9}, {
  3.6387684222329984`*^9, 3.638768422551017*^9}, {3.6387697725522327`*^9, 
  3.638769884735649*^9}, {3.638770283930482*^9, 3.638770321925655*^9}, {
  3.6387706281061673`*^9, 3.638770633308465*^9}, {3.640425677972334*^9, 
  3.6404256789823914`*^9}, {3.6404257615231123`*^9, 3.640425766168378*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[{{
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.4969214784940357, 0.}, {0.5264795264237311,
        0.10195718567628975`}, {0.5348712906600278, 0.12911725804965074`}, {
       0.5442082420874739, 0.15596707325134823`}, {0.5544789460998484, 
       0.18247374934274052`}, {0.5656708245599612, 0.20860482461449043`}, {
       0.5777701712036143, 0.23432829734117552`}, {0.5907621684251394, 
       0.2596126649725734}, {0.6046309054239488, 0.2844269627136268}, {
       0.805859775541376, 0.63012476797889}, {0.8205882678073122, 
       0.6544386067111029}, {0.836158477920924, 0.6782222102089284}, {
       0.8525513376432031, 0.7014464516055696}, {0.8697467712677249, 
       0.7240828890635369}, {0.8877237202065954, 0.7461038006062737}, {
       0.9064601687800963, 0.7674822180681989}, {0.9259331711784435, 
       0.7881919601215843}, {0.9999936537876046, 0.8642445131631592}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.7064612685437347, 0.4565680800316079},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.4969214784940357, 0.}, {0., 
       0.8677954455904252}},
       SplineDegree->1]], InsetBox[
       StyleBox["\<\"1\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.24846073924701784`, 0.4338977227952126},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.9999936537876046, 0.8642445131631592}, {
       0.9704356058579093, 0.7622873274868697}, {0.9620438416216126, 
       0.7351272551135084}, {0.9527068901941667, 0.708277439911811}, {
       0.9424361861817921, 0.6817707638204189}, {0.9312443077216793, 
       0.655639688548669}, {0.9191449610780261, 0.6299162158219838}, {
       0.9061529638565011, 0.6046318481905859}, {0.8922842268576916, 
       0.5798175504495324}, {0.6910553567402644, 0.2341197451842693}, {
       0.6763268644743283, 0.20980590645205643`}, {0.6607566543607164, 
       0.18602230295423094`}, {0.6443637946384372, 0.16279806155758964`}, {
       0.6271683610139154, 0.14016162409962246`}, {0.6091914120750449, 
       0.11814071255688563`}, {0.5904549635015441, 0.09676229509496037}, {
       0.5709819611031969, 0.07605255304157499}, {0.4969214784940357, 0.}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"0\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.7904538637379057, 0.40767643313155133`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0., 0.8677954455904252}, {0.9999936537876046,
        0.8642445131631592}},
       SplineDegree->1]], InsetBox[
       StyleBox[
        TemplateBox[{
         "\"\[CapitalSigma]\"","\"\[Backslash]\"",RowBox[{"{", "\"\"", "}"}]},
         "RowDefault"],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.4999968268938023, 0.8660199793767922},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQOe232//Dry2p5BZ47y8bSE/WE263z9Vr62T+H8
K1X3dfn+iFq2b5IvXtpf8DnRJvhm135NASWOU/Nf2B/YUsSqI3Rs/6m+Y7Jb
Xj23l9N/5fFX4fx+Lq51S+OuP7cP7518w+7L5f1BTucXhKW/sP+z8FOK8a3r
+2uO2Z3i739p/2fiD42AT7f28/X0br9o9to+ucjpIvffO/sle8vezLN5a59m
vamx4sLd/dauWhfelb233xqw5/yC6Lv7PbmVXBjvfLDXMu/6+3j57f0mSSka
J158tP/HFNpueuPG/ogg7z82Zz7Z/yzYVuSvdnX/jPuFSooln+2nZQl9FLh3
Yb/G7z7pv5c+26cq8F++sO7Efp7Zh3hNH362X6fC0i6+d//+ap3fjEvnfrZf
sao0fRbDhv2T3U38d/B+tp+Qq3wxNqp7v+7M1UG/bD7ZrxDfaXeccYq94Rzx
JE2bj/ZrjG7+TtdeaL/134Tf9+Q/2FesFnw6T3uO/WVjtb6Lf9/aN1SKuHx9
G2+fMfPouhcPgOGNFv4AOmrNqw==
       "],
       SplineDegree->24]], InsetBox[
       StyleBox["\<\"0\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {-0.3854982030059219, 1.0921919117146381`},
       Background->GrayLevel[1]]}}, {
     {RGBColor[1, 1, 0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{0.4969214784940357, 0.}, 0.1], 
      DiskBox[{0.4969214784940357, 0.}, 0.06999999999999999], InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.4969214784940357, 0.}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{0.9999936537876046, 0.8642445131631592}, 0.1], InsetBox[
       StyleBox["\<\"b\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.9999936537876046, 0.8642445131631592}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{0., 0.8677954455904252}, 0.1], InsetBox[
       StyleBox["\<\"c\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0., 0.8677954455904252}]}}},
   Annotation[#, 
    VertexCoordinateRules -> {{0.4969214784940357, 0.}, {0.9999936537876046, 
     0.8642445131631592}, {0., 0.8677954455904252}}]& ],
  AspectRatio->Automatic,
  FrameTicks->None,
  PlotRange->All,
  PlotRangePadding->Scaled[0.1]]], "Output",
 CellChangeTimes->{
  3.640077574534912*^9, {3.640425671868984*^9, 3.640425679473419*^9}, {
   3.640425762826187*^9, 3.640425766813415*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Accepted words", "Subchapter",
 CellChangeTimes->{{3.640070728796358*^9, 3.6400707406990395`*^9}, 
   3.6410319638021517`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DFAAcceptedWordsIndex", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"_", ",", "_", ",", "_", ",", "s_", ",", "F_"}], "}"}], ",", 
    "0"}], "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"MemberQ", "[", 
     RowBox[{"F", ",", "s"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"{", "}"}], "}"}], ",", 
    RowBox[{"{", "}"}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"DFAAcceptedWordsIndex", "[", 
   RowBox[{
    RowBox[{"M", ":", 
     RowBox[{"{", 
      RowBox[{"_", ",", "_", ",", "\[Delta]_", ",", "s_", ",", "_"}], "}"}]}],
     ",", "n_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"DFAAcceptedWordsIndex", "[", 
    RowBox[{"M", ",", "n"}], "]"}], "=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"w", ",", 
       RowBox[{"ans", "=", 
        RowBox[{"{", "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"w", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"DFAAcceptedWordsIndex", "[", 
          RowBox[{
           RowBox[{"ReplacePart", "[", 
            RowBox[{"M", ",", 
             RowBox[{"4", "\[Rule]", "#"}]}], "]"}], ",", 
           RowBox[{"n", "-", "1"}]}], "]"}], "&"}], "/@", 
        RowBox[{
        "\[Delta]", "\[LeftDoubleBracket]", "s", 
         "\[RightDoubleBracket]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Do", "[", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "@", 
            RowBox[{
            "w", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}]}], 
           ">", "0"}], ",", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"ans", ",", 
            RowBox[{
             RowBox[{
              RowBox[{"Flatten", "@", 
               RowBox[{"Prepend", "[", 
                RowBox[{"#", ",", "i"}], "]"}]}], "&"}], " ", "/@", 
             RowBox[{
             "w", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}]}]}], 
           "]"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"Length", "[", "w", "]"}]}], "}"}]}], "]"}], ";", 
      RowBox[{"Flatten", "[", 
       RowBox[{"ans", ",", "1"}], "]"}]}]}], "]"}]}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6334618572914767`*^9, 3.633461886648156*^9}, {
   3.634669576102058*^9, 3.6346696482365847`*^9}, {3.6346697297311277`*^9, 
   3.6346697318371315`*^9}, {3.6346708328714657`*^9, 
   3.6346708522778997`*^9}, {3.6346710353598213`*^9, 
   3.6346710366858234`*^9}, {3.634671221967349*^9, 3.6346712400009804`*^9}, {
   3.634671800765859*^9, 3.634671830614567*^9}, {3.634672702726448*^9, 
   3.6346727046275573`*^9}, {3.6346734503342094`*^9, 3.63467351503291*^9}, {
   3.6346735451836343`*^9, 3.6346735790815735`*^9}, {3.6346736120294576`*^9, 
   3.6346736134745407`*^9}, {3.634710588359404*^9, 3.634710622396351*^9}, {
   3.6347107649845066`*^9, 3.6347108594739113`*^9}, {3.634710901054289*^9, 
   3.63471090369044*^9}, {3.63471240674741*^9, 3.634712449788872*^9}, {
   3.634712558123068*^9, 3.6347125600711794`*^9}, {3.634712685659363*^9, 
   3.6347127570754476`*^9}, {3.6347127897433157`*^9, 3.6347128666107125`*^9}, 
   3.6347129568588743`*^9, {3.6347131555912414`*^9, 3.634713155757251*^9}, {
   3.634713192391346*^9, 3.6347132271533346`*^9}, {3.6347133090890207`*^9, 
   3.6347134206614027`*^9}, {3.634713484468052*^9, 3.6347135075133705`*^9}, {
   3.634713592142211*^9, 3.6347136217719054`*^9}, {3.6347136523486547`*^9, 
   3.634713654404772*^9}, {3.634713726092872*^9, 3.6347137267239084`*^9}, {
   3.634713762810972*^9, 3.634713861745631*^9}, {3.634713926460333*^9, 
   3.6347140519015074`*^9}, {3.6347141229765725`*^9, 3.634714149698101*^9}, {
   3.634714588312188*^9, 3.6347146327867317`*^9}, {3.6347146929031706`*^9, 
   3.634714718825653*^9}, {3.634715092074002*^9, 3.6347151377336135`*^9}, {
   3.634715219115268*^9, 3.634715251583125*^9}, {3.634715760071209*^9, 
   3.6347157802083607`*^9}, {3.6347158289081464`*^9, 3.634715831676305*^9}, 
   3.6347159397734876`*^9, {3.6347162344683433`*^9, 3.6347163155779824`*^9}, {
   3.6347163481438446`*^9, 3.6347163861420183`*^9}, 3.6379125385916224`*^9, {
   3.6384383362708244`*^9, 3.6384383584570937`*^9}, {3.638439553445443*^9, 
   3.6384395693663535`*^9}, {3.638439600285122*^9, 3.6384397064391937`*^9}, {
   3.638439752850848*^9, 3.638439876969948*^9}, {3.63844004502956*^9, 
   3.6384400851968575`*^9}, {3.638441588573159*^9, 3.63844159225237*^9}, {
   3.6384418559484525`*^9, 3.638441908826477*^9}, 3.6384420351006994`*^9, {
   3.6384421355124426`*^9, 3.6384421773858376`*^9}, {3.6384422239335003`*^9, 
   3.638442250828038*^9}, {3.638614962543554*^9, 3.638615003717909*^9}, 
   3.6386216417816877`*^9, {3.63862167311948*^9, 3.6386216960247903`*^9}, 
   3.638682397503439*^9, {3.6410326403248467`*^9, 3.6410326418229322`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\:041f\:0440\:0438\:043a\:043b\:0430\:0434", " ", "1.", " ", 
     "\:041e\:0431\:0447\:0438\:0441\:043b\:0438\:043c\:043e", " ", 
     "\:0432\:0441\:0456", " ", "\:0456\:043d\:0434\:0435\:043a\:0441\:0438", 
     " ", "\:0441\:0438\:043c\:0432\:043e\:043b\:0456\:0432", " ", 
     "\:043b\:0430\:043d\:0446\:044e\:0436\:043a\:0456\:0432", " ", 
     "\:0434\:043e\:0432\:0436\:0438\:043d\:043e\:044e", " ", 
     "\:0432\:0456\:0434", " ", "0", " ", "\:0434\:043e", " ", "3", " ", 
     "\:0441\:0438\:043c\:0432\:043e\:043b\:0456\:0432"}], ",", " ", 
    RowBox[{
    "\:0449\:043e", " ", "\:0433\:0435\:043d\:0435\:0440\:0443\:0454", " ", 
     "\:0414\:0421\:0410", " ", "\"\<EvenEven\>\"", " ", "\:0456", " ", 
     "\:0437\:043e\:0431\:0440\:0430\:0437\:0438\:043c\:043e", " ", 
     "\:0457\:0445", " ", "\:0432", " ", 
     RowBox[{"\:0442\:0430\:0431\:043b\:0438\:0446\:0456", "."}]}]}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{"Grid", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Prepend", "[", "n", "]"}], "@", 
       RowBox[{"DFAAcceptedWordsIndex", "[", 
        RowBox[{
         RowBox[{"DFA", "@", "\"\<EvenEvenAny\>\""}], ",", "n"}], "]"}]}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "0", ",", "3"}], "}"}]}], "]"}], ",", 
    RowBox[{"Dividers", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"False", ",", "True"}], "}"}], "}"}]}], ",", 
    RowBox[{"Alignment", "\[Rule]", "Left"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6334618572914767`*^9, 3.633461886648156*^9}, {
   3.634669576102058*^9, 3.6346696482365847`*^9}, {3.6346697297311277`*^9, 
   3.6346697318371315`*^9}, {3.6346708328714657`*^9, 
   3.6346708522778997`*^9}, {3.6346710353598213`*^9, 
   3.6346710366858234`*^9}, {3.634671221967349*^9, 3.6346712400009804`*^9}, {
   3.634671800765859*^9, 3.634671830614567*^9}, {3.634672702726448*^9, 
   3.6346727046275573`*^9}, {3.6346734503342094`*^9, 3.63467351503291*^9}, {
   3.6346735451836343`*^9, 3.6346735790815735`*^9}, {3.6346736120294576`*^9, 
   3.6346736134745407`*^9}, {3.634710588359404*^9, 3.634710622396351*^9}, {
   3.6347107649845066`*^9, 3.6347108594739113`*^9}, {3.634710901054289*^9, 
   3.63471090369044*^9}, {3.63471240674741*^9, 3.634712449788872*^9}, {
   3.634712558123068*^9, 3.6347125600711794`*^9}, {3.634712685659363*^9, 
   3.6347127570754476`*^9}, {3.6347127897433157`*^9, 3.6347128666107125`*^9}, 
   3.6347129568588743`*^9, {3.6347131555912414`*^9, 3.634713155757251*^9}, {
   3.634713192391346*^9, 3.6347132271533346`*^9}, {3.6347133090890207`*^9, 
   3.6347134206614027`*^9}, {3.634713484468052*^9, 3.6347135075133705`*^9}, {
   3.634713592142211*^9, 3.6347136217719054`*^9}, {3.6347136523486547`*^9, 
   3.634713654404772*^9}, {3.634713726092872*^9, 3.6347137267239084`*^9}, {
   3.634713762810972*^9, 3.634713861745631*^9}, {3.634713926460333*^9, 
   3.6347140519015074`*^9}, {3.6347141229765725`*^9, 3.634714149698101*^9}, {
   3.634714588312188*^9, 3.6347146327867317`*^9}, {3.6347146929031706`*^9, 
   3.634714718825653*^9}, {3.634715092074002*^9, 3.6347151377336135`*^9}, {
   3.634715219115268*^9, 3.634715251583125*^9}, {3.634715760071209*^9, 
   3.6347157802083607`*^9}, {3.6347158289081464`*^9, 3.634715831676305*^9}, 
   3.6347159397734876`*^9, {3.6347162344683433`*^9, 3.6347163155779824`*^9}, {
   3.6347163481438446`*^9, 3.6347163861420183`*^9}, 3.6379125385916224`*^9, {
   3.6384383362708244`*^9, 3.6384383584570937`*^9}, {3.638439553445443*^9, 
   3.6384395693663535`*^9}, {3.638439600285122*^9, 3.6384397064391937`*^9}, {
   3.638439752850848*^9, 3.638439876969948*^9}, {3.63844004502956*^9, 
   3.6384400851968575`*^9}, {3.638441588573159*^9, 3.63844159225237*^9}, {
   3.6384418559484525`*^9, 3.638441908826477*^9}, 3.6384420351006994`*^9, {
   3.6384421355124426`*^9, 3.6384421773858376`*^9}, {3.6384422239335003`*^9, 
   3.638442250828038*^9}, {3.638614962543554*^9, 3.638615003717909*^9}, {
   3.6386216417816877`*^9, 3.6386216498651505`*^9}, {3.6386217634616475`*^9, 
   3.6386218331736345`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"DFAAcceptedWords", "[", 
   RowBox[{"M_", ",", "n_"}], "]"}], ":=", 
  RowBox[{"Replace", "[", 
   RowBox[{
    RowBox[{"StringJoin", "/@", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"Evaluate", "[", 
          RowBox[{"ToString", "/@", 
           RowBox[{
           "M", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
          "]"}], "\[LeftDoubleBracket]", "#", "\[RightDoubleBracket]"}], 
        "&"}], "/@", 
       RowBox[{"DFAAcceptedWordsIndex", "[", 
        RowBox[{"M", ",", "n"}], "]"}]}], ")"}]}], ",", 
    RowBox[{"\"\<\>\"", "\[Rule]", 
     RowBox[{"{", "}"}]}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6347164343117733`*^9, 3.6347165571558*^9}, {
   3.6347167096225204`*^9, 3.634716736769073*^9}, {3.634716888781768*^9, 
   3.6347170162370577`*^9}, {3.634802688687873*^9, 3.6348026897209325`*^9}, 
   3.6348056693413043`*^9, {3.6348058609842653`*^9, 3.63480590896101*^9}, {
   3.6348072042400956`*^9, 3.6348072127155805`*^9}, {3.63480724663052*^9, 
   3.634807253836932*^9}, {3.6360007318883524`*^9, 3.6360007466411963`*^9}, 
   3.637912538598623*^9, {3.638426667099386*^9, 3.6384266973261147`*^9}, {
   3.6384395291820555`*^9, 3.6384395446609406`*^9}, {3.638439732144664*^9, 
   3.6384397394460816`*^9}, {3.638440645896241*^9, 3.638440702581484*^9}, 
   3.6384408641337237`*^9, {3.6384409196088967`*^9, 3.638440952381771*^9}, {
   3.638440983181533*^9, 3.6384411235875635`*^9}, {3.638441365410395*^9, 
   3.6384414632509913`*^9}, {3.6384415252715387`*^9, 
   3.6384415805657015`*^9}, {3.63844226432381*^9, 3.638442374554115*^9}, {
   3.6384424090750895`*^9, 3.6384424356146073`*^9}, {3.638442585514181*^9, 
   3.6384426609734974`*^9}, {3.638442971829277*^9, 3.638442973132352*^9}, {
   3.6385339461162195`*^9, 3.6385340644669886`*^9}, {3.6386155747195683`*^9, 
   3.6386155904764695`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\:041f\:0440\:0438\:043a\:043b\:0430\:0434", " ", "2.", " ", 
     "\:041e\:0431\:0447\:0438\:0441\:043b\:0438\:043c\:043e", " ", 
     "\:0432\:0441\:0456", " ", 
     "\:043b\:0430\:043d\:0446\:044e\:0436\:043a\:0438", " ", 
     "\:0434\:043e\:0432\:0436\:0438\:043d\:043e\:044e", " ", 
     "\:0432\:0456\:0434", " ", "0", " ", "\:0434\:043e", " ", "3", " ", 
     "\:0441\:0438\:043c\:0432\:043e\:043b\:0456\:0432"}], ",", " ", 
    RowBox[{
    "\:0449\:043e", " ", 
     "\:0433\:0435\:043d\:0435\:0440\:0443\:044e\:0442\:044c", " ", 
     "\:0442\:0435\:0441\:0442\:043e\:0432\:0456", " ", "\:0414\:0421\:0410", 
     " ", "\:0456", " ", 
     "\:0437\:043e\:0431\:0440\:0430\:0437\:0438\:043c\:043e", " ", 
     "\:0457\:0445", " ", "\:0432", " ", 
     RowBox[{"\:0442\:0430\:0431\:043b\:0438\:0446\:044f\:0445", "."}]}]}], 
   " ", "*)"}], 
  RowBox[{"Row", "@", 
   RowBox[{"Riffle", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Grid", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Prepend", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
             "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",",
              "SpanFromLeft"}], "}"}], "]"}], "@", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Prepend", "[", "n", "]"}], "[", 
             RowBox[{
              RowBox[{"DFAAcceptedWords", "[", 
               RowBox[{
                RowBox[{
                "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
                ",", "n"}], "]"}], "/.", 
              RowBox[{"\"\<\>\"", "\[Rule]", "\"\<\[CurlyEpsilon]\>\""}]}], 
             "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"n", ",", "0", ",", "3"}], "}"}]}], "]"}]}], ",", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", 
         RowBox[{"Dividers", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"True", ",", "True"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"True", ",", "True"}], "}"}]}], "}"}]}], ",", 
         RowBox[{"Alignment", "\[Rule]", "Left"}]}], "]"}], "&"}], "/@", 
      RowBox[{"Normal", "@", "DFA"}]}], ",", 
     RowBox[{"Spacer", "[", "5", "]"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.6347164343117733`*^9, 3.6347165571558*^9}, {
   3.6347167096225204`*^9, 3.634716736769073*^9}, {3.634716888781768*^9, 
   3.6347170162370577`*^9}, {3.634802688687873*^9, 3.6348026897209325`*^9}, 
   3.6348056693413043`*^9, {3.6348058609842653`*^9, 3.63480590896101*^9}, {
   3.6348072042400956`*^9, 3.6348072127155805`*^9}, {3.63480724663052*^9, 
   3.634807253836932*^9}, {3.6360007318883524`*^9, 3.6360007466411963`*^9}, 
   3.637912538598623*^9, {3.638426667099386*^9, 3.6384266973261147`*^9}, {
   3.6384395291820555`*^9, 3.6384395446609406`*^9}, {3.638439732144664*^9, 
   3.6384397394460816`*^9}, {3.638440645896241*^9, 3.638440702581484*^9}, 
   3.6384408641337237`*^9, {3.6384409196088967`*^9, 3.638440952381771*^9}, {
   3.638440983181533*^9, 3.6384411235875635`*^9}, {3.638441365410395*^9, 
   3.6384414632509913`*^9}, {3.6384415252715387`*^9, 
   3.6384415805657015`*^9}, {3.63844226432381*^9, 3.638442374554115*^9}, {
   3.6384424090750895`*^9, 3.6384424356146073`*^9}, {3.638442585514181*^9, 
   3.6384426609734974`*^9}, {3.638442971829277*^9, 3.638442973132352*^9}, {
   3.6385339461162195`*^9, 3.6385340644669886`*^9}, {3.6386155747195683`*^9, 
   3.6386157325835977`*^9}, {3.638621749832868*^9, 3.638621749903872*^9}, {
   3.638621855897935*^9, 3.638621896940282*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "\:041f\:0440\:0438\:043a\:043b\:0430\:0434", " ", "3.", " ", 
     "\:041e\:0431\:0447\:0438\:0441\:043b\:0438\:043c\:043e", " ", 
     "\:0447\:0438\:0441\:043b\:0430", " ", "\:0443", " ", 
     "\:0448\:0456\:0441\:0442\:043d\:0430\:0434\:0446\:044f\:0442\:043a\:043e\
\:0432\:0456\:0439", " ", "\:0441\:0438\:0441\:0442\:0435\:043c\:0456"}], ",",
     " ", 
    RowBox[{
    "\:0449\:043e", " ", "\:0434\:0456\:043b\:044f\:0442\:044c\:0441\:044f", 
     " ", "\:043d\:0430", " ", "5", " ", 
     "\:043d\:0430\:0446\:0456\:043b\:043e"}]}], " ", "*)"}], 
  RowBox[{"DFAAcceptedWords", "[", 
   RowBox[{
    RowBox[{"ModMxN", "[", 
     RowBox[{"16", ",", "0", ",", "5"}], "]"}], ",", "2"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6384428862143803`*^9, 3.638442890620632*^9}, {
   3.6384429291618366`*^9, 3.6384430288035355`*^9}, 3.638443071413973*^9, {
   3.63861572074592*^9, 3.6386157401200285`*^9}, {3.6386219094129953`*^9, 
   3.638621909473999*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Minimization", "Subchapter",
 CellChangeTimes->{{3.6400707644123955`*^9, 3.640070768549632*^9}, {
   3.6408568114201727`*^9, 3.6408568143213387`*^9}, 3.6410319688634415`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"DFADeleteInaccesibleStates", "@", 
   RowBox[{"{", 
    RowBox[{
    "Q_", ",", "\[CapitalSigma]_", ",", "\[Delta]_", ",", "s_", ",", "F_"}], 
    "}"}]}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Q", "\[LeftDoubleBracket]", "#", "\[RightDoubleBracket]"}], 
       ",", "\[CapitalSigma]"}], "}"}], "~", "Join", "~", 
     RowBox[{
      RowBox[{"Insert", "[", 
       RowBox[{"s", ",", "2"}], "]"}], "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
         "\[Delta]", "\[LeftDoubleBracket]", "#", "\[RightDoubleBracket]"}], 
         ",", 
         RowBox[{"F", "\[Intersection]", "#"}]}], "}"}], "/.", 
       RowBox[{"Thread", "[", 
        RowBox[{"#", "\[Rule]", 
         RowBox[{"Range", "@", 
          RowBox[{"Length", "@", "#"}]}]}], "]"}]}], "]"}]}], "&"}], "@", 
   RowBox[{"VertexOutComponent", "[", 
    RowBox[{
     RowBox[{"Graph", "@", 
      RowBox[{"Flatten", "@", 
       RowBox[{"Inner", "[", 
        RowBox[{"DirectedEdge", ",", 
         RowBox[{"Range", "@", 
          RowBox[{"Length", "@", "\[Delta]"}]}], ",", "\[Delta]", ",", 
         "List"}], "]"}]}]}], ",", "s"}], "]"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6335483714210534`*^9, 3.633548394875395*^9}, {
   3.6335485567009087`*^9, 3.6335486252308283`*^9}, 3.633548963297165*^9, {
   3.6335999994995623`*^9, 3.6336000109772186`*^9}, {3.6336984517309837`*^9, 
   3.6336985005347753`*^9}, {3.6336985406280684`*^9, 3.633698541931143*^9}, {
   3.6337039425820427`*^9, 3.633703943622102*^9}, {3.6347198028334417`*^9, 
   3.6347198031374593`*^9}, {3.6347198380714574`*^9, 3.634719840108574*^9}, 
   3.6347201376995955`*^9, {3.6347201725555887`*^9, 3.634720225811635*^9}, {
   3.634720267038993*^9, 3.6347202688010936`*^9}, {3.634720554602441*^9, 
   3.634720613674819*^9}, {3.6348083565370035`*^9, 3.6348083599872007`*^9}, {
   3.638445623495944*^9, 3.6384456791431265`*^9}, {3.638445721741563*^9, 
   3.6384457238446836`*^9}, {3.638445793962694*^9, 3.638445808703537*^9}, {
   3.6384466458604193`*^9, 3.638446648035544*^9}, 3.6384469054262657`*^9, {
   3.6384469491147647`*^9, 3.638446959893381*^9}, {3.638447083034425*^9, 
   3.6384471537354684`*^9}, {3.6384546461214805`*^9, 3.6384546547449737`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Row", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"DFALayeredPlot", "[", 
     RowBox[{"#", ",", "Left", ",", 
      RowBox[{"ImageSize", "\[Rule]", 
       RowBox[{"Scaled", "@", ".49"}]}]}], "]"}], "&"}], "/@", 
   RowBox[{"ComposeList", "[", 
    RowBox[{
     RowBox[{"{", "DFADeleteInaccesibleStates", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", "3"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"2", ",", "4"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"3", ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "3"}], "}"}]}], "}"}], ",", "1", ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}]}], "}"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.634720328636516*^9, 3.634720337339014*^9}, {
   3.6347203850997458`*^9, 3.634720398951538*^9}, 3.634720477986058*^9, {
   3.634720524153699*^9, 3.63472052958701*^9}, {3.6347206209992385`*^9, 
   3.6347206650297565`*^9}, 3.634808198762979*^9, 3.6348082819447365`*^9, {
   3.63480853271408*^9, 3.6348085456258183`*^9}, {3.63481291530075*^9, 
   3.634812915518762*^9}, {3.6384457390395527`*^9, 3.638445771770425*^9}, {
   3.6384458036342473`*^9, 3.6384458119617233`*^9}, {3.6384458913522644`*^9, 
   3.638445894786461*^9}, {3.6384459504626455`*^9, 3.638445951435701*^9}, {
   3.6384459892808657`*^9, 3.6384460150003366`*^9}, {3.638446064595173*^9, 
   3.6384461439957147`*^9}, {3.6384462316027255`*^9, 3.638446270036924*^9}, {
   3.6384463386558485`*^9, 3.638446339668906*^9}, {3.6384463805382442`*^9, 
   3.638446487727375*^9}, {3.638446725570979*^9, 3.638446755606697*^9}, {
   3.6384467991021843`*^9, 3.6384468229185467`*^9}, {3.6384468593856325`*^9, 
   3.6384468820039263`*^9}, {3.6385415868102427`*^9, 3.638541587173263*^9}, {
   3.638541751044636*^9, 3.6385418278490286`*^9}, {3.6385418640550995`*^9, 
   3.638541990130311*^9}, {3.638616026663418*^9, 3.6386160294305763`*^9}, {
   3.6386160691538486`*^9, 3.63861609767548*^9}, {3.6410319927438073`*^9, 
   3.6410320357692685`*^9}}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[
    TagBox[{{{
        GrayLevel[0], 
        Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[
         BSplineCurveBox[{{-1., -1.0718754395722282`*^-15}, \
{-0.9227606875109001, 0.12873218748183257`}, {-0.901477025477543, 
          0.1628377280383091}, {-0.8790130497587654, 
          0.19617767346576598`}, {-0.8553962711238476, 
          0.22871119361205405`}, {-0.8306556121355766, 
          0.2603984459231289}, {-0.8048213717298929, 
          0.291200624236699}, {-0.7779251881099456, 
          0.32108000630664346`}, {-0.7499999999999999, 
          0.3499999999999999}, {-0.3500000000000008, 
          0.7499999999999998}, {-0.32108000630664446`, 
          0.7779251881099457}, {-0.2912006242367, 
          0.8048213717298929}, {-0.26039844592313, 
          0.8306556121355768}, {-0.22871119361205516`, 
          0.8553962711238479}, {-0.1961776734657672, 
          0.8790130497587656}, {-0.16283772803831031`, 
          0.9014770254775433}, {-0.12873218748183368`, 
          0.9227606875109003}, {-1.0718754395722282`*^-15, 1.}}, SplineDegree -> 
          17]], 
        InsetBox[
         FormBox[
          StyleBox["1", 
           GrayLevel[0], 12, StripOnInput -> False], 
          TraditionalForm], {-0.5485930740171878, 0.5485930740171875}, 
         Background -> GrayLevel[1]]}, {{
         GrayLevel[0], 
         Arrowheads[{{Automatic, 0.8}}], 
         ArrowBox[
          BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQEf9jtenKyp7n95z1Hemctn3Xi/n+HBUf+7Z4X3
80tozRCTfrvfYeVSgTL+nv1PTog1MMx8tf9G0P8OPsZV+6sDjnPfbH2x/8Ua
87vH9u7e72Cym8ma5/n+NW1f5ja5Ht/vFVyTV+D1bH+0xs7V3T8v7LdaHbqE
JeDZfv8fi37otV3b319qJ9oq83z/n6OBq7dfu73/0SWzuq75L/Z//nzemMn+
wf4NEWl7OHe92n+G0afIme/R/rKyJoeLDm/3L5j0nPO78eP9v/6DwPv9Foqc
In0zHu8/cGRf/PT4j3D5xZfPKP5e9Gn/eaj+7mlPDlht+Lz/O9R8k6MJpXsL
v+xnOwaxP17r6tq/17/sj4C6L+LawRPHb33ZnwZ1/73URXWPKr/sPwD138Fw
mSrhvZ/3s6yF+L939pf99Zs/7ecIhoTP98+vNpcUfdyfAA0/2UrjNZuEP8DD
Fz38AS//5Rw=
           "], SplineDegree -> 24]], 
         InsetBox[
          FormBox[
           StyleBox["0", 
            GrayLevel[0], 12, StripOnInput -> False], 
           TraditionalForm], {-0.9999999999999997, -0.546304307810255}, 
          Background -> GrayLevel[1]]}}, {
        GrayLevel[0], 
        Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[
         BSplineCurveBox[{{-1.0718754395722282`*^-15, 
          1.}, {-0.07723931248910121, 
          0.8712678125181665}, {-0.09852297452245828, 
          0.83716227196169}, {-0.12098695024123585`, 
          0.8038223265342329}, {-0.14460372887615358`, 
          0.771288806387945}, {-0.16934438786442474`, 
          0.7396015540768701}, {-0.19517862827010835`, 
          0.7087993757632999}, {-0.22207481189005573`, 
          0.6789199936933554}, {-0.25000000000000155`, 
          0.649999999999999}, {-0.6500000000000004, 
          0.2499999999999991}, {-0.6789199936933568, 
          0.2220748118900533}, {-0.7087993757633013, 
          0.195178628270106}, {-0.7396015540768712, 
          0.16934438786442207`}, {-0.7712888063879462, 
          0.14460372887615103`}, {-0.8038223265342341, 
          0.1209869502412333}, {-0.837162271961691, 
          0.09852297452245562}, {-0.8712678125181674, 
          0.07723931248909854}, {-1., -1.0718754395722282`*^-15}}, 
          SplineDegree -> 17]], 
        InsetBox[
         FormBox[
          StyleBox["1", 
           GrayLevel[0], 12, StripOnInput -> False], 
          TraditionalForm], {-0.45140692598281346`, 0.45140692598281146`}, 
         Background -> GrayLevel[1]]}, {{
         GrayLevel[0], 
         Arrowheads[{{Automatic, 0.8}}], 
         ArrowBox[
          BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQ7Xhxsqa6/+U9DGDwwZ6hfIOMHVPs/idR/MqBQh/s
BU5YepyomrZ/Zs2f1buzP9ozhO5pTZCetF/rbPzvinOf7A8s0z876UWrvU99
5DkRuS/2OpMmeu3WX29/inPy9sX2X+1LoiKlTzUcsF/8csaT19Lf7IOPdOQF
nzplv5aTm8tp4Td7M/enu5a9umR/+G6J6Zcj3+w7+Ctiq+Nv2Iucm5el2vLN
3vC8ysc5wXftK/8czON48tV+X1bswZUbHthLeYZzlX78Ys/nV++2UeqRvfiO
hMAH+z/bu9QqiNw+9cieqShJ8mz6J/uOFRfOsW5+ZH/U0GrlFZaP9jq5B25J
XX1oL3z1OvODtPf2bNWdUs+dHtjbsZ7MipN9a8/ErHU9yvKOfSBHSqJ0zGt7
g9kuyQqy1+27zmZKKri/sg+J2arBN+uiPUcPn+qSLy/tUyJ3NyxzOmEfd3Kv
o2v2K/sHFc9XafbusWcqXF5Tv/C1/Z9v/zZuN15hv0rj9LSCurf2DGGeQXu8
4+1zpob8uXb7vT16+AMAD5m+dQ==
           "], SplineDegree -> 24]], 
         InsetBox[
          FormBox[
           StyleBox["0", 
            GrayLevel[0], 12, StripOnInput -> False], TraditionalForm], {
          0.5047193685086384, 1.2090616076286629`}, Background -> 
          GrayLevel[1]]}}, {
        GrayLevel[0], 
        Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[
         BSplineCurveBox[{{-3.000000000000001, 
          0.9999999999999968}, {-2.000000000000001, 0.9999999999999979}}, 
          SplineDegree -> 1]], 
        InsetBox[
         FormBox[
          StyleBox["1", 
           GrayLevel[0], 12, StripOnInput -> False], 
          TraditionalForm], {-2.500000000000001, 0.9999999999999973}, 
         Background -> GrayLevel[1]]}, {{
         GrayLevel[0], 
         Arrowheads[{{Automatic, 0.8}}], 
         ArrowBox[
          BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGImKGZg4Djw+D8IvLfvmb9rtjqQv4J35vJZN97br1wq
UMYvw3Hgk7jWDDHpt/Y+f5WtWDI4Dpw4IdbAMPOVffrel2bv7nIciAs4zn2z
9YV9tsd9zYgSzgPKJruZrHme23OrlpcaynMd0A2uySvwembPFS9y/+gFrgNy
q0OXsAQ8sz9gkfX1WhX3gaJSO9FWmef2f/987jnAz3PgyCWzuq75L+yLGSbf
mdDMc2BSRNoezl2v7Fc8qTz09wzPgciyJoeLDm/t/TyYWpWf8Ry4C3U/TH7j
kX3x0+M/2pdA9U+5fEbx96JP9v+g5tdMe3LAasNn+4NQ+9WOJpTuLfxizw11
X6DW1bV/r3+x54W63+vawRPHb32xz4H670LqorpHlV/sM6D+3xQuUyW89zM8
fOpnf9lfv/mT/Spo+L38/GpzSdFHePjyVxqv2ST8wR49/AEBb8sC
           "], SplineDegree -> 24]], 
         InsetBox[
          FormBox[
           StyleBox["0", 
            GrayLevel[0], 12, StripOnInput -> False], 
           TraditionalForm], {-3.546304307810255, 0.9999999999999962}, 
          Background -> GrayLevel[1]]}}, {
        GrayLevel[0], 
        Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[
         BSplineCurveBox[{{-2.000000000000001, 
          0.9999999999999979}, {-1., -1.0718754395722282`*^-15}}, 
          SplineDegree -> 1]], 
        InsetBox[
         FormBox[
          StyleBox["0", 
           GrayLevel[0], 12, StripOnInput -> False], 
          TraditionalForm], {-1.5000000000000004`, 0.4999999999999984}, 
         Background -> GrayLevel[1]]}, {
        GrayLevel[0], 
        Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[
         BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQAWImKAaCA2//g8B7+zXzNnZft/+//w2UnzrR6ENJ9r/9
MHmTG026N5r+7v8A5fMXL3JmbPuz/z2U/y8RpOE3XP7/Ev9fQLT/I5QvaHN3
lrzYTzjfTN1KJOHE9/2foPzsNBD4BuevAmv/Alf/wqLvsUXf5/1foHwNJRD4
tP87lJ/GvS2Be9uH/V+hfM+Xk+1eTn63/xuUf2w3CLze/wPKdwEZ9/gFnH8w
AWTAs/0/oXw7YxB4vP8XlL8SFDz5D+D8R/zdUxqX397/G8rXyTkolnPw2v5/
UL5exS5Te51L+/9C+RfS3zz6ev40XH63HciBh/f/h/J1X137s8FjJ5w/U/tM
Jx/riv2QaPpg73hxsqa6/+U9MD4A2FE4yA==
          "], SplineDegree -> 27]], 
        InsetBox[
         FormBox[
          StyleBox["1", 
           GrayLevel[0], 12, StripOnInput -> False], 
          TraditionalForm], {-1.0000000000000013`, 0.9999999999999989}, 
         Background -> GrayLevel[1]]}}, {{
        RGBColor[1, 1, 0.85], 
        EdgeForm[
         GrayLevel[0]], Null, 
        DiskBox[{-1., -1.0718754395722282`*^-15}, 0.1], 
        DiskBox[{-1., -1.0718754395722282`*^-15}, 0.06999999999999999], 
        InsetBox[
         FormBox["1", TraditionalForm], {-1., -1.0718754395722282`*^-15}, 
         BaseStyle -> {
           GrayLevel[0], 12}]}, {
        GrayLevel[0.85], 
        EdgeForm[
         GrayLevel[0]], Null, 
        DiskBox[{-1.0718754395722282`*^-15, 1.}, 0.1], Null, 
        InsetBox[
         FormBox["3", TraditionalForm], {-1.0718754395722282`*^-15, 1.}, 
         BaseStyle -> {
           GrayLevel[0], 12}]}, {
        GrayLevel[0.85], 
        EdgeForm[
         GrayLevel[0]], Null, 
        DiskBox[{-3.000000000000001, 0.9999999999999968}, 0.1], 
        DiskBox[{-3.000000000000001, 0.9999999999999968}, 
         0.06999999999999999], 
        InsetBox[
         FormBox["2", TraditionalForm], {-3.000000000000001, 
         0.9999999999999968}, BaseStyle -> {
           GrayLevel[0], 12}]}, {
        GrayLevel[0.85], 
        EdgeForm[
         GrayLevel[0]], Null, 
        DiskBox[{-2.000000000000001, 0.9999999999999979}, 0.1], Null, 
        InsetBox[
         FormBox["4", TraditionalForm], {-2.000000000000001, 
         0.9999999999999979}, BaseStyle -> {
           GrayLevel[0], 12}]}}}, 
     Annotation[#, 
      VertexCoordinateRules -> {{-1., -1.0718754395722282`*^-15}, \
{-1.0718754395722282`*^-15, 1.}, {-3.000000000000001, 
       0.9999999999999968}, {-2.000000000000001, 0.9999999999999979}}]& ], 
    FrameTicks -> None, PlotRange -> All, PlotRangePadding -> Scaled[0.1], 
    AspectRatio -> Automatic, ImageSize -> Scaled[0.49]],GraphicsBox[
    TagBox[{{{
        GrayLevel[0], 
        Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[
         BSplineCurveBox[{{-1., -1.0718754395722282`*^-15}, \
{-0.8970142500145334, 0.025746437496365737`}, {-0.8693196487196165, 
          0.032157376757925404`}, {-0.8414176881464993, 
          0.03759536161226518}, {-0.8133425387558965, 
          0.04205373236795029}, {-0.7851285831062235, 
          0.04552702902935213}, {-0.7568103737465965, 
          0.048010997983295334`}, {-0.7284225909016507, 
          0.049502597208293975`}, {-0.6999999999999996, 
          0.04999999999999927}, {-0.30000000000000004`, 
          0.04999999999999971}, {-0.27157740909834893`, 
          0.04950259720829442}, {-0.2431896262534031, 
          0.04801099798329589}, {-0.21487141689377612`, 
          0.045527029029352795`}, {-0.18665746124410318`, 
          0.04205373236795085}, {-0.1585823118535003, 
          0.03759536161226573}, {-0.13068035128038305`, 
          0.03215737675792618}, {-0.10298574998546621`, 
          0.025746437496366403`}, {0., 0.}}, SplineDegree -> 17]], 
        InsetBox[
         FormBox[
          StyleBox["1", 
           GrayLevel[0], 12, StripOnInput -> False], 
          TraditionalForm], {-0.49999999999999983`, 0.048593074017187064`}, 
         Background -> GrayLevel[1]]}, {{
         GrayLevel[0], 
         Arrowheads[{{Automatic, 0.8}}], 
         ArrowBox[
          BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQEf9jtenKyp7n95T/Za6XUOQP6xc+5GwaIF+zcH
MXVf0v2wv+FycP3c55v2i8hXbru98sP+hO+bvW4tObjfcY+nZWbWx/3/Xki5
zMg+sd+1/b4OZ8Kn/YzvWtwf25zd37RX4SF7+ef973L7Dpzben7/IW2JHJaZ
X/Yr88+0mbb4/H4hLUWDPeu+7p9kGPZwPfvZ/T/tVtW8WPhtv+uOf5nrxE/s
L5z5+Cd7/Pf9qY7lwl8tDu5/oz5f7/217/tTrP9laH/cuB/i/h/7GcWP9nRm
3tnzFirfbQWWty+C6v/qANZv/xtq/o3tYPPtRaD2a0Hstz8Cdd8BPrD77Fug
7p8Icb+9O9R/K96C/WfvBPX/Soj/7cWg4SMACR97WPhduwQOP3tY+MofBYev
PXr4AwCLMtLq
           "], SplineDegree -> 24]], 
         InsetBox[
          FormBox[
           StyleBox["0", 
            GrayLevel[0], 12, StripOnInput -> False], 
           TraditionalForm], {-1.4460555994731608`, \
-1.5180917550605327`*^-15}, Background -> GrayLevel[1]]}}, {
        GrayLevel[0], 
        Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[
         BSplineCurveBox[{{0., 
          0.}, {-0.10298574998546679`, -0.025746437496366847`}, \
{-0.13068035128038363`, -0.032157376757926515`}, {-0.15858231185350088`, \
-0.03759536161226629}, {-0.1866574612441038, -0.0420537323679514}, \
{-0.21487141689377673`, -0.04552702902935324}, {-0.24318962625340365`, \
-0.048010997983296444`}, {-0.2715774090983495, -0.049502597208295085`}, \
{-0.3000000000000006, -0.05000000000000038}, {-0.7, -0.05000000000000082}, \
{-0.7284225909016511, -0.04950259720829553}, {-0.756810373746597, \
-0.048010997983297}, {-0.7851285831062239, -0.045527029029353905`}, \
{-0.8133425387558968, -0.04205373236795196}, {-0.8414176881464998, \
-0.03759536161226684}, {-0.869319648719617, -0.03215737675792729}, \
{-0.8970142500145338, -0.025746437496367514`}, {-1., \
-1.0718754395722282`*^-15}}, SplineDegree -> 17]], 
        InsetBox[
         FormBox[
          StyleBox["1", 
           GrayLevel[0], 12, StripOnInput -> False], 
          TraditionalForm], {-0.5000000000000002, -0.04859307401718818}, 
         Background -> GrayLevel[1]]}, {{
         GrayLevel[0], 
         Arrowheads[{{Automatic, 0.8}}], 
         ArrowBox[
          BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQUNcNaJqNdt2gL2n0+6GwWLFtgLRGo2ur5ssze9
HFw/9/km+5RHyufLrJfa23zf7HVryUH7d4dnT5m8bJv93RdSLjOyT9hLWP1J
82Q4bP/kbYv7Y5uz9n9es3La7zhtfy2378C5reft/61L2CCYcsmen3+mzbTF
5+0dVrQc+LDrmn2zYdjD9exn7e/9XvFpYfste6sd/zLXiZ+w35fa91y+5q59
rGO58FeLg/br5tfs2hN93z7K+l+G9seN9hBHP7Bv7E46dsTkls02qHyvFVh+
/xmo/r8OYP37P0HNf7wdbP7+CKj9lhD790ush7jvCh/YffsN3kDcvxLi/v0e
UP8dhfhvv9cRiP8vQPy//wY0fEwg4bP/AzT8lCDht5/hAiR8P0HCdz96+AMA
esvDxQ==
           "], SplineDegree -> 24]], 
         InsetBox[
          FormBox[
           StyleBox["0", 
            GrayLevel[0], 12, StripOnInput -> False], TraditionalForm], {
          0.4460555994731604, 1.29924352637343*^-15}, Background -> 
          GrayLevel[1]]}}}, {{
        RGBColor[1, 1, 0.85], 
        EdgeForm[
         GrayLevel[0]], Null, 
        DiskBox[{-1., -1.0718754395722282`*^-15}, 0.1], 
        DiskBox[{-1., -1.0718754395722282`*^-15}, 0.06999999999999999], 
        InsetBox[
         FormBox["1", TraditionalForm], {-1., -1.0718754395722282`*^-15}, 
         BaseStyle -> {
           GrayLevel[0], 12}]}, {
        GrayLevel[0.85], 
        EdgeForm[
         GrayLevel[0]], Null, 
        DiskBox[{0., 0.}, 0.1], Null, 
        InsetBox[
         FormBox["3", TraditionalForm], {0., 0.}, BaseStyle -> {
           GrayLevel[0], 12}]}}}, 
     Annotation[#, 
      VertexCoordinateRules -> {{-1., -1.0718754395722282`*^-15}, {0., 
       0.}}]& ], FrameTicks -> None, PlotRange -> All, PlotRangePadding -> 
    Scaled[0.1], AspectRatio -> Automatic, ImageSize -> Scaled[0.49]]},
  "RowDefault"]], "Output",
 CellChangeTimes->{{3.641031990137658*^9, 3.6410320368173285`*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  RowBox[{"DFAEquivalenceClasses", "@", 
   RowBox[{"{", 
    RowBox[{"_", ",", "_", ",", "\[Delta]_", ",", "_", ",", "F_"}], "}"}]}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"Q", ",", "\[CapitalSigma]", ",", "P", ",", "C"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"Q", ",", "\[CapitalSigma]"}], "}"}], "=", 
      RowBox[{"Range", "/@", 
       RowBox[{"Dimensions", "[", 
        RowBox[{"\[Delta]", ",", "2"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"P", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Subsets", "[", 
            RowBox[{
             RowBox[{"Sort", "@", "#"}], ",", 
             RowBox[{"{", "2", "}"}]}], "]"}], "&"}], "/@", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Complement", "[", 
             RowBox[{"Q", ",", "F"}], "]"}], ",", "F"}], "}"}]}], "//", 
         RowBox[{"Append", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"Q", ",", "Q"}], "}"}], "\[Transpose]"}], "]"}]}], ",", 
        "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"P", "=", 
      RowBox[{"FixedPoint", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"DeleteCases", "[", 
          RowBox[{"#", ",", 
           RowBox[{"p_", "/;", 
            RowBox[{"MemberQ", "[", 
             RowBox[{"\[CapitalSigma]", ",", 
              RowBox[{"a_", "/;", 
               RowBox[{"FreeQ", "[", 
                RowBox[{"#", ",", 
                 RowBox[{"Sort", "@", 
                  RowBox[{"\[Delta]", "\[LeftDoubleBracket]", 
                   RowBox[{"p", ",", "a"}], "\[RightDoubleBracket]"}]}]}], 
                "]"}]}]}], "]"}]}]}], "]"}], "&"}], ",", "P", ",", 
        RowBox[{"SameTest", "\[Rule]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Equal", "[", 
            RowBox[{"Length", "/@", 
             RowBox[{"Unevaluated", "@", "##"}]}], "]"}], "&"}], ")"}]}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"C", "=", 
      RowBox[{"P", "//.", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"h___", ",", 
          RowBox[{"{", 
           RowBox[{"a___", ",", "x_", ",", "b___"}], "}"}], ",", "u___", ",", 
          RowBox[{"{", 
           RowBox[{"p___", ",", "x_", ",", "q___"}], "}"}], ",", "t___"}], 
         "}"}], "\[RuleDelayed]", 
        RowBox[{"{", 
         RowBox[{"h", ",", 
          RowBox[{"{", 
           RowBox[{"a", ",", "x", ",", "b", ",", "p", ",", "q"}], "}"}], ",", 
          "u", ",", "t"}], "}"}]}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"SortBy", "[", "First", "]"}], "@", 
          RowBox[{"Map", "[", 
           RowBox[{"Union", ",", "#", ",", 
            RowBox[{"{", "1", "}"}]}], "]"}]}], "&"}], "@", 
        RowBox[{"Join", "[", 
         RowBox[{"#", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"#", "\[NotEqual]", 
               RowBox[{"{", "}"}]}], ",", 
              RowBox[{"ArrayReshape", "[", 
               RowBox[{"#", ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"Length", "@", "#"}], ",", "1"}], "}"}]}], "]"}], 
              ",", "#"}], "]"}], "&"}], "@", 
           RowBox[{"Complement", "[", 
            RowBox[{"Q", ",", 
             RowBox[{"Flatten", "@", "#"}]}], "]"}]}]}], "]"}]}], "&"}], "@", 
      "C"}]}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6335943202427273`*^9, 3.6335944823409986`*^9}, 
   3.6335997367915363`*^9, {3.6335998242375374`*^9, 3.63359990331606*^9}, {
   3.6335999357979183`*^9, 3.6335999664536715`*^9}, {3.6336004599218965`*^9, 
   3.633600551295123*^9}, {3.6336006168948746`*^9, 3.633600621235123*^9}, {
   3.6336006788494186`*^9, 3.633600686471854*^9}, {3.6336007233479633`*^9, 
   3.633600748409397*^9}, {3.6336008017954507`*^9, 3.6336008574796357`*^9}, {
   3.6336139961851263`*^9, 3.633613997503202*^9}, {3.633698860741378*^9, 
   3.633698869853899*^9}, {3.6337025164644732`*^9, 3.633702518612596*^9}, {
   3.6337070191430116`*^9, 3.6337070373750544`*^9}, 3.6337071183726873`*^9, {
   3.6337071842974577`*^9, 3.6337071857735424`*^9}, {3.633707415887704*^9, 
   3.6337074640974617`*^9}, {3.6337075264450274`*^9, 
   3.6337075451730986`*^9}, {3.633707596511035*^9, 3.6337075965530376`*^9}, {
   3.6347209029413643`*^9, 3.634720917534199*^9}, {3.6347209953186483`*^9, 
   3.634721025389368*^9}, {3.6347259960726748`*^9, 3.6347260164128385`*^9}, {
   3.6347260487166862`*^9, 3.634726060924384*^9}, {3.6347263016301517`*^9, 
   3.634726303486258*^9}, 3.6347358103710318`*^9, {3.6347372914427443`*^9, 
   3.634737300473261*^9}, {3.634740025120102*^9, 3.634740041109016*^9}, {
   3.6348062449952297`*^9, 3.6348062483134193`*^9}, {3.634806783092007*^9, 
   3.6348068107345886`*^9}, {3.634807633925672*^9, 3.634807718932534*^9}, {
   3.6348077753527613`*^9, 3.6348077894185658`*^9}, {3.6348079526599026`*^9, 
   3.634807953289939*^9}, {3.6348080140224123`*^9, 3.634808026782142*^9}, {
   3.634808059803031*^9, 3.6348080814362683`*^9}, {3.6348084757868237`*^9, 
   3.634808480665103*^9}, {3.634808648770718*^9, 3.6348086565601635`*^9}, {
   3.6348102975480223`*^9, 3.6348103104027576`*^9}, {3.6348104090183983`*^9, 
   3.6348104313956785`*^9}, {3.6348104623974514`*^9, 3.634810508094065*^9}, {
   3.634810561596125*^9, 3.6348105698996*^9}, {3.634810725906523*^9, 
   3.6348107267515717`*^9}, {3.6348118354329844`*^9, 3.634811913237435*^9}, {
   3.6348122655975885`*^9, 3.6348122683777475`*^9}, {3.63481230495884*^9, 
   3.6348123071349645`*^9}, {3.6348123376967125`*^9, 
   3.6348123831863146`*^9}, {3.6348124318820996`*^9, 3.634812441053624*^9}, 
   3.634812473460478*^9, {3.634812542054401*^9, 3.634812558157322*^9}, {
   3.634812627790305*^9, 3.6348126451252966`*^9}, {3.6348126903908854`*^9, 
   3.6348128527441716`*^9}, {3.634813275923376*^9, 3.634813305918092*^9}, {
   3.634813441371839*^9, 3.6348134843332963`*^9}, {3.6348137138234224`*^9, 
   3.6348138383055425`*^9}, {3.634813958092394*^9, 3.6348139737892914`*^9}, {
   3.634814162700097*^9, 3.634814183258272*^9}, {3.634814555318553*^9, 
   3.634814555480562*^9}, {3.6348146228184137`*^9, 3.6348146652398405`*^9}, {
   3.6348148338634853`*^9, 3.634814842361971*^9}, {3.6348171237568564`*^9, 
   3.6348171238098593`*^9}, {3.6348171580668187`*^9, 
   3.6348171599489264`*^9}, {3.634839372544406*^9, 3.634839405636298*^9}, 
   3.6348395110983305`*^9, {3.634839548369462*^9, 3.634839558086018*^9}, {
   3.6348395886987686`*^9, 3.634839591144909*^9}, {3.634839703129314*^9, 
   3.6348398093913918`*^9}, {3.6348403152353244`*^9, 
   3.6348403558916492`*^9}, {3.63484041183385*^9, 3.6348405132316494`*^9}, {
   3.6348810752927914`*^9, 3.634881084634326*^9}, {3.6348816914580345`*^9, 
   3.634881697521381*^9}, {3.6350530411961775`*^9, 3.635053041781211*^9}, {
   3.638451949831261*^9, 3.638451960852892*^9}, {3.638452000017132*^9, 
   3.638452138599058*^9}, {3.63845217062289*^9, 3.63845219300417*^9}, {
   3.638452231135351*^9, 3.638452232273416*^9}, {3.638452296351081*^9, 
   3.638452331926116*^9}, {3.6384523791988196`*^9, 3.63845245105893*^9}, {
   3.638452487054989*^9, 3.638452616334383*^9}, {3.638452648707235*^9, 
   3.6384526705364833`*^9}, {3.6384527382023535`*^9, 
   3.6384528375570364`*^9}, {3.638453153888129*^9, 3.638453186466993*^9}, {
   3.638453300555518*^9, 3.6384533035686903`*^9}, {3.638453335334508*^9, 
   3.6384533867394476`*^9}, {3.638453481450865*^9, 3.6384535388911505`*^9}, {
   3.6384535864818726`*^9, 3.63845358906402*^9}, 3.6384536649113584`*^9, {
   3.6384538678449655`*^9, 3.6384538806596985`*^9}, {3.63845446655221*^9, 
   3.6384544675652676`*^9}, {3.6384545312149076`*^9, 
   3.6384545351901355`*^9}, {3.638455156086649*^9, 3.6384551599828715`*^9}, {
   3.638616232225176*^9, 3.638616244265864*^9}, {3.641032100063946*^9, 
   3.6410321130696898`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DFAEquivalenceClasses", "@", 
  RowBox[{"DFA", "@", "\"\<1 b\>\""}]}]], "Input",
 CellChangeTimes->{{3.6386165013855705`*^9, 3.6386165499443483`*^9}, {
  3.641032116175867*^9, 3.6410321255044007`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", "6", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.641032122799246*^9, 3.6410321258584213`*^9}}]
}, Closed]],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "DFAMinimize", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "DFAMinimize", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"RenameStates", "\[Rule]", "True"}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DFAMinimize", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "Q_", ",", "\[CapitalSigma]_", ",", "\[Delta]_", ",", "s_", ",", "F_"}], 
     "}"}], ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"M", ",", "C"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"M", "=", 
      RowBox[{"DFADeleteInaccesibleStates", "@", 
       RowBox[{"{", 
        RowBox[{
        "Q", ",", "\[CapitalSigma]", ",", "\[Delta]", ",", "s", ",", "F"}], 
        "}"}]}]}], ";", 
     RowBox[{"C", "=", 
      RowBox[{"DFAEquivalenceClasses", "@", "M"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"MapAt", "[", 
       RowBox[{
        RowBox[{"Replace", "[", 
         RowBox[{
          RowBox[{"OptionValue", "@", "RenameStates"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"True", "\[Rule]", 
             RowBox[{"Range", "@*", "Length"}]}], ",", 
            RowBox[{"False", "\[Rule]", "Identity"}]}], "}"}]}], "]"}], ",", 
        "1"}], "]"}], "@", "\[IndentingNewLine]", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"M", "\[LeftDoubleBracket]", 
             RowBox[{"1", ",", "#"}], "\[RightDoubleBracket]"}], "&"}], "/@", 
           "C"}], ",", "\[CapitalSigma]"}], "}"}], ",", 
        RowBox[{
         RowBox[{"MapAt", "[", 
          RowBox[{"Union", ",", 
           RowBox[{"-", "1"}]}], "]"}], "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"M", "\[LeftDoubleBracket]", 
             RowBox[{"3", ",", 
              RowBox[{"C", "\[LeftDoubleBracket]", 
               RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}]}], 
             "\[RightDoubleBracket]"}], ",", "s", ",", 
            RowBox[{
            "M", "\[LeftDoubleBracket]", "5", "\[RightDoubleBracket]"}]}], 
           "}"}], "/.", 
          RowBox[{"Flatten", "@", 
           RowBox[{"MapThread", "[", 
            RowBox[{
             RowBox[{"Thread", "@*", "Rule"}], ",", 
             RowBox[{"{", 
              RowBox[{"C", ",", 
               RowBox[{"Range", "@", 
                RowBox[{"Length", "@", "C"}]}]}], "}"}]}], "]"}]}]}], "]"}]}],
        "]"}]}]}]}], "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6384540252869706`*^9, 3.638454299666664*^9}, {
  3.638454410205987*^9, 3.638454413598181*^9}, {3.638454664857552*^9, 
  3.638454692940158*^9}, {3.638455005704047*^9, 3.6384551629230394`*^9}, {
  3.638455197285005*^9, 3.638455200610195*^9}, {3.6384552459317875`*^9, 
  3.638455254940303*^9}, {3.6386169672372155`*^9, 3.6386169701613827`*^9}, {
  3.638617087489094*^9, 3.638617090198249*^9}, {3.638621935277475*^9, 
  3.638621951316392*^9}, {3.6410321721690702`*^9, 3.6410322871586466`*^9}, {
  3.6410323266509056`*^9, 3.6410323417367687`*^9}, {3.641032447699829*^9, 
  3.641032456049307*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Column", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"DFAPlot", "[", 
       RowBox[{"#", ",", 
        RowBox[{"ImageSize", "\[Rule]", "500"}]}], "]"}], "&"}], "/@", 
     RowBox[{"{", 
      RowBox[{"#", ",", 
       RowBox[{"DFAMinimize", "[", "#", "]"}]}], "}"}]}], "&"}], "@", 
   RowBox[{"DFA", "@", "\"\<1 b\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.633602625172742*^9, 3.6336026336732283`*^9}, {
   3.634726353286106*^9, 3.6347263719201717`*^9}, {3.6347265132082534`*^9, 
   3.6347265713375783`*^9}, {3.6348065167327724`*^9, 3.634806530838579*^9}, {
   3.6385226377128906`*^9, 3.638522756184667*^9}, {3.6385228134099402`*^9, 
   3.6385228264946885`*^9}, {3.6386164112804165`*^9, 3.6386164342027283`*^9}, 
   3.6386164951432133`*^9, {3.6386165604269476`*^9, 3.638616614197023*^9}, {
   3.6386167356499696`*^9, 3.638616784839783*^9}, 3.638616840393961*^9, {
   3.6410321513338785`*^9, 3.6410321592443304`*^9}, {3.6410324357981486`*^9, 
   3.641032476016449*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     GraphicsBox[
      TagBox[{{
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{0., 1.0932600492892193`}, {
           0.025920657854608176`, 0.989859563447757}, {0.03237630052742724, 
           0.9620531021952715}, {0.03785504746127277, 0.9340377859960924}, {
           0.042350189044955466`, 0.9058479241332216}, {0.045856220251024093`,
            0.8775180396490382}, {0.048368847377562196`, 
           0.8490828270662547}, {0.04988499330651919, 0.8205771098988652}, {
           0.05040280127213992, 0.7920357980051236}, {0.05066065129349007, 
           0.39036048795610545`}, {0.050179487156223446`, 
           0.3618185347857615}, {0.04869994017932955, 0.3333108945739119}, {
           0.04622382230723143, 0.30487247953388946`}, {0.04275416594649584, 
           0.2765381171016146}, {0.03829522025216203, 0.24834250728377094`}, {
           0.03285244592396386, 0.220320180162038}, {0.02643250851882073, 
           0.1925054536054252}, {0.0006446250533751474, 0.08907177416667278}},
           SplineDegree->17]], InsetBox[
           StyleBox["\<\"a\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {0.0491189077069095, 0.5911972360408778},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{0., 1.0932600492892193`}, {
           1.1357749757748796`, 1.184098334128792}},
           SplineDegree->1]], InsetBox[
           StyleBox["\<\"b\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {0.5678874878874398, 1.1386791917090058`},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{0.0006446250533751474, 
           0.08907177416667278}, {-0.025276032801233028`, 
           0.1924722600081351}, {-0.03173167547405209, 
           0.22027872126062065`}, {-0.037210422407897625`, 
           0.24829403745979958`}, {-0.04170556399158032, 
           0.2764838993226706}, {-0.045211595197648946`, 
           0.30481378380685387`}, {-0.04772422232418705, 
           0.33324899638963734`}, {-0.04924036825314404, 
           0.3617547135570269}, {-0.04975817621876477, 
           0.3902960254507686}, {-0.05001602624011492, 
           0.7919713354997867}, {-0.0495348621028483, 
           0.8205132886701307}, {-0.0480553151259544, 
           0.8490209288819803}, {-0.045579197253856285`, 
           0.8774593439220028}, {-0.04210954089312069, 
           0.9057937063542776}, {-0.037650595198786885`, 
           0.9339893161721213}, {-0.03220782087058871, 
           0.9620116432938542}, {-0.025787883465445582`, 0.989826369850467}, {
           0., 1.0932600492892193`}},
           SplineDegree->17]], InsetBox[
           StyleBox["\<\"a\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {-0.04847428265353435, 0.5911345874150147},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{0.0006446250533751474, 
           0.08907177416667278}, {1.1364212420437527`, 0.}},
           SplineDegree->1]], InsetBox[
           StyleBox["\<\"b\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {0.5685329335485639, 0.04453588708333639},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{1.1357749757748796`, 
           1.184098334128792}, {1.8937056829615349`, 0.8866485065856774}},
           SplineDegree->1]], InsetBox[
           StyleBox["\<\"a\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {1.5147403293682071`, 1.0353734203572347`},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{1.1357749757748796`, 
           1.184098334128792}, {1.8938361896761844`, 0.2962741990364466}},
           SplineDegree->1]], InsetBox[
           StyleBox["\<\"b\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {1.514805582725532, 0.7401862665826193},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{1.1364212420437527`, 0.}, {
           1.8937056829615349`, 0.8866485065856774}},
           SplineDegree->1]], InsetBox[
           StyleBox["\<\"a\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {1.5150634625026438`, 0.4433242532928387},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{1.1364212420437527`, 0.}, {
           1.8938361896761844`, 0.2962741990364466}},
           SplineDegree->1]], InsetBox[
           StyleBox["\<\"b\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {1.5151287158599684`, 0.1481370995182233},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[CompressedData["
1:eJwBoQFe/iFib1JlAgAAABkAAAACAAAALxuJVJ5M/j+vpVqwbF/sP86Ace7C
Q/4/Gla6Akx67D+39QVA/sf9P4+sICwch+4/zIre7sGa/T8qykw1I2LwPydU
iNquv/0/caZIp+iB8T/y0KnHzjP+P3T+N0vJi/I/1WOhMdHt/j9l4AKScWrz
P6rHfI7K3v8/m0N6aQUM9D9W6ehWs3kAQEqwxfeOY/Q/bUm2z7oKAUBSmIS8
CGr0P5bM56XZlgFAFgvovu0e9D9FrqKZ0hICQISNKDhEiPM/dca0ALR0AkDT
gFTfIbLyP8tljfejtAJA62WdwrOt8T97N4eYgc0CQAl2tJXdj/A/L88VS069
AkDPmvB+Gd/uP8YMaLhWhQJAOKr6HcPH7D9NqIIcGCoCQOGRgraoBOs/tE29
F+SyAUCuVmZJ+bnpP3LOgGVKKQFAs/HUKjsC6T9zqUSGVJgAQN4i61gr7Og/
5MBhHKMLAECCxqPYjnnpPwBJDVP+HP8/gG19Xw6f6j93iQ2n5FX+P8bM/DMf
Rew/LxuJVJ5M/j+vpVqwbF/sP52zys4=
           "],
           SplineDegree->24]], InsetBox[
           StyleBox["\<\"a\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {2.262395855957534, 1.1380818654632447`},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{1.8937056829615349`, 
           0.8866485065856774}, {1.8938361896761844`, 0.2962741990364466}},
           SplineDegree->1]], InsetBox[
           StyleBox["\<\"b\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {1.8937709363188597`, 0.5914613528110619},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[CompressedData["
1:eJwBoQFe/iFib1JlAgAAABkAAAACAAAAWD8qLSdN/j8EpuAOKPbSP+JhKKFu
Vv4/uwi81r8q0z/BLQlymh3/P++v3gCddtY/ehKoevcLAECaNvf1RcHYP2gR
Je6rmABA+FD3Kqzb2T8ypm1ToSkBQGZ8X84or9k/uhjxETezAUAwDNjpTT/Y
PzS/XvpjKgJAhrE8EZ2p1T+G51DjmIUCQHFbloApI9I/NxSZ84S9AkAidpCE
rOjLPzwziNurzQJAQHEekQ/mwj+HlnzwwbQCQLHM+NAA77M/fWpcx8Z0AkBg
Zv4meEaNP4iGtSvcEgJA6FLcSZJwo7/a6B6+3JYBQFxaAGWMIbO/eGDFrboK
AUDCHBioutG3v1oVyHyzeQBAhr1lSI9ot79ZREZi0t7/PySwitV57rG/a1U6
6+bt/j9o2rRvw0+fv7QLdqf3M/4/GKq/vk1emD8BVbWX7r/9P81xR2Q9trY/
+98Xaxqb/T/iAG6gY1nEP1+T0mBvyP0/DUFqc+1NzT+bWVOfSkT+P3aGO3Zs
wNI/WD8qLSdN/j8EpuAOKPbSP8Eywwo=
           "],
           SplineDegree->24]], InsetBox[
           StyleBox["\<\"\[CapitalSigma]\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {2.262441884786253, 0.044717010403924604`},
           Background->GrayLevel[1]]}}, {
         {RGBColor[1, 1, 0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{0., 1.0932600492892193`}, 0.1], InsetBox["1", {0., 1.0932600492892193`},
           BaseStyle->{
             GrayLevel[0], 12}]}, 
         {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{0.0006446250533751474, 0.08907177416667278}, 0.1], 
          InsetBox["2", {0.0006446250533751474, 0.08907177416667278},
           BaseStyle->{
             GrayLevel[0], 12}]}, 
         {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{1.1357749757748796`, 1.184098334128792}, 0.1], 
          DiskBox[{1.1357749757748796`, 1.184098334128792}, 
           0.06999999999999999], InsetBox["3", {1.1357749757748796`, 1.184098334128792},
           BaseStyle->{
             GrayLevel[0], 12}]}, 
         {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{1.1364212420437527`, 0.}, 0.1], 
          DiskBox[{1.1364212420437527`, 0.}, 0.06999999999999999], 
          InsetBox["4", {1.1364212420437527`, 0.},
           BaseStyle->{
             GrayLevel[0], 12}]}, 
         {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{1.8937056829615349`, 0.8866485065856774}, 0.1], 
          DiskBox[{1.8937056829615349`, 0.8866485065856774}, 
           0.06999999999999999], InsetBox["5", {1.8937056829615349`, 0.8866485065856774},
           BaseStyle->{
             GrayLevel[0], 12}]}, 
         {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{1.8938361896761844`, 0.2962741990364466}, 0.1], 
          InsetBox["6", {1.8938361896761844`, 0.2962741990364466},
           BaseStyle->{
             GrayLevel[0], 12}]}}},
       Annotation[#, 
        VertexCoordinateRules -> {{0., 1.0932600492892193`}, {
         0.0006446250533751474, 0.08907177416667278}, {1.1357749757748796`, 
         1.184098334128792}, {1.1364212420437527`, 0.}, {1.8937056829615349`, 
         0.8866485065856774}, {1.8938361896761844`, 0.2962741990364466}}]& ],
      AspectRatio->Automatic,
      FrameTicks->None,
      ImageSize->500,
      PlotRange->All,
      PlotRangePadding->Scaled[0.1]]},
    {
     GraphicsBox[
      TagBox[{{
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQOnpkxe/rPpky3Diedv2rQF9kdsPyIfLFqwX2Bt
cqPry7b9Nzu06uY+37S/RMr+fJn10v2xl2W9bi05uJ9r1ropk5dt2/+0qMl5
RvaJ/aca2NM9GQ7vF2l66fbY5uz+E2pCnPY7Tu+3XPp+/7mt5/c/OpG2QTDl
0v49x79ZT1t8fn+EY9eBD7uu7Q+ZuOHBevaz+80Xrv20sP3W/iOaYZnrxE/s
/7R94nP5mrv7k7PPCH21OLi/J6pu157o+/ubVy9N1/64cT/E9Q/2//v9K+Hs
jK+2N59UgeWzT4VlAeXtZwh3g/V/E1MSAeq3nxW2BGx+pNvyLKD59o789WD7
My7+fgi0395sahTYfWph1rZA99mnbPzJAXK/q5nuQaD77ad+/pAG8t+0SAUP
oP/sld51gP1/OG6zC9D/9idWcYDDR0TayxsYPvYfWN83gMKvTra2ARh+9gwX
zr4EhW/PnVMuwPC1Rw9/AL/s1G8=
           "],
           SplineDegree->24]], InsetBox[
           StyleBox["\<\"a\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {-0.4460555994731605, 3.0943220312508723`*^-10},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{0., 2.6937955301856953`*^-10}, {1., 
           1.7958636867904636`*^-10}},
           SplineDegree->1]], InsetBox[
           StyleBox["\<\"b\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {0.5, 2.2448296084880796`*^-10},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQEf7JOPHTFZtO6F7doTqwOZpr+1/7DryTk5/pn2
7M8FBLtPvLZfo5AdE2y9yn7RnedqjI6v7EXOm88py9pur2Jwd5Kc1Et7iV9h
68vsDtmnCyztdE5/Yb9eYe+dqXtO2i+c5dNlYPLCfofnFpsTNy7YX4t4uMGh
5YW91EXtwuOnr9hnPW11Ngx6ae/+1P3QrZIb9msflOtXTXhlr9G19mL+tNv2
G5mmLjXUemP/2fhL9O3fd+2dJxx+mM3yzj7dUEDjfM19+30LWMDuX7ROAkg/
sM8IVuc/9feD/ZNZ3GD5G1p2us9ffbSXCnkN1p/L5fPi0PZP9vbfFoDNN1Fw
iXse9tn+XoEF2P7i8KnL7+/9bK/dIAV2n+Kke7ueP/1s32q/COz+5QaG1nFn
Ptuv/jET7L9E7inbPhR9tj/Faw72v9rh3pz6+5/sX8xnAoePZ31F+S7pT/Yu
QrKQ8OvXul5n8tGeoaEbHL7o4Q8Ad/zFPg==
           "],
           SplineDegree->24]], InsetBox[
           StyleBox["\<\"a\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {1.0000000000614275`, 0.4560679292138348},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{1., 1.7958636867904636`*^-10}, {2., 0.}},
           SplineDegree->1]], InsetBox[
           StyleBox["\<\"b\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {1.5, 8.979318433952318*^-11},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQUOMMbLO7zhCkA+/wx3o2DRAnuGeY2uL8UYHLbO
Dayf+3yTvWem7e23IQwOMvfXe91actC+gXvZHJOtDA6TdIRcZmSfsC/TKZzG
YsDo8Nm1zP2xzVl78WcTPzTvZnQI4ak8cG7refuwObxmTT5MDpobamymLT5v
7/NbUCLuOpPDewXjh+vZz9pf8Aiz+xLA7KBw+mrmOvET9s4LP/1pXs/s4HzU
U/irxUH7NUwB08tfMzukV8/N0P640R7iahaHuZbWp6euu7HXQdUfLN/wKy4T
KL9f78cHsH6xvUtA+vdrfQsGm/93iXoW0Pz9x/X4wfafdawE2b8/p58L7L6d
uVtB7tufc70P7H6t84tB7t9/ISoP7L/tUyeD/Lf/4IbFYP8LLlUG+X//ma3W
4PAJ5d8BCp/9m7c0gMNvEUcYKPz2N12AhO/V3+Dw3Y8e/gCpk6gO
           "],
           SplineDegree->24]], InsetBox[
           StyleBox["\<\"\[CapitalSigma]\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {2.44605559947316, -8.010488955759261*^-11},
           Background->GrayLevel[1]]}}, {
         {RGBColor[1, 1, 0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{0., 2.6937955301856953`*^-10}, 0.1], InsetBox["1", {0., 2.6937955301856953`*^-10},
           BaseStyle->{
             GrayLevel[0], 12}]}, 
         {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{1., 1.7958636867904636`*^-10}, 0.1], 
          DiskBox[{1., 1.7958636867904636`*^-10}, 0.06999999999999999], 
          InsetBox["2", {1., 1.7958636867904636`*^-10},
           BaseStyle->{
             GrayLevel[0], 12}]}, 
         {GrayLevel[0.85], EdgeForm[GrayLevel[0]], DiskBox[{2., 0.}, 0.1], 
          InsetBox["3", {2., 0.},
           BaseStyle->{
             GrayLevel[0], 12}]}}},
       Annotation[#, 
        VertexCoordinateRules -> {{0., 2.6937955301856953`*^-10}, {1., 
         1.7958636867904636`*^-10}, {2., 0.}}]& ],
      AspectRatio->Automatic,
      FrameTicks->None,
      ImageSize->500,
      PlotRange->All,
      PlotRangePadding->Scaled[0.1]]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{
  3.641032159850365*^9, 3.6410323528194027`*^9, {3.6410324363571806`*^9, 
   3.6410324769355016`*^9}, 3.64103254893862*^9}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Operations on NFA", "Subchapter",
 CellChangeTimes->{{3.64093032384548*^9, 3.6409303280137186`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"NFAUnion", "[", 
   RowBox[{"A_", ",", "B__"}], "]"}], ":=", 
  RowBox[{"Fold", "[", 
   RowBox[{"NFAUnion", ",", "A", ",", 
    RowBox[{"{", "B", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"NFAUnion", "[", 
  RowBox[{"A_", ",", "B_"}], "]"}]}], "Input",
 CellChangeTimes->{{3.6409303393403664`*^9, 3.640930380158701*^9}, 
   3.6409304798584037`*^9, {3.6409305223448334`*^9, 3.640930523003871*^9}}],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6409305282561717`*^9, 3.640930528553189*^9}, {
  3.6409305697235436`*^9, 3.6409305762589173`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Real\"\>", ",", "\<\"Real short\"\>", ",", "\<\"TM\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.640930529991271*^9, 3.6409305709116116`*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Operations on DFA", "Subchapter",
 CellChangeTimes->{{3.640070791842964*^9, 3.6400707932070427`*^9}, {
  3.640856807889971*^9, 3.640856809935088*^9}, {3.6409303162290444`*^9, 
  3.6409303170870934`*^9}}],

Cell[CellGroupData[{

Cell["Complement", "Subsection",
 CellChangeTimes->{{3.64032844121238*^9, 3.6403284444955673`*^9}}],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "DFAComplement", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DFAComplement", "[", 
   RowBox[{"A_", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"Qi", "=", 
      RowBox[{"Range", "@", 
       RowBox[{"Length", "@", 
        RowBox[{
        "A", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}]}]}], 
     "}"}], ",", 
    RowBox[{"MapAt", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Complement", "[", 
        RowBox[{"Qi", ",", "#"}], "]"}], "&"}], ",", "A", ",", "5"}], "]"}]}],
    "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.640328453861103*^9, 3.6403285005777755`*^9}, {
  3.6403285333756514`*^9, 3.6403285880437784`*^9}, {3.6410276771349688`*^9, 
  3.64102778888636*^9}, {3.641028033887374*^9, 3.641028035971493*^9}, {
  3.6410282068622675`*^9, 3.641028209939443*^9}, {3.641028259966305*^9, 
  3.641028264871585*^9}, {3.641032699052206*^9, 3.641032700659298*^9}, {
  3.6410330484851923`*^9, 3.6410330537514935`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DFAComplement", "[", 
  RowBox[{"DFA", "@", "\"\<Odd a\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.6403285927340465`*^9, 3.640328607448888*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     TagBox[
      TooltipBox["\<\"E\"\>",
       "\"even\"",
       TooltipStyle->"TextStyling"],
      Annotation[#, "even", "Tooltip"]& ], ",", 
     TagBox[
      TooltipBox["\<\"O\"\>",
       "\"odd\"",
       TooltipStyle->"TextStyling"],
      Annotation[#, "odd", "Tooltip"]& ]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}]}], "}"}], ",", "1", ",", 
   RowBox[{"{", "1", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.6403286038256807`*^9, 3.640328607926915*^9}, 
   3.6410327167002153`*^9, 3.6410330563556423`*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Union", "Subsection",
 CellChangeTimes->{{3.640070801158497*^9, 3.6400708018295355`*^9}}],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "DFAUnion", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DFAUnion", "[", 
   RowBox[{"A_", ",", "B_", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "f", ",", "s", ",", "Q", ",", "\[CapitalSigma]", ",", "PA", ",", "PB", 
      ",", "\[Delta]A", ",", "\[Delta]B", ",", "\[Delta]q", ",", 
      RowBox[{"m", "=", 
       RowBox[{"{", "}"}]}], ",", "rlQ"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\[CapitalSigma]", "=", 
      RowBox[{"DeleteDuplicates", "[", 
       RowBox[{
        RowBox[{"A", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
        "~", "Join", "~", 
        RowBox[{"B", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}],
        "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"PA", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"FirstPosition", "[", 
           RowBox[{
            RowBox[{
            "A", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",", 
            "#"}], "]"}], "&"}], "/@", "\[CapitalSigma]"}], "/.", 
        RowBox[{"_Missing", "\[Rule]", 
         RowBox[{
          RowBox[{"Length", "@", 
           RowBox[{
           "A", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], "+",
           "1"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"PB", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"FirstPosition", "[", 
           RowBox[{
            RowBox[{
            "B", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",", 
            "#"}], "]"}], "&"}], "/@", "\[CapitalSigma]"}], "/.", 
        RowBox[{"_Missing", "\[Rule]", 
         RowBox[{
          RowBox[{"Length", "@", 
           RowBox[{
           "B", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], "+",
           "1"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"\[Delta]A", "=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "@", "\[CapitalSigma]"}], ">", 
          RowBox[{"Length", "@", 
           RowBox[{
           "A", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}]}], 
         ",", 
         RowBox[{"ArrayPad", "[", 
          RowBox[{
           RowBox[{
           "A", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0", ",", "1"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
           RowBox[{
            RowBox[{"Length", "@", 
             RowBox[{
             "A", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
            "+", "1"}]}], "]"}], ",", 
         RowBox[{
         "A", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], "]"}],
        "\[LeftDoubleBracket]", 
       RowBox[{"All", ",", "PA"}], "\[RightDoubleBracket]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"\[Delta]B", "=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "@", "\[CapitalSigma]"}], ">", 
          RowBox[{"Length", "@", 
           RowBox[{
           "B", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}]}], 
         ",", 
         RowBox[{"ArrayPad", "[", 
          RowBox[{
           RowBox[{
           "B", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0", ",", "1"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
           RowBox[{
            RowBox[{"Length", "@", 
             RowBox[{
             "B", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
            "+", "1"}]}], "]"}], ",", 
         RowBox[{
         "B", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], "]"}],
        "\[LeftDoubleBracket]", 
       RowBox[{"All", ",", "PB"}], "\[RightDoubleBracket]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Q", "=", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"A", "\[LeftDoubleBracket]", "4", "\[RightDoubleBracket]"}], 
         ",", 
         RowBox[{
         "B", "\[LeftDoubleBracket]", "4", "\[RightDoubleBracket]"}]}], "}"}],
        "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"Q", "\[NotEqual]", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"f", ",", "s"}], "}"}], "=", 
         RowBox[{
         "Q", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], ";", 
        RowBox[{"\[Delta]q", "=", 
         RowBox[{"Thread", "@", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
            "\[Delta]A", "\[LeftDoubleBracket]", "f", 
             "\[RightDoubleBracket]"}], ",", 
            RowBox[{
            "\[Delta]B", "\[LeftDoubleBracket]", "s", 
             "\[RightDoubleBracket]"}]}], "}"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"m", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"f", ",", "s"}], "}"}], ",", "\[Delta]q"}], "}"}]}], 
         "]"}], ";", " ", 
        RowBox[{"Q", "=", 
         RowBox[{"Complement", "[", 
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{"Q", ",", "\[Delta]q"}], "]"}], ",", 
           RowBox[{"m", "\[LeftDoubleBracket]", 
            RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}]}], 
          "]"}]}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Q", "=", 
      RowBox[{"m", "\[LeftDoubleBracket]", 
       RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}]}], ";", 
     RowBox[{"rlQ", "=", 
      RowBox[{"Range", "@", 
       RowBox[{"Length", "@", "Q"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"rlQ", ",", 
         RowBox[{"DeleteDuplicates", "[", 
          RowBox[{
           RowBox[{
           "A", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], "~", 
           "Join", "~", 
           RowBox[{
           "B", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
          "]"}]}], "}"}], "~", "Join", "~", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"m", "\[LeftDoubleBracket]", 
          RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}], ",", 
         RowBox[{"Q", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         ",", 
         RowBox[{"Select", "[", 
          RowBox[{"Q", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"MemberQ", "[", 
              RowBox[{
               RowBox[{
               "A", "\[LeftDoubleBracket]", "5", "\[RightDoubleBracket]"}], 
               ",", 
               RowBox[{
               "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
              "]"}], "||", 
             RowBox[{"MemberQ", "[", 
              RowBox[{
               RowBox[{
               "B", "\[LeftDoubleBracket]", "5", "\[RightDoubleBracket]"}], 
               ",", 
               RowBox[{
               "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
              "]"}]}], "&"}]}], "]"}]}], "}"}]}], "/.", 
      RowBox[{"Thread", "[", 
       RowBox[{"Q", "\[Rule]", "rlQ"}], "]"}]}]}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DFAUnion", "[", 
   RowBox[{"A_", ",", "B__", ",", 
    RowBox[{"o", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
  RowBox[{"Fold", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"DFAUnion", "[", 
      RowBox[{"##", ",", "o"}], "]"}], "&"}], ",", "A", ",", 
    RowBox[{"{", "B", "}"}]}], "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6337009788355255`*^9, 3.633701017402732*^9}, {
   3.6337020824836507`*^9, 3.633702084178748*^9}, {3.6337029065107822`*^9, 
   3.6337029092349386`*^9}, {3.6337030430055895`*^9, 
   3.6337030444766736`*^9}, {3.6337039794091487`*^9, 
   3.6337039817512827`*^9}, {3.6337051073436627`*^9, 3.633705127345807*^9}, 
   3.6337052882370095`*^9, {3.63370957467918*^9, 3.633709638437827*^9}, {
   3.6337096691435833`*^9, 3.6337096848014784`*^9}, {3.6337097226646442`*^9, 
   3.633709784167162*^9}, {3.6337098404573812`*^9, 3.6337098435985613`*^9}, {
   3.6337098798106327`*^9, 3.6337098988677225`*^9}, {3.633710161880766*^9, 
   3.6337101737974477`*^9}, {3.633714355610634*^9, 3.633714383598234*^9}, {
   3.6337144538322515`*^9, 3.6337144540232625`*^9}, {3.634727563136306*^9, 
   3.6347275650544157`*^9}, {3.634727738269323*^9, 3.634727738529338*^9}, 
   3.634731047870164*^9, {3.6347311773335686`*^9, 3.6347312923941493`*^9}, {
   3.634732302005896*^9, 3.6347323553419466`*^9}, {3.634732608008398*^9, 
   3.6347326094694815`*^9}, {3.6347327721207848`*^9, 
   3.6347327774050875`*^9}, {3.6347328401086736`*^9, 3.634732844343916*^9}, {
   3.6347328886314487`*^9, 3.634732913232856*^9}, {3.634734578434569*^9, 
   3.6347345874610853`*^9}, {3.6347346459904327`*^9, 3.63473467654218*^9}, {
   3.6347347166094723`*^9, 3.6347347966680512`*^9}, {3.6347348822859483`*^9, 
   3.634734882820979*^9}, {3.6347349336728873`*^9, 3.634734991099172*^9}, {
   3.6347350620892324`*^9, 3.6347350644923697`*^9}, {3.6347351113800516`*^9, 
   3.634735167428258*^9}, {3.6347352206733027`*^9, 3.6347352502659955`*^9}, {
   3.6347395489268646`*^9, 3.634739582851805*^9}, {3.634891617634604*^9, 
   3.6348917603647676`*^9}, 3.6348918166819887`*^9, {3.6348977579958124`*^9, 
   3.634897762971097*^9}, {3.634897996486453*^9, 3.634898002302786*^9}, {
   3.634901455581302*^9, 3.6349014620216703`*^9}, 3.6349060732644186`*^9, {
   3.634910575781664*^9, 3.6349105760126767`*^9}, {3.634910679676606*^9, 
   3.6349107385789747`*^9}, {3.6349110785574207`*^9, 
   3.6349111030208197`*^9}, {3.634911218969452*^9, 3.6349112733235607`*^9}, {
   3.6349114374239464`*^9, 3.6349114464274616`*^9}, {3.6349114911690207`*^9, 
   3.6349114994024916`*^9}, {3.634914055205675*^9, 3.634914085295396*^9}, {
   3.6385239903172555`*^9, 3.638523990948292*^9}, {3.638525455654068*^9, 
   3.638525514275421*^9}, {3.638525547466319*^9, 3.638525630237054*^9}, {
   3.6385257498598957`*^9, 3.6385257521840286`*^9}, {3.638525783228804*^9, 
   3.638525791358269*^9}, {3.638525887845788*^9, 3.638525934541459*^9}, {
   3.638526057437488*^9, 3.6385261326127877`*^9}, {3.6385261710409856`*^9, 
   3.6385262611111374`*^9}, 3.6385324678176656`*^9, {3.6386217136167965`*^9, 
   3.6386217138408093`*^9}, 3.6386278681488156`*^9, {3.6386279171856203`*^9, 
   3.6386279183486867`*^9}, {3.638873015961748*^9, 3.638873075558157*^9}, {
   3.6399717144631577`*^9, 3.63997175662957*^9}, {3.640328231331375*^9, 
   3.6403282351425934`*^9}, {3.64033021071159*^9, 3.640330325425151*^9}, {
   3.640330970239032*^9, 3.6403310421781464`*^9}, {3.64033109171198*^9, 
   3.6403311448400183`*^9}, {3.6403328503585687`*^9, 
   3.6403329357404523`*^9}, {3.640333029250801*^9, 3.640333037878294*^9}, {
   3.640944292575446*^9, 3.6409443130566173`*^9}, {3.6410280287620807`*^9, 
   3.6410280932737703`*^9}, 3.6410281869051256`*^9, {3.641028218027906*^9, 
   3.6410282986605177`*^9}, {3.6410327208724537`*^9, 3.641032742360683*^9}, {
   3.641032993859068*^9, 3.6410330207556067`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "@", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"DFAPlot", "[", 
       RowBox[{
        RowBox[{"DFA", "@", "\"\<Substr aa\>\""}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "400"}]}], "]"}], ",", 
      RowBox[{"DFAPlot", "[", 
       RowBox[{
        RowBox[{"DFA", "@", "\"\<Even both ab\>\""}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "180"}]}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"DFAPlot", "[", 
       RowBox[{
        RowBox[{"DFAMinimize", "@", 
         RowBox[{"DFAUnion", "[", 
          RowBox[{
           RowBox[{"DFA", "@", "\"\<Substr aa\>\""}], ",", 
           RowBox[{"DFA", "@", "\"\<Even both ab\>\""}]}], "]"}]}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "380"}]}], "]"}], ",", 
      "\[SpanFromLeft]"}], "}"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.638525672846491*^9, 3.6385256982399435`*^9}, {
   3.6385257548611813`*^9, 3.6385257599164705`*^9}, {3.6385259508323903`*^9, 
   3.6385259591648674`*^9}, {3.638526281051278*^9, 3.638526323536708*^9}, {
   3.6385263688282986`*^9, 3.6385263712374363`*^9}, {3.6385264776960506`*^9, 
   3.638526491390834*^9}, {3.6386178094673886`*^9, 3.63861780950039*^9}, {
   3.6386178462004895`*^9, 3.638617972249699*^9}, {3.638618003062462*^9, 
   3.6386181015270934`*^9}, {3.638618141739393*^9, 3.638618225564188*^9}, 
   3.6386183010235043`*^9, {3.638625282671935*^9, 3.6386252830709577`*^9}, {
   3.6386253492897453`*^9, 3.638625489906788*^9}, {3.6386256470297747`*^9, 
   3.638625647379795*^9}, {3.6386258378086867`*^9, 3.6386258489893265`*^9}, {
   3.6386258827932596`*^9, 3.6386259956387143`*^9}, {3.638627513708543*^9, 
   3.63862751575666*^9}, {3.6386277576294947`*^9, 3.63862775913358*^9}, {
   3.638627798522833*^9, 3.6386278336958447`*^9}, {3.639971759838647*^9, 
   3.639971764163824*^9}, {3.640328140707192*^9, 3.640328173638076*^9}, {
   3.640328208141049*^9, 3.640328212420294*^9}, {3.64103279982397*^9, 
   3.641032802780139*^9}, {3.6410329983493247`*^9, 3.6410330353224397`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     GraphicsBox[
      TagBox[{{
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{0., 2.6937955301856953`*^-10}, {
           0.10298574998777865`, 0.025746437756498874`}, {
           0.13068035128327116`, 0.03215737701557175}, {0.1585823118568767, 
           0.037595361867406085`}, {0.18665746124787994`, 
           0.04205373262057022}, {0.21487141689786476`, 
           0.045527029279438636`}, {0.24318962625771473`, 
           0.048010998230838986`}, {0.27157740910279454`, 
           0.049502597453288555`}, {0.3000000000044903, 
           0.05000000024244167}, {0.7000000000044898, 0.0500000002065244}, {
           0.7284225909060962, 0.049502597412266924`}, {0.7568103737509082, 
           0.04801099818471932}, {0.7851285831103121, 0.04552702922823337}, {
           0.8133425387596731, 0.04205373256429801}, {0.8414176881498757, 
           0.03759536180609191}, {0.8693196487225047, 0.03215737694924692}, {
           0.8970142500168459, 0.025746437685200352`}, {1., 
           1.7958636867904636`*^-10}},
           SplineDegree->17]], InsetBox[
           StyleBox["\<\"a\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {0.5000000000043636, 0.0485930742416706},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQOnpkxe/rPpky3Diedv2rQF9kdsPyIfLFqwX2Bt
cqPry7b9Nzu06uY+37S/RMr+fJn10v2xl2W9bi05uJ9r1ropk5dt2/+0qMl5
RvaJ/aca2NM9GQ7vF2l66fbY5uz+E2pCnPY7Tu+3XPp+/7mt5/c/OpG2QTDl
0v49x79ZT1t8fn+EY9eBD7uu7Q+ZuOHBevaz+80Xrv20sP3W/iOaYZnrxE/s
/7R94nP5mrv7k7PPCH21OLi/J6pu157o+/ubVy9N1/64cT/E9Q/2//v9K+Hs
jK+2N59UgeWzT4VlAeXtZwh3g/V/E1MSAeq3nxW2BGx+pNvyLKD59o789WD7
My7+fgi0395sahTYfWph1rZA99mnbPzJAXK/q5nuQaD77ad+/pAG8t+0SAUP
oP/sld51gP1/OG6zC9D/9idWcYDDR0TayxsYPvYfWN83gMKvTra2ARh+9gwX
zr4EhW/PnVMuwPC1Rw9/AL/s1G8=
           "],
           SplineDegree->24]], InsetBox[
           StyleBox["\<\"b\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {-0.4460555994731605, 3.0943220312508723`*^-10},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{1., 1.7958636867904636`*^-10}, {2., 0.}},
           SplineDegree->1]], InsetBox[
           StyleBox["\<\"a\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {1.5, 8.979318433952318*^-11},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{1., 1.7958636867904636`*^-10}, {
           0.8970142500122213, -0.0257464373075329}, {
           0.8693196487167288, -0.03215737656660578}, {
           0.8414176881431233, -0.03759536141844011}, {
           0.8133425387521201, -0.04205373217160424}, {
           0.7851285831021353, -0.04552702883047266}, {
           0.7568103737422853, -0.04801099778187301}, {
           0.7284225908972056, -0.04950259700432258}, {
           0.6999999999955098, -0.04999999979347569}, {
           0.29999999999551036`, -0.04999999975755842}, {
           0.2715774090939039, -0.04950259696330095}, {
           0.24318962624909202`, -0.04801099773575335}, {
           0.21487141688968808`, -0.0455270287792674}, {
           0.18665746124032703`, -0.04205373211533203}, {
           0.15858231185012447`, -0.037595361357125934`}, {
           0.13068035127749553`, -0.03215737650028094}, {
           0.10298574998315435`, -0.025746437236234376`}, {0., 
           2.6937955301856953`*^-10}},
           SplineDegree->17]], InsetBox[
           StyleBox["\<\"b\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {0.4999999999956364, -0.04859307379270463},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQUOMMbLO7zhCkA+/wx3o2DRAnuGeY2uL8UYHLbO
Dayf+3yTvWem7e23IQwOMvfXe91actC+gXvZHJOtDA6TdIRcZmSfsC/TKZzG
YsDo8Nm1zP2xzVl78WcTPzTvZnQI4ak8cG7refuwObxmTT5MDpobamymLT5v
7/NbUCLuOpPDewXjh+vZz9pf8Aiz+xLA7KBw+mrmOvET9s4LP/1pXs/s4HzU
U/irxUH7NUwB08tfMzukV8/N0P640R7iahaHuZbWp6euu7HXQdUfLN/wKy4T
KL9f78cHsH6xvUtA+vdrfQsGm/93iXoW0Pz9x/X4wfafdawE2b8/p58L7L6d
uVtB7tufc70P7H6t84tB7t9/ISoP7L/tUyeD/Lf/4IbFYP8LLlUG+X//ma3W
4PAJ5d8BCp/9m7c0gMNvEUcYKPz2N12AhO/V3+Dw3Y8e/gCpk6gO
           "],
           SplineDegree->24]], InsetBox[
           StyleBox["\<\"\[CapitalSigma]\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {2.44605559947316, -8.010488955759261*^-11},
           Background->GrayLevel[1]]}}, {
         {RGBColor[1, 1, 0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{0., 2.6937955301856953`*^-10}, 0.1], 
          InsetBox["\<\"\\!\\(\\*SubscriptBox[\\(A\\), \\(0\\)]\\)\"\>", {0., 2.6937955301856953`*^-10},
           BaseStyle->{
             GrayLevel[0], 12}]}, 
         {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{1., 1.7958636867904636`*^-10}, 0.1], 
          InsetBox["\<\"\\!\\(\\*SubscriptBox[\\(A\\), \\(1\\)]\\)\"\>", {1., 1.7958636867904636`*^-10},
           BaseStyle->{
             GrayLevel[0], 12}]}, 
         {GrayLevel[0.85], EdgeForm[GrayLevel[0]], DiskBox[{2., 0.}, 0.1], 
          DiskBox[{2., 0.}, 0.06999999999999999], 
          InsetBox["\<\"\\!\\(\\*SubscriptBox[\\(A\\), \\(2\\)]\\)\"\>", {2., 0.},
           BaseStyle->{
             GrayLevel[0], 12}]}}},
       Annotation[#, 
        VertexCoordinateRules -> {{0., 2.6937955301856953`*^-10}, {1., 
         1.7958636867904636`*^-10}, {2., 0.}}]& ],
      AspectRatio->Automatic,
      FrameTicks->None,
      ImageSize->400,
      PlotRange->All,
      PlotRangePadding->Scaled[0.1]], 
     GraphicsBox[
      TagBox[{{
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{0., 0.029945404196222936`}, {
           0.10376607004466129`, 0.05261022492826195}, {0.13165515919533224`, 
           0.05819241912012285}, {0.15972249090213908`, 
           0.06279536127811203}, {0.18793369218068365`, 0.0664134143555507}, {
           0.21625421385502258`, 0.06904214746163373}, {0.2446493728687176, 
           0.07067834128777195}, {0.27308439475984425`, 
           0.07131999205015538}, {0.3015244562479413, 0.070966313943711}, {
           0.7015607042987799, 0.058988152265221805`}, {0.7299709759315851, 
           0.05763957842595846}, {0.758316664739329, 0.05529776040052192}, {
           0.7865630568443508, 0.051965566123609364`}, {0.8146755599738515, 
           0.047647076405718636`}, {0.8426197458237249, 
           0.04234757993553806}, {0.8703613922215794, 
           0.036073566803090706`}, {0.8978665250373206, 0.0288327205515706}, {
           1.0000906201270983`, 0.}},
           SplineDegree->17]], InsetBox[
           StyleBox["\<\"a\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {0.5015004493061312, 0.06357017962584259},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{0., 
           0.029945404196222936`}, {-0.02254198670633001, 
           0.13373785010290024`}, {-0.02809116906263598, 
           0.1616334257169873}, {-0.03266089263912286, 
           0.18970608483754953`}, {-0.036245561070634036`, 
           0.21792144795590962`}, {-0.038840784351259705`, 
           0.24624496079927854`}, {-0.040443384210608224`, 
           0.27464193664804815`}, {-0.041051398006112017`, 
           0.3030775988152856}, {-0.04066408112660136, 
           0.3315171232364083}, {-0.028212787660530814`, 
           0.7315375330456423}, {-0.02683061443812884, 
           0.7599460909261132}, {-0.024455277567357436`, 
           0.7882888913949295}, {-0.021089686032157218`, 
           0.8165312241116683}, {-0.016737961543367708`, 
           0.8446385017749082}, {-0.01140543349102563, 
           0.8725763024799702}, {-0.005098632417665616, 0.9003104118741054}, {
           0.0021747179793846216`, 0.9278068650574982}, {
           0.031128233665176586`, 1.0299964287193093`}},
           SplineDegree->17]], InsetBox[
           StyleBox["\<\"b\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {-0.033031436623026315`, 0.531483533020283},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{1.0000906201270983`, 0.}, {
           0.8963245500824372, -0.022664820732039015`}, {
           0.8684354609317662, -0.028247014923899916`}, {
           0.8403681292249593, -0.03284995708188909}, {
           0.8121569279464147, -0.03646801015932777}, {
           0.7838364062720758, -0.039096743265410794`}, {
           0.7554412472583809, -0.040732937091549015`}, {
           0.7270062253672542, -0.04137458785393244}, {
           0.6985661638791573, -0.041020909747488066`}, {
           0.2985299158283183, -0.02904274806899887}, {
           0.27011964419551315`, -0.027694174229735524`}, {
           0.24177395538776922`, -0.025352356204298987`}, {
           0.2135275632827476, -0.022020161927386428`}, {
           0.18541506015324682`, -0.0177016722094957}, {
           0.15747087430337348`, -0.012402175739315124`}, {
           0.12972922790551894`, -0.006128162606867771}, {
           0.10222409508977767`, 0.0011126836446523347`}, {0., 
           0.029945404196222936`}},
           SplineDegree->17]], InsetBox[
           StyleBox["\<\"a\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {0.49859017082096724`, -0.03362477542961967},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{1.0000906201270983`, 0.}, {
           0.9774534583305471, 0.10366186823846248`}, {0.9718781814425639, 
           0.13152292823312137`}, {0.967281171617977, 0.15956200591189518`}, {
           0.9636680586383644, 0.1877447628920101}, {0.9610432673445823, 
           0.2160366848321637}, {0.9594100122178343, 0.24440312370091513`}, {
           0.9587702934430177, 0.2728093402087996}, {0.9591248944591741, 
           0.3012205463522037}, {0.9711089360472085, 0.7008506012238015}, {
           0.9724574225880772, 0.7292320028884967}, {0.9747981432139237, 
           0.7575488424606558}, {0.9781282313339938, 0.78576644139317}, {
           0.982443608717119, 0.8138502426751346}, {0.9877389904861681, 
           0.8417658531524944}, {0.9940078915902345, 0.8694790856480207}, {
           1.0012426347466294`, 0.896956000829035}, {1.0300507240971837`, 
           0.999075137178996}},
           SplineDegree->17]], InsetBox[
           StyleBox["\<\"b\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {0.9665225400224704, 0.5009934221392793},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{0.031128233665176586`, 
           1.0299964287193093`}, {0.053670220371506594`, 
           0.9262039828126322}, {0.059219402727812565`, 0.898308407198545}, {
           0.06378912630429945, 0.8702357480779829}, {0.06737379473581062, 
           0.8420203849596227}, {0.06996901801643629, 0.8136968721162539}, {
           0.07157161787578481, 0.7852998962674843}, {0.0721796316712886, 
           0.7568642341002466}, {0.07179231479177794, 0.7284247096791241}, {
           0.0593410213257074, 0.32840429986989}, {0.05795884810330543, 
           0.2999957419894192}, {0.05558351123253402, 0.2716529415206027}, {
           0.0522179196973338, 0.24341060880386395`}, {0.04786619520854429, 
           0.21530333114062417`}, {0.042533667156202215`, 
           0.18736553043556206`}, {0.0362268660828422, 
           0.15963142104142697`}, {0.028953515685791964`, 
           0.13213496785803408`}, {0., 0.029945404196222936`}},
           SplineDegree->17]], InsetBox[
           StyleBox["\<\"b\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {0.0641596702882029, 0.5284582998952495},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{0.031128233665176586`, 
           1.0299964287193093`}, {0.13479912861961676`, 
           1.0525306717831335`}, {0.1626621232386105, 1.0580783503555664`}, {
           0.19070216869731732`, 1.0626477110717671`}, {0.21888492542776034`, 
           1.0662331580109607`}, {0.24717587908894303`, 
           1.0688303002138284`}, {0.2755403828352385, 1.0704359570599484`}, {
           0.3039436997470523, 1.0710481621629788`}, {0.33235104537179505`, 
           1.070666165778816}, {0.7319200415445973, 1.0582976491626903`}, {
           0.7602966264958695, 1.056921919107651}, {0.7886076990586883, 
           1.0545541401855574`}, {0.8168185877485798, 1.0511972121244202`}, {
           0.8448947437724161, 1.0468552460252543`}, {0.8728017833389965, 
           1.0415335593273713`}, {0.9005055297675576, 1.0352386692963154`}, {
           0.9279720553426434, 1.0279782850424166`}, {1.0300507240971837`, 
           0.999075137178996}},
           SplineDegree->17]], InsetBox[
           StyleBox["\<\"a\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {0.5320920394897058, 1.0630764974641485`},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{1.0300507240971837`, 
           0.999075137178996}, {1.052687885893735, 0.8954132689405335}, {
           1.058263162781718, 0.8675522089458746}, {1.062860172606305, 
           0.8395131312671008}, {1.0664732855859178`, 0.811330374286986}, {
           1.0690980768796996`, 0.7830384523468323}, {1.0707313320064478`, 
           0.7546720134780809}, {1.0713710507812644`, 0.7262657969701964}, {
           1.071016449765108, 0.6978545908267924}, {1.0590324081770737`, 
           0.29822453595519455`}, {1.057683921636205, 0.26984313429049944`}, {
           1.0553432010103587`, 0.24152629471834033`}, {1.0520131128902885`, 
           0.21330869578582606`}, {1.0476977355071635`, 
           0.18522489450386154`}, {1.0424023537381142`, 
           0.15730928402650166`}, {1.0361334526340478`, 
           0.12959605153097536`}, {1.028898709477653, 0.10211913634996099`}, {
           1.0000906201270983`, 0.}},
           SplineDegree->17]], InsetBox[
           StyleBox["\<\"b\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {1.063618804201812, 0.49808171503971677`},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{1.0300507240971837`, 
           0.999075137178996}, {0.9263798291427437, 0.9765408941151718}, {
           0.89851683452375, 0.9709932155427392}, {0.8704767890650431, 
           0.9664238548265383}, {0.8422940323346002, 0.9628384078873449}, {
           0.8140030786734174, 0.960241265684477}, {0.785638574927122, 
           0.9586356088383571}, {0.7572352580153081, 0.9580234037353267}, {
           0.7288279123905654, 0.9584054001194896}, {0.32925891621776304`, 
           0.970773916735615}, {0.3008823312664909, 0.9721496467906542}, {
           0.2725712587036721, 0.9745174257127478}, {0.2443603700137805, 
           0.9778743537738852}, {0.2162842139899442, 0.982216319873051}, {
           0.1883771744233639, 0.9875380065709339}, {0.1606734279948028, 
           0.9938328966019899}, {0.13320690241971692`, 1.0010932808558888`}, {
           0.031128233665176586`, 1.0299964287193093`}},
           SplineDegree->17]], InsetBox[
           StyleBox["\<\"a\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {0.5290869182726543, 0.9659950684341571},
           Background->GrayLevel[1]]}}, {
         {RGBColor[1, 1, 0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{0., 0.029945404196222936`}, 0.1], 
          DiskBox[{0., 0.029945404196222936`}, 0.06999999999999999], 
          InsetBox["1", {0., 0.029945404196222936`},
           BaseStyle->{
             GrayLevel[0], 12}]}, 
         {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{1.0000906201270983`, 0.}, 0.1], InsetBox["4", {1.0000906201270983`, 0.},
           BaseStyle->{
             GrayLevel[0], 12}]}, 
         {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{0.031128233665176586`, 1.0299964287193093`}, 0.1], 
          InsetBox["2", {0.031128233665176586`, 1.0299964287193093`},
           BaseStyle->{
             GrayLevel[0], 12}]}, 
         {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{1.0300507240971837`, 0.999075137178996}, 0.1], 
          InsetBox["3", {1.0300507240971837`, 0.999075137178996},
           BaseStyle->{
             GrayLevel[0], 12}]}}},
       Annotation[#, 
        VertexCoordinateRules -> {{0., 0.029945404196222936`}, {
         1.0000906201270983`, 0.}, {0.031128233665176586`, 
         1.0299964287193093`}, {1.0300507240971837`, 0.999075137178996}}]& ],
      AspectRatio->Automatic,
      FrameTicks->None,
      ImageSize->180,
      PlotRange->All,
      PlotRangePadding->Scaled[0.1]]},
    {
     GraphicsBox[
      TagBox[{{
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{1.7041246958762375`, 
           1.7677378523306166`}, {1.8438501191334251`, 0.7738797301478361}},
           SplineDegree->1]], InsetBox[
           StyleBox["\<\"a\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {1.7739874075048312`, 1.2708087912392263`},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{1.7041246958762375`, 
           1.7677378523306166`}, {1.5823917645138401`, 1.7373375518466254`}, {
           1.549655884962952, 1.7297684041382266`}, {1.5166752075723247`, 
           1.7233493134037707`}, {1.4834901225123254`, 1.7180881408574251`}, {
           1.450141270283552, 1.7139913296553744`}, {1.416669491945972, 
           1.711063897005132}, {1.3831157791024415`, 1.7093094280211596`}, {
           1.3495212236978644`, 1.7087300713343159`}, {0.8767366584942888, 
           1.7088504575398438`}, {0.8431424024918851, 1.7094469226660371`}, {
           0.8095895874882092, 1.7112184791373095`}, {0.7761193043286141, 
           1.714162957396413}, {0.7427725427848694, 1.7182767514537818`}, {
           0.7095901413565606, 1.7235548233036506`}, {0.6766127372577451, 
           1.729990709093908}, {0.6438807166501149, 1.7375765270421244`}, {
           0.5221632828672981, 1.7680388178444362`}},
           SplineDegree->17]], InsetBox[
           StyleBox["\<\"b\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {1.113129364532278, 1.7104531966597236`},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{1.8438501191334251`, 
           0.7738797301478361}, {1.1113543033753264`, 0.9630679277108047}},
           SplineDegree->1]], InsetBox[
           StyleBox["\<\"a\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {1.4776022112543759`, 0.8684738289293203},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{1.8438501191334251`, 
           0.7738797301478361}, {1.7167218455068256`, 0.000460992441551733}},
           SplineDegree->1]], InsetBox[
           StyleBox["\<\"b\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {1.7802859823201254`, 0.3871703612946939},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{0.5221632828672981, 
           1.7680388178444362`}, {0., 1.0127035637128734`}},
           SplineDegree->1]], InsetBox[
           StyleBox["\<\"a\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {0.26108164143364904`, 1.3903711907786547`},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{0.5221632828672981, 
           1.7680388178444362`}, {0.6438962142296959, 1.7984391183284278`}, {
           0.676632093780584, 1.8060082660368266`}, {0.7096127711712111, 
           1.8124273567712827`}, {0.7427978562312105, 1.8176885293176281`}, {
           0.7761467084599838, 1.8217853405196789`}, {0.809618486797564, 
           1.8247127731699215`}, {0.8431721996410942, 1.8264672421538939`}, {
           0.8767667550456716, 1.8270465988407376`}, {1.3495513202492468`, 
           1.8269262126352097`}, {1.383145576251651, 1.8263297475090163`}, {
           1.4166983912553268`, 1.824558191037744}, {1.4501686744149218`, 
           1.8216137127786407`}, {1.4835154359586664`, 1.8174999187212717`}, {
           1.5166978373869753`, 1.8122218468714024`}, {1.5496752414857906`, 
           1.8057859610811455`}, {1.5824072620934209`, 1.798200143132929}, {
           1.7041246958762375`, 1.7677378523306166`}},
           SplineDegree->17]], InsetBox[
           StyleBox["\<\"b\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {1.1131586142112582`, 1.8253234735153294`},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[CompressedData["
1:eJwBoQFe/iFib1JlAgAAABkAAAACAAAAFUE0cxvI8T9QBavUc9HuP0PonRub
bfA/dyFTbsnO7z+vLOp7yBDvP5Z6lo79XfA/cLwcUauQ7T8inByZYQrxP1KF
oWKFc+w/FewomoDh8T/v64Nvo8vrP0jyIU+M1fI/udOUo8uj6z9OBllA29bz
Pw7Y95SM/us/Phg+EerU9D99KNRBE9bsPxTAZMxqv/U/FFlVwIoc7j+05ivC
UIf2P6dH63z/vO8/9bonyccf9z+ZYK+4W87wPye8KgIHf/c/QQHInnTO8T9I
QjmZ8Z73P4am8PlazvI/yOVaMnt99z9vYLqRor3zP/ZeY5DJHPc/Qb7qO/CM
9D+CJdVMEYP2P1yGPSb2LvU/OeqD5C+69T9zjDFpTpn1P6ew7aMJz/Q/sQTm
3CXF9T9ruBPatdDzP+jjaTmsr/U/RXaL6YbP8j8BdllQQlr1Pz0KHiH+2/E/
M79ZaGPK9D9oRIGRvAXxPxSbcS5LCfQ/tIguR4Ja8D86RtEEXiPzP//Y2cWY
yu8/FUE0cxvI8T9QBavUc9HuP0En03s=
           "],
           SplineDegree->24]], InsetBox[
           StyleBox["\<\"\[CapitalSigma]\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {1.112771684391026, 1.4324271655721732`},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{1.7167218455068256`, 
           0.000460992441551733}, {2.226983054820887, 1.0061447901968754`}},
           SplineDegree->1]], InsetBox[
           StyleBox["\<\"a\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {1.9718524501638564`, 0.5033028913192136},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{1.7167218455068256`, 
           0.000460992441551733}, {
           1.5922323874458713`, -0.03071181495428854}, {
           1.5587548408125063`, -0.0384748818309143}, {
           1.5250261652904828`, -0.04506182220184196}, {
           1.4910876670947844`, -0.05046456929389265}, {
           1.4569809094021728`, -0.05467650656996759}, {
           1.422747661450362, -0.05769247583206705}, {
           1.3884298473848324`, -0.05950878353833655}, {
           1.3540694949159413`, -0.06012320532640747}, {
           0.8705022946319937, -0.06030760230302812}, {
           0.8361414835652478, -0.059719385714107176`}, {
           0.8018222942677812, -0.057929251114485325`}, {
           0.7675867561341446, -0.0549393908133321}, {
           0.7334767961145169, -0.0507534663778586}, {
           0.6995341873683782, -0.04537660414913691}, {
           0.6658004981065246, -0.03881538896406678}, {
           0.632317040684074, -0.03107785609117819}, {0.5078038447969546, 0.}},
           SplineDegree->17]], InsetBox[
           StyleBox["\<\"b\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {1.1122852461917232`, -0.05851454566842939},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{0., 1.0127035637128734`}, {
           1.1113543033753264`, 0.9630679277108047}},
           SplineDegree->1]], InsetBox[
           StyleBox["\<\"a\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {0.5556771516876632, 0.9878857457118391},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{0., 1.0127035637128734`}, {
           0.5078038447969546, 0.}},
           SplineDegree->1]], InsetBox[
           StyleBox["\<\"b\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {0.2539019223984773, 0.5063517818564367},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{2.226983054820887, 
           1.0061447901968754`}, {1.1113543033753264`, 0.9630679277108047}},
           SplineDegree->1]], InsetBox[
           StyleBox["\<\"a\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {1.6691686790981066`, 0.9846063589538401},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{2.226983054820887, 
           1.0061447901968754`}, {1.7041246958762375`, 1.7677378523306166`}},
           SplineDegree->1]], InsetBox[
           StyleBox["\<\"b\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {1.9655538753485624`, 1.386941321263746},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{0.5078038447969546, 0.}, {
           0.3740844340221853, 0.7675875823978846}},
           SplineDegree->1]], InsetBox[
           StyleBox["\<\"a\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {0.44094413940956995`, 0.3837937911989423},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{0.5078038447969546, 0.}, {
           0.6322933028579091, 0.031172807395840274`}, {0.6657708494912743, 
           0.03893587427246603}, {0.6994995250132977, 
           0.045522814643393694`}, {0.7334380232089963, 
           0.05092556173544438}, {0.7675447809016077, 0.05513749901151932}, {
           0.8017780288534186, 0.05815346827361878}, {0.8360958429189479, 
           0.059969775979888285`}, {0.8704561953878391, 0.0605841977679592}, {
           1.354023395671787, 0.06076859474457985}, {1.3883842067385332`, 
           0.06018037815565891}, {1.4227033960359994`, 0.05839024355603706}, {
           1.4569389341696362`, 0.055400383254883834`}, {1.491048894189264, 
           0.051214458819410336`}, {1.5249915029354024`, 
           0.045837596590688645`}, {1.5587251921972562`, 
           0.03927638140561851}, {1.5922086496197068`, 
           0.031538848532729924`}, {1.7167218455068256`, 
           0.000460992441551733}},
           SplineDegree->17]], InsetBox[
           StyleBox["\<\"b\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {1.112240444112057, 0.05897553810998113},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{0.3740844340221853, 
           0.7675875823978846}, {1.1113543033753264`, 0.9630679277108047}},
           SplineDegree->1]], InsetBox[
           StyleBox["\<\"a\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {0.7427193686987559, 0.8653277550543447},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{0.3740844340221853, 
           0.7675875823978846}, {0.5221632828672981, 1.7680388178444362`}},
           SplineDegree->1]], InsetBox[
           StyleBox["\<\"b\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {0.4481238584447417, 1.2678132001211604`},
           Background->GrayLevel[1]]}}, {
         {RGBColor[1, 1, 0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{1.7041246958762375`, 1.7677378523306166`}, 0.1], 
          DiskBox[{1.7041246958762375`, 1.7677378523306166`}, 
           0.06999999999999999], InsetBox["1", {1.7041246958762375`, 1.7677378523306166`},
           BaseStyle->{
             GrayLevel[0], 12}]}, 
         {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{1.8438501191334251`, 0.7738797301478361}, 0.1], 
          InsetBox["2", {1.8438501191334251`, 0.7738797301478361},
           BaseStyle->{
             GrayLevel[0], 12}]}, 
         {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{0.5221632828672981, 1.7680388178444362`}, 0.1], 
          InsetBox["3", {0.5221632828672981, 1.7680388178444362`},
           BaseStyle->{
             GrayLevel[0], 12}]}, 
         {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{1.1113543033753264`, 0.9630679277108047}, 0.1], 
          DiskBox[{1.1113543033753264`, 0.9630679277108047}, 
           0.06999999999999999], InsetBox["4", {1.1113543033753264`, 0.9630679277108047},
           BaseStyle->{
             GrayLevel[0], 12}]}, 
         {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{1.7167218455068256`, 0.000460992441551733}, 0.1], 
          InsetBox["5", {1.7167218455068256`, 0.000460992441551733},
           BaseStyle->{
             GrayLevel[0], 12}]}, 
         {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{0., 1.0127035637128734`}, 0.1], InsetBox["6", {0., 1.0127035637128734`},
           BaseStyle->{
             GrayLevel[0], 12}]}, 
         {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{2.226983054820887, 1.0061447901968754`}, 0.1], 
          InsetBox["7", {2.226983054820887, 1.0061447901968754`},
           BaseStyle->{
             GrayLevel[0], 12}]}, 
         {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{0.5078038447969546, 0.}, 0.1], InsetBox["8", {0.5078038447969546, 0.},
           BaseStyle->{
             GrayLevel[0], 12}]}, 
         {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{0.3740844340221853, 0.7675875823978846}, 0.1], 
          DiskBox[{0.3740844340221853, 0.7675875823978846}, 
           0.06999999999999999], InsetBox["9", {0.3740844340221853, 0.7675875823978846},
           BaseStyle->{
             GrayLevel[0], 12}]}}},
       Annotation[#, 
        VertexCoordinateRules -> {{1.7041246958762375`, 
         1.7677378523306166`}, {1.8438501191334251`, 0.7738797301478361}, {
         0.5221632828672981, 1.7680388178444362`}, {1.1113543033753264`, 
         0.9630679277108047}, {1.7167218455068256`, 0.000460992441551733}, {
         0., 1.0127035637128734`}, {2.226983054820887, 1.0061447901968754`}, {
         0.5078038447969546, 0.}, {0.3740844340221853, 
         0.7675875823978846}}]& ],
      AspectRatio->Automatic,
      FrameTicks->None,
      ImageSize->380,
      PlotRange->All,
      PlotRangePadding->Scaled[0.1]], "\[SpanFromLeft]"}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.64032820064262*^9, {3.641028175022446*^9, 3.641028190682342*^9}, 
   3.6410283084100757`*^9, 3.6410327451698437`*^9, 3.641032803314169*^9, {
   3.64103300403465*^9, 3.6410330362234907`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Through", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Map", "@", "DFAPlot"}], ",", 
     RowBox[{"DFAPlot", "@*", 
      RowBox[{"(", 
       RowBox[{"Apply", "@", "DFAUnion"}], ")"}]}]}], "}"}], "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
     "DFA", "@", 
      "\"\<\!\(\*SubscriptBox[\(w\), \(2\)]\) \[Congruent] 1 (mod 5)\>\""}], 
     ",", 
     RowBox[{"DFA", "@", "\"\<Dif ab\>\""}]}], "}"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.640333859169269*^9, 3.6403338935592365`*^9}, {
  3.641032823760339*^9, 3.6410328248354006`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     GraphicsBox[
      TagBox[{{
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQjQ4aUiTU/UNj7RuKmOaKP8vZf4Mn6U5vyEz7Ars1
8icMNu0PaH7fXVo/x75uhv1nO/ND+y+sKp/MqNVm/+LkulsPRE7vr1jN+MOw
deb+t7++FMyrvbjf74VRw6Ppm/eHuIdc411yZb/HT/5t058f3P/ZRlCff++1
/cmPw/5K3z21f6Paid7+udf3/z5kkeD86+J+jw0uTL3G1/fPu1riNsXy2v7a
dY1xHe1X92tM0J7vefXm/oQnU2df231pv5L+hYfezXf2r465vX+/8Ln9xxT+
VEzhubdfMHhvKmf10f0v3nxaOT3w3v6ix6vWyO/ZsX9p6tSIMz539/cc+Su/
dP/s/WoiVZtkhW/v//RNzciUaZH9w91ii20vXd/PuGfxu8nnt9p3fA5p/XXm
8n7m0O2aXSX77DV3bF99bPW5/Qec1bjs5A/a/1u44m7AxKP7WUr1Ys7lH7Bf
+eWsPDP3rv2qgiwfBUp22d+ZoP079P6y/X39IUzR/9fZM2x48jNGKX5/Qo5Z
cGNOjj16+AMAStDJZA==
           "],
           SplineDegree->24]], InsetBox[
           StyleBox["0",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {-0.3974477585267776, -0.20962623080250256`},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{0., 0.}, {0.5705918755818113, 
           0.7699995303036284}},
           SplineDegree->1]], InsetBox[
           StyleBox["1",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {0.2852959377909057, 0.3849997651518142},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{0.5705918755818113, 
           0.7699995303036284}, {1.1001356715938173`, 0.04142866392483047}},
           SplineDegree->1]], InsetBox[
           StyleBox["0",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {0.8353637735878143, 0.40571409711422945`},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{0.5705918755818113, 
           0.7699995303036284}, {0.6794883881666919, 0.7972693612586028}, {
           0.7087727071412461, 0.8040604865905231}, {0.7382767145986106, 
           0.8098228007986406}, {0.7679642781127102, 0.8145492469978033}, {
           0.7977990404634095, 0.8182340368906711}, {0.8277444641618042, 
           0.8208726578564216}, {0.8577638761962834, 0.8224618784771827}, {
           0.8878205129445589, 0.8229997524954275}, {1.3108198743214836`, 
           0.823166821855005}, {1.3408769265735883`, 0.8226526905570576}, {
           1.3708975846107039`, 0.821087183579795}, {1.4008450832846102`, 
           0.8184722181395552}, {1.4306827470425538`, 0.814810996684195}, {
           1.460374034842388, 0.810108002971176}, {1.4898825849029875`, 
           0.8043689965764781}, {1.5191722592351253`, 0.7976010058410682}, {
           1.6280902790241245`, 0.7704172037025725}},
           SplineDegree->17]], InsetBox[
           StyleBox["1",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {1.0993207812685786`, 0.8215954651946307},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{1.1001356715938173`, 
           0.04142866392483047}, {2.199438648450946, 0.00021545335017375544`}},
           SplineDegree->1]], InsetBox[
           StyleBox["0",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {1.6497871600223817`, 0.02082205863750211},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{1.1001356715938173`, 
           0.04142866392483047}, {0., 0.}},
           SplineDegree->1]], InsetBox[
           StyleBox["1",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {0.5500678357969087, 0.020714331962415233`},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{1.6280902790241245`, 
           0.7704172037025725}, {1.519193766439244, 0.7431473727475981}, {
           1.48990944746469, 0.7363562474156778}, {1.4604054400073256`, 
           0.7305939332075605}, {1.430717876493226, 0.7258674870083978}, {
           1.4008831141425266`, 0.7221826971155298}, {1.3709376904441317`, 
           0.7195440761497794}, {1.3409182784096527`, 0.7179548555290184}, {
           1.3108616416613772`, 0.7174169815107736}, {0.8878622802844525, 
           0.7172499121511959}, {0.8578052280323478, 0.7177640434491434}, {
           0.8277845699952323, 0.7193295504264059}, {0.7978370713213256, 
           0.7219445158666458}, {0.7679994075633823, 0.725605737322006}, {
           0.738308119763548, 0.7303087310350249}, {0.7087995697029487, 
           0.736047737429723}, {0.6795098953708109, 0.7428157281651329}, {
           0.5705918755818113, 0.7699995303036284}},
           SplineDegree->17]], InsetBox[
           StyleBox["0",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {1.0993613733373575`, 0.7188212688115704},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{1.6280902790241245`, 
           0.7704172037025725}, {1.1001356715938173`, 0.04142866392483047}},
           SplineDegree->1]], InsetBox[
           StyleBox["1",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {1.364112975308971, 0.4059229338137015},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{2.199438648450946, 
           0.00021545335017375544`}, {1.6280902790241245`, 
           0.7704172037025725}},
           SplineDegree->1]], InsetBox[
           StyleBox["0",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {1.9137644637375353`, 0.3853163285263731},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[CompressedData["
1:eJwBoQFe/iFib1JlAgAAABkAAAACAAAA9j1FSnOYAUAAyIQvaj0sP7/gl/hW
nAFAIIO6a7Axbj/y42/p5fMBQD5U8JGSHa8/qAZLFrloAkBRaaz9b4S6P0ni
z5lx8QJAKODSCLt4wD/SPXMDGIMDQHSi+DT0KME/rC7Bh/0RBEDPqX7YgYm+
P24jr+WrkgRA+2k0ne/ltT/HturC0PoEQF5A578sMaI/QYY5nhFCBUBoUECw
oV6bv+plxle3YgVAAW7VjYSjuL+yuheNI1oFQGH1q7zHbsW/tNTQXgYpBUDW
sJUQwgfOv3KyElBQ0wRAHdeoEBO20r8XTpRh4V8EQJnqb64UgtW/43mJ5fvX
A0Ayw3NTdy7Xv4MyMV+GRgNAk/VOfN6Y17+r7CCuK7cCQPB1/kTBuNa/xxl4
eWs1AkBU9qypGaDUv0yUkhKuywFAA1kDZfN50b/js6C/boIBQFT1kA/wDcu/
+jh2ko1fAUBkyCZgfjDCvwJ6zcPWZQFArM3AgzUjsr9SjE1AyZQBQAComoCF
I2u/9j1FSnOYAUAAyIQvaj0sP1S9wQI=
           "],
           SplineDegree->24]], InsetBox[
           StyleBox["1",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {2.596957183651039, -0.20927653115232864`},
           Background->GrayLevel[1]]}}, {
         {RGBColor[1, 1, 0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{0., 0.}, 0.1], InsetBox["1", {0., 0.},
           BaseStyle->{
             GrayLevel[0], 12}]}, 
         {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{0.5705918755818113, 0.7699995303036284}, 0.1], 
          DiskBox[{0.5705918755818113, 0.7699995303036284}, 
           0.06999999999999999], InsetBox["2", {0.5705918755818113, 0.7699995303036284},
           BaseStyle->{
             GrayLevel[0], 12}]}, 
         {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{1.1001356715938173`, 0.04142866392483047}, 0.1], 
          InsetBox["3", {1.1001356715938173`, 0.04142866392483047},
           BaseStyle->{
             GrayLevel[0], 12}]}, 
         {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{1.6280902790241245`, 0.7704172037025725}, 0.1], 
          InsetBox["4", {1.6280902790241245`, 0.7704172037025725},
           BaseStyle->{
             GrayLevel[0], 12}]}, 
         {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{2.199438648450946, 0.00021545335017375544`}, 0.1], 
          InsetBox["5", {2.199438648450946, 0.00021545335017375544`},
           BaseStyle->{
             GrayLevel[0], 12}]}}},
       Annotation[#, 
        VertexCoordinateRules -> {{0., 0.}, {0.5705918755818113, 
         0.7699995303036284}, {1.1001356715938173`, 0.04142866392483047}, {
         1.6280902790241245`, 0.7704172037025725}, {2.199438648450946, 
         0.00021545335017375544`}}]& ],
      AspectRatio->Automatic,
      FrameTicks->None,
      PlotRange->All,
      PlotRangePadding->Scaled[0.1]], ",", 
     GraphicsBox[
      TagBox[{{
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{1.8671265561598163`, 
           0.43496987611022164`}, {0.9338442447601524, 0.8700109361387254}},
           SplineDegree->1]], InsetBox[
           StyleBox["\<\"a\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {1.4004854004599843`, 0.6524904061244735},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{1.8671265561598163`, 
           0.43496987611022164`}, {0.9338782521192621, 0.}},
           SplineDegree->1]], InsetBox[
           StyleBox["\<\"b\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {1.400502404139539, 0.21748493805511082`},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{0.9338442447601524, 
           0.8700109361387254}, {0., 0.4349540438432587}},
           SplineDegree->1]], InsetBox[
           StyleBox["\<\"a\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {0.4669221223800762, 0.652482489990992},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{0.9338442447601524, 
           0.8700109361387254}, {0.9562474292219867, 0.7804130829532665}, {
           0.9618259583107163, 0.7563186949738008}, {0.9665580134765417, 
           0.732043869066981}, {0.9704377995530362, 0.7076183336808435}, {
           0.9734605651150315, 0.6830720018315418}, {0.9756226082975062, 
           0.6584349344700247}, {0.9769212813291166, 0.633737303667541}, {
           0.9773549937748217, 0.6090093556650628}, {0.9773685967184655, 
           0.2610049812095731}, {0.9769368174272717, 0.23627699937638427`}, {
           0.9756400751827123, 0.2115792671231996}, {0.9734799580552678, 
           0.18694203081523392`}, {0.9704591114575156, 
           0.16239546273063862`}, {0.9665812349043958, 0.1379696241096703}, {
           0.9618510774825568, 0.11369442833984297`}, {0.9562744320343303, 
           0.08959960432214993}, {0.9338782521192621, 0.}},
           SplineDegree->17]], InsetBox[
           StyleBox["\<\"b\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {0.9761377542552592, 0.4350071205914808},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{0.9338782521192621, 0.}, {
           0.911475067657428, 0.08959785318545897}, {0.9058965385686985, 
           0.11369224116492463`}, {0.901164483402873, 0.13796706707174441`}, {
           0.8972846973263786, 0.16239260245788203`}, {0.8942619317643832, 
           0.1869389343071836}, {0.8920998885819085, 0.21157600166870086`}, {
           0.8908012155502981, 0.23627363247118452`}, {0.890367503104593, 
           0.2610015804736627}, {0.8903539001609493, 0.6090059549291524}, {
           0.8907856794521433, 0.6337339367623414}, {0.8920824216967025, 
           0.658431669015526}, {0.8942425388241471, 0.6830689053234917}, {
           0.8972633854218991, 0.707615473408087}, {0.901141261975019, 
           0.7320413120290553}, {0.905871419396858, 0.7563165077988827}, {
           0.9114480648450846, 0.7804113318165756}, {0.9338442447601524, 
           0.8700109361387254}},
           SplineDegree->17]], InsetBox[
           StyleBox["\<\"a\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {0.8915847426241557, 0.4350038155472447},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[{{0.9338782521192621, 0.}, {0., 
           0.4349540438432587}},
           SplineDegree->1]], InsetBox[
           StyleBox["\<\"b\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {0.46693912605963106`, 0.21747702192162935`},
           Background->GrayLevel[1]]}, 
         {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
          ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQM7y1JqPK/dtmfY8MpyxST+/eZirTau02/bG0yL
SXDIb9v/+cal80qm1+0b3h366X16yf6g//tkeIwu27/4tkDJWX/b/q23r/w5
duC8/RFR1d2Rcw7tT1jW/ng+x2n7Q8zThWeqnd5fk63j1j3nhH3Wj+7KRuZL
+zebr/zkuu6EvUDZ4zUrnK/tb74ccTvZ5rR9zFLFh5V/bu7f9cZtqRnnBfuW
nXlX2h/e2f9jQpZiV9pl+wU3WRYmbr+3/+m8hguihdftN3zY5BcecX9/Z6GU
xb2rt+2nZcdtrgfKF86tLAuVfWD/VHBx/0Gg/uiOHVMXKj2yF3m6a/EpoPkP
ns21Dr342P4Qd/cfTpdr+9uzvgc/YXtqv02Rv+M10H18l+9HVq16ah/Ie3RV
rvrp/U1qNqY/1j21F+KV3y8799B+sd6DqxhFntqrsWtN6jLYtv+T562DLM8e
2+fYnFZQPbtkv198Q4eV7SP7A+6uvmbFbfvTHwqv22r9wJ5hwvxbE0/w758Z
WrvVV/SOPXr4AwANUM12
           "],
           SplineDegree->24]], InsetBox[
           StyleBox["\<\"\[CapitalSigma]\"\>",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->12,
            FontColor->GrayLevel[0]], {-0.43692654480306164`, 0.43493122864604644`},
           Background->GrayLevel[1]]}}, {
         {RGBColor[1, 1, 0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{1.8671265561598163`, 0.43496987611022164`}, 0.1], 
          DiskBox[{1.8671265561598163`, 0.43496987611022164`}, 
           0.06999999999999999], InsetBox["1", {1.8671265561598163`, 0.43496987611022164`},
           BaseStyle->{
             GrayLevel[0], 12}]}, 
         {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{0.9338442447601524, 0.8700109361387254}, 0.1], 
          DiskBox[{0.9338442447601524, 0.8700109361387254}, 
           0.06999999999999999], InsetBox["2", {0.9338442447601524, 0.8700109361387254},
           BaseStyle->{
             GrayLevel[0], 12}]}, 
         {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{0.9338782521192621, 0.}, 0.1], 
          DiskBox[{0.9338782521192621, 0.}, 0.06999999999999999], 
          InsetBox["3", {0.9338782521192621, 0.},
           BaseStyle->{
             GrayLevel[0], 12}]}, 
         {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
          DiskBox[{0., 0.4349540438432587}, 0.1], InsetBox["4", {0., 0.4349540438432587},
           BaseStyle->{
             GrayLevel[0], 12}]}}},
       Annotation[#, 
        VertexCoordinateRules -> {{1.8671265561598163`, 
         0.43496987611022164`}, {0.9338442447601524, 0.8700109361387254}, {
         0.9338782521192621, 0.}, {0., 0.4349540438432587}}]& ],
      AspectRatio->Automatic,
      FrameTicks->None,
      PlotRange->All,
      PlotRangePadding->Scaled[0.1]]}], "}"}], ",", 
   GraphicsBox[
    TagBox[{{
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.6622012715213017, 
         0.21096036796032624`}, {1.6016583304974608`, 0.}},
         SplineDegree->1]], InsetBox[
         StyleBox["0",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.1319298010093812`, 0.10548018398016312`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.6622012715213017, 
         0.21096036796032624`}, {1.7916183244447577`, 0.5202708051518088}},
         SplineDegree->1]], InsetBox[
         StyleBox["1",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.2269097979830297`, 0.3656155865560675},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.6622012715213017, 
         0.21096036796032624`}, {0., 0.9343162852313882}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.33110063576065085`, 0.5726383265958572},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.6622012715213017, 
         0.21096036796032624`}, {0.3974874603566221, 1.223029248644332}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.5298443659389619, 0.7169948083023291},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQzb/EtyZlwU97Bij4eC2tafP6n/YNlz35vp0PsH+y
okds6elf9gZCFSveCbTYn/N5p+T27Lc9w9cDF0w/Be/fJ3Ba9vWLP/YnbNb5
Gj2av3/OZ/t/V/b9tW/4K3D+2a3N+3/ZrrG9HfbPvkGl+HB648H9U52CdM4s
+Wd/XodPrkPm1P7gnIyw9EX/7K1Cb8/ma7+4f/rv74/v+v+zt2+xdHI4f3V/
w9+q5ec2/7X3SWJa/Lrv5v47rgY6+279se8p+npcrPLO/jdvFq0Wvfbb/sZ0
zRPPA+/tn36ooWPvrl/2v/yfHi38fG8/2w3pP/nzf9obbJy6cX/Avf2ec8PT
ns36Yb/Ea1vUvbI7+68eZVvPdui7fddO6/IL3Tf3G7BFqpmpfbc/rcmr0HT6
6v4djcwBXy5/sz+WszX2V9PF/XG7+RxuXfxmv6GF6X2UyKn9Ty7IyAsrfLef
4Bdy/G7lwf2RU/W3ROz4bm93a/dNv3Ob9ydksliX9P2wFzCpf3Fm7/z9rj5l
hpYTgeEbUOVusytoP3r4AwCkYNaO
         "],
         SplineDegree->24]], InsetBox[
         StyleBox["0",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.7248664073986961`, -0.42263688541907135`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{1.6016583304974608`, 0.}, {
         1.7916183244447577`, 0.5202708051518088}},
         SplineDegree->1]], InsetBox[
         StyleBox["1",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.6966383274711092`, 0.2601354025759044},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{1.6016583304974608`, 0.}, {
         1.3520643303755917`, 1.2193714340192734`}},
         SplineDegree->1]], InsetBox[
         StyleBox[
          RowBox[{"{", 
           RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>"}], "}"}],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.4768613304365261`, 0.6096857170096367},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{1.7916183244447577`, 0.5202708051518088}, {
         2.374353450178748, 0.7770582892566034}},
         SplineDegree->1]], InsetBox[
         StyleBox["0",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {2.082985887311753, 0.6486645472042061},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{1.7916183244447577`, 0.5202708051518088}, {
         1.8458410854478777`, 0.6195649835198704}, {1.8608242359409894`, 
         0.6458964785170717}, {1.8767195457527162`, 0.6716875923642106}, {
         1.8935075485069217`, 0.6969067396735795}, {1.911167684580669, 
         0.7215230355229472}, {1.9296783262828012`, 0.7455063332791387}, {
         1.9490168043405474`, 0.7688272615174601}, {1.9691594356617097`, 
         0.791457259991755}, {2.2581179485572025`, 1.1048794476290995`}, {
         2.279040065233931, 1.1267908022483888`}, {2.300716044752563, 
         1.1479566790172515`}, {2.3231193413725357`, 1.168351156898393}, {
         2.3462225186359333`, 1.187949259557143}, {2.3699972829678653`, 
         1.2067269859490142`}, {2.394414518326521, 1.224661339712862}, {
         2.4194443218604738`, 1.2417303573336453`}, {2.5140146066834905`, 
         1.3038262742451718`}},
         SplineDegree->17]], InsetBox[
         StyleBox["1",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {2.1147410966578977`, 0.9471519957110587},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{1.7916183244447577`, 0.5202708051518088}, {
         1.3520643303755917`, 1.2193714340192734`}},
         SplineDegree->1]], InsetBox[
         StyleBox[
          RowBox[{"{", 
           RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>"}], "}"}],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.5718413274101746`, 0.8698211195855411},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0., 0.9343162852313882}, {
         1.3520643303755917`, 1.2193714340192734`}},
         SplineDegree->1]], InsetBox[
         StyleBox[
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.6760321651877959, 1.0768438596253307`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0., 0.9343162852313882}, {
         0.18168630339275982`, 1.881631503468851}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.09084315169637991, 1.4079738943501197`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0., 0.9343162852313882}, {
         0.033502213947743026`, 0.9742834923526582}, {0.04265954940958347, 
         0.9848275507286317}, {0.05218021213447133, 0.9950447392399366}, {
         0.0620525425320074, 1.0049225452877644`}, {0.07226445033788464, 
         1.0144488719019884`}, {0.0828034294203712, 1.023612052555862}, {
         0.09365657309609024, 1.0324008654535641`}, {0.10481058993633963`, 
         1.040804547273103}, {0.2638055740789883, 1.15628973263828}, {
         0.275246804187244, 1.1642979917129204`}, {0.2869612359279106, 
         1.1719010206349931`}, {0.2989345230858345, 1.1790895082666517`}, {
         0.31115200243556296`, 1.1858546511428643`}, {0.3235987116988339, 
         1.1921881642526808`}, {0.33625940786830405`, 1.1980822911855675`}, {
         0.3491185858750751, 1.203529813630385}, {0.3974874603566221, 
         1.223029248644332}},
         SplineDegree->17]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.1847142797774644, 1.0979879045198735`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.3974874603566221, 1.223029248644332}, {
         1.3520643303755917`, 1.2193714340192734`}},
         SplineDegree->1]], InsetBox[
         StyleBox[
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.8747758953661069, 1.2212003413318027`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.3974874603566221, 1.223029248644332}, {
         0.3639852464088791, 1.1830620415230622`}, {0.35482791094703864`, 
         1.1725179831470889`}, {0.34530724822215075`, 1.162300794635784}, {
         0.3354349178246147, 1.1524229885879564`}, {0.32522301001873744`, 
         1.1428966619737322`}, {0.3146840309362509, 1.1337334813198585`}, {
         0.30383088726053187`, 1.1249446684221565`}, {0.29267687042028245`, 
         1.1165409866026177`}, {0.13368188627763383`, 1.0010558012374404`}, {
         0.12224065616937818`, 0.9930475421628002}, {0.11052622442871157`, 
         0.9854445132407272}, {0.09855293727078768, 0.9782560256090688}, {
         0.08633545792105918, 0.9714908827328563}, {0.07388874865778819, 
         0.9651573696230396}, {0.06122805248831814, 0.9592632426901532}, {
         0.048368874481547086`, 0.9538157202453356}, {0., 0.9343162852313882}},
         SplineDegree->17]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.21277318057915767`, 1.059357629355847},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.3974874603566221, 1.223029248644332}, {
         0.18168630339275982`, 1.881631503468851}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.28958688187469095`, 1.5523303760565916`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[CompressedData["
1:eJwBoQFe/iFib1JlAgAAABkAAAACAAAAJtIQNQ6i9T9joeyei4LzPw/Qt+2e
TvM/IvqIuZyN9T/kt4ZRMNHyP5xrrG+oFvY/PDUJXE908j+Y5yFqjrf2P77+
JgdePPI/6UKOAbdo9z9SubQcACzyP/WgLSLGIfg/5BnsUvtD8j8A+PpHANr4
PzWKD/gtg/I/fXe9+7OI+T/VvOydnObyPy6CrtaiJfo/RBIcIJZp8z9XfSUY
Zan6P/X2z1HsBfQ/2qZNGsMN+z8nk4WmPrT0PyIiRW0ATvs/9E61T1Ns9T/0
aV0NFWf7P7CQ/Zp6JfY/lkheAdJX+z8VZWrg99b2P2EpcqbvIPs/JHRJDWt4
9z9M2wf9BMX6P3CLltA1Avg/Y2DBX2hI+j+NW9Oi1234P/xmXR77sPk/+ESP
UTy2+D/HqYl14gX5P3YIzFn51/g/fEWvPTFP+D/w9hksd9H4Pwlwb2OGlfc/
MxLtZwSj+D9IYPjDpOH2P1022SXSTvg/cXYzVwk89j+2d4Z92dj3P0VDSqaE
rPU/JtIQNQ6i9T9joeyei4LzPyoezhk=
         "],
         SplineDegree->24]], InsetBox[
         StyleBox["\<\"\[CapitalSigma]\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.339683343535187, 1.6849625577230924`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{2.374353450178748, 0.7770582892566034}, {
         2.4108095381087216`, 1.8951638401824913`}},
         SplineDegree->1]], InsetBox[
         StyleBox["0",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {2.3925814941437347`, 1.3361110647195473`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{2.374353450178748, 0.7770582892566034}, {
         1.6016583304974608`, 0.}},
         SplineDegree->1]], InsetBox[
         StyleBox["1",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.9880058903381044`, 0.3885291446283017},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{2.374353450178748, 0.7770582892566034}, {
         1.3520643303755917`, 1.2193714340192734`}},
         SplineDegree->1]], InsetBox[
         StyleBox[
          RowBox[{"{", 
           RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>"}], "}"}],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.86320889027717, 0.9982148616379384},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{2.5140146066834905`, 
         1.3038262742451718`}, {2.4597918456803702`, 1.2045320958771104`}, {
         2.444808695187259, 1.178200600879909}, {2.428913385375532, 
         1.1524094870327701`}, {2.4121253826213267`, 1.127190339723401}, {
         2.3944652465475795`, 1.1025740438740335`}, {2.375954604845447, 
         1.078590746117842}, {2.3566161267877006`, 1.0552698178795206`}, {
         2.3364734954665387`, 1.0326398194052258`}, {2.047514982571046, 
         0.7192176317678813}, {2.0265928658943175`, 0.6973062771485924}, {
         2.0049168863756854`, 0.6761404003797293}, {1.9825135897557122`, 
         0.6557459224985879}, {1.9594104124923148`, 0.6361478198398379}, {
         1.9356356481603831`, 0.6173700934479667}, {1.9112184128017269`, 
         0.5994357396841188}, {1.8861886092677747`, 0.5823667220633356}, {
         1.7916183244447577`, 0.5202708051518088}},
         SplineDegree->17]], InsetBox[
         StyleBox["0",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {2.19089183447035, 0.8769450836859222},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{2.5140146066834905`, 
         1.3038262742451718`}, {2.374353450178748, 0.7770582892566034}},
         SplineDegree->1]], InsetBox[
         StyleBox["1",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {2.4441840284311196`, 1.0404422817508876`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{2.5140146066834905`, 
         1.3038262742451718`}, {1.3520643303755917`, 1.2193714340192734`}},
         SplineDegree->1]], InsetBox[
         StyleBox[
          RowBox[{"{", 
           RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>"}], "}"}],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.9330394685295411`, 1.2615988541322225`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{2.4108095381087216`, 
         1.8951638401824913`}, {2.5140146066834905`, 1.3038262742451718`}},
         SplineDegree->1]], InsetBox[
         StyleBox["0",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {2.462412072396106, 1.5994950572138316`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQPa/uRlOYJ7ODU8iiwOlB/+wTHdexKzgxOxhZxn40
j/xnvyZ1w+7bJ5kcNi+0nBP85Z/9ojyDGo0cJofCjq0ty878t+/7LBjWZcDk
UFv7Pyg7g8GBm4+r5qQ0k8MDrUmLmL4xOOSuPCMyQZ/JIeH18n17mxkdduZl
8nhkMTl47N4TasfG5BD3cN8y6+NMDge/M63gKWZyqPivY/bNjtnBXXtVZd5B
Jof1FTNN7h5ndjDzfugh9ZrJQWsOd/nXMBaHJ4pL0ne8YXLYfqZ51ZEHLA4m
1dHz1I8xOVz8d5fZNorV4fv1T1frq5gcGP3lrRfsZHUoWrZ20iV+Jof0TQFz
3b+zOviuFIhY18foMLd2qYYjH5vD3Fnzv+QxMjo8mHFBYusfVocTF2POZhQz
OBhuD9nHfYTVQXxWYyHDg//207SOT7+QwepgLbhQpZ75v33Qo+p/IZ9YHH4z
Vkz5m/TPPvDq10eSWSwOL0+cnRXN/c/+oeLSZTy3mR1E/QrXLmD+Z19WqL1r
WQCzw6v7z9qzff7Zo4c/AGc2sFc=
         "],
         SplineDegree->24]], InsetBox[
         StyleBox["1",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {2.5882866509016167`, 2.298033597753263},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{2.4108095381087216`, 
         1.8951638401824913`}, {1.3520643303755917`, 1.2193714340192734`}},
         SplineDegree->1]], InsetBox[
         StyleBox[
          RowBox[{"{", 
           RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>"}], "}"}],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.8814369342421566`, 1.5572676371008822`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.18168630339275982`, 1.881631503468851}, {
         1.3520643303755917`, 1.2193714340192734`}},
         SplineDegree->1]], InsetBox[
         StyleBox[
          RowBox[{"{", 
           RowBox[{"0", ",", "1"}], "}"}],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.7668753168841758, 1.5505014687440624`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[CompressedData["
1:eJwBoQFe/iFib1JlAgAAABkAAAACAAAAIP2ZLX9Bxz84WqiiKRv+PzAN4YHQ
zcY/P1ugwpwU/j8WH9PflmS8P8McU7zHxv0/N7fxA1ECpT+W/qPjSsn9P0Di
eBhefZq/5Dn8ofIb/j+SswFlOZ21v9QbxbYduP4/D5qky1KiwL/kj/paRZH/
P+utBhYnU8S/nDfAPP9KAEA1FUxWUJXFvySyOK2v2ABAlXNOQfdOxL+5+32I
VmYBQE5uTRtJmsC/SKLtHJfoAUC+67dmvIa1v+hAH83+VAJAoO3rw/oQmr/8
Wb2Y26ICQLq8fohhPaU/w1Z8qe7LAkA44AQkMIK8P8CSzpHszAJAOJq1wHXb
xj87CvDzwKUCQGJt/svJbc4/gWkaJJBZAkDkC48sTS7SP2ENVqR27gFA2hxS
8gkX1D+/J7GmC20BQCRcMm3nydQ/S4+3prDfAED2XMfGjDjUP32tZUC8UQBA
1F/NtqJu0j87VEu7Ip3/P8EeOTXIIc8/JzBHzmrB/j/6XVR7V7THPxQcE3Pw
If4/IP2ZLX9Bxz84WqiiKRv+P+bnxrA=
         "],
         SplineDegree->24]], InsetBox[
         StyleBox[
          RowBox[{"{", 
           RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>"}], "}"}],
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {-0.0031057484693363976`, 2.281195231675742},
         Background->GrayLevel[1]]}}, {
       {RGBColor[1, 1, 0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{0.6622012715213017, 0.21096036796032624`}, 0.1], 
        DiskBox[{0.6622012715213017, 0.21096036796032624`}, 
         0.06999999999999999], InsetBox["1", {0.6622012715213017, 0.21096036796032624`},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{1.6016583304974608`, 0.}, 0.1], InsetBox["2", {1.6016583304974608`, 0.},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{1.7916183244447577`, 0.5202708051518088}, 0.1], 
        DiskBox[{1.7916183244447577`, 0.5202708051518088}, 
         0.06999999999999999], InsetBox["3", {1.7916183244447577`, 0.5202708051518088},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{0., 0.9343162852313882}, 0.1], 
        DiskBox[{0., 0.9343162852313882}, 0.06999999999999999], 
        InsetBox["7", {0., 0.9343162852313882},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{0.3974874603566221, 1.223029248644332}, 0.1], 
        DiskBox[{0.3974874603566221, 1.223029248644332}, 0.06999999999999999],
         InsetBox["8", {0.3974874603566221, 1.223029248644332},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{1.3520643303755917`, 1.2193714340192734`}, 0.1], 
        InsetBox["10", {1.3520643303755917`, 1.2193714340192734`},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{2.374353450178748, 0.7770582892566034}, 0.1], InsetBox["4", {2.374353450178748, 0.7770582892566034},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{2.5140146066834905`, 1.3038262742451718`}, 0.1], 
        InsetBox["5", {2.5140146066834905`, 1.3038262742451718`},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{2.4108095381087216`, 1.8951638401824913`}, 0.1], 
        InsetBox["6", {2.4108095381087216`, 1.8951638401824913`},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{0.18168630339275982`, 1.881631503468851}, 0.1], 
        InsetBox["9", {0.18168630339275982`, 1.881631503468851},
         BaseStyle->{
           GrayLevel[0], 12}]}}},
     Annotation[#, 
      VertexCoordinateRules -> {{0.6622012715213017, 0.21096036796032624`}, {
       1.6016583304974608`, 0.}, {1.7916183244447577`, 0.5202708051518088}, {
       0., 0.9343162852313882}, {0.3974874603566221, 1.223029248644332}, {
       1.3520643303755917`, 1.2193714340192734`}, {2.374353450178748, 
       0.7770582892566034}, {2.5140146066834905`, 1.3038262742451718`}, {
       2.4108095381087216`, 1.8951638401824913`}, {0.18168630339275982`, 
       1.881631503468851}}]& ],
    AspectRatio->Automatic,
    FrameTicks->None,
    PlotRange->All,
    PlotRangePadding->Scaled[0.1]]}], "}"}]], "Output",
 CellChangeTimes->{{3.640333890877083*^9, 3.640333894215274*^9}, {
  3.641032810329571*^9, 3.641032841403348*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Intersection", "Subsection",
 CellChangeTimes->{{3.6403286433079395`*^9, 3.640328647066154*^9}}],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "DFAIntersection", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DFAIntersection", "[", 
   RowBox[{"A_", ",", "B_"}], "]"}], ":=", 
  RowBox[{"DFAComplement", "[", 
   RowBox[{"DFAUnion", "[", 
    RowBox[{
     RowBox[{"DFAComplement", "[", "A", "]"}], ",", 
     RowBox[{"DFAComplement", "[", "B", "]"}]}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DFAIntersection", "[", 
   RowBox[{"A_", ",", "B__"}], "]"}], ":=", 
  RowBox[{"Fold", "[", 
   RowBox[{"DFAIntersection", ",", "A", ",", 
    RowBox[{"{", "B", "}"}]}], "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6403286511023846`*^9, 3.640328708204651*^9}, {
  3.6409443217341137`*^9, 3.64094434178526*^9}, {3.6410329471963987`*^9, 
  3.641032987199687*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DFAPlot", "[", 
    RowBox[{"#", ",", 
     RowBox[{"ArrowSize", "\[Rule]", ".02"}], ",", 
     RowBox[{"EdgeLabelPosition", "\[Rule]", ".35"}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], "&"}], "/@", 
  RowBox[{"ComposeList", "[", 
   RowBox[{
    RowBox[{"{", "DFAMinimize", "}"}], ",", 
    RowBox[{
     RowBox[{"MapAt", "[", 
      RowBox[{
       RowBox[{"Range", "@*", "Length"}], ",", "1"}], "]"}], "[", 
     RowBox[{"DFAIntersection", "@@", 
      RowBox[{"DFA", "/@", 
       RowBox[{"{", 
        RowBox[{"\"\<1 b\>\"", ",", "\"\<2nd b\>\""}], "}"}]}]}], "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.6403287130069256`*^9, 3.6403287962126846`*^9}, {
  3.64103308988356*^9, 3.6410332019439697`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[{{
       {GrayLevel[0], Arrowheads[{{0.02, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{2.6479515602322508`, 0.7730780589331935}, {
         2.5607964264192793`, 1.5351756394169291`}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {2.6174472633977106`, 1.0398122121025009`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{0.02, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{2.6479515602322508`, 0.7730780589331935}, {
         2.3712599216204597`, 0.03105167579756518}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {2.551109486718124, 0.5133688248357237},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{0.02, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{2.5607964264192793`, 
         1.5351756394169291`}, {1.2475527955718628`, 1.581523054075125}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {2.1011611556226835`, 1.5513972345472977`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{0.02, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{2.5607964264192793`, 
         1.5351756394169291`}, {3.707240410325098, 1.1272134727983603`}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {2.962051820786316, 1.3923888811004301`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{0.02, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{2.3712599216204597`, 
         0.03105167579756518}, {0.9855860711134726, 0.06977538419359897}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.8862740739430142`, 0.04460497373617701},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{0.02, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{2.3712599216204597`, 
         0.03105167579756518}, {3.608121995709819, 0.28026005732867804`}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {2.8041616475517355`, 0.11827460933345468`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{0.02, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{1.2475527955718628`, 1.581523054075125}, {
         1.1384209621180372`, 1.5558266020738962`}, {1.1090810093056427`, 
         1.549457844381643}, {1.0795361806395152`, 1.5441195858017926`}, {
         1.049822658537898, 1.5398183638948388`}, {1.0199768320114126`, 
         1.5365594462022427`}, {0.9900352520988353, 1.5343468237954814`}, {
         0.9600345871044397, 1.533183206388334}, {0.9300115776917333, 
         1.5330700190183992`}, {0.507589882051193, 1.5388695882161874`}, {
         0.47758129624803497`, 1.539806969499695}, {0.44762388441824313`, 
         1.5417937714617476`}, {0.4177543342548334, 1.5448275609422017`}, {
         0.38800922585000935`, 1.5489046225754661`}, {0.358424986896927, 
         1.5540199633405656`}, {0.3290378480780959, 1.5601673186759042`}, {
         0.2998837986950527, 1.5673391601512336`}, {0.19149855647051095`, 
         1.5960219770695963`}},
         SplineDegree->17]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.9524751845298136, 1.536897774745704},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{0.02, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{1.2475527955718628`, 1.581523054075125}, {
         0.7131895283175371, 0.712075473953759}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.0605256520328488`, 1.2772164010326468`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{0.02, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{3.707240410325098, 1.1272134727983603`}, {
         4.427788451309861, 0.6393316722644085}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {3.959432224669765, 0.9564548426114772},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{0.02, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{3.707240410325098, 1.1272134727983603`}, {
         3.608121995709819, 0.28026005732867804`}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {3.6725489652097503`, 0.8307797773839716},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{0.02, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.19149855647051095`, 
         1.5960219770695963`}, {0.300630389924337, 1.6217184290708255`}, {
         0.32997034273673126`, 1.628087186763079}, {0.3595151714028587, 
         1.633425445342929}, {0.38922869350447614`, 1.6377266672498831`}, {
         0.4190745200309614, 1.6409855849424793`}, {0.44901609994353886`, 
         1.6431982073492406`}, {0.47901676493793444`, 1.644361824756388}, {
         0.5090397743506407, 1.6444750121263227`}, {0.931461469991181, 
         1.6386754429285342`}, {0.9614700557943391, 1.6377380616450266`}, {
         0.9914274676241308, 1.6357512596829737`}, {1.0212970177875407`, 
         1.6327174702025196`}, {1.0510421261923646`, 1.6286404085692554`}, {
         1.080626365145447, 1.623525067804156}, {1.1100135039642782`, 
         1.6173777124688171`}, {1.1391675533473211`, 1.610205870993488}, {
         1.2475527955718628`, 1.581523054075125}},
         SplineDegree->17]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.48657616751256016`, 1.6406472563990173`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{0.02, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.19149855647051095`, 
         1.5960219770695963`}, {0., 0.6276446820016642}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.12447406170583213`, 1.2570899237958202`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{0.02, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.7131895283175371, 0.712075473953759}, {
         0.9855860711134726, 0.06977538419359897}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.8085283182961145, 0.487270442537703},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{0.02, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.7131895283175371, 0.712075473953759}, {
         0.1774161987690157, 0.}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.5256688629755546, 0.46284905806994336`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{0.02, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0., 0.6276446820016642}, {
         0.9855860711134726, 0.06977538419359897}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.3449551248897154, 0.4323904277688414},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{0.02, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0., 0.6276446820016642}, {
         0.1774161987690157, 0.}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.06209566956915549, 0.40796904330108175`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{0.02, 0.8}}], 
        ArrowBox[BSplineCurveBox[CompressedData["
1:eJwBoQFe/iFib1JlAgAAABkAAAACAAAAdWrazOuJ7z9YZi2xzNyxP3DyW6Ra
JvE/TJe8qGKPpD/smZHAKAfyP5BQZols84o/psqigiXF8j+oh1jSElqbv9Qa
BO86VPM/QDJKH+2ws78LbxDgTqvzP1vM+1u9L8G/oLr0QNfE8z9+bDRYivnI
v5mXbkM0n/M/1bBECIRb0L/5XEfTyjzzPwg9GsQU9dO/ccDImN2j8j80Zj5+
1w7XvxeBIgUn3vE/FDzBqE122b/eeA7lOvjwP4f+s1hQBNu/ePa3jbkA8D9L
eGzfjZ/bv5ZDBVfDDu4/jEQKHiY+27/q6WazHzjsP/DFbFhL5tm/JUdEpXib
6j96TIxM3a3XvzOUN04OU+k/qm2I+QS51L+23w/+xHPoP1dJk7/nN9G/q3x3
+NAL6D/aWlydLsfKvx9JpSPPIeg/c8XUieD0wr83wSZXWbToP4aeaW2K8La/
URmNJB266T+AsE/kIy2jv1cM86ZzIus/AGhDR6CrdD+s9RaxcNbsPwjGE6xU
BKI/dWrazOuJ7z9YZi2xzNyxP06J1Mc=
         "],
         SplineDegree->24]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.1580019886359956`, -0.3086332511479291},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{0.02, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.9855860711134726, 0.06977538419359897}, {
         0.1774161987690157, 0.}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.7027266157929127, 0.04535399972583933},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{0.02, 0.8}}], 
        ArrowBox[BSplineCurveBox[CompressedData["
1:eJwBoQFe/iFib1JlAgAAABkAAAACAAAAWGqcEG/dDEAxgybhx+/RPwPFgH/6
Ug1A8HK+L6M40j/ImZ6nndgNQE4B076u/dE/jGZMYapXDkDCnT9H9azQPzlu
yPZExw5AA/Ko9eG7zD/CIcdjpR8PQPEpltCtc8Y/yQP0OKJaD0B1Cazk3eK9
P3h3k5cedA9AD3/kDK7sqj95qC+aU2oPQKxh0BGTyIm/LB8KDPA9D0Czid/p
jQGzv+4RNjkM8g5AsCb2f7JkwL+GfeKw8osOQBbnaZ1PzcW/o2HT08ESDkAH
wI9VFFrJv2zAwsTsjg1ArcFGDaTLyr+d0pKWpAkNQJGQmHc6CMq/PsBLPDSM
DEAGvBR/dx3Hv/TwPqtaHwxAoVQBFmw/wr/PpN2/rsoLQMAuCcTxibe/TDqZ
xxeUC0Byc4Q7/oagv0XlpiFkfwtAsMXRZrSHoD9lw29PBY4LQLgr9dgU5bg/
g0NDMfa+C0CzenDGrjvEPzptIzvNDgxAXHkukWLyyj/mdbRc+XcMQEebvldo
D9A/WGqcEG/dDEAxgybhx+/RP5j2wiQ=
         "],
         SplineDegree->24]], InsetBox[
         StyleBox["\<\"\[CapitalSigma]\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {3.8794040551844633`, -0.023683960164675583`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{0.02, 0.8}}], 
        ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/UJn/8dJW4/ZM0CBsGSU3zy54/YN20/9nngoaf9/
kdC/hzaetVfpL/O85Llq/7YiG+l4+Yv25n07Y6Y92rP/zdwrfPwml+z35mca
fHQ9vv97r9Cl/QyX7B898BPv1L2wX2Rdzt++zgv27ecTb4pVX9n/W164V/Pm
aXv2OPcCN+Mb+29JOAt92XfE/sGhIxO2c97ev01ZbvPKNTvsFYwnJ6seubP/
WsaESRviZ9kLCNSyCtvf3R9hlP5IaNay/W/+VtsuKbizP0sqTfbopN37uWrS
vqZn3trv2mwyb2Lpkf1H7s4yZwm+vl9oUf4dXqWT+29fKvh+L+fy/kXadq33
8k7vf5emVC3Ad27/zXm3z5zQOb3/Z6iCx5zvR/bX/l+7UTLxxP4H5/Yw/Vq4
Y7/x/tnKlq6H938IML8crr94/7ovf8vlWnbsP1Cjy7lpbb39ikc9sy/YzN9v
EmlY9sV/kf3x3n1MNVVL7F0EtlWs3rHM3vuYie1svT32BwI2yAddXWDP/tum
0NLrmL2DktYb9reJ9ujhDwAZhcvc
         "],
         SplineDegree->24]], InsetBox[
         StyleBox["\<\"\[CapitalSigma]\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.11769843209398, -0.38954996259346264`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{0.02, 0.8}}], 
        ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/frtfx2+bYIOKm1fN6aXPrGPnM4UXAPkz74SPLtu
6hP7Zokf29NPCDpYyF3+mn7ymf3S5oKAuLeCDtrLenua9r2wL/ZNl8pUEnJw
OG24bI7PK/uP60tfuiULOdh8/j3tePBre7tHHEcOrxJyOPAwrOT5vtf26475
7VL+LOSwxK6uM6X1tf1O3n9LZpgJO1y/2HTi9upX9gXVelE784Ud1LbPEzjg
/NJ+6/uSEx9mCjuk8X5+9Dnzuf0OpbN8dzYKO0z6/86pwuWpvayiIeuErcIO
j44vDk34/8j+qyr/ogNLhB26lydFeJx8YM9/Zanw8QZhB33ZLl7D+XftQ1dw
CrT5CDv479+cdbD0ln0uU+wUPR5hh00Nx6/qhd+wV7P/cPnlESGHP4ck+/7l
XbdvLJlsl18j5HDnrEbshfPX7WWPmsr1Wwg5HBUO0XhQeNM+RtfEbPc/QYfi
GRcylhrfsf/WvuL7tMuCDlt3+e1vvnPfXvhMhNOMXYIOm/oYtqwSeGQvpS0c
dmCroEOkWKeGZegTe/TwBwDOhcFr
         "],
         SplineDegree->24]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {4.796441186226513, 0.7786534080118993},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{0.02, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{4.427788451309861, 0.6393316722644085}, {
         3.608121995709819, 0.28026005732867804`}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {4.140905191849846, 0.5136566070369029},
         Background->GrayLevel[1]]}}, {
       {RGBColor[1, 1, 0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{2.6479515602322508`, 0.7730780589331935}, 0.1], 
        InsetBox["1", {2.6479515602322508`, 0.7730780589331935},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{2.5607964264192793`, 1.5351756394169291`}, 0.1], 
        InsetBox["2", {2.5607964264192793`, 1.5351756394169291`},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{2.3712599216204597`, 0.03105167579756518}, 0.1], 
        InsetBox["5", {2.3712599216204597`, 0.03105167579756518},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{1.2475527955718628`, 1.581523054075125}, 0.1], 
        InsetBox["3", {1.2475527955718628`, 1.581523054075125},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{3.707240410325098, 1.1272134727983603`}, 0.1], 
        DiskBox[{3.707240410325098, 1.1272134727983603`}, 
         0.06999999999999999], InsetBox["7", {3.707240410325098, 1.1272134727983603`},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{0.19149855647051095`, 1.5960219770695963`}, 0.1], 
        InsetBox["4", {0.19149855647051095`, 1.5960219770695963`},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{0.7131895283175371, 0.712075473953759}, 0.1], InsetBox["6", {0.7131895283175371, 0.712075473953759},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{0., 0.6276446820016642}, 0.1], InsetBox["8", {0., 0.6276446820016642},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{0.9855860711134726, 0.06977538419359897}, 0.1], 
        InsetBox["10", {0.9855860711134726, 0.06977538419359897},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{3.608121995709819, 0.28026005732867804`}, 0.1], 
        InsetBox["11", {3.608121995709819, 0.28026005732867804`},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{0.1774161987690157, 0.}, 0.1], InsetBox["12", {0.1774161987690157, 0.},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{4.427788451309861, 0.6393316722644085}, 0.1], 
        DiskBox[{4.427788451309861, 0.6393316722644085}, 0.06999999999999999],
         InsetBox["9", {4.427788451309861, 0.6393316722644085},
         BaseStyle->{
           GrayLevel[0], 12}]}}},
     Annotation[#, 
      VertexCoordinateRules -> {{2.6479515602322508`, 0.7730780589331935}, {
       2.5607964264192793`, 1.5351756394169291`}, {2.3712599216204597`, 
       0.03105167579756518}, {1.2475527955718628`, 1.581523054075125}, {
       3.707240410325098, 1.1272134727983603`}, {0.19149855647051095`, 
       1.5960219770695963`}, {0.7131895283175371, 0.712075473953759}, {0., 
       0.6276446820016642}, {0.9855860711134726, 0.06977538419359897}, {
       3.608121995709819, 0.28026005732867804`}, {0.1774161987690157, 0.}, {
       4.427788451309861, 0.6393316722644085}}]& ],
    AspectRatio->Automatic,
    FrameTicks->None,
    ImageSize->Large,
    PlotRange->All,
    PlotRangePadding->Scaled[0.1]], ",", 
   GraphicsBox[
    TagBox[{{
       {GrayLevel[0], Arrowheads[{{0.02, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{1.8671265561598163`, 
         0.43496987611022164`}, {0.9338442447601524, 0.8700109361387254}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.540477747169934, 0.5872342471201979},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{0.02, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{1.8671265561598163`, 
         0.43496987611022164`}, {0.9338782521192621, 0.}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.5404896497456222`, 0.28273041947164407`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{0.02, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.9338442447601524, 0.8700109361387254}, {
         0.9338782521192621, 0.}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.9338561473358408, 0.5655071084901715},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{0.02, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.9338442447601524, 0.8700109361387254}, {
         0., 0.4349540438432587}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.6069987590940991, 0.717741023835312},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{0.02, 0.8}}], 
        ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQrdfxcknIo7f2DFDwWf60fz3TO3uGinbtFewC+xex
shxeKv/B3iBSypPhSdv+iMdH2k6rfrT/cFRFn9Fy6X554em/V/77aN/Rbn77
/pJt+z1ZNV/fnvHJXqftTJ/L/0P7r4jpCjO/+GQvGKShqLL99P6GzDWyx55+
sp94ibm3JfnS/uUTb/8PmvTJvspgjX3+rmv7HVvSvKK/fLQ/rhZXbtZ+a7/i
o6fbuiQ+2t9xXyFwufru/l7xWz+aBD7Yiy2as3FK9P399Y8XJD4Gun/KQrbf
///f3y8lpy6xe8lr+8yPc3Y+Acr/P5v2dNaUl/ZMnzy35tTc3c/Pvjbx/p3n
9ia5W1J5O27tj1zkK3huwTP7DgUfq6Ld1/bznWmUP/jzqb39U9Zz81Iu7b/6
sPOE3Nen9rn5ri8id57e/8j3qonb5Gf2DtudLf0YD+//M5Htevvx5/Y7Qr+6
ua/Ytl/pRt9LzcqX9nfMOjPe2C7d/0L9vVpK62v7B58kNnW9a9t/hoGHWesQ
MLwt1Jel+gvsRw9/AIsOzq8=
         "],
         SplineDegree->24]], InsetBox[
         StyleBox["\<\"\[CapitalSigma]\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.1056760489325272`, -0.35328597941587203`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{0.02, 0.8}}], 
        ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQM7y1JqPK/dtmeQsM4+Iiuwf12Bus6XqbftF7zt
+GT/vG2/zabclfEy1+0r+vd4tlot3b+rXdnpMvNl+3VFCwreLN22P+Fk8+fL
DuftFWLCIp7+P7S/XXrf6rz8U/aZr+1aLm0/vX9D1I6Y1G/H7fne8vfeTr60
/4Hyjrt1HCfs1z95Lbx/17X9rtOut7ovOWVvtf/Ijor2W/tPtuz8rTflvH3a
n4d5TDV393/RtuXJsrxsX7BVO2Ft9P39F56EBk2OvG7PtMDl////9/eva4v6
dfvqbfslvnHCZ4DyMbYBzSKaD+y7mh/G2QL1+59a3q9v+cjevCNM+zTQ/GfG
yz8/+vDYfq2VcI7S7mv7HRjOXHyp89ReVfDWJfeUS/uZ3sdefXX5qb2Qb0fP
6h2n9x8pk9jecOOp/ZNJh0vWMhzez5US4+dr9dR+x6Xe7VbLt+0/+HyZHCPb
E/uY/knBGTZL94eKWxwLC3lkX1C6l8/7ddv+aMUCE3GPB/YMAnuzPC0F9k/f
u+3oPLE79ujhDwCbJc3g
         "],
         SplineDegree->24]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {-0.35330039326314977`, 0.2631858909108025},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{0.02, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0., 0.4349540438432587}, {
         0.9338782521192621, 0.}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.3268573882417417, 0.2827201284981182},
         Background->GrayLevel[1]]}}, {
       {RGBColor[1, 1, 0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{1.8671265561598163`, 0.43496987611022164`}, 0.1], 
        InsetBox["1", {1.8671265561598163`, 0.43496987611022164`},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{0.9338442447601524, 0.8700109361387254}, 0.1], 
        InsetBox["2", {0.9338442447601524, 0.8700109361387254},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{0.9338782521192621, 0.}, 0.1], InsetBox["3", {0.9338782521192621, 0.},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{0., 0.4349540438432587}, 0.1], 
        DiskBox[{0., 0.4349540438432587}, 0.06999999999999999], 
        InsetBox["4", {0., 0.4349540438432587},
         BaseStyle->{
           GrayLevel[0], 12}]}}},
     Annotation[#, 
      VertexCoordinateRules -> {{1.8671265561598163`, 0.43496987611022164`}, {
       0.9338442447601524, 0.8700109361387254}, {0.9338782521192621, 0.}, {0.,
        0.4349540438432587}}]& ],
    AspectRatio->Automatic,
    FrameTicks->None,
    ImageSize->Large,
    PlotRange->All,
    PlotRangePadding->Scaled[0.1]]}], "}"}]], "Output",
 CellChangeTimes->{{3.6403287486899667`*^9, 3.640328755721369*^9}, 
   3.6403287966987123`*^9, {3.641033077656861*^9, 3.6410332024629993`*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Difference", "Subsection",
 CellChangeTimes->{{3.6403298190161858`*^9, 3.640329820787287*^9}}],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "DFADifference", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DFADifference", "[", 
   RowBox[{"A_", ",", "B_"}], "]"}], ":=", 
  RowBox[{"DFAIntersection", "[", 
   RowBox[{"A", ",", 
    RowBox[{"DFAComplement", "[", "B", "]"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DFADifference", "[", 
   RowBox[{"A_", ",", "B__"}], "]"}], ":=", 
  RowBox[{"Fold", "[", 
   RowBox[{"DFADifference", ",", "A", ",", 
    RowBox[{"{", "B", "}"}]}], "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.640329823723455*^9, 3.640329830852863*^9}, {
  3.6403298730572767`*^9, 3.6403298876481113`*^9}, {3.640944330207598*^9, 
  3.6409443531119084`*^9}, {3.6410332778883133`*^9, 3.641033289276965*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Concatenation", "Subsection",
 CellChangeTimes->{{3.640070813030176*^9, 3.6400708157233305`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"DFAConcatenation", "[", 
   RowBox[{"A_", ",", "B_"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "\[CapitalSigma]", ",", "PA", ",", "PB", ",", "\[Delta]A", ",", 
      "\[Delta]B", ",", "FA", ",", "FB", ",", "Qn", ",", "\[Delta]", ",", 
      RowBox[{"M", "=", 
       RowBox[{"{", "}"}]}], ",", "Q", ",", "x"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\[CapitalSigma]", "=", 
      RowBox[{"DeleteDuplicates", "[", 
       RowBox[{
        RowBox[{"A", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
        "~", "Join", "~", 
        RowBox[{"B", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}],
        "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"PA", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"FirstPosition", "[", 
           RowBox[{
            RowBox[{
            "A", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",", 
            "#"}], "]"}], "&"}], "/@", "\[CapitalSigma]"}], "/.", 
        RowBox[{"_Missing", "\[Rule]", 
         RowBox[{
          RowBox[{"Length", "@", 
           RowBox[{
           "A", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], "+",
           "1"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"PB", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"FirstPosition", "[", 
           RowBox[{
            RowBox[{
            "B", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",", 
            "#"}], "]"}], "&"}], "/@", "\[CapitalSigma]"}], "/.", 
        RowBox[{"_Missing", "\[Rule]", 
         RowBox[{
          RowBox[{"Length", "@", 
           RowBox[{
           "B", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], "+",
           "1"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"\[Delta]A", "=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "@", "\[CapitalSigma]"}], ">", 
          RowBox[{"Length", "@", 
           RowBox[{
           "A", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}]}], 
         ",", 
         RowBox[{"ArrayPad", "[", 
          RowBox[{
           RowBox[{
           "A", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0", ",", "1"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
           RowBox[{
            RowBox[{"Length", "@", 
             RowBox[{
             "A", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
            "+", "1"}]}], "]"}], ",", 
         RowBox[{
         "A", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], "]"}],
        "\[LeftDoubleBracket]", 
       RowBox[{"All", ",", "PA"}], "\[RightDoubleBracket]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"\[Delta]B", "=", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "@", "\[CapitalSigma]"}], ">", 
          RowBox[{"Length", "@", 
           RowBox[{
           "B", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}]}], 
         ",", 
         RowBox[{"ArrayPad", "[", 
          RowBox[{
           RowBox[{
           "B", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0", ",", "1"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
           RowBox[{
            RowBox[{"Length", "@", 
             RowBox[{
             "B", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
            "+", "1"}]}], "]"}], ",", 
         RowBox[{
         "B", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], "]"}],
        "\[LeftDoubleBracket]", 
       RowBox[{"All", ",", "PB"}], "\[RightDoubleBracket]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"FA", "=", 
      RowBox[{"A", "\[LeftDoubleBracket]", "5", "\[RightDoubleBracket]"}]}], 
     ";", 
     RowBox[{"FB", "=", 
      RowBox[{"B", "\[LeftDoubleBracket]", "5", "\[RightDoubleBracket]"}]}], 
     ";", 
     RowBox[{"Qn", "=", 
      RowBox[{"Length", "@", "\[Delta]A"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\[Delta]B", ",", "FB"}], "}"}], "=", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\[Delta]B", ",", "FB"}], "}"}], "+", "Qn"}]}], ";", " ", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\[Delta]A", ",", "\[Delta]B"}], "}"}], "=", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\[Delta]A", ",", "\[Delta]B"}], "}"}], "/.", 
       RowBox[{"x_Integer", "\[Rule]", 
        RowBox[{"{", "x", "}"}]}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"\[Delta]A", "=", 
      RowBox[{"\[Delta]A", "/.", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", "#", "}"}], "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"#", ",", 
              RowBox[{"Qn", "+", "1"}]}], "}"}]}], ")"}], "&"}], "/@", "FA"}],
         ")"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"\[Delta]", "=", 
      RowBox[{"Join", "[", 
       RowBox[{"\[Delta]A", ",", "\[Delta]B"}], "]"}]}], " ", ";", 
     RowBox[{"Q", "=", 
      RowBox[{"{", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"FA", ",", "1"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", 
           RowBox[{"Qn", "+", "1"}]}], "}"}], ",", 
         RowBox[{"{", "1", "}"}]}], "]"}], "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"Q", "\[NotEqual]", 
        RowBox[{"{", "}"}]}], ",", 
       RowBox[{
        RowBox[{"Q", "=", 
         RowBox[{
         "Q", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"M", ",", " ", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"{", "Q", "}"}], ",", 
            RowBox[{"Sow", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Union", "@@", "#"}], "&"}], "/@", 
              RowBox[{"Thread", "@", 
               RowBox[{
               "\[Delta]", "\[LeftDoubleBracket]", "Q", 
                "\[RightDoubleBracket]"}]}]}], "]"}]}], "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Q", "=", 
         RowBox[{"Select", "[", 
          RowBox[{
           RowBox[{"Sow", "@", 
            RowBox[{"Flatten", "[", 
             RowBox[{"M", ",", "1"}], "]"}]}], ",", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"M", "\[LeftDoubleBracket]", 
               RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}], ",", 
              "#"}], "]"}], "&"}], ",", "1"}], "]"}]}]}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Q", "=", 
      RowBox[{"Select", "[", 
       RowBox[{
        RowBox[{"M", "\[LeftDoubleBracket]", 
         RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}], ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"#", "\[Intersection]", "FB"}], "\[NotEqual]", 
           RowBox[{"{", "}"}]}], ")"}], "&"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\[Delta]A", ",", "Q"}], "}"}], "=", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Rest", "/@", "M"}], ",", "Q"}], "}"}], "/.", 
       RowBox[{"Thread", "[", 
        RowBox[{
         RowBox[{"M", "\[LeftDoubleBracket]", 
          RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}], "\[Rule]", 
         RowBox[{"Range", "@", 
          RowBox[{"Length", "@", "M"}]}]}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Range", "@", 
        RowBox[{"Length", "@", "\[Delta]A"}]}], ",", 
       RowBox[{"DeleteDuplicates", "[", 
        RowBox[{
         RowBox[{"A", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
         "~", "Join", "~", 
         RowBox[{
         "B", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], "]"}],
        ",", "\[Delta]A", ",", "1", ",", "Q"}], "}"}]}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"DFAConcatenation", "[", 
   RowBox[{"A_", ",", "B__"}], "]"}], ":=", 
  RowBox[{"Fold", "[", 
   RowBox[{"DFAConcatenation", ",", "A", ",", 
    RowBox[{"{", "B", "}"}]}], "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.634728053904376*^9, 3.6347280756286187`*^9}, {
   3.6347398313860207`*^9, 3.6347398401555223`*^9}, {3.634740076737054*^9, 
   3.634740081231311*^9}, {3.634740398103435*^9, 3.6347404088370485`*^9}, {
   3.6347405904684377`*^9, 3.6347406233993216`*^9}, {3.634741574448718*^9, 
   3.6347416298488865`*^9}, {3.634837022748005*^9, 3.634837060307153*^9}, {
   3.634881744287056*^9, 3.6348817519264927`*^9}, {3.6348817836893096`*^9, 
   3.634881789377635*^9}, 3.634883602283327*^9, {3.6348842806981306`*^9, 
   3.6348842813291664`*^9}, {3.6348843175352373`*^9, 
   3.6348843191163273`*^9}, {3.634884475896295*^9, 3.634884479041475*^9}, {
   3.6348849510364714`*^9, 3.634884981893236*^9}, {3.634885126673517*^9, 
   3.63488517864349*^9}, {3.634885219816845*^9, 3.6348852527247267`*^9}, {
   3.63488529927839*^9, 3.6348853273759966`*^9}, {3.6348854144349766`*^9, 
   3.6348854359662075`*^9}, {3.6348854981007614`*^9, 3.634885500328889*^9}, {
   3.6348857219345646`*^9, 3.6348857482240677`*^9}, {3.6348864753336563`*^9, 
   3.6348864760886993`*^9}, {3.634898029404336*^9, 3.6348980656364083`*^9}, {
   3.6349060590826073`*^9, 3.6349060678731103`*^9}, {3.634911573886752*^9, 
   3.634911574040761*^9}, 3.634911635962302*^9, {3.634912265465308*^9, 
   3.634912320066431*^9}, {3.634912561613247*^9, 3.634912616149366*^9}, {
   3.6349133359315352`*^9, 3.6349133570967455`*^9}, {3.634913702503502*^9, 
   3.634913704011588*^9}, 3.634913976141153*^9, {3.634914496430912*^9, 
   3.634914499361079*^9}, {3.634914605451147*^9, 3.6349146740590715`*^9}, {
   3.634914932390847*^9, 3.634914933358903*^9}, {3.634914965244726*^9, 
   3.6349149655427437`*^9}, 3.6349154206737757`*^9, {3.634915561593836*^9, 
   3.6349155832830763`*^9}, 3.634987612090735*^9, {3.638526569088278*^9, 
   3.6385265959508142`*^9}, {3.638526694742465*^9, 3.638526712930505*^9}, {
   3.6385267620473146`*^9, 3.638526800559517*^9}, {3.6385324332106867`*^9, 
   3.6385324483195505`*^9}, {3.638621716634969*^9, 3.638621716910985*^9}, {
   3.6386279233819747`*^9, 3.6386279243680315`*^9}, {3.6388730902679987`*^9, 
   3.6388732487270613`*^9}, {3.6409443572321444`*^9, 
   3.6409443753921824`*^9}, {3.6409451662764187`*^9, 
   3.6409453294997544`*^9}, {3.641033297986463*^9, 3.641033303496778*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"{", 
  RowBox[{
   RowBox[{"DFAPlot", "[", 
    RowBox[{
     RowBox[{"DFA", "@", "\"\<Dif ab\>\""}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "350"}]}], "]"}], ",", 
   RowBox[{"DFAPlot", "[", 
    RowBox[{
     RowBox[{"DFA", "@", "\"\<Even both ab\>\""}], ",", 
     RowBox[{"ImageSize", "\[Rule]", "250"}]}], "]"}]}], 
  "}"}], "\[IndentingNewLine]", 
 RowBox[{"DFAPlot", "[", 
  RowBox[{
   RowBox[{"DFAConcatenation", "@@", 
    RowBox[{"DFA", "/@", 
     RowBox[{"{", 
      RowBox[{"\"\<Dif ab\>\"", ",", "\"\<Even both ab\>\""}], "}"}]}]}], ",", 
   RowBox[{"ArrowSize", "\[Rule]", ".015"}], ",", 
   RowBox[{"MultiedgeStyle", "\[Rule]", ".1"}], ",", 
   RowBox[{"ArrowPosition", "\[Rule]", ".9"}], ",", 
   RowBox[{"Method", "\[Rule]", "\"\<SpringElectricalEmbedding\>\""}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "Full"}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.6385271184096975`*^9, 3.638527175298951*^9}, {
  3.6385273407134123`*^9, 3.6385275244519215`*^9}, {3.638527603136422*^9, 
  3.6385276836780286`*^9}, {3.638527715023822*^9, 3.638527766816784*^9}, {
  3.6385278084161634`*^9, 3.6385278681285787`*^9}, {3.638528428448627*^9, 
  3.638528445505603*^9}, {3.6385284812896495`*^9, 3.638528640736769*^9}, {
  3.638533683051173*^9, 3.6385338963503733`*^9}, {3.638618371391529*^9, 
  3.63861842263846*^9}, {3.6386214664306583`*^9, 3.6386215393238277`*^9}, {
  3.6386255245737705`*^9, 3.638625566378162*^9}, {3.638770233397591*^9, 
  3.6387702334375935`*^9}, {3.639131759462102*^9, 3.6391317604941607`*^9}, {
  3.6409444701326017`*^9, 3.640944471246665*^9}, {3.6409453399993553`*^9, 
  3.640945359201453*^9}, {3.6410333323124266`*^9, 3.6410334801698833`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[{{
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{1.8671265561598163`, 
         0.43496987611022164`}, {0.9338442447601524, 0.8700109361387254}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.4004854004599843`, 0.6524904061244735},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{1.8671265561598163`, 
         0.43496987611022164`}, {0.9338782521192621, 0.}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.400502404139539, 0.21748493805511082`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.9338442447601524, 0.8700109361387254}, {
         0., 0.4349540438432587}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.4669221223800762, 0.652482489990992},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.9338442447601524, 0.8700109361387254}, {
         0.9562474292219867, 0.7804130829532665}, {0.9618259583107163, 
         0.7563186949738008}, {0.9665580134765417, 0.732043869066981}, {
         0.9704377995530362, 0.7076183336808435}, {0.9734605651150315, 
         0.6830720018315418}, {0.9756226082975062, 0.6584349344700247}, {
         0.9769212813291166, 0.633737303667541}, {0.9773549937748217, 
         0.6090093556650628}, {0.9773685967184655, 0.2610049812095731}, {
         0.9769368174272717, 0.23627699937638427`}, {0.9756400751827123, 
         0.2115792671231996}, {0.9734799580552678, 0.18694203081523392`}, {
         0.9704591114575156, 0.16239546273063862`}, {0.9665812349043958, 
         0.1379696241096703}, {0.9618510774825568, 0.11369442833984297`}, {
         0.9562744320343303, 0.08959960432214993}, {0.9338782521192621, 0.}},
         SplineDegree->17]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.9761377542552592, 0.4350071205914808},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.9338782521192621, 0.}, {
         0.911475067657428, 0.08959785318545897}, {0.9058965385686985, 
         0.11369224116492463`}, {0.901164483402873, 0.13796706707174441`}, {
         0.8972846973263786, 0.16239260245788203`}, {0.8942619317643832, 
         0.1869389343071836}, {0.8920998885819085, 0.21157600166870086`}, {
         0.8908012155502981, 0.23627363247118452`}, {0.890367503104593, 
         0.2610015804736627}, {0.8903539001609493, 0.6090059549291524}, {
         0.8907856794521433, 0.6337339367623414}, {0.8920824216967025, 
         0.658431669015526}, {0.8942425388241471, 0.6830689053234917}, {
         0.8972633854218991, 0.707615473408087}, {0.901141261975019, 
         0.7320413120290553}, {0.905871419396858, 0.7563165077988827}, {
         0.9114480648450846, 0.7804113318165756}, {0.9338442447601524, 
         0.8700109361387254}},
         SplineDegree->17]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.8915847426241557, 0.4350038155472447},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.9338782521192621, 0.}, {0., 
         0.4349540438432587}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.46693912605963106`, 0.21747702192162935`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQM7y1JqPK/dtmfY8MpyxST+/eZirTau02/bG0yL
SXDIb9v/+cal80qm1+0b3h366X16yf6g//tkeIwu27/4tkDJWX/b/q23r/w5
duC8/RFR1d2Rcw7tT1jW/ng+x2n7Q8zThWeqnd5fk63j1j3nhH3Wj+7KRuZL
+zebr/zkuu6EvUDZ4zUrnK/tb74ccTvZ5rR9zFLFh5V/bu7f9cZtqRnnBfuW
nXlX2h/e2f9jQpZiV9pl+wU3WRYmbr+3/+m8hguihdftN3zY5BcecX9/Z6GU
xb2rt+2nZcdtrgfKF86tLAuVfWD/VHBx/0Gg/uiOHVMXKj2yF3m6a/EpoPkP
ns21Dr342P4Qd/cfTpdr+9uzvgc/YXtqv02Rv+M10H18l+9HVq16ah/Ie3RV
rvrp/U1qNqY/1j21F+KV3y8799B+sd6DqxhFntqrsWtN6jLYtv+T562DLM8e
2+fYnFZQPbtkv198Q4eV7SP7A+6uvmbFbfvTHwqv22r9wJ5hwvxbE0/w758Z
WrvVV/SOPXr4AwANUM12
         "],
         SplineDegree->24]], InsetBox[
         StyleBox["\<\"\[CapitalSigma]\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {-0.43692654480306164`, 0.43493122864604644`},
         Background->GrayLevel[1]]}}, {
       {RGBColor[1, 1, 0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{1.8671265561598163`, 0.43496987611022164`}, 0.1], 
        DiskBox[{1.8671265561598163`, 0.43496987611022164`}, 
         0.06999999999999999], InsetBox["1", {1.8671265561598163`, 0.43496987611022164`},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{0.9338442447601524, 0.8700109361387254}, 0.1], 
        DiskBox[{0.9338442447601524, 0.8700109361387254}, 
         0.06999999999999999], InsetBox["2", {0.9338442447601524, 0.8700109361387254},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{0.9338782521192621, 0.}, 0.1], 
        DiskBox[{0.9338782521192621, 0.}, 0.06999999999999999], 
        InsetBox["3", {0.9338782521192621, 0.},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{0., 0.4349540438432587}, 0.1], InsetBox["4", {0., 0.4349540438432587},
         BaseStyle->{
           GrayLevel[0], 12}]}}},
     Annotation[#, 
      VertexCoordinateRules -> {{1.8671265561598163`, 0.43496987611022164`}, {
       0.9338442447601524, 0.8700109361387254}, {0.9338782521192621, 0.}, {0.,
        0.4349540438432587}}]& ],
    AspectRatio->Automatic,
    FrameTicks->None,
    ImageSize->350,
    PlotRange->All,
    PlotRangePadding->Scaled[0.1]], ",", 
   GraphicsBox[
    TagBox[{{
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0., 0.029945404196222936`}, {
         0.10376607004466129`, 0.05261022492826195}, {0.13165515919533224`, 
         0.05819241912012285}, {0.15972249090213908`, 0.06279536127811203}, {
         0.18793369218068365`, 0.0664134143555507}, {0.21625421385502258`, 
         0.06904214746163373}, {0.2446493728687176, 0.07067834128777195}, {
         0.27308439475984425`, 0.07131999205015538}, {0.3015244562479413, 
         0.070966313943711}, {0.7015607042987799, 0.058988152265221805`}, {
         0.7299709759315851, 0.05763957842595846}, {0.758316664739329, 
         0.05529776040052192}, {0.7865630568443508, 0.051965566123609364`}, {
         0.8146755599738515, 0.047647076405718636`}, {0.8426197458237249, 
         0.04234757993553806}, {0.8703613922215794, 0.036073566803090706`}, {
         0.8978665250373206, 0.0288327205515706}, {1.0000906201270983`, 0.}},
         SplineDegree->17]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.5015004493061312, 0.06357017962584259},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0., 
         0.029945404196222936`}, {-0.02254198670633001, 
         0.13373785010290024`}, {-0.02809116906263598, 
         0.1616334257169873}, {-0.03266089263912286, 
         0.18970608483754953`}, {-0.036245561070634036`, 
         0.21792144795590962`}, {-0.038840784351259705`, 
         0.24624496079927854`}, {-0.040443384210608224`, 
         0.27464193664804815`}, {-0.041051398006112017`, 
         0.3030775988152856}, {-0.04066408112660136, 
         0.3315171232364083}, {-0.028212787660530814`, 
         0.7315375330456423}, {-0.02683061443812884, 
         0.7599460909261132}, {-0.024455277567357436`, 
         0.7882888913949295}, {-0.021089686032157218`, 
         0.8165312241116683}, {-0.016737961543367708`, 
         0.8446385017749082}, {-0.01140543349102563, 
         0.8725763024799702}, {-0.005098632417665616, 0.9003104118741054}, {
         0.0021747179793846216`, 0.9278068650574982}, {0.031128233665176586`, 
         1.0299964287193093`}},
         SplineDegree->17]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {-0.033031436623026315`, 0.531483533020283},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{1.0000906201270983`, 0.}, {
         0.8963245500824372, -0.022664820732039015`}, {
         0.8684354609317662, -0.028247014923899916`}, {
         0.8403681292249593, -0.03284995708188909}, {
         0.8121569279464147, -0.03646801015932777}, {
         0.7838364062720758, -0.039096743265410794`}, {
         0.7554412472583809, -0.040732937091549015`}, {
         0.7270062253672542, -0.04137458785393244}, {
         0.6985661638791573, -0.041020909747488066`}, {
         0.2985299158283183, -0.02904274806899887}, {
         0.27011964419551315`, -0.027694174229735524`}, {
         0.24177395538776922`, -0.025352356204298987`}, {
         0.2135275632827476, -0.022020161927386428`}, {
         0.18541506015324682`, -0.0177016722094957}, {
         0.15747087430337348`, -0.012402175739315124`}, {
         0.12972922790551894`, -0.006128162606867771}, {0.10222409508977767`, 
         0.0011126836446523347`}, {0., 0.029945404196222936`}},
         SplineDegree->17]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.49859017082096724`, -0.03362477542961967},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{1.0000906201270983`, 0.}, {
         0.9774534583305471, 0.10366186823846248`}, {0.9718781814425639, 
         0.13152292823312137`}, {0.967281171617977, 0.15956200591189518`}, {
         0.9636680586383644, 0.1877447628920101}, {0.9610432673445823, 
         0.2160366848321637}, {0.9594100122178343, 0.24440312370091513`}, {
         0.9587702934430177, 0.2728093402087996}, {0.9591248944591741, 
         0.3012205463522037}, {0.9711089360472085, 0.7008506012238015}, {
         0.9724574225880772, 0.7292320028884967}, {0.9747981432139237, 
         0.7575488424606558}, {0.9781282313339938, 0.78576644139317}, {
         0.982443608717119, 0.8138502426751346}, {0.9877389904861681, 
         0.8417658531524944}, {0.9940078915902345, 0.8694790856480207}, {
         1.0012426347466294`, 0.896956000829035}, {1.0300507240971837`, 
         0.999075137178996}},
         SplineDegree->17]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.9665225400224704, 0.5009934221392793},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.031128233665176586`, 
         1.0299964287193093`}, {0.053670220371506594`, 0.9262039828126322}, {
         0.059219402727812565`, 0.898308407198545}, {0.06378912630429945, 
         0.8702357480779829}, {0.06737379473581062, 0.8420203849596227}, {
         0.06996901801643629, 0.8136968721162539}, {0.07157161787578481, 
         0.7852998962674843}, {0.0721796316712886, 0.7568642341002466}, {
         0.07179231479177794, 0.7284247096791241}, {0.0593410213257074, 
         0.32840429986989}, {0.05795884810330543, 0.2999957419894192}, {
         0.05558351123253402, 0.2716529415206027}, {0.0522179196973338, 
         0.24341060880386395`}, {0.04786619520854429, 0.21530333114062417`}, {
         0.042533667156202215`, 0.18736553043556206`}, {0.0362268660828422, 
         0.15963142104142697`}, {0.028953515685791964`, 
         0.13213496785803408`}, {0., 0.029945404196222936`}},
         SplineDegree->17]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.0641596702882029, 0.5284582998952495},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.031128233665176586`, 
         1.0299964287193093`}, {0.13479912861961676`, 1.0525306717831335`}, {
         0.1626621232386105, 1.0580783503555664`}, {0.19070216869731732`, 
         1.0626477110717671`}, {0.21888492542776034`, 1.0662331580109607`}, {
         0.24717587908894303`, 1.0688303002138284`}, {0.2755403828352385, 
         1.0704359570599484`}, {0.3039436997470523, 1.0710481621629788`}, {
         0.33235104537179505`, 1.070666165778816}, {0.7319200415445973, 
         1.0582976491626903`}, {0.7602966264958695, 1.056921919107651}, {
         0.7886076990586883, 1.0545541401855574`}, {0.8168185877485798, 
         1.0511972121244202`}, {0.8448947437724161, 1.0468552460252543`}, {
         0.8728017833389965, 1.0415335593273713`}, {0.9005055297675576, 
         1.0352386692963154`}, {0.9279720553426434, 1.0279782850424166`}, {
         1.0300507240971837`, 0.999075137178996}},
         SplineDegree->17]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.5320920394897058, 1.0630764974641485`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{1.0300507240971837`, 0.999075137178996}, {
         1.052687885893735, 0.8954132689405335}, {1.058263162781718, 
         0.8675522089458746}, {1.062860172606305, 0.8395131312671008}, {
         1.0664732855859178`, 0.811330374286986}, {1.0690980768796996`, 
         0.7830384523468323}, {1.0707313320064478`, 0.7546720134780809}, {
         1.0713710507812644`, 0.7262657969701964}, {1.071016449765108, 
         0.6978545908267924}, {1.0590324081770737`, 0.29822453595519455`}, {
         1.057683921636205, 0.26984313429049944`}, {1.0553432010103587`, 
         0.24152629471834033`}, {1.0520131128902885`, 0.21330869578582606`}, {
         1.0476977355071635`, 0.18522489450386154`}, {1.0424023537381142`, 
         0.15730928402650166`}, {1.0361334526340478`, 0.12959605153097536`}, {
         1.028898709477653, 0.10211913634996099`}, {1.0000906201270983`, 0.}},
         SplineDegree->17]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.063618804201812, 0.49808171503971677`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{1.0300507240971837`, 0.999075137178996}, {
         0.9263798291427437, 0.9765408941151718}, {0.89851683452375, 
         0.9709932155427392}, {0.8704767890650431, 0.9664238548265383}, {
         0.8422940323346002, 0.9628384078873449}, {0.8140030786734174, 
         0.960241265684477}, {0.785638574927122, 0.9586356088383571}, {
         0.7572352580153081, 0.9580234037353267}, {0.7288279123905654, 
         0.9584054001194896}, {0.32925891621776304`, 0.970773916735615}, {
         0.3008823312664909, 0.9721496467906542}, {0.2725712587036721, 
         0.9745174257127478}, {0.2443603700137805, 0.9778743537738852}, {
         0.2162842139899442, 0.982216319873051}, {0.1883771744233639, 
         0.9875380065709339}, {0.1606734279948028, 0.9938328966019899}, {
         0.13320690241971692`, 1.0010932808558888`}, {0.031128233665176586`, 
         1.0299964287193093`}},
         SplineDegree->17]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.5290869182726543, 0.9659950684341571},
         Background->GrayLevel[1]]}}, {
       {RGBColor[1, 1, 0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{0., 0.029945404196222936`}, 0.1], 
        DiskBox[{0., 0.029945404196222936`}, 0.06999999999999999], 
        InsetBox["1", {0., 0.029945404196222936`},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{1.0000906201270983`, 0.}, 0.1], InsetBox["4", {1.0000906201270983`, 0.},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{0.031128233665176586`, 1.0299964287193093`}, 0.1], 
        InsetBox["2", {0.031128233665176586`, 1.0299964287193093`},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{1.0300507240971837`, 0.999075137178996}, 0.1], 
        InsetBox["3", {1.0300507240971837`, 0.999075137178996},
         BaseStyle->{
           GrayLevel[0], 12}]}}},
     Annotation[#, 
      VertexCoordinateRules -> {{0., 0.029945404196222936`}, {
       1.0000906201270983`, 0.}, {0.031128233665176586`, 
       1.0299964287193093`}, {1.0300507240971837`, 0.999075137178996}}]& ],
    AspectRatio->Automatic,
    FrameTicks->None,
    ImageSize->250,
    PlotRange->All,
    PlotRangePadding->Scaled[0.1]]}], "}"}]], "Output",
 CellChangeTimes->{{3.641033396868119*^9, 3.6410334804629*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[{{
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[{{1.9009776575461148`, 2.1656386452175926`}, {
       1.8480882047740539`, 1.2213195668339973`}},
       SplineDegree->1]], InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.8745329311600845`, 1.693479106025795},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[{{1.9009776575461148`, 2.1656386452175926`}, {
       2.5452003760705395`, 2.8583255403027623`}},
       SplineDegree->1]], InsetBox[
       StyleBox["\<\"b\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {2.223089016808327, 2.5119820927601775`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[{{1.8480882047740539`, 1.2213195668339973`}, {
       0.798429957362611, 0.7227577915220138}},
       SplineDegree->1]], InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.3232590810683325`, 0.9720386791780056},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[{{1.8480882047740539`, 1.2213195668339973`}, {
       3.134318433219413, 1.1796600295415982`}},
       SplineDegree->1]], InsetBox[
       StyleBox["\<\"b\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {2.4912033189967335`, 1.2004897981877978`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[{{2.5452003760705395`, 2.8583255403027623`}, {
       3.4858087428890983`, 1.9919583226085318`}},
       SplineDegree->1]], InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {3.015504559479819, 2.425141931455647},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[{{2.5452003760705395`, 2.8583255403027623`}, {
       2.138867113823802, 3.9388227286843005`}},
       SplineDegree->1]], InsetBox[
       StyleBox["\<\"b\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {2.3420337449471704`, 3.3985741344935314`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[CompressedData["
1:eJwBoQFe/iFib1JlAgAAABkAAAACAAAAYJxg+7yM6T8AhbDy1CDnPwxUBPa6
+Os/xlLgN1Nx5z+DMF8iJ+ftP1hnQd+Zcec/jA9kFmXF7z+lN4oKJvTmP2BC
IF8CuvA/OofF5TYB5j+YywuvW2vxPxNUQKbEqOQ/rjey+BXr8T9AIUjMcwHj
Px63LsbLMPI/tbX3GBgn4T8xfRf65zfyP6+txYjAcd4/tvE17fL/8T/InWd5
kq7aP87mGkyajPE/9NML2vZD1z/jYjEwc+XwP0KD//hra9Q/F2YHhnoV8D8Y
0TIW1lTSPyTaPEi4VO4/aPsSclkj0T/mcQ90GWfsP0bpdewK69A/6tzobouC
6j/i2JcTnq/RP69Eh4joxug/7g402iZk0z+EK394WlHnP9SP8Qzz69U/weyx
mW865j+5FaU7bRzZPyf3nax9lOU/CE7BV+m/3D9ze75KbWrlPxWoLvaVTOA/
sqhjUwK/5T+PSARIuDPiP3ymS2OtjOY/svPP6VX14z+ptg9m6cXnP1M9H4Tg
c+U/YJxg+7yM6T8AhbDy1CDnP3kR0dY=
       "],
       SplineDegree->24]], InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.9870627907365012, 0.3247857582712205},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[{{0.798429957362611, 0.7227577915220138}, {
       0.7259262933414219, 0.6633080887348963}, {0.7062352105779889, 
       0.6477304270613852}, {0.6860111258749444, 0.6328512912822202}, {
       0.6652788068929705, 0.618688903304184}, {0.6440636437077731, 
       0.6052606072605233}, {0.6223916177158311, 0.5925828482702549}, {
       0.6002892698159755, 0.5806711522984592}, {0.5777836679057702, 
       0.5695401071422259}, {0.25841168496072614`, 0.4184785251266834}, {
       0.23553039078745103`, 0.4081417625499967}, {0.21230142619428824`, 
       0.3986119415894366}, {0.18875323880304545`, 0.3899007330511419}, {
       0.16491466717544478`, 0.3820188052180228}, {0.14081490549564277`, 
       0.3749758107847231}, {0.11648346781723273`, 0.3687803750363363}, {
       0.09195015191851583, 0.363440085285348}, {0., 0.3451038364831567}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"b\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.4175663452713922, 0.495132647986924},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[{{3.134318433219413, 1.1796600295415982`}, {
       3.4517819899554234`, 0.3616791279518643}},
       SplineDegree->1]], InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {3.2930502115874183`, 0.7706695787467313},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[{{3.134318433219413, 1.1796600295415982`}, {
       4.370034325329515, 1.7685262892902531`}},
       SplineDegree->1]], InsetBox[
       StyleBox["\<\"b\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {3.752176379274464, 1.4740931594159257`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[{{3.4858087428890983`, 1.9919583226085318`}, {
       4.370034325329515, 1.7685262892902531`}},
       SplineDegree->1]], InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {3.9279215341093066`, 1.8802423059493925`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[{{3.4858087428890983`, 1.9919583226085318`}, {
       3.784652329811358, 0.8613136904388596}},
       SplineDegree->1]], InsetBox[
       StyleBox["\<\"b\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {3.635230536350228, 1.4266360065236956`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[{{2.138867113823802, 3.9388227286843005`}, {
       2.0850413751645016`, 4.015203526642978}, {2.0709876709139543`, 
       4.035906342548866}, {2.057666959740409, 4.057088217900825}, {
       2.04509555500782, 4.078723212068709}, {2.0332888524332864`, 
       4.10078482950514}, {2.022261311232514, 4.123246052193592}, {
       2.0120264364121625`, 4.146079372736313}, {2.0025967622307856`, 
       4.169256828041588}, {1.875637192457637, 4.497662222146827}, {
       1.8670242670754549`, 4.521155427674296}, {1.8592386384117672`, 
       4.544935612196417}, {1.8522898412273188`, 4.56897365303348}, {
       1.8461863854474463`, 4.593240111719043}, {1.8409357457402968`, 
       4.61770527005208}, {1.83654435236289, 4.642339166491739}, {
       1.8330175832862297`, 4.667111632850074}, {1.8214681893909306`, 
       4.7598362139474}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.940272082548867, 4.333906081887909},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQvfV5U0yaDKODQ9vi2q1N/A7Xp3XrCoswOuz/Ibhl
Pp+AQ/J/4aOhsowOasumLo70EXA4p+V+Ypsro8P/DufEu20CDowlHA69XYwO
YdcjZAN2CTicWbjOJeA5o0PX6XPGfo8FHHakvS9/HMrkcKWtP0Tlv4DDkycf
hf6dY3IoXM/E95db0CE5a/K+pV7MDlznXu/8zyHoIFKoLbf1ALMDU43g4bhv
Ag6fllzXT9VkcQi48yco5KqAwwSR3tILtSwOmiFX5vOuEHBIPPTPKX0Hi8OB
qHDztkKgfcc+t/leZXGYy8u2KdRUwKH+cdqj2ZdYHHbMrbB99o7fYf3sXYfr
N7A43Nc+7vGknN/hikFfhkUhi4Nn+c2mGl5+h+Ola358kGBxmLyFL3HjNj4H
3sNqllVrmR0kHO7Nsqrkc9igp1f5wpTZoU/BaK9KJJ9DuuRiPZldTA76Rkse
9kTwOaz4eFje1onJYd4Nfc7aciD/r+Etg2uMDqtW1xS/3sznoKC2t020Fhhe
7vf/3uHkd0APfwDxFKf6
       "],
       SplineDegree->24]], InsetBox[
       StyleBox["\<\"b\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {2.550281012258711, 4.095702450620826},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQNLrt5K0xO7Zt9QfuHy2nWR9mKenL9m3r1qf0NK
+FWs5VR73tdzDZxWXbTP4Hz0ep7ZVHthxr1rhKacsmfwY0pI0Yu0T7G+HD9F
95B9yyleWSf+Rfv/XD34gn/2Vnsr9/XTX5hu23+D75tbte4Se530aTN3cR/e
z9A+7WrF1Vb7gpo5ZmKbT+9n8Fhnu4/Zzv7p1osxq/Qv7X+gqbP1w6Zm+z/L
lm3U17+2v2X/0ps66ovtmW4/YGRqu7lf4NWhOdMfb7E/JbnHZ8L72/tXNYUn
cu8/aB/J/2t2oNXd/RU7KifPkj5lH/3QWGef9939R4SXFT/OvWjPcXejcYHS
nf1n1ogZfVh61f54gPtUh2s397vU1i8PjL9p/yzkqWHstGv7+Rie/u/zvWO/
44CAQsPSS/vzV27cWWVyz373k7V/tFae2f+IUSmC7e09+4m2XhOqfxzez+Ec
mZiScc8+qmvW9ePXtu+fdu1lsMXGO/Y6gln8t+cs2b9mn6fRnlc37RnK355L
K4reX/3st+Zb32v26OEPAKY/xy4=
       "],
       SplineDegree->24]], InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {-0.3894036890118038, 0.1609175570156382},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[{{0., 0.3451038364831567}, {
       0.07250366402118913, 0.4045535392702743}, {0.0921947467846222, 
       0.4201312009437853}, {0.11241883148766674`, 0.4350103367229503}, {
       0.13315115046964066`, 0.44917272470098657`}, {0.15436631365483794`, 
       0.4626010207446472}, {0.17603833964678, 0.47527877973491567`}, {
       0.19814068754663555`, 0.48719047570671137`}, {0.2206462894568409, 
       0.4983215208629447}, {0.5400182724018849, 0.6493831028784873}, {
       0.5628995665751602, 0.659719865455174}, {0.5861285311683229, 
       0.6692496864157342}, {0.6096767185595657, 0.6779608949540289}, {
       0.6335152901871663, 0.6858428227871479}, {0.6576150518669683, 
       0.6928858172204475}, {0.6819464895453785, 0.6990812529688345}, {
       0.7064798054440953, 0.7044215427198227}, {0.798429957362611, 
       0.7227577915220138}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"b\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.380863612091219, 0.5727289800182467},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[{{3.4517819899554234`, 0.3616791279518643}, {
       3.947535893368089, 0.}},
       SplineDegree->1]], InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {3.699658941661756, 0.18083956397593215`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[{{3.4517819899554234`, 0.3616791279518643}, {
       3.473199081519308, 0.42170459348774325`}, {3.4792146660314414`, 
       0.4376757850197719}, {3.4857853959465532`, 0.45342671274984625`}, {
       3.492903224343788, 0.4689380871210258}, {3.5005594342917674`, 
       0.4841909119481789}, {3.508744649523883, 0.499166507681882}, {
       3.517448845921049, 0.5138465342845464}, {3.526661363787854, 
       0.5282130136907599}, {3.659809499730229, 0.7280668386855579}, {
       3.669519056849461, 0.7421021768191309}, {3.679713762299003, 
       0.7557891851398872}, {3.6903811310141883`, 0.7691111016938088}, {
       3.701508099077782, 0.7820516116407593}, {3.71308103971886, 
       0.7945948672346417}, {3.7250857800009896`, 0.806725507231525}, {
       3.7375076181792832`, 0.8184286757019713}, {3.784652329811358, 
       0.8613136904388596}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"b\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {3.593938380606915, 0.6276716022581081},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[{{4.370034325329515, 1.7685262892902531`}, {
       4.479743729346206, 1.7913835326302237`}, {4.509225020595367, 
       1.7969893989194632`}, {4.538884407728399, 1.8015602878334018`}, {
       4.568685568031702, 1.8050906015797388`}, {4.598592005167507, 
       1.8075760167186616`}, {4.6285670938695525`, 1.8090134894575982`}, {
       4.658574124796635, 1.8094012593788298`}, {4.688576349489134, 
       1.8087388515954101`}, {5.110514664572994, 1.7920325488216426`}, {
       5.140475340457298, 1.7903207745589726`}, {5.170357775843031, 
       1.7875617301613227`}, {5.200125374857951, 1.7837587945245224`}, {
       5.229741682265514, 1.7789166249579536`}, {5.259170428110205, 
       1.7730411514809257`}, {5.288375572135959, 1.766139569560406}, {
       5.317321347923281, 1.7582203312990083`}, {5.424880113039168, 
       1.726760532355834}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {4.89948674570244, 1.7989016102619375`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[{{4.370034325329515, 1.7685262892902531`}, {
       4.454071562885425, 1.8421281116181532`}, {4.4769170185819736`, 
       1.861440896666028}, {4.500424235949391, 1.8799424977840216`}, {
       4.524564426600373, 1.8976102567710185`}, {4.549308026969515, 
       1.9144225366003733`}, {4.5746247345186815`, 1.9303587479179467`}, {
       4.600483544847357, 1.9453993742570959`}, {4.626852789662552, 
       1.9595259959397453`}, {5.001319923208001, 2.1517810825481583`}, {
       5.028167309107189, 2.164976399242671}, {5.055459957126801, 
       2.177224251150901}, {5.083164443007832, 2.1885096387984793`}, {
       5.111246838129246, 2.1988187414040934`}, {5.139672751059062, 
       2.208138933805269}, {5.168407369672211, 2.2164588019199214`}, {
       5.197415503783621, 2.223768156724745}, {5.306202159193141, 
       2.249164005811287}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"b\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {4.814762578126969, 2.054336420394216},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[{{3.784652329811358, 0.8613136904388596}, {
       3.7632352382474745`, 0.8012882249029809}, {3.757219653735341, 
       0.7853170333709522}, {3.750648923820229, 0.7695661056408778}, {
       3.743531095422995, 0.7540547312696981}, {3.735874885475015, 
       0.7388019064425452}, {3.727689670242899, 0.723826310708842}, {
       3.7189854738457333`, 0.7091462841061775}, {3.7097729559789285`, 
       0.694779804699964}, {3.576624820036554, 0.4949259797051662}, {
       3.5669152629173215`, 0.48089064157159317`}, {3.55672055746778, 
       0.46720363325083697`}, {3.546053188752595, 0.45388171669691524`}, {
       3.5349262206890004`, 0.44094120674996473`}, {3.523353280047923, 
       0.42839795115608253`}, {3.5113485397657938`, 0.4162673111591991}, {
       3.4989267015875, 0.40456414268875274`}, {3.4517819899554234`, 
       0.3616791279518643}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {3.6424959391598675`, 0.595321216132616},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[{{3.784652329811358, 0.8613136904388596}, {
       3.947535893368089, 0.}},
       SplineDegree->1]], InsetBox[
       StyleBox["\<\"b\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {3.8660941115897236`, 0.4306568452194298},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[{{1.8214681893909306`, 4.7598362139474}, {
       1.8752939280502312`, 4.683455415988724}, {1.8893476323007783`, 
       4.662752600082835}, {1.9026683434743232`, 4.641570724730877}, {
       1.915239748206913, 4.619935730562992}, {1.9270464507814462`, 
       4.5978741131265615`}, {1.9380739919822187`, 4.57541289043811}, {
       1.9483088668025703`, 4.552579569895388}, {1.9577385409839474`, 
       4.5294021145901135`}, {2.0846981107570954`, 4.200996720484874}, {
       2.0933110361392777`, 4.177503514957405}, {2.1010966648029656`, 
       4.153723330435285}, {2.108045461987414, 4.129685289598221}, {
       2.1141489177672863`, 4.105418830912659}, {2.119399557474436, 
       4.080953672579621}, {2.123790950851842, 4.056319776139963}, {
       2.127317719928503, 4.031547309781628}, {2.138867113823802, 
       3.9388227286843005`}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {2.0200632206658646`, 4.364752860743794},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQfd6M6cpulb/21x6qNApxCTucCrk/U0Psr/1RC/aF
uziEHb59b/oeyPLH/l99+Fe+X0IOUV/i+Zjf/rLnW2FaqP1fyMGGI8V88bOf
9jsUhBWWiws7/Nu0VMiO7ad9gco8l25HYYeDUu6Jl2N/2Fv4Cq6prhR28PH2
y33667v9kfVz1v7eJeywc8/eJclPv9uf/i/pe4pBxEHb7Mdydvkf9qfXyMv6
uYo4PBCKuGu4+If9TRctS45mEQfelbGJHuk/7RXWPZdj3Sri0PP399YJ0b/s
qzVSIp2uizhEcPLuLsr5bT9NPOcaw3MRh2/rmDm4W/7Y15rXev99JOJQd/5T
wpvuv/YcWa4qXadFHCQtt1q+yftnr19n/KxjkYhDyO//YVel/tvvm3prgnO2
iEN38dINdxv/2xc2OYpoaok45NWunH5w9n97+Umf3IueCDuoxX7MzE37b6/G
K7dh23xhhxUHH5ppPPtnnzZr3arKRGGHO+fcX1qr/rP/qidntVNP2EFXzpBJ
yfivvYX6qqZ2bmEH9PAHANmjtCY=
       "],
       SplineDegree->24]], InsetBox[
       StyleBox["\<\"b\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.666139688326792, 5.161623315927113},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQvSbr3KbeKfwODFCwea37Y73ZQP47V6le/QR7w5ki
k17xCjgwRO+PNlo9116LV608M1jA4UXdCu23oovt2fumSDTOEHD4UKf0MPDm
LPvl13u2LbsOVH+sdZ+jfPb+9A15y05yCzqk2MdEF/Gv3L/6/KaQ3QaCDpZs
LJNY0nbvzzzmoNLqLOggmiG7xk3x2H6f6U/clzoJOixjnrO0++G5/SWr0rbo
6gk6SGYnLORfcHl/xocr6w+xCzrckvtwZpLH9f3cuROkKy8JOGxl3/PQQP7W
fvGacN3pkwQcplWk5C58eXv/Tsklq2x8BRy0w4RPyjXf2f944ewNP9kFHI5s
qtaLvH97P3OJx6cdE/gdxCQPtBVz39p/qreq958av8MRB741X3Wu75ffb2Ft
f5vPoeX9owMn6y7v934tm9y3mc/h+s222ywzz+0/JyzJKQ3k7+pqkJ124+j+
H//P5b67yefwQM1Y4+f9XfulbOcEvFbhd2CZfOx5u/6K/TknSx7x9vE7HGiQ
UtrPlLgfPfwBwbazQw==
       "],
       SplineDegree->24]], InsetBox[
       StyleBox["\<\"\[CapitalSigma]\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {4.177704348064858, -0.3641185260634091},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[{{5.424880113039168, 1.726760532355834}, {
       5.315170709022479, 1.7039032890158636`}, {5.285689417773318, 
       1.698297422726624}, {5.256030030640286, 1.693726533812686}, {
       5.226228870336983, 1.690196220066349}, {5.1963224332011775`, 
       1.6877108049274259`}, {5.166347344499132, 1.6862733321884895`}, {
       5.13634031357205, 1.6858855622672575`}, {5.106338088879551, 
       1.6865479700506771`}, {4.684399773795691, 1.703254272824445}, {
       4.6544390979113865`, 1.7049660470871153`}, {4.624556662525654, 
       1.707725091484765}, {4.594789063510734, 1.7115280271215656`}, {
       4.565172756103171, 1.7163701966881342`}, {4.53574401025848, 
       1.722245670165162}, {4.5065388662327255`, 1.7291472520856819`}, {
       4.477593090445404, 1.7370664903470798`}, {4.370034325329515, 
       1.7685262892902531`}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {4.895427692666244, 1.69638521138415},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[{{5.424880113039168, 1.726760532355834}, {
       5.478391426788674, 1.7845243541673315`}, {5.492989495267626, 
       1.7997396197662565`}, {5.508111004126599, 1.814434784970839}, {
       5.5237374346338, 1.8285918531760017`}, {5.53984964969926, 
       1.842193486763419}, {5.556427917311298, 1.8552230283342346`}, {
       5.573451934701563, 1.8676645211087364`}, {5.5909008532090425`, 
       1.8795027284680157`}, {5.839304450426647, 2.041758390414656}, {
       5.85715690103024, 2.0529788145603067`}, {5.87539102051856, 
       2.0635677142693254`}, {5.893984478264983, 2.073512121722459}, {
       5.912914503575107, 2.082799858385396}, {5.9321579135731435`, 
       2.0914195499233488`}, {5.9516911415931, 2.099360640130767}, {
       5.9714902660399725`, 2.106613403859117}, {6.04588910608318, 
       2.1323996872224353`}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"b\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {5.715673356084474, 1.9597568457534618`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[{{5.306202159193141, 2.249164005811287}, {
       5.3853856394034265`, 2.256183248634855}, {5.406619543434991, 
       2.2576915954751446`}, {5.42789322205958, 2.258456048475672}, {
       5.4491806222191, 2.2584756714401752`}, {5.470455674051224, 
       2.25775044033716}, {5.491692322816142, 2.2562812433293393`}, {
       5.512864560804812, 2.2540698796859235`}, {5.533946459189596, 
       2.2511190575791336`}, {5.829821237945612, 2.204413330143593}, {
       5.850786978534321, 2.2007266633320612`}, {5.871610885388761, 
       2.1963086667351996`}, {5.892267456269074, 2.1911647509039547`}, {
       5.9127313938653465`, 2.1853012153947087`}, {5.932977636778259, 
       2.178725241054458}, {5.952981390210821, 2.1714448812267046`}, {
       5.972718156333604, 2.163469051888833}, {6.04588910608318, 
       2.1323996872224353`}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {5.681719569813916, 2.226725509076636},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[{{5.306202159193141, 2.249164005811287}, {
       5.222164921637232, 2.175562183483388}, {5.199319465940683, 
       2.156249398435513}, {5.175812248573266, 2.1377477973175187`}, {
       5.151672057922284, 2.1200800383305225`}, {5.1269284575531415`, 
       2.1032677585011674`}, {5.1016117500039755`, 2.0873315471835943`}, {
       5.0757529396753, 2.072290920844445}, {5.049383694860105, 
       2.0581642991617954`}, {4.674916561314656, 1.8659092125533825`}, {
       4.648069175415468, 1.8527138958588698`}, {4.620776527395856, 
       1.84046604395064}, {4.593072041514825, 1.8291806563030613`}, {
       4.5649896463934105`, 1.8188715536974476`}, {4.536563733463595, 
       1.809551361296272}, {4.507829114850446, 1.8012314931816191`}, {
       4.478820980739036, 1.7939221383767956`}, {4.370034325329515, 
       1.7685262892902531`}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"b\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {4.861473906395686, 1.9633538747073247`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[{{6.04588910608318, 2.1323996872224353`}, {
       5.966705625872897, 2.1253804443988678`}, {5.945471721841332, 
       2.1238720975585785`}, {5.924198043216744, 2.1231076445580506`}, {
       5.902910643057223, 2.123088021593548}, {5.881635591225099, 
       2.1238132526965625`}, {5.860398942460181, 2.1252824497043843`}, {
       5.839226704471511, 2.127493813347799}, {5.818144806086727, 
       2.130444635454589}, {5.522270027330712, 2.1771503628901296`}, {
       5.501304286742002, 2.180837029701662}, {5.480480379887562, 
       2.185255026298523}, {5.459823809007249, 2.190398942129768}, {
       5.439359871410977, 2.196262477639014}, {5.4191136284980645`, 
       2.2028384519792645`}, {5.399109875065502, 2.2101188118070185`}, {
       5.379373108942719, 2.21809464114489}, {5.306202159193141, 
       2.249164005811287}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {5.670371695462407, 2.154838183957086},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{0.015, 0.9}}], 
      ArrowBox[BSplineCurveBox[{{6.04588910608318, 2.1323996872224353`}, {
       5.992377792333675, 2.0746358654109387`}, {5.977779723854724, 
       2.0594205998120136`}, {5.96265821499575, 2.044725434607431}, {
       5.94703178448855, 2.0305683664022682`}, {5.930919569423089, 
       2.0169667328148506`}, {5.914341301811051, 2.003937191244036}, {
       5.897317284420787, 1.9914956984695333`}, {5.879868365913307, 
       1.9796574911102542`}, {5.631464768695702, 1.817401829163614}, {
       5.61361231809211, 1.8061814050179632`}, {5.59537819860379, 
       1.7955925053089445`}, {5.5767847408573665`, 1.7856480978558105`}, {
       5.557854715547243, 1.7763603611928738`}, {5.538611305549206, 
       1.7677406696549212`}, {5.519078077529249, 1.7597995794475025`}, {
       5.499278953082377, 1.7525468157191528`}, {5.424880113039168, 
       1.726760532355834}},
       SplineDegree->17]], InsetBox[
       StyleBox["\<\"b\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {5.755095863037877, 1.8994033738248082`},
       Background->GrayLevel[1]]}}, {
     {RGBColor[1, 1, 0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{1.9009776575461148`, 2.1656386452175926`}, 0.1], 
      DiskBox[{1.9009776575461148`, 2.1656386452175926`}, 
       0.06999999999999999], InsetBox["1", {1.9009776575461148`, 2.1656386452175926`},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{1.8480882047740539`, 1.2213195668339973`}, 0.1], 
      DiskBox[{1.8480882047740539`, 1.2213195668339973`}, 
       0.06999999999999999], InsetBox["2", {1.8480882047740539`, 1.2213195668339973`},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{2.5452003760705395`, 2.8583255403027623`}, 0.1], 
      DiskBox[{2.5452003760705395`, 2.8583255403027623`}, 
       0.06999999999999999], InsetBox["3", {2.5452003760705395`, 2.8583255403027623`},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{0.798429957362611, 0.7227577915220138}, 0.1], 
      DiskBox[{0.798429957362611, 0.7227577915220138}, 0.06999999999999999], 
      InsetBox["4", {0.798429957362611, 0.7227577915220138},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{3.134318433219413, 1.1796600295415982`}, 0.1], 
      DiskBox[{3.134318433219413, 1.1796600295415982`}, 0.06999999999999999], 
      InsetBox["5", {3.134318433219413, 1.1796600295415982`},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{3.4858087428890983`, 1.9919583226085318`}, 0.1], 
      DiskBox[{3.4858087428890983`, 1.9919583226085318`}, 
       0.06999999999999999], InsetBox["6", {3.4858087428890983`, 1.9919583226085318`},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{2.138867113823802, 3.9388227286843005`}, 0.1], 
      DiskBox[{2.138867113823802, 3.9388227286843005`}, 0.06999999999999999], 
      InsetBox["7", {2.138867113823802, 3.9388227286843005`},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{0., 0.3451038364831567}, 0.1], InsetBox["8", {0., 0.3451038364831567},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{3.4517819899554234`, 0.3616791279518643}, 0.1], 
      DiskBox[{3.4517819899554234`, 0.3616791279518643}, 0.06999999999999999],
       InsetBox["9", {3.4517819899554234`, 0.3616791279518643},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{4.370034325329515, 1.7685262892902531`}, 0.1], 
      DiskBox[{4.370034325329515, 1.7685262892902531`}, 0.06999999999999999], 
      InsetBox["10", {4.370034325329515, 1.7685262892902531`},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{3.784652329811358, 0.8613136904388596}, 0.1], 
      DiskBox[{3.784652329811358, 0.8613136904388596}, 0.06999999999999999], 
      InsetBox["11", {3.784652329811358, 0.8613136904388596},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{1.8214681893909306`, 4.7598362139474}, 0.1], InsetBox["12", {1.8214681893909306`, 4.7598362139474},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{3.947535893368089, 0.}, 0.1], 
      DiskBox[{3.947535893368089, 0.}, 0.06999999999999999], InsetBox["13", {3.947535893368089, 0.},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{5.424880113039168, 1.726760532355834}, 0.1], 
      DiskBox[{5.424880113039168, 1.726760532355834}, 0.06999999999999999], 
      InsetBox["14", {5.424880113039168, 1.726760532355834},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{5.306202159193141, 2.249164005811287}, 0.1], 
      DiskBox[{5.306202159193141, 2.249164005811287}, 0.06999999999999999], 
      InsetBox["15", {5.306202159193141, 2.249164005811287},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{6.04588910608318, 2.1323996872224353`}, 0.1], InsetBox["16", {6.04588910608318, 2.1323996872224353`},
       BaseStyle->{
         GrayLevel[0], 12}]}}},
   Annotation[#, 
    VertexCoordinateRules -> {{1.9009776575461148`, 2.1656386452175926`}, {
     1.8480882047740539`, 1.2213195668339973`}, {2.5452003760705395`, 
     2.8583255403027623`}, {0.798429957362611, 0.7227577915220138}, {
     3.134318433219413, 1.1796600295415982`}, {3.4858087428890983`, 
     1.9919583226085318`}, {2.138867113823802, 3.9388227286843005`}, {0., 
     0.3451038364831567}, {3.4517819899554234`, 0.3616791279518643}, {
     4.370034325329515, 1.7685262892902531`}, {3.784652329811358, 
     0.8613136904388596}, {1.8214681893909306`, 4.7598362139474}, {
     3.947535893368089, 0.}, {5.424880113039168, 1.726760532355834}, {
     5.306202159193141, 2.249164005811287}, {6.04588910608318, 
     2.1323996872224353`}}]& ],
  AspectRatio->Automatic,
  FrameTicks->None,
  ImageSize->Full,
  PlotRange->All,
  PlotRangePadding->Scaled[0.1]]], "Output",
 CellChangeTimes->{{3.641033396868119*^9, 3.641033480603908*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Closure", "Subsection",
 CellChangeTimes->{{3.6400708233827686`*^9, 3.6400708244188275`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"DFAClosure", "@", "m_"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\[Delta]", ",", "F", ",", 
      RowBox[{"newM", "=", 
       RowBox[{"{", "}"}]}], ",", "newRow", ",", 
      RowBox[{"s", "=", 
       RowBox[{"{", 
        RowBox[{"{", "1", "}"}], "}"}]}], ",", "x"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\[Delta]", ",", "F"}], "}"}], "=", 
      RowBox[{"m", "\[LeftDoubleBracket]", 
       RowBox[{"{", 
        RowBox[{"3", ",", "5"}], "}"}], "\[RightDoubleBracket]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"F", "=", 
      RowBox[{"Select", "[", 
       RowBox[{"F", ",", 
        RowBox[{
         RowBox[{"#", ">", "1"}], "&"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"\[Delta]", "=", 
      RowBox[{"\[Delta]", " ", "/.", 
       RowBox[{"x_Integer", "\[Rule]", 
        RowBox[{"{", "x", "}"}]}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"\[Delta]", "=", 
      RowBox[{"\[Delta]", " ", "/.", " ", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", "#", "}"}], "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"#", ",", "1"}], "}"}]}], ")"}], "&"}], ",", "F"}], 
        "]"}]}]}], " ", ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"s", "\[NotEqual]", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"s", "=", 
         RowBox[{"First", "[", "s", "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"newM", ",", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"{", "s", "}"}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"Union", "@", 
               RowBox[{"Flatten", "@", "#"}]}], "&"}], "/@", 
             RowBox[{"Thread", "@", 
              RowBox[{
              "\[Delta]", "\[LeftDoubleBracket]", "s", 
               "\[RightDoubleBracket]"}]}]}]}], "]"}]}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"s", "=", 
         RowBox[{"Select", "[", 
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{"newM", ",", "1"}], "]"}], ",", 
           RowBox[{
            RowBox[{"FreeQ", "[", 
             RowBox[{
              RowBox[{"newM", "\[LeftDoubleBracket]", 
               RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}], ",", 
              "#"}], "]"}], "&"}], ",", "1"}], "]"}]}]}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"s", "=", 
      RowBox[{"Select", "[", 
       RowBox[{
        RowBox[{"newM", "\[LeftDoubleBracket]", 
         RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}], ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"#", "\[Intersection]", "F"}], "\[NotEqual]", 
           RowBox[{"{", "}"}]}], ")"}], "&"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\[Delta]", ",", "s"}], "}"}], "=", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Rest", "/@", "newM"}], ",", "s"}], "}"}], "/.", 
       RowBox[{"Thread", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"#1", "\[Rule]", "#2"}], ")"}], "&"}], "[", 
         RowBox[{
          RowBox[{"newM", "\[LeftDoubleBracket]", 
           RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}], ",", 
          RowBox[{"Range", "@", 
           RowBox[{"Length", "@", "newM"}]}]}], "]"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"m", "\[LeftDoubleBracket]", "5", "\[RightDoubleBracket]"}], 
         ",", 
         RowBox[{
         "m", "\[LeftDoubleBracket]", "4", "\[RightDoubleBracket]"}]}], "]"}],
        ",", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\[Delta]", ",", "s"}], "}"}], "=", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\[Delta]", ",", "s"}], "}"}], " ", "/.", 
          RowBox[{"x_Integer", "\[Rule]", 
           RowBox[{"x", "+", "1"}]}]}]}], ";", 
        RowBox[{"PrependTo", "[", 
         RowBox[{"\[Delta]", ",", 
          RowBox[{
          "\[Delta]", "\[LeftDoubleBracket]", "1", 
           "\[RightDoubleBracket]"}]}], "]"}]}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Range", "@", 
        RowBox[{"Length", "@", "\[Delta]"}]}], ",", 
       RowBox[{"m", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
       ",", "\[Delta]", ",", 
       RowBox[{"m", "\[LeftDoubleBracket]", "4", "\[RightDoubleBracket]"}], 
       ",", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"m", "\[LeftDoubleBracket]", "4", "\[RightDoubleBracket]"}],
           "}"}], ",", "s"}], "]"}]}], "}"}]}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6337127048042126`*^9, 3.6337127215671716`*^9}, {
   3.6347282454763336`*^9, 3.634728245755349*^9}, {3.6347282891758327`*^9, 
   3.634728373156636*^9}, {3.634837024844125*^9, 3.634837026699231*^9}, {
   3.6348864500062075`*^9, 3.634886469439319*^9}, {3.634906001641322*^9, 
   3.6349060108098464`*^9}, {3.634906046342879*^9, 3.6349060465258894`*^9}, 
   3.634911642900699*^9, {3.6385286891835403`*^9, 3.638528803397073*^9}, {
   3.6385289034337945`*^9, 3.638528907487026*^9}, {3.6385289828343363`*^9, 
   3.638529068379229*^9}, {3.6385291051693335`*^9, 3.6385291604124928`*^9}, {
   3.638529390153633*^9, 3.6385294155150843`*^9}, {3.638529465051917*^9, 
   3.6385294923674793`*^9}, 3.638529545677529*^9, 3.6385295766453*^9, {
   3.638529631168419*^9, 3.6385296983202596`*^9}, {3.638529729955069*^9, 
   3.638529731385151*^9}, 3.6410335468146954`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DFAPlot", "[", 
    RowBox[{"#", ",", 
     RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], "&"}], "/@", 
  RowBox[{"Through", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"DFAMinimize", ",", "DFAClosure"}], "}"}], "@", 
    RowBox[{"DFA", "@", "\"\<Dif ab\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.633712780892565*^9, 3.6337129277989674`*^9}, 
   3.633715016458432*^9, {3.6347282623853006`*^9, 3.6347282708917875`*^9}, {
   3.6347283834742265`*^9, 3.6347284017252703`*^9}, 3.6379125387576323`*^9, {
   3.6385288142436934`*^9, 3.638528861595402*^9}, 3.638529259719173*^9, 
   3.6385292941611433`*^9, {3.6385293504533625`*^9, 3.638529353766552*^9}, 
   3.63852943450517*^9, 3.638529703453553*^9, {3.6385297433188334`*^9, 
   3.6385297721704836`*^9}, {3.6385298216813154`*^9, 
   3.6385300841833296`*^9}, {3.638530135660274*^9, 3.638530480939023*^9}, {
   3.638532519416617*^9, 3.6385325709795666`*^9}, {3.638532626049716*^9, 
   3.638532726021434*^9}, {3.638532756859198*^9, 3.638532791110157*^9}, {
   3.6385336411347756`*^9, 3.638533670950481*^9}, {3.638618471573259*^9, 
   3.638618504495142*^9}, {3.638770118227004*^9, 3.638770119060052*^9}, {
   3.6410335499498744`*^9, 3.641033612961478*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[{{
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{1.8671265561598163`, 
         0.43496987611022164`}, {0.9338442447601524, 0.8700109361387254}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.4004854004599843`, 0.6524904061244735},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{1.8671265561598163`, 
         0.43496987611022164`}, {0.9338782521192621, 0.}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.400502404139539, 0.21748493805511082`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.9338442447601524, 0.8700109361387254}, {
         0., 0.4349540438432587}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.4669221223800762, 0.652482489990992},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.9338442447601524, 0.8700109361387254}, {
         0.9562474292219867, 0.7804130829532665}, {0.9618259583107163, 
         0.7563186949738008}, {0.9665580134765417, 0.732043869066981}, {
         0.9704377995530362, 0.7076183336808435}, {0.9734605651150315, 
         0.6830720018315418}, {0.9756226082975062, 0.6584349344700247}, {
         0.9769212813291166, 0.633737303667541}, {0.9773549937748217, 
         0.6090093556650628}, {0.9773685967184655, 0.2610049812095731}, {
         0.9769368174272717, 0.23627699937638427`}, {0.9756400751827123, 
         0.2115792671231996}, {0.9734799580552678, 0.18694203081523392`}, {
         0.9704591114575156, 0.16239546273063862`}, {0.9665812349043958, 
         0.1379696241096703}, {0.9618510774825568, 0.11369442833984297`}, {
         0.9562744320343303, 0.08959960432214993}, {0.9338782521192621, 0.}},
         SplineDegree->17]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.9761377542552592, 0.4350071205914808},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.9338782521192621, 0.}, {
         0.911475067657428, 0.08959785318545897}, {0.9058965385686985, 
         0.11369224116492463`}, {0.901164483402873, 0.13796706707174441`}, {
         0.8972846973263786, 0.16239260245788203`}, {0.8942619317643832, 
         0.1869389343071836}, {0.8920998885819085, 0.21157600166870086`}, {
         0.8908012155502981, 0.23627363247118452`}, {0.890367503104593, 
         0.2610015804736627}, {0.8903539001609493, 0.6090059549291524}, {
         0.8907856794521433, 0.6337339367623414}, {0.8920824216967025, 
         0.658431669015526}, {0.8942425388241471, 0.6830689053234917}, {
         0.8972633854218991, 0.707615473408087}, {0.901141261975019, 
         0.7320413120290553}, {0.905871419396858, 0.7563165077988827}, {
         0.9114480648450846, 0.7804113318165756}, {0.9338442447601524, 
         0.8700109361387254}},
         SplineDegree->17]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.8915847426241557, 0.4350038155472447},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.9338782521192621, 0.}, {0., 
         0.4349540438432587}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.46693912605963106`, 0.21747702192162935`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQM7y1JqPK/dtmfY8MpyxST+/eZirTau02/bG0yL
SXDIb9v/+cal80qm1+0b3h366X16yf6g//tkeIwu27/4tkDJWX/b/q23r/w5
duC8/RFR1d2Rcw7tT1jW/ng+x2n7Q8zThWeqnd5fk63j1j3nhH3Wj+7KRuZL
+zebr/zkuu6EvUDZ4zUrnK/tb74ccTvZ5rR9zFLFh5V/bu7f9cZtqRnnBfuW
nXlX2h/e2f9jQpZiV9pl+wU3WRYmbr+3/+m8hguihdftN3zY5BcecX9/Z6GU
xb2rt+2nZcdtrgfKF86tLAuVfWD/VHBx/0Gg/uiOHVMXKj2yF3m6a/EpoPkP
ns21Dr342P4Qd/cfTpdr+9uzvgc/YXtqv02Rv+M10H18l+9HVq16ah/Ie3RV
rvrp/U1qNqY/1j21F+KV3y8799B+sd6DqxhFntqrsWtN6jLYtv+T562DLM8e
2+fYnFZQPbtkv198Q4eV7SP7A+6uvmbFbfvTHwqv22r9wJ5hwvxbE0/w758Z
WrvVV/SOPXr4AwANUM12
         "],
         SplineDegree->24]], InsetBox[
         StyleBox["\<\"\[CapitalSigma]\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {-0.43692654480306164`, 0.43493122864604644`},
         Background->GrayLevel[1]]}}, {
       {RGBColor[1, 1, 0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{1.8671265561598163`, 0.43496987611022164`}, 0.1], 
        DiskBox[{1.8671265561598163`, 0.43496987611022164`}, 
         0.06999999999999999], InsetBox["1", {1.8671265561598163`, 0.43496987611022164`},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{0.9338442447601524, 0.8700109361387254}, 0.1], 
        DiskBox[{0.9338442447601524, 0.8700109361387254}, 
         0.06999999999999999], InsetBox["2", {0.9338442447601524, 0.8700109361387254},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{0.9338782521192621, 0.}, 0.1], 
        DiskBox[{0.9338782521192621, 0.}, 0.06999999999999999], 
        InsetBox["3", {0.9338782521192621, 0.},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{0., 0.4349540438432587}, 0.1], InsetBox["4", {0., 0.4349540438432587},
         BaseStyle->{
           GrayLevel[0], 12}]}}},
     Annotation[#, 
      VertexCoordinateRules -> {{1.8671265561598163`, 0.43496987611022164`}, {
       0.9338442447601524, 0.8700109361387254}, {0.9338782521192621, 0.}, {0.,
        0.4349540438432587}}]& ],
    AspectRatio->Automatic,
    FrameTicks->None,
    ImageSize->Large,
    PlotRange->All,
    PlotRangePadding->Scaled[0.1]], ",", 
   GraphicsBox[
    TagBox[{{
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{1.944934484934091, 0.4869131293713701}, {
         1.0809082023413574`, 0.035904784667003864`}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.5129213436377242`, 0.261408957019187},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{1.944934484934091, 0.4869131293713701}, {
         1.0809613151982074`, 0.9376118609509367}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.5129479000661492`, 0.7122624951611534},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{1.0809082023413574`, 
         0.035904784667003864`}, {0.00007263143566471619, 0.}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.5404904168885111, 0.017952392333501932`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{1.0809082023413574`, 
         0.035904784667003864`}, {1.0576979273291784`, 
         0.12876913165215634`}, {1.0519186089707977`, 0.1537418901179443}, {
         1.0470166214997527`, 0.17890157423583053`}, {1.0429979681920445`, 
         0.20421737190587347`}, {1.0398675705382128`, 0.22965827984185297`}, {
         1.0376292622161725`, 0.25519314153980593`}, {1.036285784396258, 
         0.2807906854342014}, {1.0358387823842161`, 0.3064195631950268}, {
         1.0358600275269558`, 0.6671023937085995}, {1.0363100487490016`, 
         0.6927312186324583}, {1.0376565420814092`, 0.7183286040806616}, {
         1.0398978585254492`, 0.7438632019172396}, {1.0430312532268562`, 
         0.7693037408998024}, {1.0470528888373454`, 0.7946190649762298}, {
         1.0519578402140661`, 0.8197781714402937}, {1.057740100451235, 
         0.8447502488994832}, {1.0809613151982074`, 0.9376118609509367}},
         SplineDegree->17]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.0371180400700954`, 0.48676090372595476`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{1.0809613151982074`, 0.9376118609509367}, {
         1.1041715902103868`, 0.8447475139657843}, {1.1099509085687675`, 
         0.8197747554999963}, {1.1148528960398125`, 0.7946150713821101}, {
         1.1188715493475205`, 0.7692992737120672}, {1.1220019470013525`, 
         0.7438583657760877}, {1.1242402553233926`, 0.7183235040781347}, {
         1.125583733143307, 0.6927259601837393}, {1.1260307351553491`, 
         0.6670970824229139}, {1.1260094900126092`, 0.30641425190934124`}, {
         1.1255594687905632`, 0.28078542698548237`}, {1.1242129754581558`, 
         0.2551880415372792}, {1.1219716590141158`, 0.22965344370070112`}, {
         1.1188382643127086`, 0.20421290471813835`}, {1.1148166287022194`, 
         0.17889758064171096`}, {1.109911677325499, 0.15373847417764694`}, {
         1.1041294170883298`, 0.12876639671845755`}, {1.0809082023413574`, 
         0.035904784667003864`}},
         SplineDegree->17]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.1247514774694696`, 0.4867557418919859},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{1.0809613151982074`, 0.9376118609509367}, {
         0., 0.9737145167850567}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.5404806575991037, 0.9556631888679967},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQzXDAYoIZl7A9AxQ45K3Omsaabu+wO/DMhKS0/Rbe
xa0/Hi6zX2QixBr4ae3+A3rbF9nv3mj/Izs7ymrd/v3nWMLrz4putm/7fFV6
zt4T+3nYzgRvPrnO3k7CQmT5ngv7I4KvTt1/YbZ91hWJZfmrr+x/sP0aQ5P1
tP2b3TKj025d3y8h9bIwW3nrfj/r5KU6HLf2q2fY3j/ocnj/senvpVk5bu//
N3+WwyfdM/sneJnqZx29tX/Xxwmhat6X9ousudaz2fXmfrurmlbTXlzdn3b4
YfaK5df2Gx+wO8a79Mb+xoMyPeyKl/dX1R1ujPW4tf/W7xkm+V/O7re86Gzz
eMOt/f471f59EDi6f1tK/Xqbazf3N1fZJhrP2bG/8Ibj8s8nr+9fkLnD2KF+
4f79k9Pui267sl+i9aNS344J9pPNuKqv3ryw3+Ce2zML91X2DvbLN77jOLnf
qFDf8krGRvtHPJu3vpM9sD8txnSG1LIN9lt++/drLl+3f8mGSBWZa0vtGy5y
Ksq1pe1nmMRUk7Y61R49/AF9esgt
         "],
         SplineDegree->24]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {-0.30538053771255125`, -0.31579222163148013`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.00007263143566471619, 
         0.}, {-0.02500452851292112, 
         0.10027684978212688`}, {-0.031248964636781285`, 
         0.12724301946383912`}, {-0.0365460359909634, 
         0.1544111685520006}, {-0.04088925545539068, 
         0.18174802525667105`}, {-0.04427330405580332, 
         0.2092201111781644}, {-0.0466940374777024, 
         0.23679378230676032`}, {-0.04814849114173225, 
         0.2644352702252327}, {-0.0486348838342876, 
         0.2921107234637344}, {-0.04866393640855349, 
         0.6815965301777565}, {-0.04818167246316318, 
         0.709272055670416}, {-0.04673134248998001, 
         0.7369137602628747}, {-0.044314722652483485`, 
         0.7644877922199332}, {-0.04093477249227995, 
         0.7919603826824726}, {-0.03659563130466603, 
         0.8192978870228803}, {-0.03130261306939264, 
         0.846466826048336}, {-0.02506219994283676, 0.8734339270014934}, {0., 
         0.9737145167850567}},
         SplineDegree->17]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {-0.04727946586791402, 0.4868537290077994},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0., 0.9737145167850567}, {
         0.025077159948585837`, 0.8734376670029299}, {0.031321596072446, 
         0.8464714973212177}, {0.036618667426628115`, 0.8193033482330563}, {
         0.0409618868910554, 0.7919664915283857}, {0.044345935491468036`, 
         0.7644944056068924}, {0.046766668913367115`, 0.7369207344782965}, {
         0.04822112257739697, 0.7092792465598241}, {0.04870751526995232, 
         0.6816037933213225}, {0.048736567844218204`, 0.29211798660730026`}, {
         0.0482543038988279, 0.2644424611146408}, {0.046803973925644726`, 
         0.23680075652218216`}, {0.0443873540881482, 0.20922672456512362`}, {
         0.04100740392794466, 0.18175413410258434`}, {0.03666826274033075, 
         0.15441662976217646`}, {0.031375244505057354`, 0.1272476907367208}, {
         0.025134831378501477`, 0.10028058978356354`}, {
         0.00007263143566471619, 0.}},
         SplineDegree->17]], InsetBox[
         StyleBox["\<\"a\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.04735209730357873, 0.48686078777725744`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQMb8pZHrNZ4b3/AV/9/i1z6/uLG/RwMwu/tywze
/T28Yd3+rjcfS71Pv7WPvrRVNkLhwP6i7slfXwu/tec5sLsigvvk/r5tt99N
+/3G3qJxRTDn7Qv7Z08LZnVoeWvfKcrb4b79yv5lJkasHxe9s1cxOK+udPr6
fuX5crWhCh/sPY4tDki/fnP/intTDeXlPtq3aJlO49x0a7/p4RUBVWaf7BU3
TGip97y1P6Px49+XQZ/tb30X26297Mb+ypUsU+bGfLF3P167d8PLq/uVH79X
cLX7at9V0+Zl53Np/4qTluzHn361l8rgs5U3OLPfoUlg5WbXb/YdTHMj37kd
3v/7y2HfyLBv9vF+Kn4n1Lfuf/LcUSFJ7Ju9wY1pteK+0/bHOfjPet/11X5C
cFXUj32z7fseVGga7v9if8NC48+GA+vsTd/LNdYd/mz/5sJaF2vBzfZsVfdY
OdZ8srfaO591zraN9vH6RrYW/R/tJSJ1V064scy+yetf4/PmD/YH+tZPispN
s/fb2HOZ1/69PXr4AwApccax
         "],
         SplineDegree->24]], InsetBox[
         StyleBox["\<\"b\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {-0.30544846318339514`, 1.2895112902399741`},
         Background->GrayLevel[1]]}}, {
       {RGBColor[1, 1, 0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{1.944934484934091, 0.4869131293713701}, 0.1], 
        DiskBox[{1.944934484934091, 0.4869131293713701}, 0.06999999999999999],
         InsetBox["1", {1.944934484934091, 0.4869131293713701},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{1.0809082023413574`, 0.035904784667003864`}, 0.1], 
        DiskBox[{1.0809082023413574`, 0.035904784667003864`}, 
         0.06999999999999999], InsetBox["2", {1.0809082023413574`, 0.035904784667003864`},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{1.0809613151982074`, 0.9376118609509367}, 0.1], 
        DiskBox[{1.0809613151982074`, 0.9376118609509367}, 
         0.06999999999999999], InsetBox["3", {1.0809613151982074`, 0.9376118609509367},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{0.00007263143566471619, 0.}, 0.1], 
        DiskBox[{0.00007263143566471619, 0.}, 0.06999999999999999], 
        InsetBox["4", {0.00007263143566471619, 0.},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{0., 0.9737145167850567}, 0.1], 
        DiskBox[{0., 0.9737145167850567}, 0.06999999999999999], 
        InsetBox["5", {0., 0.9737145167850567},
         BaseStyle->{
           GrayLevel[0], 12}]}}},
     Annotation[#, 
      VertexCoordinateRules -> {{1.944934484934091, 0.4869131293713701}, {
       1.0809082023413574`, 0.035904784667003864`}, {1.0809613151982074`, 
       0.9376118609509367}, {0.00007263143566471619, 0.}, {0., 
       0.9737145167850567}}]& ],
    AspectRatio->Automatic,
    FrameTicks->None,
    ImageSize->Large,
    PlotRange->All,
    PlotRangePadding->Scaled[0.1]]}], "}"}]], "Output",
 CellChangeTimes->{{3.641033555898215*^9, 3.6410336133395*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Equivalence of DFA", "Section",
 CellChangeTimes->{{3.6403300808621626`*^9, 3.640330083413308*^9}, {
  3.640856843662017*^9, 3.6408568451211004`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"DFAEquivalentQ", "[", 
   RowBox[{"A_", ",", "B_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"DFAMinimize", "[", 
      RowBox[{"DFADifference", "[", 
       RowBox[{"A", ",", "B"}], "]"}], "]"}], "\[LeftDoubleBracket]", "5", 
     "\[RightDoubleBracket]"}], "\[Equal]", 
    RowBox[{"{", "}"}]}], "&&", 
   RowBox[{
    RowBox[{
     RowBox[{"DFAMinimize", "[", 
      RowBox[{"DFADifference", "[", 
       RowBox[{"B", ",", "A"}], "]"}], "]"}], "\[LeftDoubleBracket]", "5", 
     "\[RightDoubleBracket]"}], "\[Equal]", 
    RowBox[{"{", "}"}]}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6403300869465103`*^9, 3.640330144614809*^9}, {
  3.641034487110477*^9, 3.6410345010202723`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Tree automaton", "Section",
 CellChangeTimes->{{3.6400708315802374`*^9, 3.6400708455380354`*^9}, {
  3.6408568550956707`*^9, 3.6408568556347017`*^9}}],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "TreeDFA", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TreeDFA", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[CapitalSigma]_"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", "1", "}"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"ConstantArray", "[", 
     RowBox[{"1", ",", 
      RowBox[{"Length", "@", "\[CapitalSigma]"}]}], "]"}], ",", "1", ",", 
    RowBox[{"{", "}"}]}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TreeDFA", "[", 
   RowBox[{
    RowBox[{"{", "\"\<\>\"", "}"}], ",", "\[CapitalSigma]_"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", "}"}], ",", 
    RowBox[{"ConstantArray", "[", 
     RowBox[{"2", ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", 
        RowBox[{"Length", "@", "\[CapitalSigma]"}]}], "}"}]}], "]"}], ",", 
    "1", ",", 
    RowBox[{"{", "1", "}"}]}], "}"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TreeDFA", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a_", ",", "b__"}], "}"}], ",", "\[CapitalSigma]_"}], "]"}], ":=", 
  RowBox[{"DFAMinimize", "@", 
   RowBox[{"DFAUnion", "[", 
    RowBox[{
     RowBox[{"TreeDFA", "[", 
      RowBox[{
       RowBox[{"{", "a", "}"}], ",", "\[CapitalSigma]"}], "]"}], ",", 
     RowBox[{"TreeDFA", "[", 
      RowBox[{
       RowBox[{"{", "b", "}"}], ",", "\[CapitalSigma]"}], "]"}]}], 
    "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TreeDFA", "[", 
   RowBox[{
    RowBox[{"{", "a_", "}"}], ",", "\[CapitalSigma]_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Qn", "=", 
       RowBox[{
        RowBox[{"StringLength", "@", "a"}], "+", "2"}]}], ",", 
      RowBox[{"c", "=", 
       RowBox[{"Characters", "@", "a"}]}], ",", "m"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"m", "=", 
      RowBox[{"ConstantArray", "[", 
       RowBox[{"Qn", ",", 
        RowBox[{"{", 
         RowBox[{"Qn", ",", 
          RowBox[{"Length", "@", "\[CapitalSigma]"}]}], "}"}]}], "]"}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"Do", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"m", "\[LeftDoubleBracket]", 
         RowBox[{"i", ",", 
          RowBox[{"First", "@", 
           RowBox[{"FirstPosition", "[", 
            RowBox[{"\[CapitalSigma]", ",", 
             RowBox[{
             "c", "\[LeftDoubleBracket]", "i", "\[RightDoubleBracket]"}]}], 
            "]"}]}]}], "\[RightDoubleBracket]"}], "=", 
        RowBox[{"i", "+", "1"}]}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", 
         RowBox[{"Length", "@", "c"}]}], "}"}]}], "]"}], ";", " ", 
     "\[IndentingNewLine]", 
     RowBox[{"DFAMinimize", "@", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Range", "@", 
         RowBox[{"Length", "@", "m"}]}], ",", "\[CapitalSigma]", ",", "m", 
        ",", "1", ",", 
        RowBox[{"{", 
         RowBox[{"Qn", "-", "1"}], "}"}]}], "}"}]}]}]}], "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.633713898725501*^9, 3.633713903651783*^9}, {
   3.633713977153987*^9, 3.633714098951954*^9}, {3.633714139546275*^9, 
   3.6337141577313156`*^9}, {3.6337144628807693`*^9, 3.633714492765478*^9}, {
   3.633714535923947*^9, 3.63371465329066*^9}, {3.6337147539014144`*^9, 
   3.633714823384389*^9}, {3.633716191897663*^9, 3.633716195631877*^9}, {
   3.6341479936890163`*^9, 3.634148005523693*^9}, {3.634148038100556*^9, 
   3.6341480405576963`*^9}, {3.63414810774954*^9, 3.634148128634734*^9}, {
   3.6341482214310417`*^9, 3.634148224823236*^9}, {3.634728868467966*^9, 
   3.6347289168407335`*^9}, {3.634729120399376*^9, 3.6347291334481225`*^9}, {
   3.6347292290575914`*^9, 3.6347292376170807`*^9}, {3.634729392387933*^9, 
   3.6347294404196806`*^9}, {3.634729582854827*^9, 3.634729612145502*^9}, {
   3.63499671073732*^9, 3.6349967288423553`*^9}, {3.634996762199263*^9, 
   3.6349967921249747`*^9}, {3.6369558572821865`*^9, 3.636955874742185*^9}, 
   3.6369579556364346`*^9, {3.6385312860570726`*^9, 3.6385312866071043`*^9}, {
   3.638531350595764*^9, 3.638531424687002*^9}, {3.638531467775467*^9, 
   3.6385315133590736`*^9}, {3.638531600955084*^9, 3.6385316185590906`*^9}, {
   3.6385319381523705`*^9, 3.638532020020053*^9}, {3.6385321470923214`*^9, 
   3.6385321471563253`*^9}, {3.638532180954258*^9, 3.6385321816272964`*^9}, {
   3.6409438518942404`*^9, 3.6409438574915605`*^9}, {3.6409439277285776`*^9, 
   3.64094393982827*^9}, {3.641034047360325*^9, 3.641034117422332*^9}, {
   3.6410342223103313`*^9, 3.641034251775017*^9}, {3.641034294508461*^9, 
   3.6410343231731005`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DFAPlot", "[", 
  RowBox[{
   RowBox[{"TreeDFA", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\<a\>\"", ",", "\"\<aa\>\"", ",", "\"\<ab\>\"", ",", "\"\<ba\>\"", 
       ",", "\"\<bb\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<a\>\"", ",", "\"\<b\>\""}], "}"}]}], "]"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "Medium"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.633715782797264*^9, 3.633715785736432*^9}, 
   3.634148281064453*^9, 3.6347288951924953`*^9, {3.6347296736860223`*^9, 
   3.634729699384492*^9}, {3.6385321313894234`*^9, 3.63853213151443*^9}, {
   3.6385321933199654`*^9, 3.6385321990002904`*^9}, {3.6385330633847303`*^9, 
   3.6385330701711187`*^9}, {3.6388726977365465`*^9, 3.638872699055622*^9}, {
   3.6410339467575703`*^9, 3.641033964807603*^9}, {3.641034068694545*^9, 
   3.6410340714267015`*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[{{
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0., 0.5650756547013576}, {0.7354355917133046,
        1.130102527014437}},
       SplineDegree->1]], InsetBox[
       StyleBox["\<\"a\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.3677177958566523, 0.8475890908578972},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0., 0.5650756547013576}, {0.7353593689709983,
        0.}},
       SplineDegree->1]], InsetBox[
       StyleBox["\<\"b\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.36767968448549915`, 0.2825378273506788},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.7354355917133046, 1.130102527014437}, {
       1.6025748271059461`, 0.5650285218811664}},
       SplineDegree->1]], InsetBox[
       StyleBox["\<\"\[CapitalSigma]\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.1690052094096255`, 0.8475655244478016},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.7353593689709983, 0.}, {
       1.6025748271059461`, 0.5650285218811664}},
       SplineDegree->1]], InsetBox[
       StyleBox["\<\"\[CapitalSigma]\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.1689670980384723`, 0.2825142609405832},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{1.6025748271059461`, 0.5650285218811664}, {
       2.6689970044580145`, 0.5650481526615428}},
       SplineDegree->1]], InsetBox[
       StyleBox["\<\"\[CapitalSigma]\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {2.1357859157819803`, 0.5650383372713546},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQbaT+S1I6itXhvhj33fsij+x1C0LSrYF87XncLVym
j+zDqthXMheyOthKN/++XPjE3uzXkgXs61kdHi3t5JSoe2Zf2udw35efzSF5
W0XESf0X9lcO8NbIdrE58HN9y5RLeWn/Tad02RxRdgf/yviX0Uyv7H30At7O
WsbuYHGNr+XC35f2+c4bGMsNORyeuQZ23wx7aR++yKmddzWHw+Q5phW3pV7Y
r0urOjWXk9OhTeTpK73kZ/YO02RZJrlyOpTmlppIBD+x57L7DnQ/p8P2vByt
z0D3L9YuiJsMlF/iUrRl1tr79r+UI5IXAPXbFMQfyui9bV8pHq4pCDTfibOu
jUPuhn2+UGJSNdD+tKpEU+ZlV+0jP+/YNB/ovprFs09zRVyxL42cm7cQ6H6F
Ge5CL/2u2CdEHXmiCPTfj5yansjuq/blJX96A4H+1/J8kfPr83X75d+Pe3IB
wydHO+dEaPht+wzW96KswPA7optsfjP/vn1x9+4qUPheWetkvvXLQ3v08AcA
BRCnOw==
       "],
       SplineDegree->24]], InsetBox[
       StyleBox["\<\"\[CapitalSigma]\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {3.1150526038556, 0.5650563636868707},
       Background->GrayLevel[1]]}}, {
     {RGBColor[1, 1, 0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{0., 0.5650756547013576}, 0.1], InsetBox["1", {0., 0.5650756547013576},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{0.7354355917133046, 1.130102527014437}, 0.1], 
      DiskBox[{0.7354355917133046, 1.130102527014437}, 0.06999999999999999], 
      InsetBox["2", {0.7354355917133046, 1.130102527014437},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{0.7353593689709983, 0.}, 0.1], InsetBox["3", {0.7353593689709983, 0.},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{1.6025748271059461`, 0.5650285218811664}, 0.1], 
      DiskBox[{1.6025748271059461`, 0.5650285218811664}, 0.06999999999999999],
       InsetBox["4", {1.6025748271059461`, 0.5650285218811664},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{2.6689970044580145`, 0.5650481526615428}, 0.1], InsetBox["5", {2.6689970044580145`, 0.5650481526615428},
       BaseStyle->{
         GrayLevel[0], 12}]}}},
   Annotation[#, 
    VertexCoordinateRules -> {{0., 0.5650756547013576}, {0.7354355917133046, 
     1.130102527014437}, {0.7353593689709983, 0.}, {1.6025748271059461`, 
     0.5650285218811664}, {2.6689970044580145`, 0.5650481526615428}}]& ],
  AspectRatio->Automatic,
  FrameTicks->None,
  ImageSize->Medium,
  PlotRange->All,
  PlotRangePadding->Scaled[0.1]]], "Output",
 CellChangeTimes->{{3.641033949803745*^9, 3.641033965147622*^9}, {
   3.6410340662734065`*^9, 3.6410340717947226`*^9}, 3.6410343275773525`*^9, 
   3.641034379523323*^9, {3.641034480953125*^9, 3.6410345087867165`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\[DoubleStruckCapitalA]", "=", 
      RowBox[{"Characters", "@", "\"\<ab\>\""}]}], ",", 
     RowBox[{"\[DoubleStruckCapitalO]", "=", 
      RowBox[{"Characters", "@", "\"\<+-\>\""}]}], ",", "\[CapitalSigma]", 
     ",", "M"}], "}"}], ",", 
   RowBox[{
    RowBox[{"\[CapitalSigma]", "=", 
     RowBox[{
     "\[DoubleStruckCapitalA]", "~", "Join", "~", 
      "\[DoubleStruckCapitalO]"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"Row", "@", 
     RowBox[{"Flatten", "@", 
      RowBox[{"Riffle", "[", 
       RowBox[{
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Column", "[", 
           RowBox[{"StringJoin", "@@@", 
            RowBox[{"Flatten", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"Through", "[", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"o", "\[Function]", 
                    RowBox[{
                    RowBox[{"Riffle", "[", 
                    RowBox[{"#", ",", "o"}], "]"}], "&"}]}], ")"}], "/@", 
                    "\[DoubleStruckCapitalO]"}], ")"}], "@", "#"}], "]"}], 
                "&"}], "/@", 
               RowBox[{"Tuples", "[", 
                RowBox[{"\[DoubleStruckCapitalA]", ",", 
                 RowBox[{"{", 
                  RowBox[{"Length", "@", "\[DoubleStruckCapitalO]"}], "}"}]}],
                 "]"}]}], ",", "1"}], "]"}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"DFAPlot", "[", 
           RowBox[{
            RowBox[{"M", "=", 
             RowBox[{"TreeDFA", "[", 
              RowBox[{
               RowBox[{"StringJoin", "@@@", 
                RowBox[{"Flatten", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{
                    RowBox[{"Through", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"o", "\[Function]", 
                    RowBox[{
                    RowBox[{"Riffle", "[", 
                    RowBox[{"#", ",", "o"}], "]"}], "&"}]}], ")"}], "/@", 
                    "\[DoubleStruckCapitalO]"}], ")"}], "@", "#"}], "]"}], 
                    "&"}], "/@", 
                   RowBox[{"Tuples", "[", 
                    RowBox[{"\[DoubleStruckCapitalA]", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "@", "\[DoubleStruckCapitalO]"}], 
                    "}"}]}], "]"}]}], ",", "1"}], "]"}]}], ",", 
               "\[CapitalSigma]"}], "]"}]}], ",", 
            RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Column", "@", 
           RowBox[{"Flatten", "@", 
            RowBox[{"Array", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"DFAAcceptedWords", "[", 
                RowBox[{"M", ",", "#"}], "]"}], "&"}], ",", "3", ",", "2"}], 
             "]"}]}]}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Spacer", "[", "20", "]"}], ",", 
           RowBox[{"Style", "[", 
            RowBox[{
            "\"\<\[DoubleLongRightArrow]\>\"", ",", "Bold", ",", "20"}], 
            "]"}], ",", 
           RowBox[{"Spacer", "[", "20", "]"}]}], "}"}], "}"}]}], 
       "]"}]}]}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6380044602291307`*^9, 3.638004696708657*^9}, {
   3.638004730822608*^9, 3.63800488156223*^9}, {3.6380049147351274`*^9, 
   3.638005256072651*^9}, {3.638005303903386*^9, 3.638005329038824*^9}, {
   3.638005359952592*^9, 3.6380054316436925`*^9}, {3.6380054805814915`*^9, 
   3.638005513468373*^9}, {3.6385314796501455`*^9, 3.6385314799061604`*^9}, 
   3.638532093128235*^9, {3.638532220885542*^9, 3.6385322848812027`*^9}, {
   3.6385323413974347`*^9, 3.6385323425264997`*^9}, {3.638532384703912*^9, 
   3.6385324034919863`*^9}, {3.638532915370264*^9, 3.638532941239744*^9}, {
   3.638532997451959*^9, 3.6385331143796473`*^9}, {3.63853314625047*^9, 
   3.6385332319853735`*^9}, {3.6385332883745985`*^9, 
   3.6385333737944846`*^9}, {3.638533419659108*^9, 3.638533484802834*^9}, {
   3.638533525412157*^9, 3.638533540591025*^9}, {3.638533634582401*^9, 
   3.638533634693407*^9}, {3.6386185998395953`*^9, 3.638618601591696*^9}, {
   3.6387702197738123`*^9, 3.6387702198068137`*^9}, {3.6388726949513874`*^9, 
   3.6388726951183968`*^9}, {3.6391317878177238`*^9, 3.639131789424816*^9}, {
   3.641033969736885*^9, 3.641033998899553*^9}}],

Cell[BoxData[
 TemplateBox[{TagBox[
    GridBox[{{"\"a+a\""}, {"\"a-a\""}, {"\"a+b\""}, {"\"a-b\""}, {
      "\"b+a\""}, {"\"b-a\""}, {"\"b+b\""}, {"\"b-b\""}}, 
     GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
     "Column", 
     GridBoxItemSize -> {
      "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"],
   InterpretationBox[
    StyleBox[
     GraphicsBox[{}, ImageSize -> {20, 0}, BaselinePosition -> Baseline], 
     "CacheGraphics" -> False], 
    Spacer[20]],StyleBox[
   "\"\[DoubleLongRightArrow]\"", Bold, 20, StripOnInput -> False],
   InterpretationBox[
    StyleBox[
     GraphicsBox[{}, ImageSize -> {20, 0}, BaselinePosition -> Baseline], 
     "CacheGraphics" -> False], 
    Spacer[20]],GraphicsBox[
    TagBox[{{{
        GrayLevel[0], 
        Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[
         BSplineCurveBox[{{0., 0.}, {0.5705918755818113, 0.7699995303036284}},
           SplineDegree -> 1]], 
        InsetBox[
         FormBox[
          StyleBox[
           RowBox[{"{", 
             RowBox[{"\"a\"", ",", "\"b\""}], "}"}], 
           GrayLevel[0], 12, StripOnInput -> False], TraditionalForm], {
         0.2852959377909057, 0.3849997651518142}, Background -> 
         GrayLevel[1]]}, {
        GrayLevel[0], 
        Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[
         BSplineCurveBox[{{0., 0.}, {1.1001356715938173`, 
          0.04142866392483047}}, SplineDegree -> 1]], 
        InsetBox[
         FormBox[
          StyleBox[
           RowBox[{"{", 
             RowBox[{"\"+\"", ",", "\"-\""}], "}"}], 
           GrayLevel[0], 12, StripOnInput -> False], TraditionalForm], {
         0.5500678357969087, 0.020714331962415233`}, Background -> 
         GrayLevel[1]]}, {
        GrayLevel[0], 
        Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[
         BSplineCurveBox[{{0.5705918755818113, 0.7699995303036284}, {
          1.1001356715938173`, 0.04142866392483047}}, SplineDegree -> 1]], 
        InsetBox[
         FormBox[
          StyleBox[
           RowBox[{"{", 
             RowBox[{"\"a\"", ",", "\"b\""}], "}"}], 
           GrayLevel[0], 12, StripOnInput -> False], TraditionalForm], {
         0.8353637735878143, 0.40571409711422945`}, Background -> 
         GrayLevel[1]]}, {
        GrayLevel[0], 
        Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[
         BSplineCurveBox[{{0.5705918755818113, 0.7699995303036284}, {
          1.6280902790241245`, 0.7704172037025725}}, SplineDegree -> 1]], 
        InsetBox[
         FormBox[
          StyleBox[
           RowBox[{"{", 
             RowBox[{"\"+\"", ",", "\"-\""}], "}"}], 
           GrayLevel[0], 12, StripOnInput -> False], TraditionalForm], {
         1.099341077302968, 0.7702083670031005}, Background -> 
         GrayLevel[1]]}, {{
         GrayLevel[0], 
         Arrowheads[{{Automatic, 0.8}}], 
         ArrowBox[
          BSplineCurveBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/atj1R31WR/tG9QiPZXNltp/yEpZ4Pryk32CsdTU
h6c77O8blLOtO/nZ/obaT9cJBhP2r/8tICvV9sW+5M7EN9l/1uxf/3OBbLbQ
V3tJbRnD7RN2778sdT97VupX+5IOY0Mjs6P7LT0/m/lVfbVX/h/81oPv7P7r
3pnTDP2/2hv/9NXYlX5pf/ChH+Vcz7/YW6ycosL49+r+X55sX7s9vtiX/z1T
/YP75v6tt2/9f1772d4jdfU3p6Tb++dHuDeqTwG6r3BHQcrNO/vjxd03BwPd
z5vxZYp15N39Ug027XULPtgfuHPToh8oH+Ulw1WS+95e7X3+salA/bqaiwLl
b7y1d+Lq/J/Lc3O/yvvOTsHZb+xv8aufnQi0/8TTmFXrT722lxGctTwm49L+
n2ymWoklr+1zMpdsnMN/dr/YkninzXNf2795Zvegzvzo/o64e81/nd/YczJ9
nS4+efd+fS3jOb0xb+3fnGxoy2FYu18hekdl+NV39ieCzzn2mk3YnxNabcvv
/cG+YLWV69YjHfbo4Q8AK2LR5g==
           "], SplineDegree -> 24]], 
         InsetBox[
          FormBox[
           StyleBox["\"\[CapitalSigma]\"", 
            GrayLevel[0], 12, StripOnInput -> False], TraditionalForm], {
          1.100173895184025, -0.41570944460747683`}, Background -> 
          GrayLevel[1]]}}, {
        GrayLevel[0], 
        Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[
         BSplineCurveBox[{{1.6280902790241245`, 0.7704172037025725}, {
          2.199438648450946, 0.00021545335017375544`}}, SplineDegree -> 1]], 
        InsetBox[
         FormBox[
          StyleBox[
           RowBox[{"{", 
             RowBox[{"\"a\"", ",", "\"b\""}], "}"}], 
           GrayLevel[0], 12, StripOnInput -> False], TraditionalForm], {
         1.9137644637375353`, 0.3853163285263731}, Background -> 
         GrayLevel[1]]}, {
        GrayLevel[0], 
        Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[
         BSplineCurveBox[{{1.6280902790241245`, 0.7704172037025725}, {
          1.1001356715938173`, 0.04142866392483047}}, SplineDegree -> 1]], 
        InsetBox[
         FormBox[
          StyleBox[
           RowBox[{"{", 
             RowBox[{"\"+\"", ",", "\"-\""}], "}"}], 
           GrayLevel[0], 12, StripOnInput -> False], TraditionalForm], {
         1.364112975308971, 0.4059229338137015}, Background -> 
         GrayLevel[1]]}, {
        GrayLevel[0], 
        Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[
         BSplineCurveBox[{{2.199438648450946, 0.00021545335017375544`}, {
          1.1001356715938173`, 0.04142866392483047}}, SplineDegree -> 1]], 
        InsetBox[
         FormBox[
          StyleBox["\"\[CapitalSigma]\"", 
           GrayLevel[0], 12, StripOnInput -> False], TraditionalForm], {
         1.6497871600223817`, 0.02082205863750211}, Background -> 
         GrayLevel[1]]}}, {{
        RGBColor[1, 1, 0.85], 
        EdgeForm[
         GrayLevel[0]], Null, 
        DiskBox[{0., 0.}, 0.1], Null, 
        InsetBox[
         FormBox["1", TraditionalForm], {0., 0.}, BaseStyle -> {
           GrayLevel[0], 12}]}, {
        GrayLevel[0.85], 
        EdgeForm[
         GrayLevel[0]], Null, 
        DiskBox[{0.5705918755818113, 0.7699995303036284}, 0.1], Null, 
        InsetBox[
         FormBox["2", TraditionalForm], {0.5705918755818113, 
         0.7699995303036284}, BaseStyle -> {
           GrayLevel[0], 12}]}, {
        GrayLevel[0.85], 
        EdgeForm[
         GrayLevel[0]], Null, 
        DiskBox[{1.1001356715938173`, 0.04142866392483047}, 0.1], Null, 
        InsetBox[
         FormBox["3", TraditionalForm], {1.1001356715938173`, 
         0.04142866392483047}, BaseStyle -> {
           GrayLevel[0], 12}]}, {
        GrayLevel[0.85], 
        EdgeForm[
         GrayLevel[0]], Null, 
        DiskBox[{1.6280902790241245`, 0.7704172037025725}, 0.1], Null, 
        InsetBox[
         FormBox["4", TraditionalForm], {1.6280902790241245`, 
         0.7704172037025725}, BaseStyle -> {
           GrayLevel[0], 12}]}, {
        GrayLevel[0.85], 
        EdgeForm[
         GrayLevel[0]], Null, 
        DiskBox[{2.199438648450946, 0.00021545335017375544`}, 0.1], 
        DiskBox[{2.199438648450946, 0.00021545335017375544`}, 
         0.06999999999999999], 
        InsetBox[
         FormBox["5", TraditionalForm], {2.199438648450946, 
         0.00021545335017375544`}, BaseStyle -> {
           GrayLevel[0], 12}]}}}, 
     Annotation[#, 
      VertexCoordinateRules -> {{0., 0.}, {0.5705918755818113, 
       0.7699995303036284}, {1.1001356715938173`, 0.04142866392483047}, {
       1.6280902790241245`, 0.7704172037025725}, {2.199438648450946, 
       0.00021545335017375544`}}]& ], FrameTicks -> None, PlotRange -> All, 
    PlotRangePadding -> Scaled[0.1], AspectRatio -> Automatic, ImageSize -> 
    Large],InterpretationBox[
    StyleBox[
     GraphicsBox[{}, ImageSize -> {20, 0}, BaselinePosition -> Baseline], 
     "CacheGraphics" -> False], 
    Spacer[20]],StyleBox[
   "\"\[DoubleLongRightArrow]\"", Bold, 20, StripOnInput -> False],
   InterpretationBox[
    StyleBox[
     GraphicsBox[{}, ImageSize -> {20, 0}, BaselinePosition -> Baseline], 
     "CacheGraphics" -> False], 
    Spacer[20]],TagBox[
    GridBox[{{"\"a+a\""}, {"\"a+b\""}, {"\"a-a\""}, {"\"a-b\""}, {
      "\"b+a\""}, {"\"b+b\""}, {"\"b-a\""}, {"\"b-b\""}}, 
     GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
     "Column", 
     GridBoxItemSize -> {
      "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]},
  "RowDefault"]], "Output",
 CellChangeTimes->{{3.64103397192301*^9, 3.641033999734601*^9}, 
   3.6410343984424057`*^9, 3.641034526883752*^9}]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Regular grammars", "Chapter",
 CellChangeTimes->{{3.6410350019899263`*^9, 3.6410350055581303`*^9}}],

Cell[CellGroupData[{

Cell["Regular grammar", "Subchapter",
 CellChangeTimes->{{3.6408567264243116`*^9, 3.6408567583941402`*^9}}],

Cell[CellGroupData[{

Cell["Test examples", "Section",
 CellChangeTimes->{{3.640857173084859*^9, 3.6408571769440794`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"RG", "=", 
   RowBox[{"<|", "|>"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.640857191541915*^9, 3.6408571997863865`*^9}, {
  3.6408573043733683`*^9, 3.6408573092976503`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"RG", "@", "\"\<Only 0\>\""}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", "\"\<S\>\"", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<\>\"", ",", "\"\<0\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"True", ",", "2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"False", ",", "1"}], "}"}]}], "}"}]}], ",", 
       RowBox[{"1", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"True", ",", "1"}], "}"}], "}"}]}]}], "}"}], ",", "1"}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"RG", "@", "\"\<Dif 01\>\""}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<S\>\"", ",", "\"\<A\>\"", ",", "\"\<B\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<\>\"", ",", "\"\<0\>\"", ",", "\"\<1\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"False", ",", "2"}], "}"}], "}"}]}], ",", 
       RowBox[{"1", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"False", ",", "3"}], "}"}], "}"}]}], ",", 
       RowBox[{"2", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"True", ",", "1"}], "}"}], "}"}]}], ",", 
       RowBox[{"3", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"True", ",", "1"}], "}"}], "}"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"2", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"True", ",", "2"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"False", ",", "3"}], "}"}]}], "}"}]}], ",", 
       RowBox[{"3", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"True", ",", "3"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"False", ",", "2"}], "}"}]}], "}"}]}]}], "}"}], ",", "1"}],
     "}"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6408584965105543`*^9, 3.6408586294251566`*^9}, {
   3.6408587542332954`*^9, 3.6408588783693953`*^9}, {3.6408696977005477`*^9, 
   3.640869754307785*^9}, {3.6408698041686373`*^9, 3.64086981069501*^9}, 
   3.640926670171502*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["Normal form", "Section",
 CellChangeTimes->{{3.641035217400247*^9, 3.641035219597373*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "RRGNormalize", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RRGNormalize", "@", 
   RowBox[{"{", 
    RowBox[{"N_", ",", "T_", ",", "P_", ",", "S_"}], "}"}]}], ":=", 
  RowBox[{"Join", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"FixedPoint", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Length", "@", "#"}], ">", "1"}], ",", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"#", ",", 
                 RowBox[{"Range", "@", 
                  RowBox[{"Length", "@", "#"}]}]}], "}"}], "\[Transpose]"}], 
              ",", "#"}], "]"}], "&"}], "/@", 
           RowBox[{"Gather", "@", "#"}]}], ",", "1"}], "]"}], "&"}], ",", 
       "N"}], "]"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"Tr", "=", 
        RowBox[{"DeleteDuplicates", "@", "T"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Tr", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"P", "/.", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{"False", ",", "i_"}], "}"}], ":>", 
             RowBox[{"{", 
              RowBox[{"False", ",", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"i", "<", "0"}], ",", 
                 RowBox[{
                  RowBox[{"Length", "@", "N"}], "+", "1", "+", "i"}], ",", 
                 "i"}], "]"}]}], "}"}]}], ",", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"True", ",", "i_"}], "}"}], ":>", 
             RowBox[{"{", 
              RowBox[{"True", ",", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"i", "<", "0"}], ",", 
                 RowBox[{
                  RowBox[{"Length", "@", "T"}], "+", "1", "+", "i"}], ",", 
                 "i"}], "]"}]}], "}"}]}]}], "}"}]}], "/.", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"True", ",", "i_"}], "}"}], ":>", 
          RowBox[{"{", 
           RowBox[{"True", ",", 
            RowBox[{"i", "/.", 
             RowBox[{"Evaluate", "@", 
              RowBox[{"Flatten", "@", 
               RowBox[{"MapThread", "[", 
                RowBox[{
                 RowBox[{"Thread", "@*", "Rule"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"Flatten", "@", 
                    RowBox[{"Position", "[", 
                    RowBox[{"T", ",", "#", ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}], "&"}], "/@", "Tr"}], 
                   ",", 
                   RowBox[{"Range", "@", 
                    RowBox[{"Length", "@", "Tr"}]}]}], "}"}]}], "]"}]}]}]}]}],
            "}"}]}]}], ",", "S"}], "}"}]}], "]"}]}], "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.63921619707321*^9, 3.6392162017384768`*^9}, {
   3.639216232186218*^9, 3.6392164760441656`*^9}, {3.6392167162129025`*^9, 
   3.6392167176619854`*^9}, {3.6392170481608887`*^9, 
   3.6392170901812925`*^9}, {3.639217206740959*^9, 3.6392173408646307`*^9}, {
   3.63921741218671*^9, 3.639217435054018*^9}, {3.639217499004676*^9, 
   3.639217592985051*^9}, 3.639217670752499*^9, {3.639217725198613*^9, 
   3.63921773353109*^9}, {3.639217780255762*^9, 3.6392178567161355`*^9}, {
   3.639217929736312*^9, 3.639217936430695*^9}, {3.6392180048646092`*^9, 
   3.639218132890932*^9}, {3.6392181646007457`*^9, 3.6392182596571827`*^9}, {
   3.639222278792804*^9, 3.6392222837280865`*^9}, {3.63922243293162*^9, 
   3.639222434874731*^9}, {3.6392244549242716`*^9, 3.639224525989336*^9}, {
   3.639224819864145*^9, 3.6392248324528646`*^9}, {3.63923840921854*^9, 
   3.6392384123337183`*^9}, {3.639238993233944*^9, 3.6392390621968884`*^9}, {
   3.639239191636292*^9, 3.63923921887685*^9}, {3.639242393759443*^9, 
   3.6392425241258993`*^9}, {3.6392459675648527`*^9, 
   3.6392459720131073`*^9}, {3.6392460026318583`*^9, 
   3.6392460697796993`*^9}, {3.639246340495183*^9, 3.6392463633844924`*^9}, {
   3.639809671656701*^9, 3.6398096866975613`*^9}, 3.639809717763338*^9, {
   3.639809769963324*^9, 3.6398098633776674`*^9}, 3.6398099241231413`*^9, {
   3.6398109923622413`*^9, 3.639811015556568*^9}, 3.6398116183990483`*^9, {
   3.640859761377901*^9, 3.640859804412362*^9}, {3.6408598462577553`*^9, 
   3.640859870839162*^9}, {3.640859997715419*^9, 3.64086009949424*^9}, {
   3.6408602356860294`*^9, 3.6408602361960588`*^9}, {3.6408668225247755`*^9, 
   3.6408668270330334`*^9}, {3.6409265874017677`*^9, 3.6409265927360725`*^9}, 
   3.6409266811811314`*^9, {3.6410351116141963`*^9, 3.641035111767205*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Regular grammar view", "Subchapter",
 CellChangeTimes->{{3.6409254970164013`*^9, 3.640925543538062*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"RGTable", "[", "F_", "]"}], ":=", 
  RowBox[{"Grid", "[", 
   RowBox[{
    RowBox[{"Transpose", "@", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "\"\<N\>\"", ",", "\"\<T\>\"", ",", "\"\<P\>\"", ",", "\"\<S\>\""}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"G", "\[Function]", 
          RowBox[{
           RowBox[{"MapAt", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Multicolumn", "[", 
               RowBox[{"#", ",", "5", ",", 
                RowBox[{"Dividers", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{"{", 
                   RowBox[{"False", ",", 
                    RowBox[{"{", "True", "}"}], ",", "False"}], "}"}], 
                  "}"}]}]}], "]"}], "&"}], ",", "3"}], "]"}], "@", 
           RowBox[{
            RowBox[{"MapAt", "[", 
             RowBox[{"InputForm", ",", 
              RowBox[{"{", 
               RowBox[{"3", ",", "All"}], "}"}]}], "]"}], "@", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"MapAt", "[", 
              RowBox[{
               RowBox[{"ReplaceAll", "@", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"True", ",", "i_"}], "}"}], "\[RuleDelayed]", 
                   RowBox[{"G", "\[LeftDoubleBracket]", 
                    RowBox[{"2", ",", "i"}], "\[RightDoubleBracket]"}]}], ",", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"False", ",", "i_"}], "}"}], "\[RuleDelayed]", 
                   RowBox[{"G", "\[LeftDoubleBracket]", 
                    RowBox[{"1", ",", "i"}], "\[RightDoubleBracket]"}]}]}], 
                 "}"}]}], ",", 
               RowBox[{"{", 
                RowBox[{"3", ",", "All", ",", "2"}], "}"}]}], "]"}], "@", 
             RowBox[{
              RowBox[{"MapAt", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"G", "\[LeftDoubleBracket]", 
                  RowBox[{"1", ",", "#"}], "\[RightDoubleBracket]"}], "&"}], 
                ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"3", ",", "All", ",", "1"}], "}"}], ",", 
                  RowBox[{"{", "4", "}"}]}], "}"}]}], "]"}], "@", 
              "G"}]}]}]}]}], ")"}], "@", "\[IndentingNewLine]", 
        RowBox[{"RRGNormalize", "@", 
         RowBox[{
          RowBox[{"MapAt", "[", 
           RowBox[{
            RowBox[{"Range", "@*", "Length"}], ",", "1"}], "]"}], "@", 
          "F"}]}]}]}], "}"}]}], ",", 
    RowBox[{"Dividers", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"False", ",", "True"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"False", ",", 
         RowBox[{"{", "True", "}"}], ",", "False"}], "}"}]}], "}"}]}], ",", 
    RowBox[{"Alignment", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"Right", ",", "Left"}], "}"}], "}"}]}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.640925564179243*^9, 3.6409255921008396`*^9}, {
  3.640925625430746*^9, 3.6409256349432907`*^9}, {3.640925992678752*^9, 
  3.6409260052034683`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Operations on regular grammars", "Subchapter",
 CellChangeTimes->{{3.640857025104395*^9, 3.640857039656227*^9}, {
  3.640857123573027*^9, 3.6408571238260417`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"RRGUnion", "[", 
   RowBox[{"F_", ",", "G__"}], "]"}], ":=", 
  RowBox[{"Fold", "[", 
   RowBox[{"RRGUnion", ",", "F", ",", 
    RowBox[{"{", "G", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RRGUnion", "[", 
   RowBox[{"F_", ",", "G_"}], "]"}], ":=", 
  RowBox[{"RRGNormalize", "@", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"F", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
       ",", 
       RowBox[{"G", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
       ",", 
       RowBox[{"{", "1", "}"}]}], "]"}], ",", 
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"F", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
       ",", 
       RowBox[{"G", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
      "]"}], ",", 
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"F", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
       ",", 
       RowBox[{
        RowBox[{
         RowBox[{"G", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
         "/.", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"i_", "\[Rule]", "j_"}], ")"}], "\[Rule]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"i", "+", 
             RowBox[{"Length", "@", 
              RowBox[{
              "F", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}]}],
             "\[Rule]", " ", "j"}], ")"}]}]}], "/.", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"False", ",", "k_"}], "}"}], "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"False", ",", 
             RowBox[{"k", "+", 
              RowBox[{"Length", "@", 
               RowBox[{
               "F", "\[LeftDoubleBracket]", "1", 
                "\[RightDoubleBracket]"}]}]}]}], "}"}]}], ",", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"True", ",", "k_"}], "}"}], "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"True", ",", 
             RowBox[{"k", "+", 
              RowBox[{"Length", "@", 
               RowBox[{
               "F", "\[LeftDoubleBracket]", "2", 
                "\[RightDoubleBracket]"}]}]}]}], "}"}]}]}], "}"}]}], ",", 
       RowBox[{"Thread", "[", 
        RowBox[{
         RowBox[{"-", "1"}], "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"False", ",", 
              RowBox[{
              "F", "\[LeftDoubleBracket]", "4", "\[RightDoubleBracket]"}]}], 
             "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"False", ",", 
              RowBox[{
               RowBox[{"Length", "@", 
                RowBox[{
                "F", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}],
                "+", 
               RowBox[{
               "G", "\[LeftDoubleBracket]", "4", 
                "\[RightDoubleBracket]"}]}]}], "}"}], "}"}]}], "}"}]}], 
        "]"}]}], "]"}], ",", 
     RowBox[{"-", "1"}]}], "}"}]}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.640857191541915*^9, 3.6408571997863865`*^9}, {
   3.6408573043733683`*^9, 3.6408573168240805`*^9}, {3.6408601024404087`*^9, 
   3.640860102574416*^9}, {3.6408668741587286`*^9, 3.6408668789810047`*^9}, {
   3.640867025539387*^9, 3.6408670283215466`*^9}, {3.6408670792214575`*^9, 
   3.6408670810165606`*^9}, {3.6408671245850525`*^9, 3.640867223137689*^9}, 
   3.640869036583734*^9, {3.6408699660018935`*^9, 3.640869974996408*^9}, {
   3.640870018809914*^9, 3.6408700421382484`*^9}, 3.640925662198849*^9, {
   3.640926536879878*^9, 3.6409265382459564`*^9}, {3.6409265766291513`*^9, 
   3.6409265819814577`*^9}, {3.6409284764568157`*^9, 3.640928476571822*^9}, {
   3.640928570639202*^9, 3.6409285850850286`*^9}, {3.640929196081976*^9, 
   3.640929198920138*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RGTable", "/@", 
  RowBox[{
   RowBox[{"MapAt", "[", 
    RowBox[{
     RowBox[{"Apply", "@", "Sequence"}], ",", "1"}], "]"}], "@", 
   RowBox[{"ComposeList", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"Apply", "[", "RRGUnion", "]"}], "}"}], ",", 
     RowBox[{"RG", "/@", 
      RowBox[{"{", 
       RowBox[{"\"\<Only 0\>\"", ",", "\"\<Dif 01\>\""}], "}"}]}]}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.6408588862118444`*^9, 3.6408589208158236`*^9}, {
  3.640860344905277*^9, 3.6408603894218225`*^9}, {3.6409255979671755`*^9, 
  3.6409256025654383`*^9}, {3.6409260433386493`*^9, 3.6409262498074584`*^9}, {
  3.640926283806403*^9, 3.6409264398403273`*^9}, {3.6409264769364495`*^9, 
  3.6409264979876537`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[GridBox[{
      {"\<\"N\"\>", 
       RowBox[{"{", "1", "}"}]},
      {"\<\"T\"\>", 
       RowBox[{"{", 
        RowBox[{"\<\"\"\>", ",", "\<\"0\"\>"}], "}"}]},
      {"\<\"P\"\>", 
       TagBox[GridBox[{
          {
           InterpretationBox[
            StyleBox[
             RowBox[{"1", " ", "->", " ", 
              RowBox[{"{", 
               RowBox[{"\"\<0\>\"", ",", " ", "1"}], "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[1 -> {"0", 1}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"1", " ", "->", " ", 
              RowBox[{"{", "\"\<\>\"", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[1 -> {""}],
            AutoDelete->True,
            Editable->True], "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"}
         },
         AutoDelete->False,
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxDividers->{"Columns" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"]},
      {"\<\"S\"\>", "1"}
     },
     AutoDelete->False,
     GridBoxAlignment->{"Columns" -> {Right, Left}},
     GridBoxDividers->{
      "Columns" -> {False, True}, "Rows" -> {False, {True}, False}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
    "Grid"], ",", 
   TagBox[GridBox[{
      {"\<\"N\"\>", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3"}], "}"}]},
      {"\<\"T\"\>", 
       RowBox[{"{", 
        RowBox[{"\<\"\"\>", ",", "\<\"0\"\>", ",", "\<\"1\"\>"}], "}"}]},
      {"\<\"P\"\>", 
       TagBox[GridBox[{
          {
           InterpretationBox[
            StyleBox[
             RowBox[{"1", " ", "->", " ", 
              RowBox[{"{", "2", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[1 -> {2}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"2", " ", "->", " ", 
              RowBox[{"{", "\"\<\>\"", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[2 -> {""}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"2", " ", "->", " ", 
              RowBox[{"{", 
               RowBox[{"\"\<0\>\"", ",", " ", "3"}], "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[2 -> {"0", 3}],
            AutoDelete->True,
            Editable->True], "\<\"\"\>", "\<\"\"\>"},
          {
           InterpretationBox[
            StyleBox[
             RowBox[{"1", " ", "->", " ", 
              RowBox[{"{", "3", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[1 -> {3}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"3", " ", "->", " ", 
              RowBox[{"{", "\"\<\>\"", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[3 -> {""}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"3", " ", "->", " ", 
              RowBox[{"{", 
               RowBox[{"\"\<1\>\"", ",", " ", "2"}], "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[3 -> {"1", 2}],
            AutoDelete->True,
            Editable->True], "\<\"\"\>", "\<\"\"\>"}
         },
         AutoDelete->False,
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxDividers->{"Columns" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"]},
      {"\<\"S\"\>", "1"}
     },
     AutoDelete->False,
     GridBoxAlignment->{"Columns" -> {Right, Left}},
     GridBoxDividers->{
      "Columns" -> {False, True}, "Rows" -> {False, {True}, False}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
    "Grid"], ",", 
   TagBox[GridBox[{
      {"\<\"N\"\>", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]},
      {"\<\"T\"\>", 
       RowBox[{"{", 
        RowBox[{"\<\"\"\>", ",", "\<\"0\"\>", ",", "\<\"1\"\>"}], "}"}]},
      {"\<\"P\"\>", 
       TagBox[GridBox[{
          {
           InterpretationBox[
            StyleBox[
             RowBox[{"1", " ", "->", " ", 
              RowBox[{"{", 
               RowBox[{"\"\<0\>\"", ",", " ", "1"}], "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[1 -> {"0", 1}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"2", " ", "->", " ", 
              RowBox[{"{", "3", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[2 -> {3}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"3", " ", "->", " ", 
              RowBox[{"{", "\"\<\>\"", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[3 -> {""}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"3", " ", "->", " ", 
              RowBox[{"{", 
               RowBox[{"\"\<0\>\"", ",", " ", "4"}], "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[3 -> {"0", 4}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"5", " ", "->", " ", 
              RowBox[{"{", "1", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[5 -> {1}],
            AutoDelete->True,
            Editable->True]},
          {
           InterpretationBox[
            StyleBox[
             RowBox[{"1", " ", "->", " ", 
              RowBox[{"{", "\"\<\>\"", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[1 -> {""}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"2", " ", "->", " ", 
              RowBox[{"{", "4", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[2 -> {4}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"4", " ", "->", " ", 
              RowBox[{"{", "\"\<\>\"", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[4 -> {""}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"4", " ", "->", " ", 
              RowBox[{"{", 
               RowBox[{"\"\<1\>\"", ",", " ", "3"}], "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[4 -> {"1", 3}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"5", " ", "->", " ", 
              RowBox[{"{", "2", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[5 -> {2}],
            AutoDelete->True,
            Editable->True]}
         },
         AutoDelete->False,
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxDividers->{"Columns" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"]},
      {"\<\"S\"\>", "5"}
     },
     AutoDelete->False,
     GridBoxAlignment->{"Columns" -> {Right, Left}},
     GridBoxDividers->{
      "Columns" -> {False, True}, "Rows" -> {False, {True}, False}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
    "Grid"]}], "}"}]], "Output",
 CellChangeTimes->{
  3.640858922362912*^9, 3.640860107768713*^9, 3.6408602391402273`*^9, {
   3.640860363000312*^9, 3.6408603913159313`*^9}, 3.6408668300312047`*^9, {
   3.6408671516225986`*^9, 3.640867225020797*^9}, 3.640925603451489*^9, 
   3.640925639535553*^9, 3.640926008024629*^9, {3.64092608007175*^9, 
   3.640926241944009*^9}, {3.640926290099763*^9, 3.640926362095881*^9}, {
   3.6409264149189024`*^9, 3.640926440076341*^9}, {3.640926492717352*^9, 
   3.640926498484682*^9}, 3.6409265405110855`*^9, {3.6409265955982366`*^9, 
   3.640926605168784*^9}, {3.640926672860656*^9, 3.640926683910288*^9}, 
   3.640928479111967*^9, {3.640928572982336*^9, 3.6409285879861946`*^9}, 
   3.6409292015602894`*^9}]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"RRGConcatenation", "[", 
   RowBox[{"F_", ",", "G__"}], "]"}], ":=", 
  RowBox[{"Fold", "[", 
   RowBox[{"RRGConcatenation", ",", "F", ",", 
    RowBox[{"{", "G", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"RRGConcatenation", "[", 
   RowBox[{"F_", ",", "G_"}], "]"}], ":=", 
  RowBox[{"RRGNormalize", "@", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"F", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
       ",", 
       RowBox[{"G", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
      "]"}], ",", 
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"F", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
       ",", 
       RowBox[{"G", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
      "]"}], ",", 
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"F", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], "/.", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"i_", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{"True", ",", "j_"}], "}"}], "}"}]}], ")"}], "\[Rule]", 
         RowBox[{"(", 
          RowBox[{"i", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"True", ",", "j"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"False", ",", 
               RowBox[{
                RowBox[{"Length", "@", 
                 RowBox[{
                 "F", "\[LeftDoubleBracket]", "1", 
                  "\[RightDoubleBracket]"}]}], "+", 
                RowBox[{
                "G", "\[LeftDoubleBracket]", "4", 
                 "\[RightDoubleBracket]"}]}]}], "}"}]}], "}"}]}], ")"}]}]}], 
       ",", 
       RowBox[{
        RowBox[{
         RowBox[{"G", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
         "/.", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"i_", "\[Rule]", "j_"}], ")"}], "\[Rule]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"i", "+", 
             RowBox[{"Length", "@", 
              RowBox[{
              "F", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}]}],
             "\[Rule]", " ", "j"}], ")"}]}]}], "/.", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"False", ",", "k_"}], "}"}], "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"False", ",", 
             RowBox[{"k", "+", 
              RowBox[{"Length", "@", 
               RowBox[{
               "F", "\[LeftDoubleBracket]", "1", 
                "\[RightDoubleBracket]"}]}]}]}], "}"}]}], ",", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"True", ",", "k_"}], "}"}], "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"True", ",", 
             RowBox[{"k", "+", 
              RowBox[{"Length", "@", 
               RowBox[{
               "F", "\[LeftDoubleBracket]", "2", 
                "\[RightDoubleBracket]"}]}]}]}], "}"}]}]}], "}"}]}]}], "]"}], 
     ",", 
     RowBox[{"F", "\[LeftDoubleBracket]", "4", "\[RightDoubleBracket]"}]}], 
    "}"}]}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.640857191541915*^9, 3.6408571997863865`*^9}, {
   3.6408573043733683`*^9, 3.6408573168240805`*^9}, {3.6408601024404087`*^9, 
   3.640860102574416*^9}, {3.6408668741587286`*^9, 3.6408668789810047`*^9}, {
   3.640867025539387*^9, 3.6408670283215466`*^9}, {3.6408670792214575`*^9, 
   3.6408670810165606`*^9}, {3.6408671245850525`*^9, 3.640867223137689*^9}, 
   3.640869036583734*^9, {3.6408699660018935`*^9, 3.640869974996408*^9}, {
   3.640870018809914*^9, 3.6408700421382484`*^9}, {3.640925662198849*^9, 
   3.640925668519211*^9}, {3.6409272625743856`*^9, 3.6409272659835806`*^9}, {
   3.640927783293169*^9, 3.640927789743538*^9}, {3.6409278285907593`*^9, 
   3.6409278946205363`*^9}, {3.6409280036877747`*^9, 
   3.6409280498604155`*^9}, {3.6409280817952423`*^9, 
   3.6409281021404057`*^9}, {3.640928142319704*^9, 3.640928143405766*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RGTable", "/@", 
  RowBox[{
   RowBox[{"MapAt", "[", 
    RowBox[{
     RowBox[{"Apply", "@", "Sequence"}], ",", "1"}], "]"}], "@", 
   RowBox[{"ComposeList", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"Apply", "[", "RRGConcatenation", "]"}], "}"}], ",", 
     RowBox[{"RG", "/@", 
      RowBox[{"{", 
       RowBox[{"\"\<Only 0\>\"", ",", "\"\<Dif 01\>\""}], "}"}]}]}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.640860394670123*^9, 3.640860395802188*^9}, {
  3.6409256436707897`*^9, 3.6409256458479137`*^9}, {3.6409266939338613`*^9, 
  3.6409266998812013`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[GridBox[{
      {"\<\"N\"\>", 
       RowBox[{"{", "1", "}"}]},
      {"\<\"T\"\>", 
       RowBox[{"{", 
        RowBox[{"\<\"\"\>", ",", "\<\"0\"\>"}], "}"}]},
      {"\<\"P\"\>", 
       TagBox[GridBox[{
          {
           InterpretationBox[
            StyleBox[
             RowBox[{"1", " ", "->", " ", 
              RowBox[{"{", 
               RowBox[{"\"\<0\>\"", ",", " ", "1"}], "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[1 -> {"0", 1}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"1", " ", "->", " ", 
              RowBox[{"{", "\"\<\>\"", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[1 -> {""}],
            AutoDelete->True,
            Editable->True], "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"}
         },
         AutoDelete->False,
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxDividers->{"Columns" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"]},
      {"\<\"S\"\>", "1"}
     },
     AutoDelete->False,
     GridBoxAlignment->{"Columns" -> {Right, Left}},
     GridBoxDividers->{
      "Columns" -> {False, True}, "Rows" -> {False, {True}, False}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
    "Grid"], ",", 
   TagBox[GridBox[{
      {"\<\"N\"\>", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3"}], "}"}]},
      {"\<\"T\"\>", 
       RowBox[{"{", 
        RowBox[{"\<\"\"\>", ",", "\<\"0\"\>", ",", "\<\"1\"\>"}], "}"}]},
      {"\<\"P\"\>", 
       TagBox[GridBox[{
          {
           InterpretationBox[
            StyleBox[
             RowBox[{"1", " ", "->", " ", 
              RowBox[{"{", "2", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[1 -> {2}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"2", " ", "->", " ", 
              RowBox[{"{", "\"\<\>\"", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[2 -> {""}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"2", " ", "->", " ", 
              RowBox[{"{", 
               RowBox[{"\"\<0\>\"", ",", " ", "3"}], "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[2 -> {"0", 3}],
            AutoDelete->True,
            Editable->True], "\<\"\"\>", "\<\"\"\>"},
          {
           InterpretationBox[
            StyleBox[
             RowBox[{"1", " ", "->", " ", 
              RowBox[{"{", "3", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[1 -> {3}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"3", " ", "->", " ", 
              RowBox[{"{", "\"\<\>\"", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[3 -> {""}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"3", " ", "->", " ", 
              RowBox[{"{", 
               RowBox[{"\"\<1\>\"", ",", " ", "2"}], "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[3 -> {"1", 2}],
            AutoDelete->True,
            Editable->True], "\<\"\"\>", "\<\"\"\>"}
         },
         AutoDelete->False,
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxDividers->{"Columns" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"]},
      {"\<\"S\"\>", "1"}
     },
     AutoDelete->False,
     GridBoxAlignment->{"Columns" -> {Right, Left}},
     GridBoxDividers->{
      "Columns" -> {False, True}, "Rows" -> {False, {True}, False}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
    "Grid"], ",", 
   TagBox[GridBox[{
      {"\<\"N\"\>", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]},
      {"\<\"T\"\>", 
       RowBox[{"{", 
        RowBox[{"\<\"\"\>", ",", "\<\"0\"\>", ",", "\<\"1\"\>"}], "}"}]},
      {"\<\"P\"\>", 
       TagBox[GridBox[{
          {
           InterpretationBox[
            StyleBox[
             RowBox[{"1", " ", "->", " ", 
              RowBox[{"{", 
               RowBox[{"\"\<0\>\"", ",", " ", "1"}], "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[1 -> {"0", 1}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"2", " ", "->", " ", 
              RowBox[{"{", "3", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[2 -> {3}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"3", " ", "->", " ", 
              RowBox[{"{", "\"\<\>\"", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[3 -> {""}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"3", " ", "->", " ", 
              RowBox[{"{", 
               RowBox[{"\"\<0\>\"", ",", " ", "4"}], "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[3 -> {"0", 4}],
            AutoDelete->True,
            Editable->True], "\<\"\"\>"},
          {
           InterpretationBox[
            StyleBox[
             RowBox[{"1", " ", "->", " ", 
              RowBox[{"{", 
               RowBox[{"\"\<\>\"", ",", " ", "2"}], "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[1 -> {"", 2}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"2", " ", "->", " ", 
              RowBox[{"{", "4", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[2 -> {4}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"4", " ", "->", " ", 
              RowBox[{"{", "\"\<\>\"", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[4 -> {""}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"4", " ", "->", " ", 
              RowBox[{"{", 
               RowBox[{"\"\<1\>\"", ",", " ", "3"}], "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[4 -> {"1", 3}],
            AutoDelete->True,
            Editable->True], "\<\"\"\>"}
         },
         AutoDelete->False,
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxDividers->{"Columns" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"]},
      {"\<\"S\"\>", "1"}
     },
     AutoDelete->False,
     GridBoxAlignment->{"Columns" -> {Right, Left}},
     GridBoxDividers->{
      "Columns" -> {False, True}, "Rows" -> {False, {True}, False}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
    "Grid"]}], "}"}]], "Output",
 CellChangeTimes->{3.6408603969052505`*^9, 3.640867134220603*^9, 
  3.6408699806737328`*^9, 3.6409256462619376`*^9, 3.6409267003412275`*^9, 
  3.640927268924749*^9, 3.6409277932587385`*^9, 3.640927837599275*^9, 
  3.6409279026419954`*^9, 3.6409280075899982`*^9, 3.6409281046535497`*^9, 
  3.6409281462479286`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"RRGClosure", "[", "G_", "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"S", "=", 
      RowBox[{
       RowBox[{"Length", "@", 
        RowBox[{"G", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}],
        "+", "1"}]}], "}"}], ",", 
    RowBox[{"RRGNormalize", "@", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{"G", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
         ",", "S"}], "]"}], ",", 
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{"G", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
         ",", "\"\<\>\""}], "]"}], ",", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"G", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
         ",", 
         RowBox[{"Cases", "[", 
          RowBox[{
           RowBox[{
           "G", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], ",", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"i_", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{"True", ",", "j_"}], "}"}], "}"}]}], ")"}], "\[Rule]", 
            RowBox[{"(", 
             RowBox[{"i", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"True", ",", "j"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"False", ",", "S"}], "}"}]}], "}"}]}], ")"}]}]}], 
          "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"S", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{"False", ",", 
               RowBox[{
               "G", "\[LeftDoubleBracket]", "4", "\[RightDoubleBracket]"}]}], 
              "}"}], "}"}]}], ",", 
           RowBox[{"S", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{"True", ",", 
               RowBox[{"-", "1"}]}], "}"}], "}"}]}]}], "}"}]}], "]"}], ",", 
       "S"}], "}"}]}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.640857191541915*^9, 3.6408571997863865`*^9}, {
   3.6408573043733683`*^9, 3.6408573168240805`*^9}, {3.6408601024404087`*^9, 
   3.640860102574416*^9}, {3.6408668741587286`*^9, 3.6408668789810047`*^9}, {
   3.640867025539387*^9, 3.6408670283215466`*^9}, {3.6408670792214575`*^9, 
   3.6408670810165606`*^9}, {3.6408671245850525`*^9, 3.640867223137689*^9}, 
   3.640869036583734*^9, {3.6408699660018935`*^9, 3.640869974996408*^9}, {
   3.640870018809914*^9, 3.6408700421382484`*^9}, {3.640925662198849*^9, 
   3.640925668519211*^9}, 3.640926838406124*^9, {3.640927008458851*^9, 
   3.640927009440907*^9}, {3.640927087455369*^9, 3.6409270957358427`*^9}, {
   3.6409271289847445`*^9, 3.64092713100786*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RGTable", "/@", 
  RowBox[{"ComposeList", "[", 
   RowBox[{
    RowBox[{"{", "RRGClosure", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<S\>\"", ",", "\"\<A\>\"", ",", "\"\<B\>\""}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"\"\<\>\"", ",", "\"\<0\>\"", ",", "\"\<1\>\""}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"1", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"False", ",", "2"}], "}"}], "}"}]}], ",", 
        RowBox[{"1", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"False", ",", "3"}], "}"}], "}"}]}], ",", 
        RowBox[{"2", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"True", ",", "1"}], "}"}], "}"}]}], ",", 
        RowBox[{"3", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"True", ",", "1"}], "}"}], "}"}]}], ",", 
        RowBox[{"2", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"True", ",", "2"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"False", ",", "3"}], "}"}]}], "}"}]}], ",", 
        RowBox[{"3", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"True", ",", "3"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"False", ",", "2"}], "}"}]}], "}"}]}]}], "}"}], ",", 
      "1"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6408603980943193`*^9, 3.640860411951112*^9}, {
   3.640925648822084*^9, 3.640925654067384*^9}, {3.640926757992525*^9, 
   3.6409267831619644`*^9}, 3.6409268934792747`*^9, 3.640927060526829*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[GridBox[{
      {"\<\"N\"\>", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3"}], "}"}]},
      {"\<\"T\"\>", 
       RowBox[{"{", 
        RowBox[{"\<\"\"\>", ",", "\<\"0\"\>", ",", "\<\"1\"\>"}], "}"}]},
      {"\<\"P\"\>", 
       TagBox[GridBox[{
          {
           InterpretationBox[
            StyleBox[
             RowBox[{"1", " ", "->", " ", 
              RowBox[{"{", "2", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[1 -> {2}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"2", " ", "->", " ", 
              RowBox[{"{", "\"\<\>\"", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[2 -> {""}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"2", " ", "->", " ", 
              RowBox[{"{", 
               RowBox[{"\"\<0\>\"", ",", " ", "3"}], "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[2 -> {"0", 3}],
            AutoDelete->True,
            Editable->True], "\<\"\"\>", "\<\"\"\>"},
          {
           InterpretationBox[
            StyleBox[
             RowBox[{"1", " ", "->", " ", 
              RowBox[{"{", "3", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[1 -> {3}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"3", " ", "->", " ", 
              RowBox[{"{", "\"\<\>\"", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[3 -> {""}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"3", " ", "->", " ", 
              RowBox[{"{", 
               RowBox[{"\"\<1\>\"", ",", " ", "2"}], "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[3 -> {"1", 2}],
            AutoDelete->True,
            Editable->True], "\<\"\"\>", "\<\"\"\>"}
         },
         AutoDelete->False,
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxDividers->{"Columns" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"]},
      {"\<\"S\"\>", "1"}
     },
     AutoDelete->False,
     GridBoxAlignment->{"Columns" -> {Right, Left}},
     GridBoxDividers->{
      "Columns" -> {False, True}, "Rows" -> {False, {True}, False}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
    "Grid"], ",", 
   TagBox[GridBox[{
      {"\<\"N\"\>", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]},
      {"\<\"T\"\>", 
       RowBox[{"{", 
        RowBox[{"\<\"\"\>", ",", "\<\"0\"\>", ",", "\<\"1\"\>"}], "}"}]},
      {"\<\"P\"\>", 
       TagBox[GridBox[{
          {
           InterpretationBox[
            StyleBox[
             RowBox[{"1", " ", "->", " ", 
              RowBox[{"{", "2", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[1 -> {2}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"2", " ", "->", " ", 
              RowBox[{"{", "\"\<\>\"", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[2 -> {""}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"2", " ", "->", " ", 
              RowBox[{"{", 
               RowBox[{"\"\<0\>\"", ",", " ", "3"}], "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[2 -> {"0", 3}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"2", " ", "->", " ", 
              RowBox[{"{", 
               RowBox[{"\"\<\>\"", ",", " ", "4"}], "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[2 -> {"", 4}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"4", " ", "->", " ", 
              RowBox[{"{", "1", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[4 -> {1}],
            AutoDelete->True,
            Editable->True]},
          {
           InterpretationBox[
            StyleBox[
             RowBox[{"1", " ", "->", " ", 
              RowBox[{"{", "3", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[1 -> {3}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"3", " ", "->", " ", 
              RowBox[{"{", "\"\<\>\"", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[3 -> {""}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"3", " ", "->", " ", 
              RowBox[{"{", 
               RowBox[{"\"\<1\>\"", ",", " ", "2"}], "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[3 -> {"1", 2}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"3", " ", "->", " ", 
              RowBox[{"{", 
               RowBox[{"\"\<\>\"", ",", " ", "4"}], "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[3 -> {"", 4}],
            AutoDelete->True,
            Editable->True], 
           InterpretationBox[
            StyleBox[
             RowBox[{"4", " ", "->", " ", 
              RowBox[{"{", "\"\<\>\"", "}"}]}],
             ShowStringCharacters->True,
             NumberMarks->True],
            InputForm[4 -> {""}],
            AutoDelete->True,
            Editable->True]}
         },
         AutoDelete->False,
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxDividers->{"Columns" -> {False, {True}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
        "Grid"]},
      {"\<\"S\"\>", "4"}
     },
     AutoDelete->False,
     GridBoxAlignment->{"Columns" -> {Right, Left}},
     GridBoxDividers->{
      "Columns" -> {False, True}, "Rows" -> {False, {True}, False}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
    "Grid"]}], "}"}]], "Output",
 CellChangeTimes->{
  3.640860412873164*^9, 3.6408668325933514`*^9, 3.6408668828252244`*^9, {
   3.640867071723029*^9, 3.6408670832916903`*^9}, 3.6408690460202737`*^9, 
   3.6408699847549663`*^9, 3.64092565451741*^9, {3.640926779561759*^9, 
   3.640926783762999*^9}, 3.640926840341235*^9, 3.6409269204158154`*^9, 
   3.640927014722209*^9, {3.640927084131179*^9, 3.640927098520002*^9}, 
   3.640927134208043*^9, 3.6409271885891533`*^9}]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Equivalence", "Chapter",
 CellChangeTimes->{{3.641033806668558*^9, 3.6410338180112066`*^9}, {
  3.641034986749055*^9, 3.6410349892671986`*^9}}],

Cell[CellGroupData[{

Cell["RE \[RightArrow] DFA", "Subchapter",
 CellChangeTimes->{{3.6400774722820635`*^9, 3.6400774811585712`*^9}, 
   3.6404108775017953`*^9, {3.6404186782689734`*^9, 3.640418678317976*^9}, 
   3.6409435660898933`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Attributes", "[", "REToDFA", "]"}], "=", 
   RowBox[{"{", "HoldAll", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"REToDFA", "[", "r_", "]"}], ":=", 
  RowBox[{"ReleaseHold", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldForm", "[", "r", "]"}], "/.", 
     RowBox[{"a_String", "\[RuleDelayed]", 
      RowBox[{"TreeDFA", "[", 
       RowBox[{
        RowBox[{"{", "a", "}"}], ",", 
        RowBox[{"Characters", "@", "a"}]}], "]"}]}]}], "/.", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Plus", "\[Rule]", "DFAUnion"}], ",", 
      RowBox[{"Times", "\[Rule]", "DFAConcatenation"}], ",", 
      RowBox[{"SuperStar", "\[Rule]", "DFAClosure"}]}], "}"}]}], 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.633769061685939*^9, 3.6337691583224664`*^9}, {
   3.6337694505031776`*^9, 3.633769539027241*^9}, {3.633769668717659*^9, 
   3.633769802951337*^9}, {3.6337699213771105`*^9, 3.633770013658389*^9}, {
   3.633770064313286*^9, 3.633770075628933*^9}, {3.6337704789109993`*^9, 
   3.6337705240965843`*^9}, {3.6337705944086056`*^9, 3.633770636149993*^9}, 
   3.6337730741914415`*^9, {3.6337769941756516`*^9, 3.633776999428952*^9}, {
   3.6337800505714674`*^9, 3.6337800518695416`*^9}, {3.6338744624758606`*^9, 
   3.633874492485577*^9}, 3.6338750591169863`*^9, {3.6338757026707954`*^9, 
   3.633875781104282*^9}, {3.63387682832718*^9, 3.633876862354126*^9}, {
   3.6338769398405576`*^9, 3.6338769399975667`*^9}, {3.6338769704513083`*^9, 
   3.6338770854528866`*^9}, {3.6338771404740334`*^9, 
   3.6338772035156393`*^9}, {3.633877239183679*^9, 3.633877251563387*^9}, {
   3.6338772922177124`*^9, 3.6338773048324337`*^9}, {3.633877586521546*^9, 
   3.6338776387375326`*^9}, {3.6338777444995813`*^9, 3.633877814316575*^9}, {
   3.633877870036762*^9, 3.633877870803806*^9}, {3.6338779985471125`*^9, 
   3.63387800078024*^9}, {3.6338781286305523`*^9, 3.6338781729350867`*^9}, {
   3.6338782092591643`*^9, 3.633878223096956*^9}, {3.6338783550255013`*^9, 
   3.6338783569836135`*^9}, 3.633878427190629*^9, {3.633878550395676*^9, 
   3.633878618755586*^9}, {3.633878653051548*^9, 3.6338786572687893`*^9}, {
   3.633878751382172*^9, 3.6338787561734457`*^9}, {3.633878883553732*^9, 
   3.633878943419156*^9}, 3.633950586219242*^9, {3.63414633404809*^9, 
   3.634146355634324*^9}, {3.634146426681388*^9, 3.6341464283634844`*^9}, {
   3.634146475347172*^9, 3.634146542846032*^9}, {3.634146578629079*^9, 
   3.6341466185643635`*^9}, {3.634146705263322*^9, 3.6341467185720835`*^9}, {
   3.634146750576914*^9, 3.6341467616095448`*^9}, {3.6341468138595333`*^9, 
   3.634146836965855*^9}, {3.634147067794058*^9, 3.634147081557845*^9}, 
   3.634147420443228*^9, {3.6341474710121202`*^9, 3.634147471961175*^9}, {
   3.634147527315341*^9, 3.6341475373169127`*^9}, {3.6341479349596567`*^9, 
   3.634147953212701*^9}, {3.6341483114821925`*^9, 3.63414831248125*^9}, {
   3.6348876207861724`*^9, 3.634887752372699*^9}, {3.634887876584803*^9, 
   3.6348878811540647`*^9}, {3.634888397619605*^9, 3.63488857202658*^9}, {
   3.634888612358887*^9, 3.6348886965797043`*^9}, {3.634888783274663*^9, 
   3.634888808263092*^9}, {3.6348888680455112`*^9, 3.634888989577463*^9}, {
   3.634889024375453*^9, 3.6348890533551106`*^9}, {3.634889109943347*^9, 
   3.6348892039247227`*^9}, {3.6348893120139055`*^9, 3.634889312185915*^9}, {
   3.63488935440933*^9, 3.6348893557064037`*^9}, {3.6348893980568266`*^9, 
   3.6348894622544985`*^9}, {3.634889537704814*^9, 3.634889538598865*^9}, {
   3.634889821153851*^9, 3.6348900415634575`*^9}, {3.63489012849343*^9, 
   3.6348901603962545`*^9}, {3.6348901965483227`*^9, 
   3.6348902622890825`*^9}, {3.6348903028134003`*^9, 
   3.6348903063096004`*^9}, {3.6348904854858484`*^9, 
   3.6348904911671734`*^9}, {3.6348905255391397`*^9, 3.6348905261791763`*^9}, 
   3.634890581793357*^9, {3.634890643987914*^9, 3.6348906450009727`*^9}, {
   3.6348906772048144`*^9, 3.634890677252817*^9}, {3.6348913450800147`*^9, 
   3.63489134901824*^9}, {3.6348914433506355`*^9, 3.634891450564048*^9}, 
   3.6348915545149937`*^9, {3.634891849904889*^9, 3.63489186600381*^9}, {
   3.6348919200839033`*^9, 3.634891932917637*^9}, {3.634892092648773*^9, 
   3.6348921114708495`*^9}, {3.634892673544998*^9, 3.6348926923610744`*^9}, {
   3.6348927385247154`*^9, 3.634892813446*^9}, {3.6348928885072937`*^9, 
   3.63489299650047*^9}, {3.634893032668539*^9, 3.6348930468193483`*^9}, {
   3.634893097479246*^9, 3.6348930990903387`*^9}, {3.6348931648921022`*^9, 
   3.634893192552684*^9}, {3.6348932740833473`*^9, 3.6348933212710466`*^9}, {
   3.634893363433458*^9, 3.6348934244859495`*^9}, {3.634893463364174*^9, 
   3.6348934769319496`*^9}, {3.6348935392895164`*^9, 3.634893564023931*^9}, {
   3.6348936524549885`*^9, 3.6348937463303585`*^9}, {3.6348938266589527`*^9, 
   3.634893872185557*^9}, {3.6348939108857703`*^9, 3.634893991634389*^9}, {
   3.6348942509032183`*^9, 3.634894305905364*^9}, {3.6348943362090974`*^9, 
   3.634894395894511*^9}, {3.634894500628502*^9, 3.634894590326632*^9}, {
   3.6348946245145874`*^9, 3.6348946527122*^9}, {3.634894688429243*^9, 
   3.634894688494247*^9}, {3.634894789623031*^9, 3.63489480725204*^9}, {
   3.6348963914896526`*^9, 3.634896433497055*^9}, {3.6348964787266426`*^9, 
   3.634896523158184*^9}, {3.634896579015379*^9, 3.6348966017156773`*^9}, {
   3.6348966878516035`*^9, 3.634896712288001*^9}, {3.6348967594496984`*^9, 
   3.6348967604307547`*^9}, {3.6348967928166075`*^9, 3.634896857799324*^9}, 
   3.6348969575870314`*^9, 3.6348969952021832`*^9, {3.634897046877139*^9, 
   3.6348970477111864`*^9}, 3.6348971381203575`*^9, {3.6348980946250668`*^9, 
   3.634898102522518*^9}, {3.634898187535381*^9, 3.6348982030412674`*^9}, {
   3.6348982951585364`*^9, 3.6348983518577795`*^9}, {3.6348984144103575`*^9, 
   3.6348984491043415`*^9}, {3.6348984971980925`*^9, 3.634898626638496*^9}, {
   3.634898700697732*^9, 3.634898785042556*^9}, {3.6348990004438763`*^9, 
   3.634899029745552*^9}, {3.63489906501857*^9, 3.634899144606122*^9}, {
   3.634899176372939*^9, 3.634899183136326*^9}, {3.6348992650070086`*^9, 
   3.634899267548154*^9}, {3.6348993165309553`*^9, 3.6348993230003257`*^9}, {
   3.634899372361149*^9, 3.634899528827098*^9}, {3.6348996337801013`*^9, 
   3.6348996585765195`*^9}, {3.634899692909483*^9, 3.6348999114579835`*^9}, {
   3.6349000036662574`*^9, 3.634900003987276*^9}, {3.6349000498618994`*^9, 
   3.634900091352273*^9}, {3.6349004858528366`*^9, 3.634900490369095*^9}, {
   3.6349007751403832`*^9, 3.6349008388000245`*^9}, 3.6349009790540466`*^9, {
   3.6349010635468793`*^9, 3.634901113017709*^9}, {3.6349011675208263`*^9, 
   3.6349011842997856`*^9}, {3.63490128263441*^9, 3.6349012828024197`*^9}, {
   3.6349014163980613`*^9, 3.6349014178561444`*^9}, {3.634901486908094*^9, 
   3.6349014875991335`*^9}, {3.634901745818903*^9, 3.634901752796302*^9}, {
   3.6349019080811834`*^9, 3.6349019230580406`*^9}, {3.634901971076787*^9, 
   3.6349020546515675`*^9}, {3.634902216617831*^9, 3.63490227272204*^9}, {
   3.6349026482095165`*^9, 3.634902733833414*^9}, {3.634903097121193*^9, 
   3.6349031024404974`*^9}, {3.6349036809705873`*^9, 3.634903685478845*^9}, {
   3.6349037818463573`*^9, 3.634903783275439*^9}, 3.6349038483321595`*^9, {
   3.6349038834291673`*^9, 3.634903988324167*^9}, {3.634904230322008*^9, 
   3.6349042545193925`*^9}, {3.6349065033780193`*^9, 3.634906504234069*^9}, {
   3.6349066625461235`*^9, 3.6349067518302307`*^9}, {3.634906996153205*^9, 
   3.6349070324262795`*^9}, {3.634907138326337*^9, 3.634907169904143*^9}, {
   3.634907211777538*^9, 3.6349072307056203`*^9}, {3.6349072821725645`*^9, 
   3.634907315784487*^9}, {3.634907383036333*^9, 3.634907437573453*^9}, {
   3.634907515289898*^9, 3.6349075222812977`*^9}, {3.6349075536290903`*^9, 
   3.634907555331188*^9}, {3.6349075857789297`*^9, 3.6349075871010056`*^9}, {
   3.6349076282743597`*^9, 3.6349076455033455`*^9}, {3.634907776405833*^9, 
   3.6349078000871873`*^9}, {3.6373293478582525`*^9, 3.637329351256447*^9}, {
   3.637329416022151*^9, 3.637329467682106*^9}, 3.637410128253703*^9, {
   3.640428033313051*^9, 3.6404280964176607`*^9}, {3.6409434210145955`*^9, 
   3.640943433180291*^9}, {3.6409435508300204`*^9, 3.640943557145382*^9}, {
   3.6409436278284245`*^9, 3.6409436305225782`*^9}, {3.640943702453693*^9, 
   3.640943705365859*^9}, {3.640944097127267*^9, 3.6409442119918365`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DFAManipulate", "[", 
  RowBox[{
   RowBox[{"MapAt", "[", 
    RowBox[{
     RowBox[{"Range", "@*", "Length"}], ",", "1"}], "]"}], "@", 
   RowBox[{"REToDFA", "[", 
    RowBox[{
     SuperscriptBox["\"\<c\>\"", "*"], "\"\<d\>\"", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"\"\<c\>\"", 
        SuperscriptBox["\"\<d\>\"", "*"]}], ")"}], "*"], 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        SuperscriptBox["\"\<c\>\"", "*"], "\"\<c\>\""}], "+", "\"\<dc\>\""}], 
      ")"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6409442207853394`*^9, 3.6409442462407956`*^9}, {
  3.640944386722831*^9, 3.6409444460392237`*^9}, {3.640946506709087*^9, 
  3.6409465891578026`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`arrowPosition$$ = 
    0.8, $CellContext`arrowSize$$ = 0.024, $CellContext`edgeLabelPosition$$ = 
    0.5, $CellContext`F$$ = {3, 6}, $CellContext`headingsQ\[CapitalSigma]$$ = 
    False, $CellContext`imageSize$$ = Medium, $CellContext`lay$$ = 
    Left, $CellContext`out$$ = {
    "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, \
$CellContext`outForm$$ = 
    Column, $CellContext`plot$$ = $CellContext`DFALayeredPlot, \
$CellContext`plotLabel$$ = None, $CellContext`Q$$ = {1, 2, 3, 4, 5, 6, 
    7}, $CellContext`s$$ = 1, $CellContext`vertexSize$$ = 
    0.14, $CellContext`\[Delta]$$ = {{1, 2}, {3, 4}, {3, 5}, {6, 7}, {3, 5}, {
    7, 7}, {7, 7}}, $CellContext`\[Delta]Elements$$ = 
    "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", \
$CellContext`\[Delta]Output$$ = MatrixForm, $CellContext`\[CapitalSigma]$$ = {
    "c", "d"}, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`Q$$], {1, 2, 3, 4, 5, 6, 7}}}, {{
       Hold[$CellContext`\[CapitalSigma]$$], {"c", "d"}}}, {{
       Hold[$CellContext`\[Delta]$$], {{1, 2}, {3, 4}, {3, 5}, {6, 7}, {3, 
       5}, {7, 7}, {7, 7}}}}, {
      Hold[
       OpenerView[{
        "\:0412\:0438\:0437\:043d\:0430\:0447\:0435\:043d\:043d\:044f \:0414\
\:0421\:0410", 
         Dynamic[
          Grid[
           ArrayFlatten[{{{{Null, "\[CapitalSigma]"}, {"Q", "\[Delta]"}}, 
              Transpose[
               Array[{
                 Function[Null, 
                  InputField[
                   SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                  HoldAll}][
                  Dynamic[
                   Part[$CellContext`\[CapitalSigma]$$, #]]], 
                 Function[Null, 
                  Button[
                   SlotSequence[1], 
                   (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                   ContentPadding -> False], {HoldAll}]["-", 
                  Catch[
                   If[
                   Length[$CellContext`\[CapitalSigma]$$] > 
                    1, {$CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$} = {
                    Drop[$CellContext`\[CapitalSigma]$$, {#}], 
                    Drop[$CellContext`\[Delta]$$, {}, {#}]}, 
                    Throw[
                    Beep[]]]]]}& , 
                Length[$CellContext`\[CapitalSigma]$$]]], {{
                Function[Null, 
                 Button[
                  SlotSequence[1], 
                  (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                  ContentPadding -> False], {HoldAll}]["+", 
                 
                 Catch[{$CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`\[CapitalSigma]$$, $CellContext`\
\[Placeholder] :> Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    ArrayFlatten[{{$CellContext`\[Delta]$$, 
                    Transpose[{
                    Range[
                    Length[$CellContext`Q$$]]}]}}]}]]}, {Null}}}, {
              Array[{
                Function[Null, 
                 InputField[
                  SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                 HoldAll}][
                 Dynamic[
                  Part[$CellContext`Q$$, #], 
                  Function[$CellContext`v$, 
                   
                   Catch[{$CellContext`s$$, $CellContext`F$$} = 
                    ReplaceAll[{$CellContext`s$$, $CellContext`F$$}, 
                    Part[$CellContext`Q$$, #] -> If[
                    FreeQ[$CellContext`Q$$, $CellContext`v$], 
                    Part[$CellContext`Q$$, #] = $CellContext`v$, 
                    Throw[
                    Beep[]]]]]]]], 
                Function[Null, 
                 Button[
                  SlotSequence[1], 
                  (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                  ContentPadding -> False], {HoldAll}]["-", 
                 Catch[
                  If[
                  Length[$CellContext`Q$$] > 
                   1, {$CellContext`Q$$, $CellContext`\[Delta]$$} = {
                    Drop[$CellContext`Q$$, {#}], 
                    MapIndexed[
                    Function[{$CellContext`e$, $CellContext`i$}, 
                    
                    ReplaceAll[$CellContext`e$, Part[$CellContext`Q$$, #] -> 
                    Part[$CellContext`Q$$, 
                    Part[$CellContext`i$, 1]]]], 
                    ReplaceAll[
                    Drop[$CellContext`\[Delta]$$, {#}, {}], 
                    Pattern[$CellContext`q, 
                    Blank[]] :> 
                    Condition[$CellContext`q - 1, $CellContext`q >= #]]]}, 
                   Throw[
                    Beep[]]]]]}& , 
               Length[$CellContext`Q$$]], 
              Outer[Function[Null, 
                InputField[
                 SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {HoldAll}][
                Dynamic[
                 Part[$CellContext`Q$$, 
                  Part[$CellContext`\[Delta]$$, 
                   SlotSequence[1]]], 
                 Function[$CellContext`v$, 
                  Catch[Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]] = ReplaceAll[
                    Part[
                    FirstPosition[$CellContext`Q$$, $CellContext`v$], 1], 
                    "NotFound" :> Throw[
                    Beep[]]]]]]]& , 
               Apply[Sequence, 
                Map[Range, 
                 Dimensions[$CellContext`\[Delta]$$]]]], 
              Transpose[{
                ConstantArray[Null, 
                 Length[$CellContext`Q$$]]}]}, {{{
                Function[Null, 
                 Button[
                  SlotSequence[1], 
                  (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                  ContentPadding -> False], {HoldAll}]["+", 
                 Catch[{$CellContext`Q$$, $CellContext`\[Delta]$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`Q$$, $CellContext`\[Placeholder] :> 
                    Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    Append[$CellContext`\[Delta]$$, 
                    ConstantArray[Length[$CellContext`Q$$] + 1, 
                    Length[$CellContext`\[CapitalSigma]$$]]]}]], Null}}, {
               ConstantArray[Null, 
                Length[$CellContext`\[CapitalSigma]$$]]}, Null}}], 
           Alignment -> {Null, Null, {{1, 1} -> {Center, Center}}}, 
           Dividers -> {{False, True}, {False, True}}]]}, True]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`s$$], 1}, 
      Dynamic[
       Thread[Range[
          Length[$CellContext`Q$$]] -> $CellContext`Q$$]]}, {{
       Hold[$CellContext`F$$], {3, 6}}, 
      Dynamic[
       Thread[Range[
          Length[$CellContext`Q$$]] -> $CellContext`Q$$]]}, {{
       Hold[$CellContext`out$$], {
       "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, 
       "\:0412\:0438\:0432\:0456\:0434 \:0414\:0421\:0410"}, {
      "\:0422\:0430\:0431\:043b\:0438\:0446\:044f", 
       "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}}, {{
       Hold[$CellContext`outForm$$], Column, 
       "\:0424\:043e\:0440\:043c\:0430\:0442"}, {Column, Row, InputForm}}, {{
       Hold[$CellContext`\[Delta]Elements$$], 
       "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
       "\:0415\:043b\:0435\:043c\:0435\:043d\:0442\:0438"}, {
      "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
       "\:0421\:0442\:0430\:043d\:0438"}}, {{
       Hold[$CellContext`\[Delta]Output$$], MatrixForm, 
       "\:0424\:043e\:0440\:043c\:0430 \
\:0432\:0438\:0432\:043e\:0434\:0443"}, {MatrixForm, TableForm}}, {{
       Hold[$CellContext`headingsQ\[CapitalSigma]$$], False, 
       "\:0417\:0430\:0433\:043e\:043b\:043e\:0432\:043a\:0438"}, {
      True, False}}, {{
       Hold[$CellContext`plot$$], $CellContext`DFAPlot, 
       "\:0424\:0443\:043d\:043a\:0446\:0456\:044f"}, {$CellContext`DFAPlot, \
$CellContext`DFALayeredPlot}}, {{
       Hold[$CellContext`lay$$], Left, 
       "\:041e\:0440\:0456\:0454\:043d\:0442\:0430\:0446\:0456\:044f"}, {
      Left, Right, Top, Bottom}}, {{
       Hold[$CellContext`imageSize$$], Medium, "ImageSize"}, {
      Tiny, Small, Medium, Large, Full, Automatic}}, {{
       Hold[$CellContext`plotLabel$$], None, "PlotLabel"}, ""}, {{
       Hold[$CellContext`arrowSize$$], Automatic, "ArrowSize"}, 0., 1.}, {{
       Hold[$CellContext`arrowPosition$$], 0.8, "ArrowPosition"}, 0., 1.}, {{
       Hold[$CellContext`edgeLabelPosition$$], 0.5, "EdgeLabelPosition"}, 0., 
      1.}, {{
       Hold[$CellContext`vertexSize$$], 0.1, "VertexSize"}, 0., 1.}, {
      Hold[
       Dynamic[
        Column[
         ReplaceAll[$CellContext`out$$, {
          "\:0422\:0430\:0431\:043b\:0438\:0446\:044f" -> 
           OpenerView[{
             "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0442\:0430\:0431\:043b\:0438\:0446\:0456 \:043f\:0435\:0440\
\:0435\:0445\:043e\:0434\:0456\:0432", 
              Column[{
                Manipulate`Place[1], 
                Manipulate`Place[2], 
                Manipulate`Place[3]}]}], 
           "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430" -> 
           OpenerView[{
             "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0434\:0456\:0430\:0433\:0440\:0430\:043c\:0438 \:043f\:0435\
\:0440\:0435\:0445\:043e\:0434\:0456\:0432", 
              Column[{
                Manipulate`Place[4], 
                Manipulate`Place[5], 
                Manipulate`Place[6], 
                Manipulate`Place[7], 
                Manipulate`Place[8], 
                Manipulate`Place[9], 
                Manipulate`Place[10], 
                Manipulate`Place[11]}]}]}]]]], 
      Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = {
    360., {100.5, 107.5}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`out$1643$$ = 
    False, $CellContext`outForm$1644$$ = 
    0, $CellContext`\[Delta]Elements$1645$$ = 
    False, $CellContext`\[Delta]Output$1646$$ = 
    False, $CellContext`headingsQ\[CapitalSigma]$1647$$ = 
    False, $CellContext`plot$1648$$ = False, $CellContext`lay$1649$$ = 
    0, $CellContext`imageSize$1650$$ = 0, $CellContext`arrowSize$1651$$ = 
    0, $CellContext`arrowPosition$1652$$ = 
    0, $CellContext`edgeLabelPosition$1653$$ = 
    0, $CellContext`vertexSize$1654$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`arrowPosition$$ = 
        0.8, $CellContext`arrowSize$$ = 
        Automatic, $CellContext`edgeLabelPosition$$ = 
        0.5, $CellContext`F$$ = {3, 
         6}, $CellContext`headingsQ\[CapitalSigma]$$ = 
        False, $CellContext`imageSize$$ = Medium, $CellContext`lay$$ = 
        Left, $CellContext`out$$ = {
         "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, \
$CellContext`outForm$$ = 
        Column, $CellContext`plot$$ = $CellContext`DFAPlot, \
$CellContext`plotLabel$$ = 
        None, $CellContext`Q$$ = {1, 2, 3, 4, 5, 6, 7}, $CellContext`s$$ = 
        1, $CellContext`vertexSize$$ = 
        0.1, $CellContext`\[Delta]$$ = {{1, 2}, {3, 4}, {3, 5}, {6, 7}, {3, 
         5}, {7, 7}, {7, 7}}, $CellContext`\[Delta]Elements$$ = 
        "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", \
$CellContext`\[Delta]Output$$ = 
        MatrixForm, $CellContext`\[CapitalSigma]$$ = {"c", "d"}}, 
      "ControllerVariables" :> {
        Hold[$CellContext`out$$, $CellContext`out$1643$$, False], 
        Hold[$CellContext`outForm$$, $CellContext`outForm$1644$$, 0], 
        Hold[$CellContext`\[Delta]Elements$$, \
$CellContext`\[Delta]Elements$1645$$, False], 
        Hold[$CellContext`\[Delta]Output$$, \
$CellContext`\[Delta]Output$1646$$, False], 
        Hold[$CellContext`headingsQ\[CapitalSigma]$$, $CellContext`headingsQ\
\[CapitalSigma]$1647$$, False], 
        Hold[$CellContext`plot$$, $CellContext`plot$1648$$, False], 
        Hold[$CellContext`lay$$, $CellContext`lay$1649$$, 0], 
        Hold[$CellContext`imageSize$$, $CellContext`imageSize$1650$$, 0], 
        Hold[$CellContext`arrowSize$$, $CellContext`arrowSize$1651$$, 0], 
        Hold[$CellContext`arrowPosition$$, $CellContext`arrowPosition$1652$$, 
         0], 
        Hold[$CellContext`edgeLabelPosition$$, \
$CellContext`edgeLabelPosition$1653$$, 0], 
        Hold[$CellContext`vertexSize$$, $CellContext`vertexSize$1654$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      ReplaceAll[$CellContext`outForm$$, {Column -> (Column[#, Center]& )}][
        ReplaceAll[$CellContext`out$$, {
         "\:0422\:0430\:0431\:043b\:0438\:0446\:044f" :> 
          Replace[$CellContext`\[Delta]Output$$, Blank[] :> 
            Condition[$CellContext`\[Delta]Output$$[#, 
               TableHeadings -> {$CellContext`Q$$, $CellContext`\
\[CapitalSigma]$$}]& , $CellContext`headingsQ\[CapitalSigma]$$]][
            
            ReplaceAll[$CellContext`\[Delta]Elements$$, {
             "\:0406\:043d\:0434\:0435\:043a\:0441\:0438" -> Identity, 
              "\:0421\:0442\:0430\:043d\:0438" -> 
              ReplaceAll[Pattern[$CellContext`q$, 
                  Blank[Integer]] :> 
                Part[$CellContext`Q$$, $CellContext`q$]]}][$CellContext`\
\[Delta]$$]], "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430" :> 
          Replace[$CellContext`plot$$, $CellContext`DFALayeredPlot -> \
($CellContext`DFALayeredPlot[#, $CellContext`lay$$, 
              SlotSequence[
              2]]& )][{$CellContext`Q$$, $CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$, $CellContext`s$$, $CellContext`F$$}, 
            ImageSize -> $CellContext`imageSize$$, 
            PlotLabel -> $CellContext`plotLabel$$, $CellContext`ArrowSize -> \
$CellContext`arrowSize$$, $CellContext`ArrowPosition -> \
$CellContext`arrowPosition$$, $CellContext`EdgeLabelPosition -> \
$CellContext`edgeLabelPosition$$, VertexSize -> $CellContext`vertexSize$$]}]],
       "Specifications" :> {{{$CellContext`Q$$, {1, 2, 3, 4, 5, 6, 7}}, 
         ControlType -> None}, {{$CellContext`\[CapitalSigma]$$, {"c", "d"}}, 
         ControlType -> 
         None}, {{$CellContext`\[Delta]$$, {{1, 2}, {3, 4}, {3, 5}, {6, 7}, {
          3, 5}, {7, 7}, {7, 7}}}, ControlType -> None}, 
        OpenerView[{
         "\:0412\:0438\:0437\:043d\:0430\:0447\:0435\:043d\:043d\:044f \:0414\
\:0421\:0410", 
          Dynamic[
           Grid[
            ArrayFlatten[{{{{Null, "\[CapitalSigma]"}, {"Q", "\[Delta]"}}, 
               Transpose[
                Array[{
                  Function[Null, 
                   InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                   HoldAll}][
                   Dynamic[
                    Part[$CellContext`\[CapitalSigma]$$, #]]], 
                  Function[Null, 
                   Button[
                    SlotSequence[1], 
                    (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                    ContentPadding -> False], {HoldAll}]["-", 
                   Catch[
                    If[
                    Length[$CellContext`\[CapitalSigma]$$] > 
                    1, {$CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$} = {
                    Drop[$CellContext`\[CapitalSigma]$$, {#}], 
                    Drop[$CellContext`\[Delta]$$, {}, {#}]}, 
                    Throw[
                    Beep[]]]]]}& , 
                 Length[$CellContext`\[CapitalSigma]$$]]], {{
                 Function[Null, 
                  Button[
                   SlotSequence[1], 
                   (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                   ContentPadding -> False], {HoldAll}]["+", 
                  
                  Catch[{$CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`\[CapitalSigma]$$, $CellContext`\
\[Placeholder] :> Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    ArrayFlatten[{{$CellContext`\[Delta]$$, 
                    Transpose[{
                    Range[
                    Length[$CellContext`Q$$]]}]}}]}]]}, {Null}}}, {
               Array[{
                 Function[Null, 
                  InputField[
                   SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                  HoldAll}][
                  Dynamic[
                   Part[$CellContext`Q$$, #], 
                   Function[$CellContext`v$, 
                    
                    Catch[{$CellContext`s$$, $CellContext`F$$} = 
                    ReplaceAll[{$CellContext`s$$, $CellContext`F$$}, 
                    Part[$CellContext`Q$$, #] -> If[
                    FreeQ[$CellContext`Q$$, $CellContext`v$], 
                    Part[$CellContext`Q$$, #] = $CellContext`v$, 
                    Throw[
                    Beep[]]]]]]]], 
                 Function[Null, 
                  Button[
                   SlotSequence[1], 
                   (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                   ContentPadding -> False], {HoldAll}]["-", 
                  Catch[
                   If[
                   Length[$CellContext`Q$$] > 
                    1, {$CellContext`Q$$, $CellContext`\[Delta]$$} = {
                    Drop[$CellContext`Q$$, {#}], 
                    MapIndexed[
                    Function[{$CellContext`e$, $CellContext`i$}, 
                    
                    ReplaceAll[$CellContext`e$, Part[$CellContext`Q$$, #] -> 
                    Part[$CellContext`Q$$, 
                    Part[$CellContext`i$, 1]]]], 
                    ReplaceAll[
                    Drop[$CellContext`\[Delta]$$, {#}, {}], 
                    Pattern[$CellContext`q, 
                    Blank[]] :> 
                    Condition[$CellContext`q - 1, $CellContext`q >= #]]]}, 
                    Throw[
                    Beep[]]]]]}& , 
                Length[$CellContext`Q$$]], 
               Outer[Function[Null, 
                 InputField[
                  SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                 HoldAll}][
                 Dynamic[
                  Part[$CellContext`Q$$, 
                   Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]]], 
                  Function[$CellContext`v$, 
                   Catch[Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]] = ReplaceAll[
                    Part[
                    FirstPosition[$CellContext`Q$$, $CellContext`v$], 1], 
                    "NotFound" :> Throw[
                    Beep[]]]]]]]& , 
                Apply[Sequence, 
                 Map[Range, 
                  Dimensions[$CellContext`\[Delta]$$]]]], 
               Transpose[{
                 ConstantArray[Null, 
                  Length[$CellContext`Q$$]]}]}, {{{
                 Function[Null, 
                  Button[
                   SlotSequence[1], 
                   (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                   ContentPadding -> False], {HoldAll}]["+", 
                  Catch[{$CellContext`Q$$, $CellContext`\[Delta]$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`Q$$, $CellContext`\[Placeholder] :> 
                    Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    Append[$CellContext`\[Delta]$$, 
                    ConstantArray[Length[$CellContext`Q$$] + 1, 
                    Length[$CellContext`\[CapitalSigma]$$]]]}]], Null}}, {
                ConstantArray[Null, 
                 Length[$CellContext`\[CapitalSigma]$$]]}, Null}}], 
            Alignment -> {Null, Null, {{1, 1} -> {Center, Center}}}, 
            Dividers -> {{False, True}, {False, True}}]]}, 
         True], {{$CellContext`s$$, 1}, 
         Dynamic[
          Thread[Range[
             Length[$CellContext`Q$$]] -> $CellContext`Q$$]], ControlType -> 
         SetterBar}, {{$CellContext`F$$, {3, 6}}, 
         Dynamic[
          Thread[Range[
             Length[$CellContext`Q$$]] -> $CellContext`Q$$]], ControlType -> 
         TogglerBar}, 
        Delimiter, {{$CellContext`out$$, {
          "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, 
          "\:0412\:0438\:0432\:0456\:0434 \:0414\:0421\:0410"}, {
         "\:0422\:0430\:0431\:043b\:0438\:0446\:044f", 
          "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, ControlType -> 
         TogglerBar}, {{$CellContext`outForm$$, Column, 
          "\:0424\:043e\:0440\:043c\:0430\:0442"}, {
         Column, Row, InputForm}}, {{$CellContext`\[Delta]Elements$$, 
          "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
          "\:0415\:043b\:0435\:043c\:0435\:043d\:0442\:0438"}, {
         "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
          "\:0421\:0442\:0430\:043d\:0438"}, ControlPlacement -> 
         1}, {{$CellContext`\[Delta]Output$$, MatrixForm, 
          "\:0424\:043e\:0440\:043c\:0430 \
\:0432\:0438\:0432\:043e\:0434\:0443"}, {MatrixForm, TableForm}, 
         ControlPlacement -> 
         2}, {{$CellContext`headingsQ\[CapitalSigma]$$, False, 
          "\:0417\:0430\:0433\:043e\:043b\:043e\:0432\:043a\:0438"}, {
         True, False}, ControlPlacement -> 
         3}, {{$CellContext`plot$$, $CellContext`DFAPlot, 
          "\:0424\:0443\:043d\:043a\:0446\:0456\:044f"}, \
{$CellContext`DFAPlot, $CellContext`DFALayeredPlot}, ControlPlacement -> 
         4}, {{$CellContext`lay$$, Left, 
          "\:041e\:0440\:0456\:0454\:043d\:0442\:0430\:0446\:0456\:044f"}, {
         Left, Right, Top, Bottom}, ControlPlacement -> 
         5}, {{$CellContext`imageSize$$, Medium, "ImageSize"}, {
         Tiny, Small, Medium, Large, Full, Automatic}, ControlPlacement -> 
         6}, {{$CellContext`plotLabel$$, None, "PlotLabel"}, "", 
         FieldSize -> {{6, 15}, {1, 
            DirectedInfinity[1]}}, ControlPlacement -> 
         7}, {{$CellContext`arrowSize$$, Automatic, "ArrowSize"}, 0., 1., 
         ControlPlacement -> 
         8}, {{$CellContext`arrowPosition$$, 0.8, "ArrowPosition"}, 0., 1., 
         ControlPlacement -> 
         9}, {{$CellContext`edgeLabelPosition$$, 0.5, "EdgeLabelPosition"}, 
         0., 1., ControlPlacement -> 
         10}, {{$CellContext`vertexSize$$, 0.1, "VertexSize"}, 0., 1., 
         ControlPlacement -> 11}, 
        Dynamic[
         Column[
          
          ReplaceAll[$CellContext`out$$, {
           "\:0422\:0430\:0431\:043b\:0438\:0446\:044f" -> 
            OpenerView[{
              "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0442\:0430\:0431\:043b\:0438\:0446\:0456 \:043f\:0435\:0440\
\:0435\:0445\:043e\:0434\:0456\:0432", 
               Column[{
                 Manipulate`Place[1], 
                 Manipulate`Place[2], 
                 Manipulate`Place[3]}]}], 
            "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430" -> 
            OpenerView[{
              "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0434\:0456\:0430\:0433\:0440\:0430\:043c\:0438 \:043f\:0435\
\:0440\:0435\:0445\:043e\:0434\:0456\:0432", 
               Column[{
                 Manipulate`Place[4], 
                 Manipulate`Place[5], 
                 Manipulate`Place[6], 
                 Manipulate`Place[7], 
                 Manipulate`Place[8], 
                 Manipulate`Place[9], 
                 Manipulate`Place[10], 
                 Manipulate`Place[11]}]}]}]]]}, 
      "Options" :> {ControlPlacement -> Left}, "DefaultOptions" :> {}],
     ImageSizeCache->{596., {196., 203.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`DFALayeredPlot[
         Pattern[$CellContext`M, 
          Blank[]], 
         Pattern[$CellContext`pos, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          
          OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`DFA\[Delta]Edges, 
         Insert[$CellContext`pos, 2], 
         LayeredGraphPlot, $CellContext`opts], $CellContext`DFACustomPlot[{
          Pattern[$CellContext`Q, 
           Blank[]], 
          Pattern[$CellContext`\[CapitalSigma], 
           Blank[]], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`F, 
           Blank[]]}, 
         Pattern[$CellContext`Edges, 
          Blank[]], 
         Pattern[$CellContext`PrePlot, 
          Blank[]], 
         Pattern[Plot, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          OptionsPattern[]]] := 
       With[{$CellContext`Qf = 
          If[Null =!= $CellContext`Q, Part[$CellContext`Q, #]& , 
            Identity], $CellContext`\[CapitalSigma]f = 
          If[Null =!= $CellContext`\[CapitalSigma], 
            Part[$CellContext`\[CapitalSigma], #]& , Characters[
             FromCharacterCode[96 + #]]& ]}, 
         Apply[Plot, 
          $CellContext`PrePlot[{
            If[
             
             OptionValue[$CellContext`EdgeCollapsing], \
$CellContext`DFACollapseEdges, Identity][
             $CellContext`Edges[$CellContext`\[Delta]]], 
            Apply[Sequence, 
             FilterRules[
              FilterRules[{$CellContext`opts}, 
               Options[Plot]], 
              Except[{VertexRenderingFunction, EdgeRenderingFunction}]]], 
            VertexRenderingFunction -> Replace[
              OptionValue[VertexRenderingFunction], 
              Automatic -> ($CellContext`DFARenderState[#2, 
                Replace[$CellContext`s, Null -> 1], $CellContext`F, #, 
                VertexLabeling -> $CellContext`Qf, 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderState]]]]& )], 
            EdgeRenderingFunction -> Replace[
              OptionValue[EdgeRenderingFunction], 
              Automatic -> ($CellContext`DFARenderTransition[#3, #, 
                EdgeLabeling -> If[Null =!= $CellContext`\[CapitalSigma], 
                  Function[$CellContext`l, 
                   If[
                   Length[$CellContext`l] == 
                    Length[$CellContext`\[CapitalSigma]], "\[CapitalSigma]", 
                    If[
                    Length[$CellContext`l] > 
                    Length[$CellContext`\[CapitalSigma]]/2., 
                    Row[{"\[CapitalSigma]", "\[Backslash]", 
                    $CellContext`\[CapitalSigma]f[
                    Complement[
                    Range[
                    Length[$CellContext`\[CapitalSigma]]], $CellContext`l]]}], 
                    $CellContext`\[CapitalSigma]f[$CellContext`l]]]], 
                  FromCharacterCode[# + 96]& ], 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderTransition]]]]& )]}]]], 
       Options[$CellContext`DFACustomPlot] = {
        AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> False, 
         AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, 
         Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, 
         ColorOutput -> Automatic, ContentSelectable -> Automatic, 
         CoordinatesToolOptions -> Automatic, DataRange -> Automatic, 
         DirectedEdges -> False, DisplayFunction :> $DisplayFunction, 
         EdgeLabeling -> True, EdgeRenderingFunction -> Automatic, 
         Epilog -> {}, FormatType :> TraditionalForm, Frame -> False, 
         FrameLabel -> None, FrameStyle -> {}, FrameTicks -> None, 
         FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, 
         ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, 
         ImageSizeRaw -> Automatic, LabelStyle -> {}, Method -> Automatic, 
         MultiedgeStyle -> Automatic, PackingMethod -> Automatic, PlotLabel -> 
         None, PlotRange -> All, PlotRangeClipping -> False, PlotRangePadding -> 
         Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, 
         PreserveImageOptions -> Automatic, Prolog -> {}, RotateLabel -> True,
          SelfLoopStyle -> Automatic, Ticks -> Automatic, TicksStyle -> {}, 
         VertexCoordinateRules -> Automatic, VertexRenderingFunction -> 
         Automatic, $CellContext`EdgeCollapsing -> 
         True, $CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`Color -> 
         GrayLevel[0.85], $CellContext`PreRender -> Null, VertexSize -> 0.1, 
         VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}, $CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFACollapseEdges[
         Pattern[$CellContext`e, 
          Blank[]]] := MapAt[Replace[#, Pattern[$CellContext`l, 
            Blank[List]] :> Flatten[$CellContext`l]]& , {All, 2}][
         ReplaceRepeated[$CellContext`e, {
            Pattern[$CellContext`h, 
             BlankNullSequence[]], {
             Pattern[$CellContext`x, 
              Blank[]], 
             Pattern[$CellContext`l1, 
              Blank[]]}, 
            Pattern[$CellContext`u, 
             BlankNullSequence[]], {
             Pattern[$CellContext`x, 
              Blank[]], 
             Pattern[$CellContext`l2, 
              Blank[]]}, 
            Pattern[$CellContext`t, 
             
             BlankNullSequence[]]} :> {$CellContext`h, {$CellContext`x, \
{$CellContext`l1, $CellContext`l2}}, $CellContext`u, $CellContext`t}]], \
$CellContext`DFARenderState[
         Pattern[$CellContext`q, 
          Blank[]], 
         Pattern[$CellContext`s, 
          Blank[]], 
         Pattern[$CellContext`F, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {
         If[$CellContext`q === $CellContext`s, 
          OptionValue[$CellContext`StartColor], 
          OptionValue[$CellContext`Color]], 
         EdgeForm[Black], 
         OptionValue[$CellContext`PreRender], 
         Disk[$CellContext`p, 
          OptionValue[VertexSize]], 
         If[
          MemberQ[$CellContext`F, $CellContext`q], 
          Disk[$CellContext`p, 0.7 OptionValue[VertexSize]]], 
         Text[
          Replace[
           OptionValue[VertexLabeling], Automatic -> 
           Identity][$CellContext`q], $CellContext`p, BaseStyle -> 
          OptionValue[VertexLabelStyle]]}, 
       Options[$CellContext`DFARenderState] = {$CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`Color -> 
         GrayLevel[0.85], $CellContext`PreRender -> Null, VertexSize -> 0.1, 
         VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFARenderTransition[
         Pattern[$CellContext`t, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {Black, 
         Arrowheads[{{
            OptionValue[$CellContext`ArrowSize], 
            OptionValue[$CellContext`ArrowPosition]}}], 
         Arrow[
          
          BSplineCurve[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1]], 
         Text[
          Style[
           Replace[
            OptionValue[EdgeLabeling], Automatic -> Identity][$CellContext`t], 
           Apply[Sequence, 
            OptionValue[EdgeLabelStyle]]], 
          
          BSplineFunction[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1][
           OptionValue[$CellContext`EdgeLabelPosition]], Background -> 
          White]}, 
       Options[$CellContext`DFARenderTransition] = {$CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $DisplayFunction = 
       Identity, $CellContext`DFA\[Delta]Edges[
         Pattern[$CellContext`\[Delta], 
          Blank[]]] := With[{$CellContext`rd = Map[Range, 
            Dimensions[$CellContext`\[Delta], 2]]}, 
         Flatten[
          Inner[
           Composition[Reverse, List], 
           Part[$CellContext`rd, 2], 
           Inner[Rule, 
            Part[$CellContext`rd, 1], $CellContext`\[Delta], List], List], 
          1]], $CellContext`DFAPlot[
         Pattern[$CellContext`M, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          
          OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`DFA\[Delta]Edges, Identity, GraphPlot, $CellContext`opts]}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.640944226364659*^9, 3.640944246764826*^9}, {
   3.6409443837326593`*^9, 3.6409444374557323`*^9}, {3.6409465034429*^9, 
   3.6409465559569035`*^9}, 3.640946589778838*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["DFA \[LeftRightArrow] NFA", "Subchapter",
 CellChangeTimes->{{3.640438156950922*^9, 3.6404381677795415`*^9}, {
  3.640438201269457*^9, 3.640438206578761*^9}, {3.6404382410737333`*^9, 
  3.640438244536932*^9}}],

Cell[CellGroupData[{

Cell["DFA \[RightArrow] NFA", "Subsection",
 CellChangeTimes->{{3.6404382228996944`*^9, 3.640438262312948*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"DFAToNFA", "[", "A_", "]"}], ":=", 
  RowBox[{
   RowBox[{"MapAt", "[", 
    RowBox[{
     RowBox[{"Prepend", "[", "\"\<\>\"", "]"}], ",", "2"}], "]"}], "@", 
   RowBox[{
    RowBox[{"MapAt", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"ArrayFlatten", "[", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", "}"}], ",", 
           RowBox[{"ArrayReshape", "[", 
            RowBox[{"#", ",", 
             RowBox[{"Append", "[", 
              RowBox[{
               RowBox[{"Dimensions", "@", "#"}], ",", "1"}], "]"}]}], "]"}]}],
           "}"}], "}"}], "]"}], "&"}], ",", "3"}], "]"}], "@", 
    "A"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.640438324672515*^9, 3.6404383592704945`*^9}, {
  3.640438399919819*^9, 3.6404385351955566`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["DFA \[LeftArrow] NFA", "Subsection",
 CellChangeTimes->{{3.640438285169256*^9, 3.6404383203372674`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"NFA\[CurlyEpsilon]Closure", "[", 
   RowBox[{"{", 
    RowBox[{"_", ",", "_", ",", "\[Delta]_", ",", "_", ",", "_"}], "}"}], 
   "]"}], ":=", 
  RowBox[{"List", "@@@", 
   RowBox[{"EdgeList", "@", 
    RowBox[{"TransitiveClosureGraph", "@", "\[IndentingNewLine]", 
     RowBox[{"Graph", "@", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{"Apply", "@", "DirectedEdge"}], "]"}], "@", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"Thread", "/@", 
          RowBox[{"Select", "[", 
           RowBox[{
            RowBox[{"Thread", "@", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Range", "@", 
                RowBox[{"Length", "@", "\[Delta]"}]}], ",", 
               RowBox[{"\[Delta]", "\[LeftDoubleBracket]", 
                RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}]}], 
              "}"}]}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Last", "[", "#", "]"}], "\[NotEqual]", 
               RowBox[{"{", "}"}]}], ")"}], "&"}]}], "]"}]}], ",", "1"}], 
        "]"}]}]}]}]}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6404391676607313`*^9, 3.6404392073360004`*^9}, {
   3.6404392493284025`*^9, 3.6404392575798745`*^9}, 3.6408378768631783`*^9, 
   3.6408379135432763`*^9, {3.640837948173257*^9, 3.6408379613960133`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NFA\[CurlyEpsilon]Closure", "@", 
  RowBox[{"NFA", "@", "\"\<TM\>\""}]}]], "Input",
 CellChangeTimes->{{3.6404392150094395`*^9, 3.6404392288702326`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.6404392298532887`*^9, 3.640439260809059*^9, {3.640837931490303*^9, 
   3.6408379536175685`*^9}, 3.6408483441098704`*^9, 3.6409462729457164`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"NFARemove\[CapitalEpsilon]", "[", 
   RowBox[{"A", ":", 
    RowBox[{"{", 
     RowBox[{"_", ",", "_", ",", "\[Delta]_", ",", "_", ",", "F_"}], "}"}]}], 
   "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"cl", ",", 
      RowBox[{"\[Delta]r", "=", "\[Delta]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"FreeQ", "[", 
        RowBox[{
         RowBox[{"A", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], 
         ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", "_", "}"}], ",", "___"}], "}"}]}], "]"}], ",", 
       RowBox[{"Return", "@", "A"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"cl", "=", 
      RowBox[{"NFA\[CurlyEpsilon]Closure", "[", 
       RowBox[{"{", 
        RowBox[{",", ",", "\[Delta]", ",", ","}], "}"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\[Delta]r", "\[LeftDoubleBracket]", 
       RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}], "=", 
      RowBox[{"{", "}"}]}], ";", 
     RowBox[{
      RowBox[{"Scan", "[", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"\[Delta]r", "\[LeftDoubleBracket]", 
            RowBox[{
             RowBox[{
             "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ",", 
             RowBox[{"2", ";;"}]}], "\[RightDoubleBracket]"}], "=", 
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{"Union", "@*", "Flatten"}], "]"}], "@", 
            RowBox[{"Thread", "@", 
             RowBox[{"\[Delta]r", "\[LeftDoubleBracket]", 
              RowBox[{"#", ",", 
               RowBox[{"2", ";;"}]}], "\[RightDoubleBracket]"}]}]}]}], ";"}], 
         ")"}], "&"}], "]"}], "@", "cl"}], ";", "\[IndentingNewLine]", 
     RowBox[{"ReplacePart", "[", 
      RowBox[{"A", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"3", "\[Rule]", "\[Delta]r"}], ",", 
         RowBox[{"5", "\[Rule]", 
          RowBox[{"Union", "[", 
           RowBox[{"F", "~", "Join", "~", 
            RowBox[{
             RowBox[{"Select", "[", 
              RowBox[{"cl", ",", 
               RowBox[{
                RowBox[{"MemberQ", "[", 
                 RowBox[{"F", ",", 
                  RowBox[{"Last", "@", "#"}]}], "]"}], "&"}]}], "]"}], 
             "\[LeftDoubleBracket]", 
             RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}]}], 
           "]"}]}]}], "}"}]}], "]"}]}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.640438565802307*^9, 3.6404385903367105`*^9}, {
   3.640438659475665*^9, 3.6404387512819157`*^9}, {3.640438797318549*^9, 
   3.640438809940271*^9}, 3.6404389506113167`*^9, {3.6404390100677176`*^9, 
   3.640439050057005*^9}, {3.6408381799095116`*^9, 3.640838195236388*^9}, {
   3.6408383770467873`*^9, 3.6408384180731335`*^9}, {3.6408384804227*^9, 
   3.6408384821097965`*^9}, {3.6408386333124447`*^9, 
   3.6408386340214853`*^9}, {3.640839283822652*^9, 3.640839299200531*^9}, {
   3.6408394226265907`*^9, 3.6408394394465528`*^9}, {3.640839515813921*^9, 
   3.6408395591283984`*^9}, {3.640839596584541*^9, 3.6408396269172754`*^9}, {
   3.6408397395747194`*^9, 3.6408398058645105`*^9}, {3.6408414923039694`*^9, 
   3.640841502402547*^9}, 3.6408430655519543`*^9, {3.640848611878186*^9, 
   3.6408486126402297`*^9}, {3.640856238552407*^9, 3.640856241293564*^9}, {
   3.640856271315281*^9, 3.640856273081382*^9}, {3.64085640434789*^9, 
   3.640856476628024*^9}, {3.640947013658083*^9, 3.640947014269118*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NFAPlot", "/@", 
  RowBox[{"ComposeList", "[", 
   RowBox[{
    RowBox[{"{", "NFARemove\[CapitalEpsilon]", "}"}], ",", 
    RowBox[{"NFA", "@", "\"\<TM\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6408380979468236`*^9, 3.6408381117256117`*^9}, {
  3.640838205043949*^9, 3.640838208090123*^9}, {3.640839570606055*^9, 
  3.6408395719191303`*^9}, {3.640839637162862*^9, 3.6408396572360096`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[{{
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{2.15528408152369, 1.1366851846333845`}, {
         1.0776934001715053`, 1.1441862319538671`}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.6164887408475976`, 1.1404357082936258`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{1.0776934001715053`, 
         1.1441862319538671`}, {1.9227105227968888`, 1.8172289555766552`}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"0\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.500201961484197, 1.4807075937652612`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{1.0776934001715053`, 
         1.1441862319538671`}, {1.0764643423467075`, 0.}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"0\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.0770788712591064`, 0.5720931159769336},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{1.0776934001715053`, 
         1.1441862319538671`}, {0.2332760493787731, 1.8179113297793155`}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"1\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.6554847247751392, 1.4810487808665913`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0., 1.137852058439615}, {
         1.0776934001715053`, 1.1441862319538671`}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.5388467000857526, 1.141019145196741},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{1.9227105227968888`, 
         1.8172289555766552`}, {2.15528408152369, 1.1366851846333845`}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"1\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {2.0389973021602894`, 1.4769570701050199`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.2332760493787731, 1.8179113297793155`}, {
         0., 1.137852058439615}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"0\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.11663802468938655`, 1.4778816941094652`},
         Background->GrayLevel[1]]}}, {
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{2.15528408152369, 1.1366851846333845`}, 0.1], 
        DiskBox[{2.15528408152369, 1.1366851846333845`}, 0.06999999999999999],
         InsetBox["0", {2.15528408152369, 1.1366851846333845`},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {RGBColor[1, 1, 0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{1.0776934001715053`, 1.1441862319538671`}, 0.1], 
        InsetBox["2", {1.0776934001715053`, 1.1441862319538671`},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{0., 1.137852058439615}, 0.1], 
        DiskBox[{0., 1.137852058439615}, 0.06999999999999999], InsetBox["1", {0., 1.137852058439615},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{1.9227105227968888`, 1.8172289555766552`}, 0.1], 
        InsetBox["4", {1.9227105227968888`, 1.8172289555766552`},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{1.0764643423467075`, 0.}, 0.1], 
        DiskBox[{1.0764643423467075`, 0.}, 0.06999999999999999], 
        InsetBox["3", {1.0764643423467075`, 0.},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{0.2332760493787731, 1.8179113297793155`}, 0.1], 
        InsetBox["5", {0.2332760493787731, 1.8179113297793155`},
         BaseStyle->{
           GrayLevel[0], 12}]}}},
     Annotation[#, 
      VertexCoordinateRules -> {{2.15528408152369, 1.1366851846333845`}, {
       1.0776934001715053`, 1.1441862319538671`}, {0., 1.137852058439615}, {
       1.9227105227968888`, 1.8172289555766552`}, {1.0764643423467075`, 0.}, {
       0.2332760493787731, 1.8179113297793155`}}]& ],
    AspectRatio->Automatic,
    FrameTicks->None,
    PlotRange->All,
    PlotRangePadding->Scaled[0.1]], ",", 
   GraphicsBox[
    TagBox[{{
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.8558717218129224, 1.4642095935744233`}, {
         1.5345181623407056`, 1.0720713467052192`}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"0\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.195194942076814, 1.2681404701398211`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.8558717218129224, 1.4642095935744233`}, {
         0.9532560391780215, 1.3712706808938278`}, {0.978894768643378, 
         1.3459304067893965`}, {1.0036311473901791`, 1.319708555085517}, {
         1.0274348817243317`, 1.2926372386780256`}, {1.0502768201255765`, 
         1.2647496107695928`}, {1.0721289889482355`, 1.2360798242682698`}, {
         1.092964626679463, 1.2066629899617287`}, {1.1127582167130448`, 
         1.1765351335184315`}, {1.3838164890037987`, 0.7477928080619847}, {
         1.4025437908893594`, 0.7169908259119262}, {1.4201818700187123`, 
         0.6855524400609935}, {1.4367091257129951`, 0.6535161518942717}, {
         1.452105317676192, 0.620921195024875}, {1.4663515907826477`, 
         0.5878074872460454}, {1.479430498168216, 0.5542155816453629}, {
         1.4913260225967666`, 0.520186616940935}, {1.5335174025398084`, 
         0.3923537799333047}},
         SplineDegree->17]], InsetBox[
         StyleBox["\<\"0\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.2467793310643815`, 0.9612105734748528},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.8558717218129224, 1.4642095935744233`}, {
         0., 0.7314977945497385}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"1\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.4279358609064612, 1.0978536940620809`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{1.5335174025398084`, 0.3923537799333047}, {
         1.4361330851747094`, 0.4852926926139004}, {1.4104943557093534`, 
         0.5106329667183317}, {1.385757976962552, 0.536854818422211}, {
         1.3619542426283995`, 0.5639261348297028}, {1.3391123042271547`, 
         0.5918137627381354}, {1.317260135404496, 0.6204835492394584}, {
         1.296424497673268, 0.6499003835459994}, {1.2766309076396862`, 
         0.6800282399892967}, {1.0055726353489323`, 1.1087705654457434`}, {
         0.9868453334633718, 1.1395725475958018`}, {0.9692072543340188, 
         1.1710109334467347`}, {0.9526799986397357, 1.2030472216134562`}, {
         0.9372838066765391, 1.235642178482853}, {0.9230375335700836, 
         1.2687558862616828`}, {0.9099586261845152, 1.3023477918623652`}, {
         0.8980631017559645, 1.336376756566793}, {0.8558717218129224, 
         1.4642095935744233`}},
         SplineDegree->17]], InsetBox[
         StyleBox["\<\"1\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.1426097932883494`, 0.8953528000328752},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.7524814804633486, 0.7326457614374206}, {
         1.5345181623407056`, 1.0720713467052192`}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"0\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.143499821402027, 0.9023585540713199},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.7524814804633486, 0.7326457614374206}, {
         1.5335174025398084`, 0.3923537799333047}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"0\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.1429994415015785`, 0.5624997706853626},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.7524814804633486, 0.7326457614374206}, {
         0.6750161669053781, 0.7131538198026109}, {0.654183851868128, 
         0.7082979142506579}, {0.6331943858947873, 0.7041739008298878}, {
         0.6120734739791173, 0.7007868300613281}, {0.5908469820916825, 
         0.6981408499606118}, {0.5695409055027886, 0.6962392009580604}, {
         0.5481813369470716, 0.6950842119302547}, {0.5267944346687278, 
         0.6946772973479485}, {0.2258018424833887, 0.6942181105928757}, {
         0.20441379820117545`, 0.6945597687887475}, {0.18305080503241858`, 
         0.6956495813471117}, {0.16173902541530624`, 0.6974862136163366}, {
         0.1405045590687547, 0.7000674163433404}, {0.11937341102908365`, 
         0.7033900284281656}, {0.0983714598026459, 0.707449980795257}, {
         0.0775244256734135, 0.7122423013767021}, {0., 0.7314977945497385}},
         SplineDegree->17]], InsetBox[
         StyleBox["\<\"1\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.3762965234716166, 0.6955063897168611},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.8571556105911364, 0.}, {
         1.5335174025398084`, 0.3923537799333047}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"0\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.1953365065654724`, 0.19617688996665236`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.8571556105911364, 0.}, {
         1.5345181623407056`, 1.0720713467052192`}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"0\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {1.195836886465921, 0.5360356733526096},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0.8571556105911364, 0.}, {0., 
         0.7314977945497385}},
         SplineDegree->1]], InsetBox[
         StyleBox["\<\"1\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.4285778052955682, 0.36574889727486926`},
         Background->GrayLevel[1]]}, 
       {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
        ArrowBox[BSplineCurveBox[{{0., 0.7314977945497385}, {
         0.07746531355797076, 0.7509897361845481}, {0.09829762859522075, 
         0.7558456417365014}, {0.1192870945685615, 0.7599696551572714}, {
         0.14040800648423152`, 0.7633567259258309}, {0.1616344983716663, 
         0.7660027060265474}, {0.18294057496056026`, 0.7679043550290989}, {
         0.20430014351627715`, 0.7690593440569045}, {0.22568704579462098`, 
         0.7694662586392107}, {0.52667963797996, 0.7699254453942834}, {
         0.5480676822621733, 0.7695837871984117}, {0.5694306754309301, 
         0.7684939746400474}, {0.5907424550480423, 0.7666573423708226}, {
         0.6119769213945939, 0.7640761396438189}, {0.633108069434265, 
         0.7607535275589935}, {0.6541100206607028, 0.7566935751919021}, {
         0.6749570547899352, 0.7519012546104572}, {0.7524814804633486, 
         0.7326457614374206}},
         SplineDegree->17]], InsetBox[
         StyleBox["\<\"0\"\>",
          StripOnInput->False,
          LineColor->GrayLevel[0],
          FrontFaceColor->GrayLevel[0],
          BackFaceColor->GrayLevel[0],
          GraphicsColor->GrayLevel[0],
          FontSize->12,
          FontColor->GrayLevel[0]], {0.3761849569917322, 0.7686371662702982},
         Background->GrayLevel[1]]}}, {
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{0.8558717218129224, 1.4642095935744233`}, 0.1], 
        DiskBox[{0.8558717218129224, 1.4642095935744233`}, 
         0.06999999999999999], InsetBox["0", {0.8558717218129224, 1.4642095935744233`},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{1.5345181623407056`, 1.0720713467052192`}, 0.1], 
        DiskBox[{1.5345181623407056`, 1.0720713467052192`}, 
         0.06999999999999999], InsetBox["3", {1.5345181623407056`, 1.0720713467052192`},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{1.5335174025398084`, 0.3923537799333047}, 0.1], 
        InsetBox["4", {1.5335174025398084`, 0.3923537799333047},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{0.7524814804633486, 0.7326457614374206}, 0.1], 
        DiskBox[{0.7524814804633486, 0.7326457614374206}, 
         0.06999999999999999], InsetBox["1", {0.7524814804633486, 0.7326457614374206},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {RGBColor[1, 1, 0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{0.8571556105911364, 0.}, 0.1], InsetBox["2", {0.8571556105911364, 0.},
         BaseStyle->{
           GrayLevel[0], 12}]}, 
       {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
        DiskBox[{0., 0.7314977945497385}, 0.1], InsetBox["5", {0., 0.7314977945497385},
         BaseStyle->{
           GrayLevel[0], 12}]}}},
     Annotation[#, 
      VertexCoordinateRules -> {{0.8558717218129224, 1.4642095935744233`}, {
       1.5345181623407056`, 1.0720713467052192`}, {1.5335174025398084`, 
       0.3923537799333047}, {0.7524814804633486, 0.7326457614374206}, {
       0.8571556105911364, 0.}, {0., 0.7314977945497385}}]& ],
    AspectRatio->Automatic,
    FrameTicks->None,
    PlotRange->All,
    PlotRangePadding->Scaled[0.1]]}], "}"}]], "Output",
 CellChangeTimes->{
  3.640838112060631*^9, {3.6408381978895397`*^9, 3.6408382087201595`*^9}, 
   3.640838409221627*^9, 3.640839572424159*^9, 3.640839629827442*^9, 
   3.6408396621862926`*^9, {3.6408397922187304`*^9, 3.640839808239647*^9}, 
   3.640848616477449*^9, 3.6409470274608727`*^9, 3.6409488163891935`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "/@", 
  RowBox[{"(", 
   RowBox[{"B", "=", 
    RowBox[{"NFARemove\[CapitalEpsilon]", "@", 
     RowBox[{"NFA", "@", "\"\<Chessboard 3x3\>\""}]}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.6408453503536377`*^9, 3.6408453761491127`*^9}, {
  3.640849805756472*^9, 3.6408498081096067`*^9}, {3.6408509468787403`*^9, 
  3.6408509470117483`*^9}, {3.64085167960865*^9, 3.64085169045627*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", 
     TagBox[GridBox[{
        {"1"},
        {"2"},
        {"3"},
        {"4"},
        {"5"},
        {"6"},
        {"7"},
        {"8"},
        {"9"}
       },
       GridBoxAlignment->{
        "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
         "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.5599999999999999]}, 
           Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}, "RowsIndexed" -> {}}],
      Column], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", 
     TagBox[GridBox[{
        {"\<\"\"\>"},
        {
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            RowBox[{
             GraphicsBox[{
               {GrayLevel[0], RectangleBox[{0, 0}]}, 
               {GrayLevel[0], RectangleBox[{1, -1}]}, 
               {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
              AspectRatio->1,
              Frame->True,
              FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
              FrameTicks->None,
              
              ImageSize->
               Dynamic[{
                Automatic, 
                 1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}],
              PlotRangePadding->None], "\[InvisibleSpace]"}],
            "RGBColor[1, 0, 0]"],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["RGBColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          RGBColor[1, 0, 0],
          Editable->False,
          Selectable->False]},
        {
         InterpretationBox[
          ButtonBox[
           TooltipBox[
            RowBox[{
             GraphicsBox[{
               {GrayLevel[0], RectangleBox[{0, 0}]}, 
               {GrayLevel[0], RectangleBox[{1, -1}]}, 
               {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
              AspectRatio->1,
              Frame->True,
              FrameStyle->GrayLevel[0.],
              FrameTicks->None,
              
              ImageSize->
               Dynamic[{
                Automatic, 
                 1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}],
              PlotRangePadding->None], "\[InvisibleSpace]"}],
            "GrayLevel[0]"],
           Appearance->None,
           BaseStyle->{},
           BaselinePosition->Baseline,
           ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
             If[
              Not[
               AbsoluteCurrentValue["Deployed"]], 
              SelectionMove[Typeset`box$, All, Expression]; 
              FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
              FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
              FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
              MathLink`CallFrontEnd[
                FrontEnd`AttachCell[Typeset`box$, 
                 FrontEndResource["GrayLevelColorValueSelector"], {
                 0, {Left, Bottom}}, {Left, Top}, 
                 "ClosingActions" -> {
                  "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
           DefaultBaseStyle->{},
           Evaluator->Automatic,
           Method->"Preemptive"],
          GrayLevel[0],
          Editable->False,
          Selectable->False]}
       },
       GridBoxAlignment->{
        "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
         "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.5599999999999999]}, 
           Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}, "RowsIndexed" -> {}}],
      Column], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", 
         RowBox[{"2", ",", "4"}], "}"}], 
        RowBox[{"{", "5", "}"}]},
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", 
         RowBox[{"4", ",", "6"}], "}"}], 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "5"}], "}"}]},
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", 
         RowBox[{"2", ",", "6"}], "}"}], 
        RowBox[{"{", "5", "}"}]},
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", 
         RowBox[{"2", ",", "8"}], "}"}], 
        RowBox[{"{", 
         RowBox[{"1", ",", "5", ",", "7"}], "}"}]},
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", 
         RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}], 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "7", ",", "9"}], "}"}]},
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", 
         RowBox[{"2", ",", "8"}], "}"}], 
        RowBox[{"{", 
         RowBox[{"3", ",", "5", ",", "9"}], "}"}]},
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", 
         RowBox[{"4", ",", "8"}], "}"}], 
        RowBox[{"{", "5", "}"}]},
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", 
         RowBox[{"4", ",", "6"}], "}"}], 
        RowBox[{"{", 
         RowBox[{"5", ",", "7", ",", "9"}], "}"}]},
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", 
         RowBox[{"6", ",", "8"}], "}"}], 
        RowBox[{"{", "5", "}"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   TagBox["1",
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", 
     TagBox[GridBox[{
        {"9"}
       },
       GridBoxAlignment->{
        "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
         "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.5599999999999999]}, 
           Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}, "RowsIndexed" -> {}}],
      Column], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}], "}"}]], "Output",
 CellChangeTimes->{{3.6408453706908007`*^9, 3.6408453765601363`*^9}, 
   3.6408459377132325`*^9, {3.64084833536337*^9, 3.6408483463459983`*^9}, 
   3.640849808672639*^9, 3.640849965459606*^9, 3.640850960369512*^9, 
   3.640851490505834*^9, 3.6408516908212914`*^9, 3.640855720732789*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Ql", "=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Fold", "[", 
      RowBox[{
       RowBox[{"Reverse", "@*", "List"}], ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"MapAt", "[", 
           RowBox[{"List", ",", "1"}], "]"}], "@", 
          RowBox[{"Range", "@", 
           RowBox[{"Length", "@", 
            RowBox[{
            "B", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}]}]}],
          "}"}], "\[Transpose]"}]}], "]"}], ";", 
     RowBox[{"{", 
      RowBox[{"{", "1", "}"}], "}"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"\[Delta]l", "=", 
  RowBox[{"Fold", "[", 
   RowBox[{
    RowBox[{"Reverse", "@*", "List"}], ",", 
    RowBox[{
     RowBox[{"MapAt", "[", 
      RowBox[{"List", ",", "1"}], "]"}], "@", 
     RowBox[{"B", "\[LeftDoubleBracket]", 
      RowBox[{"3", ",", "All", ",", 
       RowBox[{"2", ";;"}]}], "\[RightDoubleBracket]"}]}]}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"Scan", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"FreeQ", "[", 
        RowBox[{"Ql", ",", "#", ",", "Infinity"}], "]"}], ",", 
       RowBox[{
        RowBox[{"Ql", "=", 
         RowBox[{"{", 
          RowBox[{"#", ",", "Ql"}], "}"}]}], ";", 
        RowBox[{"\[Delta]l", "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Replace", "[", 
            RowBox[{
             RowBox[{"Union", "@@@", 
              RowBox[{"Thread", "[", 
               RowBox[{"B", "\[LeftDoubleBracket]", 
                RowBox[{"3", ",", "#"}], "\[RightDoubleBracket]"}], "]"}]}], 
             ",", 
             RowBox[{
              RowBox[{"{", "}"}], "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", "}"}], ",", 
                RowBox[{"{", "}"}], ",", 
                RowBox[{"{", "}"}]}], "}"}]}]}], "]"}], ",", "\[Delta]l"}], 
          "}"}]}], ";"}]}], "]"}], "&"}], ",", 
    RowBox[{"B", "\[LeftDoubleBracket]", 
     RowBox[{"3", ",", "All", ",", 
      RowBox[{"2", ";;"}]}], "\[RightDoubleBracket]"}], ",", 
    RowBox[{"{", "2", "}"}]}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "/@", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Reap", "[", 
      RowBox[{"Scan", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MatchQ", "[", 
            RowBox[{"#", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", "___", "}"}], ",", "___"}], "}"}]}], "]"}], ",", 
           RowBox[{"Sow", "@", 
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}]}], 
          "]"}], "&"}], ",", "Ql", ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "Infinity"}], "}"}]}], "]"}], "]"}], 
     "\[LeftDoubleBracket]", 
     RowBox[{
      RowBox[{"-", "1"}], ",", "1"}], "\[RightDoubleBracket]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Reap", "[", 
      RowBox[{"Scan", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MatchQ", "[", 
            RowBox[{"#", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", "___", "}"}], ",", 
                 RowBox[{"{", "___", "}"}], ",", 
                 RowBox[{"{", "___", "}"}]}], "}"}], ",", "___"}], "}"}]}], 
            "]"}], ",", 
           RowBox[{"Sow", "@", 
            RowBox[{
            "#", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}]}], 
          "]"}], "&"}], ",", "\[Delta]l", ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "Infinity"}], "}"}]}], "]"}], "]"}], 
     "\[LeftDoubleBracket]", 
     RowBox[{
      RowBox[{"-", "1"}], ",", "1"}], "\[RightDoubleBracket]"}]}], 
   "}"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->CompressedData["
1:eJwdxU8oQwEAB+AXUsRaaattVlt2GEreO1iKJGoXTBxW4snWJq0ejYOThDWJ
hsOWw5rlwFZz8JYWEou0GiPztCnaQisHf6b0uHi/Hb4+tWm8z1JEEIRcgHfj
oq1B1Vt7pya1jfWHM1c4LnVwmPziFUPCVklEiekoU4O5l+k2/Jw668byYKgH
t8TH+nGXWWHEP+X8KG50VNmweSCxgAM37Aaestb68VyyLITtdCaMo1R2H3tz
tmOsC0hOMMMuneNI0H2B9Qk2gd2WkTuc+2siaOGJ29dSvJkJS/HeNSfD6w8l
Kvz9SxY2ijs0mFO7CiddxQY8yzO9WG3wxfCK0p7Gp8HYI66YbH7CR05SNiyc
3xFrsbMyX4+1B55WXHfvncd6Klv4g2IWcQPrWcbVadsqNoku1zDz/unDRp3M
j/8Br9HB5A==
  "]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"6", ",", "8"}], "}"}], ",", 
     RowBox[{"{", "5", "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"4", ",", "6"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"5", ",", "7", ",", "9"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"4", ",", "8"}], "}"}], ",", 
         RowBox[{"{", "5", "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"2", ",", "8"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"3", ",", "5", ",", "9"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "3", ",", "7", ",", "9"}], "}"}]}], "}"}], 
           ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"2", ",", "8"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"1", ",", "5", ",", "7"}], "}"}]}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"2", ",", "6"}], "}"}], ",", 
                 RowBox[{"{", "5", "}"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"4", ",", "6"}], "}"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"1", ",", "3", ",", "5"}], "}"}]}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "4"}], "}"}], ",", 
                    RowBox[{"{", "5", "}"}]}], "}"}], "}"}]}], "}"}]}], 
              "}"}]}], "}"}]}], "}"}]}], "}"}]}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.6408458975369344`*^9, 3.6408459057884064`*^9}, {
   3.640846018202836*^9, 3.6408460296614914`*^9}, 3.6408465420247974`*^9, {
   3.6408468508534613`*^9, 3.640846865492298*^9}, {3.640846911422926*^9, 
   3.640846968213174*^9}, 3.640847007629428*^9, 3.6408470672418375`*^9, 
   3.6408471014817963`*^9, 3.640847196558234*^9, 3.6408483564005737`*^9, 
   3.6408483877723675`*^9, {3.64084857173289*^9, 3.640848590991991*^9}, 
   3.6408486771569195`*^9, 3.640849028525017*^9, 3.640849810949769*^9, 
   3.6408499694118323`*^9, {3.6408499996925645`*^9, 3.6408500158284874`*^9}, 
   3.6408500882726307`*^9, {3.640850715113484*^9, 3.6408507529196463`*^9}, {
   3.64085079319695*^9, 3.6408509250514917`*^9}, 3.640850961641585*^9, 
   3.6408514921719294`*^9, {3.6408515397796526`*^9, 3.640851557069641*^9}, {
   3.640851588206422*^9, 3.640851598933036*^9}, 3.6408517227621183`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", 
     TagBox[GridBox[{
        {
         RowBox[{"{", "1", "}"}]},
        {
         RowBox[{"{", 
          RowBox[{"2", ",", "4"}], "}"}]},
        {
         RowBox[{"{", "5", "}"}]},
        {
         RowBox[{"{", 
          RowBox[{"4", ",", "6"}], "}"}]},
        {
         RowBox[{"{", 
          RowBox[{"1", ",", "3", ",", "5"}], "}"}]},
        {
         RowBox[{"{", 
          RowBox[{"2", ",", "6"}], "}"}]},
        {
         RowBox[{"{", 
          RowBox[{"2", ",", "8"}], "}"}]},
        {
         RowBox[{"{", 
          RowBox[{"1", ",", "5", ",", "7"}], "}"}]},
        {
         RowBox[{"{", 
          RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}]},
        {
         RowBox[{"{", 
          RowBox[{"1", ",", "3", ",", "7", ",", "9"}], "}"}]},
        {
         RowBox[{"{", 
          RowBox[{"3", ",", "5", ",", "9"}], "}"}]},
        {
         RowBox[{"{", 
          RowBox[{"4", ",", "8"}], "}"}]},
        {
         RowBox[{"{", 
          RowBox[{"5", ",", "7", ",", "9"}], "}"}]},
        {
         RowBox[{"{", 
          RowBox[{"6", ",", "8"}], "}"}]}
       },
       GridBoxAlignment->{
        "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
         "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.5599999999999999]}, 
           Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}, "RowsIndexed" -> {}}],
      Column], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", 
         RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}], 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "5", ",", "7"}], "}"}]},
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", 
         RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}], 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "7", ",", "9"}], "}"}]},
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", 
         RowBox[{"2", ",", "8"}], "}"}], 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "5", ",", "7", ",", "9"}], "}"}]},
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", 
         RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}], 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "5", ",", "7", ",", "9"}], "}"}]},
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", 
         RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}], 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "5", ",", "9"}], "}"}]},
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", 
         RowBox[{"4", ",", "6"}], "}"}], 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "5", ",", "7", ",", "9"}], "}"}]},
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", 
         RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}], 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "5", ",", "7", ",", "9"}], "}"}]},
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", 
         RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}], 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "5", ",", "7", ",", "9"}], "}"}]},
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", 
         RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}], 
        RowBox[{"{", "5", "}"}]},
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", 
         RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}], 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "5", ",", "7", ",", "9"}], "}"}]},
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", 
         RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}], 
        RowBox[{"{", 
         RowBox[{"1", ",", "5", ",", "7", ",", "9"}], "}"}]},
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", 
         RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}], 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "5", ",", "7", ",", "9"}], "}"}]},
       {
        RowBox[{"{", "}"}], 
        RowBox[{"{", 
         RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}], 
        RowBox[{"{", 
         RowBox[{"3", ",", "5", ",", "7", ",", "9"}], "}"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}], "}"}]], "Output",
 CellChangeTimes->{{3.6408458975369344`*^9, 3.6408459057884064`*^9}, {
   3.640846018202836*^9, 3.6408460296614914`*^9}, 3.6408465420247974`*^9, {
   3.6408468508534613`*^9, 3.640846865492298*^9}, {3.640846911422926*^9, 
   3.640846968213174*^9}, 3.640847007629428*^9, 3.6408470672418375`*^9, 
   3.6408471014817963`*^9, 3.640847196558234*^9, 3.6408483564005737`*^9, 
   3.6408483877723675`*^9, {3.64084857173289*^9, 3.640848590991991*^9}, 
   3.6408486771569195`*^9, 3.640849028525017*^9, 3.640849810949769*^9, 
   3.6408499694118323`*^9, {3.6408499996925645`*^9, 3.6408500158284874`*^9}, 
   3.6408500882726307`*^9, {3.640850715113484*^9, 3.6408507529196463`*^9}, {
   3.64085079319695*^9, 3.6408509250514917`*^9}, 3.640850961641585*^9, 
   3.6408514921719294`*^9, {3.6408515397796526`*^9, 3.640851557069641*^9}, {
   3.640851588206422*^9, 3.640851598933036*^9}, 3.6408517227811193`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"MatrixForm", "[", 
  RowBox[{"\[Delta]", "=", 
   RowBox[{"B", "\[LeftDoubleBracket]", 
    RowBox[{"3", ",", "All", ",", 
     RowBox[{"2", ";;"}]}], "\[RightDoubleBracket]"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Ql", "=", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"B", "\[LeftDoubleBracket]", "4", "\[RightDoubleBracket]"}], 
     "}"}], "}"}]}], ";", 
  RowBox[{"n", "=", "1"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"\[Delta]l", "=", 
   RowBox[{"{", "}"}]}], ";", 
  RowBox[{"m", "=", "0"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"While", "[", 
  RowBox[{
   RowBox[{"n", "\[NotEqual]", "m"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"AppendTo", "[", 
     RowBox[{"\[Delta]l", ",", 
      RowBox[{"Union", "@@@", 
       RowBox[{"Thread", "@", 
        RowBox[{"\[Delta]", "\[LeftDoubleBracket]", 
         RowBox[{"Ql", "\[LeftDoubleBracket]", 
          RowBox[{"++", "m"}], "\[RightDoubleBracket]"}], 
         "\[RightDoubleBracket]"}]}]}]}], "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"Ql", "=", 
     RowBox[{"Ql", "~", "Join", "~", 
      RowBox[{"Select", "[", 
       RowBox[{
        RowBox[{
        "\[Delta]l", "\[LeftDoubleBracket]", "m", "\[RightDoubleBracket]"}], 
        ",", 
        RowBox[{
         RowBox[{"FreeQ", "[", 
          RowBox[{"Ql", ",", "#"}], "]"}], "&"}]}], "]"}]}]}], ";", 
    RowBox[{"n", "=", 
     RowBox[{"Length", "@", "Ql"}]}], ";"}]}], "\[IndentingNewLine]", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "/@", 
  RowBox[{"{", 
   RowBox[{"Ql", ",", "\[Delta]l"}], "}"}]}]}], "Input",
 CellChangeTimes->{{3.6408520603014245`*^9, 3.640852126902234*^9}, {
   3.640852229182084*^9, 3.640852260338866*^9}, {3.640852297752006*^9, 
   3.640852339579398*^9}, {3.6408523806037445`*^9, 3.640852455056003*^9}, {
   3.6408533304440727`*^9, 3.640853421945306*^9}, {3.6408534556842356`*^9, 
   3.6408534809646816`*^9}, 3.640853584888626*^9, {3.640853664930204*^9, 
   3.6408540677742453`*^9}}],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"{", 
       RowBox[{"2", ",", "4"}], "}"}], 
      RowBox[{"{", "5", "}"}]},
     {
      RowBox[{"{", 
       RowBox[{"4", ",", "6"}], "}"}], 
      RowBox[{"{", 
       RowBox[{"1", ",", "3", ",", "5"}], "}"}]},
     {
      RowBox[{"{", 
       RowBox[{"2", ",", "6"}], "}"}], 
      RowBox[{"{", "5", "}"}]},
     {
      RowBox[{"{", 
       RowBox[{"2", ",", "8"}], "}"}], 
      RowBox[{"{", 
       RowBox[{"1", ",", "5", ",", "7"}], "}"}]},
     {
      RowBox[{"{", 
       RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}], 
      RowBox[{"{", 
       RowBox[{"1", ",", "3", ",", "7", ",", "9"}], "}"}]},
     {
      RowBox[{"{", 
       RowBox[{"2", ",", "8"}], "}"}], 
      RowBox[{"{", 
       RowBox[{"3", ",", "5", ",", "9"}], "}"}]},
     {
      RowBox[{"{", 
       RowBox[{"4", ",", "8"}], "}"}], 
      RowBox[{"{", "5", "}"}]},
     {
      RowBox[{"{", 
       RowBox[{"4", ",", "6"}], "}"}], 
      RowBox[{"{", 
       RowBox[{"5", ",", "7", ",", "9"}], "}"}]},
     {
      RowBox[{"{", 
       RowBox[{"6", ",", "8"}], "}"}], 
      RowBox[{"{", "5", "}"}]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{
  3.640852455927053*^9, 3.6408533455189347`*^9, {3.6408537770316157`*^9, 
   3.6408537845340447`*^9}, 3.6408538286875706`*^9, {3.640853869158885*^9, 
   3.6408538836097116`*^9}, {3.640853916386586*^9, 3.640853921768894*^9}, {
   3.6408540393396187`*^9, 3.6408540682782745`*^9}, 3.640855722042864*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TagBox[
    RowBox[{"(", "\[NoBreak]", 
     TagBox[GridBox[{
        {
         RowBox[{"{", "1", "}"}]},
        {
         RowBox[{"{", 
          RowBox[{"2", ",", "4"}], "}"}]},
        {
         RowBox[{"{", "5", "}"}]},
        {
         RowBox[{"{", 
          RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}]},
        {
         RowBox[{"{", 
          RowBox[{"1", ",", "3", ",", "5", ",", "7"}], "}"}]},
        {
         RowBox[{"{", 
          RowBox[{"1", ",", "3", ",", "7", ",", "9"}], "}"}]},
        {
         RowBox[{"{", 
          RowBox[{"1", ",", "3", ",", "5", ",", "7", ",", "9"}], "}"}]}
       },
       GridBoxAlignment->{
        "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
         "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.5599999999999999]}, 
           Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}, "RowsIndexed" -> {}}],
      Column], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]], ",", 
   TagBox[
    RowBox[{"(", "\[NoBreak]", GridBox[{
       {
        RowBox[{"{", 
         RowBox[{"2", ",", "4"}], "}"}], 
        RowBox[{"{", "5", "}"}]},
       {
        RowBox[{"{", 
         RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}], 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "5", ",", "7"}], "}"}]},
       {
        RowBox[{"{", 
         RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}], 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "7", ",", "9"}], "}"}]},
       {
        RowBox[{"{", 
         RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}], 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "5", ",", "7", ",", "9"}], "}"}]},
       {
        RowBox[{"{", 
         RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}], 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "5", ",", "7", ",", "9"}], "}"}]},
       {
        RowBox[{"{", 
         RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}], 
        RowBox[{"{", "5", "}"}]},
       {
        RowBox[{"{", 
         RowBox[{"2", ",", "4", ",", "6", ",", "8"}], "}"}], 
        RowBox[{"{", 
         RowBox[{"1", ",", "3", ",", "5", ",", "7", ",", "9"}], "}"}]}
      },
      GridBoxAlignment->{
       "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.7]}, 
          Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
    Function[BoxForm`e$, 
     MatrixForm[BoxForm`e$]]]}], "}"}]], "Output",
 CellChangeTimes->{
  3.640852455927053*^9, 3.6408533455189347`*^9, {3.6408537770316157`*^9, 
   3.6408537845340447`*^9}, 3.6408538286875706`*^9, {3.640853869158885*^9, 
   3.6408538836097116`*^9}, {3.640853916386586*^9, 3.640853921768894*^9}, {
   3.6408540393396187`*^9, 3.6408540682782745`*^9}, 3.6408557220468645`*^9}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  RowBox[{"NFAToDFA", "[", "A_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"B", ",", "Ql", ",", "\[Delta]l", ",", "n", ",", "m"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"B", "=", 
      RowBox[{"NFARemove\[CapitalEpsilon]", "@", "A"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Ql", "=", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"B", "\[LeftDoubleBracket]", "4", "\[RightDoubleBracket]"}], 
        "}"}], "}"}]}], ";", 
     RowBox[{"n", "=", "1"}], ";", "\[IndentingNewLine]", 
     RowBox[{"\[Delta]l", "=", 
      RowBox[{"{", "}"}]}], ";", 
     RowBox[{"m", "=", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"n", "\[NotEqual]", "m"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"AppendTo", "[", 
         RowBox[{"\[Delta]l", ",", 
          RowBox[{"Replace", "[", 
           RowBox[{
            RowBox[{"Union", "@@@", 
             RowBox[{"Thread", "@", 
              RowBox[{"B", "\[LeftDoubleBracket]", 
               RowBox[{"3", ",", 
                RowBox[{"Ql", "\[LeftDoubleBracket]", 
                 RowBox[{"++", "m"}], "\[RightDoubleBracket]"}], ",", 
                RowBox[{"2", ";;"}]}], "\[RightDoubleBracket]"}]}]}], ",", 
            RowBox[{
             RowBox[{"{", "}"}], "\[Rule]", 
             RowBox[{"ConstantArray", "[", 
              RowBox[{
               RowBox[{"{", "}"}], ",", 
               RowBox[{
                RowBox[{"Length", "@", 
                 RowBox[{
                 "B", "\[LeftDoubleBracket]", "2", 
                  "\[RightDoubleBracket]"}]}], "-", "1"}]}], "]"}]}]}], 
           "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"Ql", "=", 
         RowBox[{"Ql", "~", "Join", "~", 
          RowBox[{"Select", "[", 
           RowBox[{
            RowBox[{
            "\[Delta]l", "\[LeftDoubleBracket]", "m", 
             "\[RightDoubleBracket]"}], ",", 
            RowBox[{
             RowBox[{"FreeQ", "[", 
              RowBox[{"Ql", ",", "#"}], "]"}], "&"}]}], "]"}]}]}], ";", 
        RowBox[{"n", "=", 
         RowBox[{"Length", "@", "Ql"}]}], ";"}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"B", "=", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{"Ql", ",", "\[IndentingNewLine]", 
        RowBox[{"Rest", "@", 
         RowBox[{
         "B", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"\[Delta]l", "/.", 
         RowBox[{"Thread", "[", 
          RowBox[{"Ql", "\[Rule]", 
           RowBox[{"Range", "@", "n"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"B", "\[LeftDoubleBracket]", "4", "\[RightDoubleBracket]"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"Flatten", "@", 
         RowBox[{"Position", "[", 
          RowBox[{"Ql", ",", 
           RowBox[{"_List", "?", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"IntersectingQ", "[", 
               RowBox[{"#", ",", 
                RowBox[{
                "B", "\[LeftDoubleBracket]", "5", "\[RightDoubleBracket]"}]}],
                "]"}], "&"}], ")"}]}], ",", 
           RowBox[{"{", "1", "}"}]}], "]"}]}]}], "\[IndentingNewLine]", 
       "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"DFAMinimize", "@", "B"}]}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6404385506814423`*^9, 3.6404385571388116`*^9}, {
   3.6408402663518496`*^9, 3.640840269819048*^9}, 3.6408414861666183`*^9, {
   3.6408415292440825`*^9, 3.640841571660508*^9}, 3.640843054953348*^9, {
   3.6408511204196663`*^9, 3.640851158145824*^9}, {3.6408513286355753`*^9, 
   3.640851435624695*^9}, {3.6408514710707226`*^9, 3.6408514787971644`*^9}, {
   3.640854210987437*^9, 3.6408543118642063`*^9}, {3.640854344720086*^9, 
   3.640854361683056*^9}, {3.6408543989671884`*^9, 3.640854443732749*^9}, {
   3.6408556494797134`*^9, 3.640855678667383*^9}, {3.64085576742546*^9, 
   3.640856042954219*^9}, {3.640856075511081*^9, 3.6408560878357863`*^9}, {
   3.6409487859964547`*^9, 3.64094880672064*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Thread", "[", 
  RowBox[{"{", 
   RowBox[{"8", ",", 
    RowBox[{"{", "}"}]}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.6409476595390253`*^9, 3.6409476726927776`*^9}}],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 CellChangeTimes->{{3.6409476683625298`*^9, 3.640947673040797*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Union", "@@@", 
  RowBox[{"Thread", "[", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", "}"}]}], "}"}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6409477953007903`*^9, 3.640947818881139*^9}, {
  3.6409478690000057`*^9, 3.6409478884491177`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "}"}], ",", 
   RowBox[{"{", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.640947805678384*^9, 3.640947819409169*^9}, {
  3.6409478797126184`*^9, 3.6409478890541525`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DFAPlot", "@", 
  RowBox[{"NFAToDFA", "@", 
   RowBox[{"NFA", "@", "\"\<Chessboard 3x3\>\""}]}]}]], "Input",
 CellChangeTimes->{{3.6408543698215218`*^9, 3.6408543833012924`*^9}, {
  3.640856116528427*^9, 3.640856117867504*^9}}],

Cell[BoxData[
 GraphicsBox[
  TagBox[{{
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0., 1.1015829367775112`}, {
       0.7358404108491299, 1.6450026687393353`}},
       SplineDegree->1]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "RGBColor[1, 0, 0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["RGBColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         RGBColor[1, 0, 0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.36792020542456494`, 1.3732928027584232`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0., 1.1015829367775112`}, {
       0.7686286019667304, 0.455019651444342}},
       SplineDegree->1]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "GrayLevel[0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["GrayLevelColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         GrayLevel[0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {0.3843143009833652, 0.7783012941109266},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.7358404108491299, 1.6450026687393353`}, {
       1.6067153715266158`, 0.9729373659473295}},
       SplineDegree->1]], InsetBox[
       StyleBox["\<\"\[CapitalSigma]\"\>",
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.1712778911878727`, 1.3089700173433325`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.7686286019667304, 0.455019651444342}, {
       1.6067153715266158`, 0.9729373659473295}},
       SplineDegree->1]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "RGBColor[1, 0, 0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["RGBColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         RGBColor[1, 0, 0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.1876719867466732`, 0.7139785086958357},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{0.7686286019667304, 0.455019651444342}, {
       0.8569364808905064, 0.42730729735928225`}, {0.8804506620375723, 
       0.41947366460400476`}, {0.9036763474180862, 0.4108220719317306}, {
       0.9265850934261668, 0.4013631146161053}, {0.9491488445994232, 
       0.3911083766792808}, {0.9713399679774033, 0.3800704167054072}, {
       0.9931312869426212, 0.3682627524606167}, {1.0144961145027178`, 
       0.3556998443383341}, {1.311984821121077, 0.17369198376059758`}, {
       1.3328969925913552`, 0.16038921707245124`}, {1.3533308976376661`, 
       0.14636288320647184`}, {1.3732615116404026`, 0.13163015967565483`}, {
       1.3926644263411911`, 0.1162090890813186}, {1.411515879734749, 
       0.10011855701702399`}, {1.4297927851693002`, 0.08337826894011102}, {
       1.4474727596199144`, 0.06600872603918229}, {1.5123503685126292`, 0.}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "GrayLevel[0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["GrayLevelColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         GrayLevel[0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.1626002888415898`, 0.26364955257212924`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[CompressedData["
1:eJwBoQFe/iFib1JlAgAAABkAAAACAAAAM/9qLRu1+T/ymvmKTSLvP0x+s2sp
y/c/tYYbBFvY8T+06MbKEV/3PzbBDu9nevI/j0PzJx0Z9z/+qi44NDDzP/om
DAGy/PY/ujMurOnw8z8PUE72MQv3P4MrBFMqs/Q/Q/QImuhD9z+zrgH/hG31
P7ZuxjUUpPc/ETzxyuoW9j85rtIXCCf4P6nVOdEfp/Y/gp9GvmbG+D/ku3Oh
IRf3P84ZyAtxevk/rmN7eX5h9z/F5GSsZjr6P6YtpwSZgvc/vcgO+/L8+j8J
6h1W1Xj3P3ygqxyhuPs/Tq6f7qxE9z+Q9/arUWT8P2pemtSo6PY/+iv3Paz3
/D9jdgcIQmn2P028eDqHa/0/nFGi2qnM9T+dL1z8QLr9PzEPA+F8GvU/vkWs
5AXg/T+pYH07ZFv0P72yg/j/2v0/Xgha0amY8z92mj25bav9PwCEb7vE2/I/
X/KsGp9T/T/HKF184y3yPzcgKb3Y1/w/AsABwHmX8T+Y7HnRHj78P9pW3y/X
H/E/M/9qLRu1+T/ymvmKTSLvP39w1I8=
       "],
       SplineDegree->24]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "RGBColor[1, 0, 0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["RGBColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         RGBColor[1, 0, 0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.6820479184463435`, 1.4379438471925492`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{1.6067153715266158`, 0.9729373659473295}, {
       1.7062419453564646`, 1.0382886561276354`}, {1.7331959411582851`, 
       1.0553198218709046`}, {1.7607293494230623`, 1.0713974437592424`}, {
       1.7888084510419549`, 1.086501832145906}, {1.817398858616405, 
       1.1006144892658853`}, {1.8464655585710654`, 1.1137181318894078`}, {
       1.8759729540335845`, 1.1257967124880455`}, {1.9058849084287266`, 
       1.1368354388875082`}, {2.3294341612617724`, 1.2847746606689046`}, {
       2.3597140425664986`, 1.2947600141644482`}, {2.390324768171798, 
       1.3036797660767134`}, {2.421228850296336, 1.3115229927277203`}, {
       2.4523884418963044`, 1.318280088818678}, {2.4837653830152417`, 
       1.323942779193226}, {2.5153212475170696`, 1.3285041289716988`}, {
       2.5470173901451045`, 1.3319585520440098`}, {2.665588503609232, 
       1.3427854204008212`}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "GrayLevel[0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["GrayLevelColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         GrayLevel[0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {2.118179883682753, 1.2093152936561773`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{1.5123503685126292`, 0.}, {
       1.6067153715266158`, 0.9729373659473295}},
       SplineDegree->1]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "RGBColor[1, 0, 0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["RGBColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         RGBColor[1, 0, 0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.5595328700196225`, 0.48646868297366475`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{1.5123503685126292`, 0.}, {
       1.4240424895888535`, 0.027712354085059787`}, {1.4005283084417879`, 
       0.035545986840337274`}, {1.377302623061274, 0.044197579512611496`}, {
       1.3543938770531931`, 0.05365653682823668}, {1.331830125879937, 
       0.0639112747650612}, {1.3096390025019569`, 0.07494923473893489}, {
       1.2878476835367387`, 0.0867568989837254}, {1.2664828559766423`, 
       0.09931980710600785}, {0.968994149358283, 0.2813276676837445}, {
       0.9480819778880047, 0.29463043437189085`}, {0.9276480728416938, 
       0.30865676823787025`}, {0.9077174588389572, 0.32338949176868725`}, {
       0.8883145441381687, 0.3388105623630234}, {0.869463090744611, 
       0.3549010944273181}, {0.8511861853100594, 0.37164138250423107`}, {
       0.8335062108594454, 0.3890109254051598}, {0.7686286019667304, 
       0.455019651444342}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "GrayLevel[0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["GrayLevelColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         GrayLevel[0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {1.1183786816377699`, 0.19137009887221273`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[{{2.665588503609232, 1.3427854204008212`}, {
       2.5660619297793836`, 1.2774341302205152`}, {2.539107933977563, 
       1.260402964477246}, {2.511574525712786, 1.2443253425889083`}, {
       2.4834954240938933`, 1.2292209542022448`}, {2.4549050165194433`, 
       1.2151082970822653`}, {2.425838316564783, 1.2020046544587428`}, {
       2.3963309211022636`, 1.1899260738601054`}, {2.366418966707122, 
       1.1788873474606427`}, {1.9428697138740754`, 1.0309481256792463`}, {
       1.9125898325693491`, 1.0209627721837027`}, {1.8819791069640504`, 
       1.0120430202714377`}, {1.851075024839512, 1.0041997936204305`}, {
       1.8199154332395435`, 0.9974426975294729}, {1.788538492120606, 
       0.991780007154925}, {1.7569826276187785`, 0.9872186573764522}, {
       1.7252864849907432`, 0.9837642343041411}, {1.6067153715266158`, 
       0.9729373659473295}},
       SplineDegree->17]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "RGBColor[1, 0, 0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["RGBColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         RGBColor[1, 0, 0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {2.154123991453096, 1.1064074926919731`},
       Background->GrayLevel[1]]}, 
     {GrayLevel[0], Arrowheads[{{Automatic, 0.8}}], 
      ArrowBox[BSplineCurveBox[CompressedData["
1:eJwBoQFe/iFib1JlAgAAABkAAAACAAAACMO8ECBTBUCZrKKQDHz1P8M2/BmX
UAVARp6L31SL9T+U9soj2zYFQH21hzQFqfY/JPeouDNGBUCtWD5irsn3P7VJ
pbplfQVAD06WAynW+D/szI7GA9gFQEiH9B3suPk/Z7oPHclOBkC3ll9Vx1/6
P7hUeuMu2AZAySe2ali9+j8k3H7DL2kHQPxRnw4eyvo/BkvUOCr2B0ABb/D9
EYX6P49742XPcwhA+GkAC77z+T+dP0dHC9gIQLWk8WPKIfk/ycsVptMaCUCV
uDI1DiD4P7RFfS/NNglAFjFd2zUD9z/goq1zuSkJQDroP2Ea4vU/4n9l+aT0
CEB3gfhW7NP0P4DD/rPRmwhAOL/jo1fu8z9SJUOWXyYIQAmJU4XGQ/M/nxZC
RbqdB0BrYtNr5+HyP/uaU6fXDAdACK6pC5TQ8j/Zs23TVn8GQPTbWCkwEfM/
y5JPbpEABkDE+D8QjZ7zP2essJmymgVAd/lT/VNt9D+c0D8n5lUFQOyQxPTu
bPU/CMO8ECBTBUCZrKKQDHz1P4Ctv8E=
       "],
       SplineDegree->24]], InsetBox[
       StyleBox[
        InterpretationBox[
         ButtonBox[
          TooltipBox[
           RowBox[{
            GraphicsBox[{
              {GrayLevel[0], RectangleBox[{0, 0}]}, 
              {GrayLevel[0], RectangleBox[{1, -1}]}, 
              {GrayLevel[0], RectangleBox[{0, -1}, {2, 1}]}},
             AspectRatio->1,
             Frame->True,
             FrameStyle->GrayLevel[0.],
             FrameTicks->None,
             
             ImageSize->
              Dynamic[{
               Automatic, 1.35 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}],
             PlotRangePadding->None], "\[InvisibleSpace]"}],
           "GrayLevel[0]"],
          Appearance->None,
          BaseStyle->{},
          BaselinePosition->Baseline,
          ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
            If[
             Not[
              AbsoluteCurrentValue["Deployed"]], 
             SelectionMove[Typeset`box$, All, Expression]; 
             FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
             FrontEnd`Private`$ColorSelectorInitialColor = GrayLevel[0]; 
             FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[Typeset`box$, 
                FrontEndResource["GrayLevelColorValueSelector"], {
                0, {Left, Bottom}}, {Left, Top}, 
                "ClosingActions" -> {
                 "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
          DefaultBaseStyle->{},
          Evaluator->Automatic,
          Method->"Preemptive"],
         GrayLevel[0],
         Editable->False,
         Selectable->False],
        StripOnInput->False,
        LineColor->GrayLevel[0],
        FrontFaceColor->GrayLevel[0],
        BackFaceColor->GrayLevel[0],
        GraphicsColor->GrayLevel[0],
        FontSize->12,
        FontColor->GrayLevel[0]], {3.087120409498264, 1.49002001400742},
       Background->GrayLevel[1]]}}, {
     {RGBColor[1, 1, 0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{0., 1.1015829367775112`}, 0.1], InsetBox[
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {"1"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}], {0., 1.1015829367775112`},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{0.7358404108491299, 1.6450026687393353`}, 0.1], InsetBox[
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {"2", "4"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}], {0.7358404108491299, 1.6450026687393353`},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{0.7686286019667304, 0.455019651444342}, 0.1], InsetBox[
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {"5"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}], {0.7686286019667304, 0.455019651444342},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{1.6067153715266158`, 0.9729373659473295}, 0.1], InsetBox[
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {"2", "4", "6", "8"},
          {"1", "3", "5", "7"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}], {1.6067153715266158`, 0.9729373659473295},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{1.5123503685126292`, 0.}, 0.1], 
      DiskBox[{1.5123503685126292`, 0.}, 0.06999999999999999], InsetBox[
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {"1", "3", "7", "9"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}], {1.5123503685126292`, 0.},
       BaseStyle->{
         GrayLevel[0], 12}]}, 
     {GrayLevel[0.85], EdgeForm[GrayLevel[0]], 
      DiskBox[{2.665588503609232, 1.3427854204008212`}, 0.1], 
      DiskBox[{2.665588503609232, 1.3427854204008212`}, 0.06999999999999999], 
      InsetBox[
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {"1", "3", "5", "7", "9"}
         },
         GridBoxAlignment->{
          "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
           "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}], {2.665588503609232, 1.3427854204008212`},
       BaseStyle->{
         GrayLevel[0], 12}]}}},
   Annotation[#, 
    VertexCoordinateRules -> {{0., 1.1015829367775112`}, {0.7358404108491299, 
     1.6450026687393353`}, {0.7686286019667304, 0.455019651444342}, {
     1.6067153715266158`, 0.9729373659473295}, {1.5123503685126292`, 0.}, {
     2.665588503609232, 1.3427854204008212`}}]& ],
  AspectRatio->Automatic,
  FrameTicks->None,
  PlotRange->All,
  PlotRangePadding->Scaled[0.1]]], "Output",
 CellChangeTimes->{3.640856182398195*^9, 3.6409469680164723`*^9, 
  3.640948812356962*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DFAManipulate", "@", 
  RowBox[{
   RowBox[{"MapAt", "[", 
    RowBox[{
     RowBox[{"Range", "@*", "Length"}], ",", "1"}], "]"}], "@", 
   RowBox[{"NFAToDFA", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Range", "@", "9"}], ",", 
      RowBox[{"{", 
       RowBox[{"\"\<\>\"", ",", "\"\<c\>\"", ",", "\"\<d\>\""}], "}"}], ",", 
      RowBox[{"ArrayFlatten", "[", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "}"}], ",", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", "2", "}"}], ",", 
              RowBox[{"{", "3", "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", "2", "}"}], ",", 
              RowBox[{"{", "3", "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"4", ",", "8", ",", "9"}], "}"}], ",", 
              RowBox[{"{", "6", "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"4", ",", "8", ",", "9"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"5", ",", "6"}], "}"}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"4", ",", "8", ",", "9"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"4", ",", "5", ",", "6"}], "}"}]}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", "7", "}"}], ",", 
              RowBox[{"{", "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"8", ",", "9"}], "}"}], ",", 
              RowBox[{"{", "}"}]}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", "}"}], ",", 
              RowBox[{"{", "}"}]}], "}"}]}], "}"}]}], "}"}], "}"}], "]"}], 
      ",", "1", ",", 
      RowBox[{"{", 
       RowBox[{"7", ",", "9"}], "}"}]}], "}"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.6409480160724173`*^9, 3.6409482933612776`*^9}, {
  3.640948496575901*^9, 3.64094851841415*^9}, {3.64094854883689*^9, 
  3.6409485706861396`*^9}, {3.6409486591712008`*^9, 3.640948744448078*^9}, {
  3.640948840018545*^9, 3.640948864341936*^9}, {3.6409489057703056`*^9, 
  3.640948916755934*^9}, {3.640950375551372*^9, 3.6409503762024093`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`arrowPosition$$ = 
    0.8, $CellContext`arrowSize$$ = 0.024, $CellContext`edgeLabelPosition$$ = 
    0.5, $CellContext`F$$ = {3, 6}, $CellContext`headingsQ\[CapitalSigma]$$ = 
    False, $CellContext`imageSize$$ = Medium, $CellContext`lay$$ = 
    Left, $CellContext`out$$ = {
    "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, \
$CellContext`outForm$$ = 
    Column, $CellContext`plot$$ = $CellContext`DFALayeredPlot, \
$CellContext`plotLabel$$ = None, $CellContext`Q$$ = {1, 2, 3, 4, 5, 6, 
    7}, $CellContext`s$$ = 1, $CellContext`vertexSize$$ = 
    0.1, $CellContext`\[Delta]$$ = {{1, 2}, {3, 4}, {3, 5}, {6, 7}, {3, 5}, {
    7, 7}, {7, 7}}, $CellContext`\[Delta]Elements$$ = 
    "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", \
$CellContext`\[Delta]Output$$ = MatrixForm, $CellContext`\[CapitalSigma]$$ = {
    "c", "d"}, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`Q$$], {1, 2, 3, 4, 5, 6, 7}}}, {{
       Hold[$CellContext`\[CapitalSigma]$$], {"c", "d"}}}, {{
       Hold[$CellContext`\[Delta]$$], {{1, 2}, {3, 4}, {3, 5}, {6, 7}, {3, 
       5}, {7, 7}, {7, 7}}}}, {
      Hold[
       OpenerView[{
        "\:0412\:0438\:0437\:043d\:0430\:0447\:0435\:043d\:043d\:044f \:0414\
\:0421\:0410", 
         Dynamic[
          Grid[
           ArrayFlatten[{{{{Null, "\[CapitalSigma]"}, {"Q", "\[Delta]"}}, 
              Transpose[
               Array[{
                 Function[Null, 
                  InputField[
                   SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                  HoldAll}][
                  Dynamic[
                   Part[$CellContext`\[CapitalSigma]$$, #]]], 
                 Function[Null, 
                  Button[
                   SlotSequence[1], 
                   (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                   ContentPadding -> False], {HoldAll}]["-", 
                  Catch[
                   If[
                   Length[$CellContext`\[CapitalSigma]$$] > 
                    1, {$CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$} = {
                    Drop[$CellContext`\[CapitalSigma]$$, {#}], 
                    Drop[$CellContext`\[Delta]$$, {}, {#}]}, 
                    Throw[
                    Beep[]]]]]}& , 
                Length[$CellContext`\[CapitalSigma]$$]]], {{
                Function[Null, 
                 Button[
                  SlotSequence[1], 
                  (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                  ContentPadding -> False], {HoldAll}]["+", 
                 
                 Catch[{$CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`\[CapitalSigma]$$, $CellContext`\
\[Placeholder] :> Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    ArrayFlatten[{{$CellContext`\[Delta]$$, 
                    Transpose[{
                    Range[
                    Length[$CellContext`Q$$]]}]}}]}]]}, {Null}}}, {
              Array[{
                Function[Null, 
                 InputField[
                  SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                 HoldAll}][
                 Dynamic[
                  Part[$CellContext`Q$$, #], 
                  Function[$CellContext`v$, 
                   
                   Catch[{$CellContext`s$$, $CellContext`F$$} = 
                    ReplaceAll[{$CellContext`s$$, $CellContext`F$$}, 
                    Part[$CellContext`Q$$, #] -> If[
                    FreeQ[$CellContext`Q$$, $CellContext`v$], 
                    Part[$CellContext`Q$$, #] = $CellContext`v$, 
                    Throw[
                    Beep[]]]]]]]], 
                Function[Null, 
                 Button[
                  SlotSequence[1], 
                  (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                  ContentPadding -> False], {HoldAll}]["-", 
                 Catch[
                  If[
                  Length[$CellContext`Q$$] > 
                   1, {$CellContext`Q$$, $CellContext`\[Delta]$$} = {
                    Drop[$CellContext`Q$$, {#}], 
                    MapIndexed[
                    Function[{$CellContext`e$, $CellContext`i$}, 
                    
                    ReplaceAll[$CellContext`e$, Part[$CellContext`Q$$, #] -> 
                    Part[$CellContext`Q$$, 
                    Part[$CellContext`i$, 1]]]], 
                    ReplaceAll[
                    Drop[$CellContext`\[Delta]$$, {#}, {}], 
                    Pattern[$CellContext`q, 
                    Blank[]] :> 
                    Condition[$CellContext`q - 1, $CellContext`q >= #]]]}, 
                   Throw[
                    Beep[]]]]]}& , 
               Length[$CellContext`Q$$]], 
              Outer[Function[Null, 
                InputField[
                 SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {HoldAll}][
                Dynamic[
                 Part[$CellContext`Q$$, 
                  Part[$CellContext`\[Delta]$$, 
                   SlotSequence[1]]], 
                 Function[$CellContext`v$, 
                  Catch[Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]] = ReplaceAll[
                    Part[
                    FirstPosition[$CellContext`Q$$, $CellContext`v$], 1], 
                    "NotFound" :> Throw[
                    Beep[]]]]]]]& , 
               Apply[Sequence, 
                Map[Range, 
                 Dimensions[$CellContext`\[Delta]$$]]]], 
              Transpose[{
                ConstantArray[Null, 
                 Length[$CellContext`Q$$]]}]}, {{{
                Function[Null, 
                 Button[
                  SlotSequence[1], 
                  (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                  ContentPadding -> False], {HoldAll}]["+", 
                 Catch[{$CellContext`Q$$, $CellContext`\[Delta]$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`Q$$, $CellContext`\[Placeholder] :> 
                    Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    Append[$CellContext`\[Delta]$$, 
                    ConstantArray[Length[$CellContext`Q$$] + 1, 
                    Length[$CellContext`\[CapitalSigma]$$]]]}]], Null}}, {
               ConstantArray[Null, 
                Length[$CellContext`\[CapitalSigma]$$]]}, Null}}], 
           Alignment -> {Null, Null, {{1, 1} -> {Center, Center}}}, 
           Dividers -> {{False, True}, {False, True}}]]}, True]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`s$$], 1}, 
      Dynamic[
       Thread[Range[
          Length[$CellContext`Q$$]] -> $CellContext`Q$$]]}, {{
       Hold[$CellContext`F$$], {3, 6}}, 
      Dynamic[
       Thread[Range[
          Length[$CellContext`Q$$]] -> $CellContext`Q$$]]}, {{
       Hold[$CellContext`out$$], {
       "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, 
       "\:0412\:0438\:0432\:0456\:0434 \:0414\:0421\:0410"}, {
      "\:0422\:0430\:0431\:043b\:0438\:0446\:044f", 
       "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}}, {{
       Hold[$CellContext`outForm$$], Column, 
       "\:0424\:043e\:0440\:043c\:0430\:0442"}, {Column, Row, InputForm}}, {{
       Hold[$CellContext`\[Delta]Elements$$], 
       "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
       "\:0415\:043b\:0435\:043c\:0435\:043d\:0442\:0438"}, {
      "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
       "\:0421\:0442\:0430\:043d\:0438"}}, {{
       Hold[$CellContext`\[Delta]Output$$], MatrixForm, 
       "\:0424\:043e\:0440\:043c\:0430 \
\:0432\:0438\:0432\:043e\:0434\:0443"}, {MatrixForm, TableForm}}, {{
       Hold[$CellContext`headingsQ\[CapitalSigma]$$], False, 
       "\:0417\:0430\:0433\:043e\:043b\:043e\:0432\:043a\:0438"}, {
      True, False}}, {{
       Hold[$CellContext`plot$$], $CellContext`DFAPlot, 
       "\:0424\:0443\:043d\:043a\:0446\:0456\:044f"}, {$CellContext`DFAPlot, \
$CellContext`DFALayeredPlot}}, {{
       Hold[$CellContext`lay$$], Left, 
       "\:041e\:0440\:0456\:0454\:043d\:0442\:0430\:0446\:0456\:044f"}, {
      Left, Right, Top, Bottom}}, {{
       Hold[$CellContext`imageSize$$], Medium, "ImageSize"}, {
      Tiny, Small, Medium, Large, Full, Automatic}}, {{
       Hold[$CellContext`plotLabel$$], None, "PlotLabel"}, ""}, {{
       Hold[$CellContext`arrowSize$$], Automatic, "ArrowSize"}, 0., 1.}, {{
       Hold[$CellContext`arrowPosition$$], 0.8, "ArrowPosition"}, 0., 1.}, {{
       Hold[$CellContext`edgeLabelPosition$$], 0.5, "EdgeLabelPosition"}, 0., 
      1.}, {{
       Hold[$CellContext`vertexSize$$], 0.1, "VertexSize"}, 0., 1.}, {
      Hold[
       Dynamic[
        Column[
         ReplaceAll[$CellContext`out$$, {
          "\:0422\:0430\:0431\:043b\:0438\:0446\:044f" -> 
           OpenerView[{
             "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0442\:0430\:0431\:043b\:0438\:0446\:0456 \:043f\:0435\:0440\
\:0435\:0445\:043e\:0434\:0456\:0432", 
              Column[{
                Manipulate`Place[1], 
                Manipulate`Place[2], 
                Manipulate`Place[3]}]}], 
           "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430" -> 
           OpenerView[{
             "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0434\:0456\:0430\:0433\:0440\:0430\:043c\:0438 \:043f\:0435\
\:0440\:0435\:0445\:043e\:0434\:0456\:0432", 
              Column[{
                Manipulate`Place[4], 
                Manipulate`Place[5], 
                Manipulate`Place[6], 
                Manipulate`Place[7], 
                Manipulate`Place[8], 
                Manipulate`Place[9], 
                Manipulate`Place[10], 
                Manipulate`Place[11]}]}]}]]]], 
      Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = {
    360., {100.5, 107.5}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`out$49679$$ = 
    False, $CellContext`outForm$49680$$ = 
    0, $CellContext`\[Delta]Elements$49681$$ = 
    False, $CellContext`\[Delta]Output$49682$$ = 
    False, $CellContext`headingsQ\[CapitalSigma]$49683$$ = 
    False, $CellContext`plot$49684$$ = False, $CellContext`lay$49685$$ = 
    0, $CellContext`imageSize$49686$$ = 0, $CellContext`arrowSize$49687$$ = 
    0, $CellContext`arrowPosition$49688$$ = 
    0, $CellContext`edgeLabelPosition$49689$$ = 
    0, $CellContext`vertexSize$49690$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`arrowPosition$$ = 
        0.8, $CellContext`arrowSize$$ = 
        Automatic, $CellContext`edgeLabelPosition$$ = 
        0.5, $CellContext`F$$ = {3, 
         6}, $CellContext`headingsQ\[CapitalSigma]$$ = 
        False, $CellContext`imageSize$$ = Medium, $CellContext`lay$$ = 
        Left, $CellContext`out$$ = {
         "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, \
$CellContext`outForm$$ = 
        Column, $CellContext`plot$$ = $CellContext`DFAPlot, \
$CellContext`plotLabel$$ = 
        None, $CellContext`Q$$ = {1, 2, 3, 4, 5, 6, 7}, $CellContext`s$$ = 
        1, $CellContext`vertexSize$$ = 
        0.1, $CellContext`\[Delta]$$ = {{1, 2}, {3, 4}, {3, 5}, {6, 7}, {3, 
         5}, {7, 7}, {7, 7}}, $CellContext`\[Delta]Elements$$ = 
        "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", \
$CellContext`\[Delta]Output$$ = 
        MatrixForm, $CellContext`\[CapitalSigma]$$ = {"c", "d"}}, 
      "ControllerVariables" :> {
        Hold[$CellContext`out$$, $CellContext`out$49679$$, False], 
        Hold[$CellContext`outForm$$, $CellContext`outForm$49680$$, 0], 
        Hold[$CellContext`\[Delta]Elements$$, \
$CellContext`\[Delta]Elements$49681$$, False], 
        Hold[$CellContext`\[Delta]Output$$, \
$CellContext`\[Delta]Output$49682$$, False], 
        Hold[$CellContext`headingsQ\[CapitalSigma]$$, $CellContext`headingsQ\
\[CapitalSigma]$49683$$, False], 
        Hold[$CellContext`plot$$, $CellContext`plot$49684$$, False], 
        Hold[$CellContext`lay$$, $CellContext`lay$49685$$, 0], 
        Hold[$CellContext`imageSize$$, $CellContext`imageSize$49686$$, 0], 
        Hold[$CellContext`arrowSize$$, $CellContext`arrowSize$49687$$, 0], 
        Hold[$CellContext`arrowPosition$$, $CellContext`arrowPosition$49688$$,
          0], 
        Hold[$CellContext`edgeLabelPosition$$, \
$CellContext`edgeLabelPosition$49689$$, 0], 
        Hold[$CellContext`vertexSize$$, $CellContext`vertexSize$49690$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      ReplaceAll[$CellContext`outForm$$, {Column -> (Column[#, Center]& )}][
        ReplaceAll[$CellContext`out$$, {
         "\:0422\:0430\:0431\:043b\:0438\:0446\:044f" :> 
          Replace[$CellContext`\[Delta]Output$$, Blank[] :> 
            Condition[$CellContext`\[Delta]Output$$[#, 
               TableHeadings -> {$CellContext`Q$$, $CellContext`\
\[CapitalSigma]$$}]& , $CellContext`headingsQ\[CapitalSigma]$$]][
            
            ReplaceAll[$CellContext`\[Delta]Elements$$, {
             "\:0406\:043d\:0434\:0435\:043a\:0441\:0438" -> Identity, 
              "\:0421\:0442\:0430\:043d\:0438" -> 
              ReplaceAll[Pattern[$CellContext`q$, 
                  Blank[Integer]] :> 
                Part[$CellContext`Q$$, $CellContext`q$]]}][$CellContext`\
\[Delta]$$]], "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430" :> 
          Replace[$CellContext`plot$$, $CellContext`DFALayeredPlot -> \
($CellContext`DFALayeredPlot[#, $CellContext`lay$$, 
              SlotSequence[
              2]]& )][{$CellContext`Q$$, $CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$, $CellContext`s$$, $CellContext`F$$}, 
            ImageSize -> $CellContext`imageSize$$, 
            PlotLabel -> $CellContext`plotLabel$$, $CellContext`ArrowSize -> \
$CellContext`arrowSize$$, $CellContext`ArrowPosition -> \
$CellContext`arrowPosition$$, $CellContext`EdgeLabelPosition -> \
$CellContext`edgeLabelPosition$$, VertexSize -> $CellContext`vertexSize$$]}]],
       "Specifications" :> {{{$CellContext`Q$$, {1, 2, 3, 4, 5, 6, 7}}, 
         ControlType -> None}, {{$CellContext`\[CapitalSigma]$$, {"c", "d"}}, 
         ControlType -> 
         None}, {{$CellContext`\[Delta]$$, {{1, 2}, {3, 4}, {3, 5}, {6, 7}, {
          3, 5}, {7, 7}, {7, 7}}}, ControlType -> None}, 
        OpenerView[{
         "\:0412\:0438\:0437\:043d\:0430\:0447\:0435\:043d\:043d\:044f \:0414\
\:0421\:0410", 
          Dynamic[
           Grid[
            ArrayFlatten[{{{{Null, "\[CapitalSigma]"}, {"Q", "\[Delta]"}}, 
               Transpose[
                Array[{
                  Function[Null, 
                   InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                   HoldAll}][
                   Dynamic[
                    Part[$CellContext`\[CapitalSigma]$$, #]]], 
                  Function[Null, 
                   Button[
                    SlotSequence[1], 
                    (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                    ContentPadding -> False], {HoldAll}]["-", 
                   Catch[
                    If[
                    Length[$CellContext`\[CapitalSigma]$$] > 
                    1, {$CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$} = {
                    Drop[$CellContext`\[CapitalSigma]$$, {#}], 
                    Drop[$CellContext`\[Delta]$$, {}, {#}]}, 
                    Throw[
                    Beep[]]]]]}& , 
                 Length[$CellContext`\[CapitalSigma]$$]]], {{
                 Function[Null, 
                  Button[
                   SlotSequence[1], 
                   (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                   ContentPadding -> False], {HoldAll}]["+", 
                  
                  Catch[{$CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`\[CapitalSigma]$$, $CellContext`\
\[Placeholder] :> Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    ArrayFlatten[{{$CellContext`\[Delta]$$, 
                    Transpose[{
                    Range[
                    Length[$CellContext`Q$$]]}]}}]}]]}, {Null}}}, {
               Array[{
                 Function[Null, 
                  InputField[
                   SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                  HoldAll}][
                  Dynamic[
                   Part[$CellContext`Q$$, #], 
                   Function[$CellContext`v$, 
                    
                    Catch[{$CellContext`s$$, $CellContext`F$$} = 
                    ReplaceAll[{$CellContext`s$$, $CellContext`F$$}, 
                    Part[$CellContext`Q$$, #] -> If[
                    FreeQ[$CellContext`Q$$, $CellContext`v$], 
                    Part[$CellContext`Q$$, #] = $CellContext`v$, 
                    Throw[
                    Beep[]]]]]]]], 
                 Function[Null, 
                  Button[
                   SlotSequence[1], 
                   (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                   ContentPadding -> False], {HoldAll}]["-", 
                  Catch[
                   If[
                   Length[$CellContext`Q$$] > 
                    1, {$CellContext`Q$$, $CellContext`\[Delta]$$} = {
                    Drop[$CellContext`Q$$, {#}], 
                    MapIndexed[
                    Function[{$CellContext`e$, $CellContext`i$}, 
                    
                    ReplaceAll[$CellContext`e$, Part[$CellContext`Q$$, #] -> 
                    Part[$CellContext`Q$$, 
                    Part[$CellContext`i$, 1]]]], 
                    ReplaceAll[
                    Drop[$CellContext`\[Delta]$$, {#}, {}], 
                    Pattern[$CellContext`q, 
                    Blank[]] :> 
                    Condition[$CellContext`q - 1, $CellContext`q >= #]]]}, 
                    Throw[
                    Beep[]]]]]}& , 
                Length[$CellContext`Q$$]], 
               Outer[Function[Null, 
                 InputField[
                  SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                 HoldAll}][
                 Dynamic[
                  Part[$CellContext`Q$$, 
                   Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]]], 
                  Function[$CellContext`v$, 
                   Catch[Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]] = ReplaceAll[
                    Part[
                    FirstPosition[$CellContext`Q$$, $CellContext`v$], 1], 
                    "NotFound" :> Throw[
                    Beep[]]]]]]]& , 
                Apply[Sequence, 
                 Map[Range, 
                  Dimensions[$CellContext`\[Delta]$$]]]], 
               Transpose[{
                 ConstantArray[Null, 
                  Length[$CellContext`Q$$]]}]}, {{{
                 Function[Null, 
                  Button[
                   SlotSequence[1], 
                   (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                   ContentPadding -> False], {HoldAll}]["+", 
                  Catch[{$CellContext`Q$$, $CellContext`\[Delta]$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`Q$$, $CellContext`\[Placeholder] :> 
                    Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    Append[$CellContext`\[Delta]$$, 
                    ConstantArray[Length[$CellContext`Q$$] + 1, 
                    Length[$CellContext`\[CapitalSigma]$$]]]}]], Null}}, {
                ConstantArray[Null, 
                 Length[$CellContext`\[CapitalSigma]$$]]}, Null}}], 
            Alignment -> {Null, Null, {{1, 1} -> {Center, Center}}}, 
            Dividers -> {{False, True}, {False, True}}]]}, 
         True], {{$CellContext`s$$, 1}, 
         Dynamic[
          Thread[Range[
             Length[$CellContext`Q$$]] -> $CellContext`Q$$]], ControlType -> 
         SetterBar}, {{$CellContext`F$$, {3, 6}}, 
         Dynamic[
          Thread[Range[
             Length[$CellContext`Q$$]] -> $CellContext`Q$$]], ControlType -> 
         TogglerBar}, 
        Delimiter, {{$CellContext`out$$, {
          "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, 
          "\:0412\:0438\:0432\:0456\:0434 \:0414\:0421\:0410"}, {
         "\:0422\:0430\:0431\:043b\:0438\:0446\:044f", 
          "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, ControlType -> 
         TogglerBar}, {{$CellContext`outForm$$, Column, 
          "\:0424\:043e\:0440\:043c\:0430\:0442"}, {
         Column, Row, InputForm}}, {{$CellContext`\[Delta]Elements$$, 
          "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
          "\:0415\:043b\:0435\:043c\:0435\:043d\:0442\:0438"}, {
         "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
          "\:0421\:0442\:0430\:043d\:0438"}, ControlPlacement -> 
         1}, {{$CellContext`\[Delta]Output$$, MatrixForm, 
          "\:0424\:043e\:0440\:043c\:0430 \
\:0432\:0438\:0432\:043e\:0434\:0443"}, {MatrixForm, TableForm}, 
         ControlPlacement -> 
         2}, {{$CellContext`headingsQ\[CapitalSigma]$$, False, 
          "\:0417\:0430\:0433\:043e\:043b\:043e\:0432\:043a\:0438"}, {
         True, False}, ControlPlacement -> 
         3}, {{$CellContext`plot$$, $CellContext`DFAPlot, 
          "\:0424\:0443\:043d\:043a\:0446\:0456\:044f"}, \
{$CellContext`DFAPlot, $CellContext`DFALayeredPlot}, ControlPlacement -> 
         4}, {{$CellContext`lay$$, Left, 
          "\:041e\:0440\:0456\:0454\:043d\:0442\:0430\:0446\:0456\:044f"}, {
         Left, Right, Top, Bottom}, ControlPlacement -> 
         5}, {{$CellContext`imageSize$$, Medium, "ImageSize"}, {
         Tiny, Small, Medium, Large, Full, Automatic}, ControlPlacement -> 
         6}, {{$CellContext`plotLabel$$, None, "PlotLabel"}, "", 
         FieldSize -> {{6, 15}, {1, 
            DirectedInfinity[1]}}, ControlPlacement -> 
         7}, {{$CellContext`arrowSize$$, Automatic, "ArrowSize"}, 0., 1., 
         ControlPlacement -> 
         8}, {{$CellContext`arrowPosition$$, 0.8, "ArrowPosition"}, 0., 1., 
         ControlPlacement -> 
         9}, {{$CellContext`edgeLabelPosition$$, 0.5, "EdgeLabelPosition"}, 
         0., 1., ControlPlacement -> 
         10}, {{$CellContext`vertexSize$$, 0.1, "VertexSize"}, 0., 1., 
         ControlPlacement -> 11}, 
        Dynamic[
         Column[
          
          ReplaceAll[$CellContext`out$$, {
           "\:0422\:0430\:0431\:043b\:0438\:0446\:044f" -> 
            OpenerView[{
              "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0442\:0430\:0431\:043b\:0438\:0446\:0456 \:043f\:0435\:0440\
\:0435\:0445\:043e\:0434\:0456\:0432", 
               Column[{
                 Manipulate`Place[1], 
                 Manipulate`Place[2], 
                 Manipulate`Place[3]}]}], 
            "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430" -> 
            OpenerView[{
              "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0434\:0456\:0430\:0433\:0440\:0430\:043c\:0438 \:043f\:0435\
\:0440\:0435\:0445\:043e\:0434\:0456\:0432", 
               Column[{
                 Manipulate`Place[4], 
                 Manipulate`Place[5], 
                 Manipulate`Place[6], 
                 Manipulate`Place[7], 
                 Manipulate`Place[8], 
                 Manipulate`Place[9], 
                 Manipulate`Place[10], 
                 Manipulate`Place[11]}]}]}]]]}, 
      "Options" :> {ControlPlacement -> Left}, "DefaultOptions" :> {}],
     ImageSizeCache->{596., {196., 203.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`DFALayeredPlot[
         Pattern[$CellContext`M, 
          Blank[]], 
         Pattern[$CellContext`pos, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          
          OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`DFA\[Delta]Edges, 
         Insert[$CellContext`pos, 2], 
         LayeredGraphPlot, $CellContext`opts], $CellContext`DFACustomPlot[{
          Pattern[$CellContext`Q, 
           Blank[]], 
          Pattern[$CellContext`\[CapitalSigma], 
           Blank[]], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`F, 
           Blank[]]}, 
         Pattern[$CellContext`Edges, 
          Blank[]], 
         Pattern[$CellContext`PrePlot, 
          Blank[]], 
         Pattern[Plot, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          OptionsPattern[]]] := 
       With[{$CellContext`Qf = 
          If[Null =!= $CellContext`Q, Part[$CellContext`Q, #]& , 
            Identity], $CellContext`\[CapitalSigma]f = 
          If[Null =!= $CellContext`\[CapitalSigma], 
            Part[$CellContext`\[CapitalSigma], #]& , Characters[
             FromCharacterCode[96 + #]]& ]}, 
         Apply[Plot, 
          $CellContext`PrePlot[{
            If[
             
             OptionValue[$CellContext`EdgeCollapsing], \
$CellContext`DFACollapseEdges, Identity][
             $CellContext`Edges[$CellContext`\[Delta]]], 
            Apply[Sequence, 
             FilterRules[
              FilterRules[{$CellContext`opts}, 
               Options[Plot]], 
              Except[{VertexRenderingFunction, EdgeRenderingFunction}]]], 
            VertexRenderingFunction -> Replace[
              OptionValue[VertexRenderingFunction], 
              Automatic -> ($CellContext`DFARenderState[#2, 
                Replace[$CellContext`s, Null -> 1], $CellContext`F, #, 
                VertexLabeling -> $CellContext`Qf, 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderState]]]]& )], 
            EdgeRenderingFunction -> Replace[
              OptionValue[EdgeRenderingFunction], 
              Automatic -> ($CellContext`DFARenderTransition[#3, #, 
                EdgeLabeling -> If[Null =!= $CellContext`\[CapitalSigma], 
                  Function[$CellContext`l, 
                   If[
                   Length[$CellContext`l] == 
                    Length[$CellContext`\[CapitalSigma]], "\[CapitalSigma]", 
                    If[
                    Length[$CellContext`l] > 
                    Length[$CellContext`\[CapitalSigma]]/2., 
                    Row[{"\[CapitalSigma]", "\[Backslash]", 
                    $CellContext`\[CapitalSigma]f[
                    Complement[
                    Range[
                    Length[$CellContext`\[CapitalSigma]]], $CellContext`l]]}], 
                    $CellContext`\[CapitalSigma]f[$CellContext`l]]]], 
                  FromCharacterCode[# + 96]& ], 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderTransition]]]]& )]}]]], 
       Options[$CellContext`DFACustomPlot] = {
        AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> False, 
         AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, 
         Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, 
         ColorOutput -> Automatic, ContentSelectable -> Automatic, 
         CoordinatesToolOptions -> Automatic, DataRange -> Automatic, 
         DirectedEdges -> False, DisplayFunction :> $DisplayFunction, 
         EdgeLabeling -> True, EdgeRenderingFunction -> Automatic, 
         Epilog -> {}, FormatType :> TraditionalForm, Frame -> False, 
         FrameLabel -> None, FrameStyle -> {}, FrameTicks -> None, 
         FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, 
         ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, 
         ImageSizeRaw -> Automatic, LabelStyle -> {}, Method -> Automatic, 
         MultiedgeStyle -> Automatic, PackingMethod -> Automatic, PlotLabel -> 
         None, PlotRange -> All, PlotRangeClipping -> False, PlotRangePadding -> 
         Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, 
         PreserveImageOptions -> Automatic, Prolog -> {}, RotateLabel -> True,
          SelfLoopStyle -> Automatic, Ticks -> Automatic, TicksStyle -> {}, 
         VertexCoordinateRules -> Automatic, VertexRenderingFunction -> 
         Automatic, $CellContext`EdgeCollapsing -> 
         True, $CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`Color -> 
         GrayLevel[0.85], $CellContext`PreRender -> Null, VertexSize -> 0.1, 
         VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}, $CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFACollapseEdges[
         Pattern[$CellContext`e, 
          Blank[]]] := MapAt[Replace[#, Pattern[$CellContext`l, 
            Blank[List]] :> Flatten[$CellContext`l]]& , {All, 2}][
         ReplaceRepeated[$CellContext`e, {
            Pattern[$CellContext`h, 
             BlankNullSequence[]], {
             Pattern[$CellContext`x, 
              Blank[]], 
             Pattern[$CellContext`l1, 
              Blank[]]}, 
            Pattern[$CellContext`u, 
             BlankNullSequence[]], {
             Pattern[$CellContext`x, 
              Blank[]], 
             Pattern[$CellContext`l2, 
              Blank[]]}, 
            Pattern[$CellContext`t, 
             
             BlankNullSequence[]]} :> {$CellContext`h, {$CellContext`x, \
{$CellContext`l1, $CellContext`l2}}, $CellContext`u, $CellContext`t}]], \
$CellContext`DFARenderState[
         Pattern[$CellContext`q, 
          Blank[]], 
         Pattern[$CellContext`s, 
          Blank[]], 
         Pattern[$CellContext`F, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {
         If[$CellContext`q === $CellContext`s, 
          OptionValue[$CellContext`StartColor], 
          OptionValue[$CellContext`Color]], 
         EdgeForm[Black], 
         OptionValue[$CellContext`PreRender], 
         Disk[$CellContext`p, 
          OptionValue[VertexSize]], 
         If[
          MemberQ[$CellContext`F, $CellContext`q], 
          Disk[$CellContext`p, 0.7 OptionValue[VertexSize]]], 
         Text[
          Replace[
           OptionValue[VertexLabeling], Automatic -> 
           Identity][$CellContext`q], $CellContext`p, BaseStyle -> 
          OptionValue[VertexLabelStyle]]}, 
       Options[$CellContext`DFARenderState] = {$CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`Color -> 
         GrayLevel[0.85], $CellContext`PreRender -> Null, VertexSize -> 0.1, 
         VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFARenderTransition[
         Pattern[$CellContext`t, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {Black, 
         Arrowheads[{{
            OptionValue[$CellContext`ArrowSize], 
            OptionValue[$CellContext`ArrowPosition]}}], 
         Arrow[
          
          BSplineCurve[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1]], 
         Text[
          Style[
           Replace[
            OptionValue[EdgeLabeling], Automatic -> Identity][$CellContext`t], 
           Apply[Sequence, 
            OptionValue[EdgeLabelStyle]]], 
          
          BSplineFunction[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1][
           OptionValue[$CellContext`EdgeLabelPosition]], Background -> 
          White]}, 
       Options[$CellContext`DFARenderTransition] = {$CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $DisplayFunction = 
       Identity, $CellContext`DFA\[Delta]Edges[
         Pattern[$CellContext`\[Delta], 
          Blank[]]] := With[{$CellContext`rd = Map[Range, 
            Dimensions[$CellContext`\[Delta], 2]]}, 
         Flatten[
          Inner[
           Composition[Reverse, List], 
           Part[$CellContext`rd, 2], 
           Inner[Rule, 
            Part[$CellContext`rd, 1], $CellContext`\[Delta], List], List], 
          1]], $CellContext`DFAPlot[
         Pattern[$CellContext`M, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          
          OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`DFA\[Delta]Edges, Identity, GraphPlot, $CellContext`opts]}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.6409488507011557`*^9, 3.64094886494497*^9}, 
   3.6409489173969707`*^9, 3.640950377180465*^9}]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["RE \[RightArrow] RRG", "Subchapter",
 CellChangeTimes->{{3.6408574397051086`*^9, 3.640857450325716*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Attributes", "[", "REToRRG", "]"}], "=", 
   RowBox[{"{", "HoldAll", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"REToRRG", "[", 
   RowBox[{"\[CurlyEpsilon]_", "/;", 
    RowBox[{"MatchQ", "[", 
     RowBox[{"\[CurlyEpsilon]", ",", 
      RowBox[{"\"\<\>\"", "|", "Null"}]}], "]"}]}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", "1", "}"}], ",", 
    RowBox[{"{", "\[CurlyEpsilon]", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"True", ",", "1"}], "}"}], "}"}]}], "}"}], ",", "1"}], 
   "}"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"REToRRG", "[", 
   RowBox[{"a_String", "|", 
    RowBox[{"a_", "?", "NumericQ"}], "|", "a_Symbol"}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", "1", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<\>\"", ",", "a"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"True", ",", "2"}], "}"}], "}"}]}], "}"}], ",", "1"}], 
   "}"}]}], "\n", 
 RowBox[{
  RowBox[{"REToRRG", "[", "r_", "]"}], ":=", 
  RowBox[{"ReleaseHold", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"HoldForm", "@", "r"}], "/.", 
     RowBox[{"a_String", "\[RuleDelayed]", 
      RowBox[{"REToRRG", "[", "a", "]"}]}]}], "/.", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Plus", "\[Rule]", "RRGUnion"}], ",", 
      RowBox[{"Times", "\[Rule]", "RRGConcatenation"}], ",", 
      RowBox[{"SuperStar", "\[Rule]", "RRGClosure"}]}], "}"}]}], 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6392148708963566`*^9, 3.639215068572663*^9}, {
   3.6392151011705275`*^9, 3.6392151165524073`*^9}, {3.6392151798480277`*^9, 
   3.639215180694076*^9}, {3.639215216066099*^9, 3.6392152391364183`*^9}, {
   3.6392152741774225`*^9, 3.639215278065645*^9}, {3.6392153163218336`*^9, 
   3.63921536188544*^9}, {3.639215400586653*^9, 3.6392154390878553`*^9}, {
   3.6392155635939765`*^9, 3.6392155696993256`*^9}, 3.639215626852595*^9, {
   3.639215758632132*^9, 3.6392158038387175`*^9}, {3.6392158374176383`*^9, 
   3.6392158404428115`*^9}, {3.6392166681631546`*^9, 3.639216744650529*^9}, {
   3.6392167918962317`*^9, 3.639216805297998*^9}, {3.6392293240637703`*^9, 
   3.6392293257668676`*^9}, {3.6392293608478746`*^9, 3.639229467180956*^9}, {
   3.640860572612301*^9, 3.6408605764885225`*^9}, {3.640860663669509*^9, 
   3.6408606726000195`*^9}, {3.640861738635994*^9, 3.6408617486855683`*^9}, {
   3.6408618172654905`*^9, 3.6408618322253466`*^9}, {3.640862322909412*^9, 
   3.6408623338990407`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RGTable", "@", 
  RowBox[{"REToRRG", "[", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"\"\<a\>\"", "+", "\"\<b\>\""}], ")"}], "*"], "]"}]}]], "Input",
 CellChangeTimes->{{3.64092745602645*^9, 3.6409274655029926`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"N\"\>", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]},
    {"\<\"T\"\>", 
     RowBox[{"{", 
      RowBox[{"\<\"\"\>", ",", "\<\"a\"\>", ",", "\<\"b\"\>"}], "}"}]},
    {"\<\"P\"\>", 
     TagBox[GridBox[{
        {
         InterpretationBox[
          StyleBox[
           RowBox[{"1", " ", "->", " ", 
            RowBox[{"{", "\"\<a\>\"", "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[1 -> {"a"}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"3", " ", "->", " ", 
            RowBox[{"{", "1", "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[3 -> {1}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"1", " ", "->", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<a\>\"", ",", " ", "4"}], "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[1 -> {"a", 4}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"4", " ", "->", " ", 
            RowBox[{"{", "3", "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[4 -> {3}],
          AutoDelete->True,
          Editable->True], "\<\"\"\>"},
        {
         InterpretationBox[
          StyleBox[
           RowBox[{"2", " ", "->", " ", 
            RowBox[{"{", "\"\<b\>\"", "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[2 -> {"b"}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"3", " ", "->", " ", 
            RowBox[{"{", "2", "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[3 -> {2}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"2", " ", "->", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<b\>\"", ",", " ", "4"}], "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[2 -> {"b", 4}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"4", " ", "->", " ", 
            RowBox[{"{", "\"\<\>\"", "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[4 -> {""}],
          AutoDelete->True,
          Editable->True], "\<\"\"\>"}
       },
       AutoDelete->False,
       GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
       GridBoxDividers->{"Columns" -> {False, {True}, False}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Grid"]},
    {"\<\"S\"\>", "4"}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {Right, Left}},
   GridBoxDividers->{
    "Columns" -> {False, True}, "Rows" -> {False, {True}, False}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.6409274579345593`*^9, 3.640927465952018*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RGTable", "@", 
  RowBox[{"REToRRG", "[", 
   RowBox[{
    SuperscriptBox["\"\<a\>\"", "*"], "\"\<b\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.640866734770756*^9, 3.640866764576461*^9}, {
   3.6408672372894983`*^9, 3.6408672374785094`*^9}, {3.6408695655719905`*^9, 
   3.6408695680691333`*^9}, {3.6408698588557653`*^9, 3.640869859766817*^9}, {
   3.64092514284976*^9, 3.6409251662911005`*^9}, {3.64092719429148*^9, 
   3.640927194884514*^9}, 3.6409272338827443`*^9, {3.640927273935035*^9, 
   3.6409272747260804`*^9}, {3.640927440510563*^9, 3.640927448003991*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"N\"\>", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}]},
    {"\<\"T\"\>", 
     RowBox[{"{", 
      RowBox[{"\<\"\"\>", ",", "\<\"a\"\>", ",", "\<\"b\"\>"}], "}"}]},
    {"\<\"P\"\>", 
     TagBox[GridBox[{
        {
         InterpretationBox[
          StyleBox[
           RowBox[{"1", " ", "->", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<a\>\"", ",", " ", "3"}], "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[1 -> {"a", 3}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"1", " ", "->", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<a\>\"", ",", " ", "2"}], "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[1 -> {"a", 2}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"2", " ", "->", " ", 
            RowBox[{"{", "1", "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[2 -> {1}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"2", " ", "->", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<\>\"", ",", " ", "3"}], "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[2 -> {"", 3}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"3", " ", "->", " ", 
            RowBox[{"{", "\"\<b\>\"", "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[3 -> {"b"}],
          AutoDelete->True,
          Editable->True]}
       },
       AutoDelete->False,
       GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
       GridBoxDividers->{"Columns" -> {False, {True}, False}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Grid"]},
    {"\<\"S\"\>", "2"}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {Right, Left}},
   GridBoxDividers->{
    "Columns" -> {False, True}, "Rows" -> {False, {True}, False}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.6408667376109185`*^9, 3.640866765467512*^9}, 
   3.6408668877205043`*^9, 3.6408670885349903`*^9, 3.6408671410019913`*^9, {
   3.640867228875017*^9, 3.640867238081544*^9}, 3.6408690497614875`*^9, 
   3.6408694611830196`*^9, 3.640869860093836*^9, 3.6408699902222786`*^9, {
   3.6409251148611593`*^9, 3.6409251671251483`*^9}, {3.64092719184534*^9, 
   3.640927195311538*^9}, 3.640927234865801*^9, {3.6409272720309267`*^9, 
   3.6409272751261034`*^9}, 3.6409274482990084`*^9, 3.6409279096453958`*^9, 
   3.6409281138840775`*^9, 3.6409282570602665`*^9, 3.640928951697998*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RGTable", "@", 
  RowBox[{"REToRRG", "[", 
   RowBox[{"\"\<a\>\"", 
    SuperscriptBox["\"\<b\>\"", "*"]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6409276714107695`*^9, 3.640927748788195*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"N\"\>", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}]},
    {"\<\"T\"\>", 
     RowBox[{"{", 
      RowBox[{"\<\"\"\>", ",", "\<\"a\"\>", ",", "\<\"b\"\>"}], "}"}]},
    {"\<\"P\"\>", 
     TagBox[GridBox[{
        {
         InterpretationBox[
          StyleBox[
           RowBox[{"1", " ", "->", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<a\>\"", ",", " ", "3"}], "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[1 -> {"a", 3}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"2", " ", "->", " ", 
            RowBox[{"{", "\"\<b\>\"", "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[2 -> {"b"}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"2", " ", "->", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<b\>\"", ",", " ", "3"}], "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[2 -> {"b", 3}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"3", " ", "->", " ", 
            RowBox[{"{", "2", "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[3 -> {2}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"3", " ", "->", " ", 
            RowBox[{"{", "\"\<\>\"", "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[3 -> {""}],
          AutoDelete->True,
          Editable->True]}
       },
       AutoDelete->False,
       GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
       GridBoxDividers->{"Columns" -> {False, {True}, False}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Grid"]},
    {"\<\"S\"\>", "1"}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {Right, Left}},
   GridBoxDividers->{
    "Columns" -> {False, True}, "Rows" -> {False, {True}, False}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.640927678109153*^9, 3.640927749893258*^9}, 
   3.6409277970859575`*^9, {3.6409278414344945`*^9, 3.6409278558333178`*^9}, 
   3.6409279120725346`*^9, 3.64092812843791*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"Transpose", "@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "\"\<N\>\"", ",", "\"\<T\>\"", ",", "\"\<P\>\"", ",", "\"\<S\>\""}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"G", "\[Function]", 
         RowBox[{
          RowBox[{"MapAt", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Multicolumn", "[", 
              RowBox[{"#", ",", "5", ",", 
               RowBox[{"Dividers", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{"False", ",", 
                   RowBox[{"{", "True", "}"}], ",", "False"}], "}"}], 
                 "}"}]}]}], "]"}], "&"}], ",", "3"}], "]"}], "@", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"MapAt", "[", 
            RowBox[{
             RowBox[{"ReplaceAll", "@", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"True", ",", "i_"}], "}"}], "\[RuleDelayed]", 
                 RowBox[{"G", "\[LeftDoubleBracket]", 
                  RowBox[{"2", ",", "i"}], "\[RightDoubleBracket]"}]}], ",", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"False", ",", "i_"}], "}"}], "\[RuleDelayed]", 
                 RowBox[{"G", "\[LeftDoubleBracket]", 
                  RowBox[{"1", ",", "i"}], "\[RightDoubleBracket]"}]}]}], 
               "}"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"3", ",", "All", ",", "2"}], "}"}]}], "]"}], "@", 
           RowBox[{
            RowBox[{"MapAt", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"G", "\[LeftDoubleBracket]", 
                RowBox[{"1", ",", "#"}], "\[RightDoubleBracket]"}], "&"}], 
              ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"3", ",", "All", ",", "1"}], "}"}], ",", 
                RowBox[{"{", "4", "}"}]}], "}"}]}], "]"}], "@", "G"}]}]}]}], 
        ")"}], "@", "\[IndentingNewLine]", 
       RowBox[{"RRGNormalize", "@", 
        RowBox[{
         RowBox[{"MapAt", "[", 
          RowBox[{
           RowBox[{"Range", "@*", "Length"}], ",", "1"}], "]"}], "@", 
         "\[IndentingNewLine]", 
         RowBox[{"REToRRG", "[", 
          RowBox[{
           RowBox[{"\"\<b\>\"", 
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"\"\<a\>\"", "\"\<b\>\""}], ")"}], "*"]}], "+", 
           RowBox[{
            SuperscriptBox[
             RowBox[{"(", 
              RowBox[{"\"\<a\>\"", "\"\<b\>\""}], ")"}], "*"], "\"\<b\>\"", 
            "\"\<a\>\""}]}], "]"}]}]}]}]}], "}"}]}], ",", 
   RowBox[{"Dividers", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "True"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", 
        RowBox[{"{", "True", "}"}], ",", "False"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"Alignment", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"Right", ",", "Left"}], "}"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6408578124394283`*^9, 3.640857828749361*^9}, {
  3.6408604921126966`*^9, 3.6408604944558306`*^9}, {3.64086170885229*^9, 
  3.6408617094913263`*^9}, {3.64086175658302*^9, 3.6408617917450314`*^9}, {
  3.640861823448845*^9, 3.640861835803551*^9}, {3.6408665620918794`*^9, 
  3.640866583592109*^9}, {3.6408666338439837`*^9, 3.6408666446506014`*^9}, {
  3.6408693432592745`*^9, 3.6408693588761683`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"N\"\>", 
     RowBox[{"{", 
      RowBox[{
      "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
       "8", ",", "9", ",", "10"}], "}"}]},
    {"\<\"T\"\>", 
     RowBox[{"{", 
      RowBox[{"\<\"\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>"}], "}"}]},
    {"\<\"P\"\>", 
     TagBox[GridBox[{
        {
         RowBox[{"1", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\<\"b\"\>", ",", "4"}], "}"}]}], 
         RowBox[{"3", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\<\"b\"\>", ",", "4"}], "}"}]}], 
         RowBox[{"5", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\<\"a\"\>", ",", "6"}], "}"}]}], 
         RowBox[{"7", "\[Rule]", 
          RowBox[{"{", "5", "}"}]}], 
         RowBox[{"9", "\[Rule]", 
          RowBox[{"{", "\<\"a\"\>", "}"}]}]},
        {
         RowBox[{"2", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\<\"a\"\>", ",", "3"}], "}"}]}], 
         RowBox[{"4", "\[Rule]", 
          RowBox[{"{", "2", "}"}]}], 
         RowBox[{"6", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\<\"b\"\>", ",", "8"}], "}"}]}], 
         RowBox[{"7", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\<\"\"\>", ",", "8"}], "}"}]}], 
         RowBox[{"10", "\[Rule]", 
          RowBox[{"{", "1", "}"}]}]},
        {
         RowBox[{"3", "\[Rule]", 
          RowBox[{"{", "\<\"b\"\>", "}"}]}], 
         RowBox[{"4", "\[Rule]", 
          RowBox[{"{", "\<\"\"\>", "}"}]}], 
         RowBox[{"6", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\<\"b\"\>", ",", "7"}], "}"}]}], 
         RowBox[{"8", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\<\"b\"\>", ",", "9"}], "}"}]}], 
         RowBox[{"10", "\[Rule]", 
          RowBox[{"{", "5", "}"}]}]}
       },
       AutoDelete->False,
       GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
       GridBoxDividers->{"Columns" -> {False, {True}, False}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Grid"]},
    {"\<\"S\"\>", "10"}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {Right, Left}},
   GridBoxDividers->{
    "Columns" -> {False, True}, "Rows" -> {False, {True}, False}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.6408665840231338`*^9, 3.64086664514863*^9, 3.6408667205349417`*^9, {
   3.6408693260942926`*^9, 3.6408693677376747`*^9}, 3.640927300507555*^9, 
   3.6409281506501803`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{
   RowBox[{"Transpose", "@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "\"\<N\>\"", ",", "\"\<T\>\"", ",", "\"\<P\>\"", ",", "\"\<S\>\""}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"G", "\[Function]", 
         RowBox[{
          RowBox[{"MapAt", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Multicolumn", "[", 
              RowBox[{"#", ",", "5", ",", 
               RowBox[{"Dividers", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{"{", 
                  RowBox[{"False", ",", 
                   RowBox[{"{", "True", "}"}], ",", "False"}], "}"}], 
                 "}"}]}]}], "]"}], "&"}], ",", "3"}], "]"}], "@", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"MapAt", "[", 
            RowBox[{
             RowBox[{"ReplaceAll", "@", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"True", ",", "i_"}], "}"}], "\[RuleDelayed]", 
                 RowBox[{"G", "\[LeftDoubleBracket]", 
                  RowBox[{"2", ",", "i"}], "\[RightDoubleBracket]"}]}], ",", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"False", ",", "i_"}], "}"}], "\[RuleDelayed]", 
                 RowBox[{"G", "\[LeftDoubleBracket]", 
                  RowBox[{"1", ",", "i"}], "\[RightDoubleBracket]"}]}]}], 
               "}"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"3", ",", "All", ",", "2"}], "}"}]}], "]"}], "@", 
           RowBox[{
            RowBox[{"MapAt", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"G", "\[LeftDoubleBracket]", 
                RowBox[{"1", ",", "#"}], "\[RightDoubleBracket]"}], "&"}], 
              ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"3", ",", "All", ",", "1"}], "}"}], ",", 
                RowBox[{"{", "4", "}"}]}], "}"}]}], "]"}], "@", "G"}]}]}]}], 
        ")"}], "@", "\[IndentingNewLine]", 
       RowBox[{"RRGNormalize", "@", 
        RowBox[{
         RowBox[{"MapAt", "[", 
          RowBox[{
           RowBox[{"Range", "@*", "Length"}], ",", "1"}], "]"}], "@", 
         "\[IndentingNewLine]", 
         RowBox[{"REToRRG", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"\"\<a\>\"", 
             SuperscriptBox["\"\<ab\>\"", "*"]}], ")"}], "+", 
           RowBox[{"(", 
            RowBox[{
             SuperscriptBox["\"\<ab\>\"", "*"], "\"\<ba\>\""}], ")"}]}], 
          "]"}]}]}]}]}], "}"}]}], ",", 
   RowBox[{"Dividers", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"False", ",", "True"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"False", ",", 
        RowBox[{"{", "True", "}"}], ",", "False"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"Alignment", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"Right", ",", "Left"}], "}"}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.640862283135137*^9, 3.6408623020672197`*^9}, {
  3.6408663186119533`*^9, 3.640866340958231*^9}, {3.640866549251145*^9, 
  3.6408665559945307`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"N\"\>", 
     RowBox[{"{", 
      RowBox[{
      "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7"}], 
      "}"}]},
    {"\<\"T\"\>", 
     RowBox[{"{", 
      RowBox[{"\<\"\"\>", ",", "\<\"a\"\>", ",", "\<\"ab\"\>", 
       ",", "\<\"ba\"\>"}], "}"}]},
    {"\<\"P\"\>", 
     TagBox[GridBox[{
        {
         RowBox[{"1", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\<\"a\"\>", ",", "3"}], "}"}]}], 
         RowBox[{"3", "\[Rule]", 
          RowBox[{"{", "2", "}"}]}], 
         RowBox[{"4", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\<\"ab\"\>", ",", "5"}], "}"}]}], 
         RowBox[{"6", "\[Rule]", 
          RowBox[{"{", "\<\"ba\"\>", "}"}]}], "\<\"\"\>"},
        {
         RowBox[{"2", "\[Rule]", 
          RowBox[{"{", "\<\"ab\"\>", "}"}]}], 
         RowBox[{"3", "\[Rule]", 
          RowBox[{"{", "\<\"\"\>", "}"}]}], 
         RowBox[{"5", "\[Rule]", 
          RowBox[{"{", "4", "}"}]}], 
         RowBox[{"7", "\[Rule]", 
          RowBox[{"{", "1", "}"}]}], "\<\"\"\>"},
        {
         RowBox[{"2", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\<\"ab\"\>", ",", "3"}], "}"}]}], 
         RowBox[{"4", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\<\"ab\"\>", ",", "6"}], "}"}]}], 
         RowBox[{"5", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"\<\"\"\>", ",", "6"}], "}"}]}], 
         RowBox[{"7", "\[Rule]", 
          RowBox[{"{", "4", "}"}]}], "\<\"\"\>"}
       },
       AutoDelete->False,
       GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
       GridBoxDividers->{"Columns" -> {False, {True}, False}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Grid"]},
    {"\<\"S\"\>", "7"}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {Right, Left}},
   GridBoxDividers->{
    "Columns" -> {False, True}, "Rows" -> {False, {True}, False}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{
  3.6408623121757984`*^9, 3.6408623449926753`*^9, 3.640864203154956*^9, 
   3.6408663421753006`*^9, {3.640866432129446*^9, 3.6408664484363785`*^9}, 
   3.6408665579456425`*^9, 3.6408693315786066`*^9, 3.6409273030106983`*^9, 
   3.6409281525172873`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RGTable", "@", 
  RowBox[{"REToRRG", "[", 
   RowBox[{
    SuperscriptBox["\"\<c\>\"", "*"], "\"\<d\>\"", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"\"\<c\>\"", 
       SuperscriptBox["\"\<d\>\"", "*"]}], ")"}], "*"], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       SuperscriptBox["\"\<c\>\"", "*"], "\"\<c\>\""}], "+", 
      RowBox[{"\"\<d\>\"", "\"\<c\>\""}]}], ")"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.640862276354749*^9, 3.64086227636275*^9}, {
   3.6408625263380475`*^9, 3.6408625752568455`*^9}, {3.640864211153414*^9, 
   3.640864430119938*^9}, {3.6408644619567585`*^9, 3.640864951413754*^9}, {
   3.640864985199686*^9, 3.640865071145602*^9}, {3.6408651111938925`*^9, 
   3.640865193000572*^9}, {3.640865256035177*^9, 3.6408654505213013`*^9}, {
   3.6408655444156713`*^9, 3.6408655587644925`*^9}, 3.6408656307626104`*^9, {
   3.6408657781690416`*^9, 3.6408658097338467`*^9}, {3.640866009023246*^9, 
   3.640866009420268*^9}, {3.6408660482114873`*^9, 3.640866060884212*^9}, {
   3.6409275138997602`*^9, 3.640927518976051*^9}, {3.6409275785224566`*^9, 
   3.6409275818856487`*^9}, {3.640928282033695*^9, 3.640928282194704*^9}, {
   3.6409292220564613`*^9, 3.6409292262327003`*^9}, {3.6409301325825405`*^9, 
   3.640930132696547*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {"\<\"N\"\>", 
     RowBox[{"{", 
      RowBox[{
      "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", 
       "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13"}], "}"}]},
    {"\<\"T\"\>", 
     RowBox[{"{", 
      RowBox[{"\<\"\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>"}], "}"}]},
    {"\<\"P\"\>", 
     TagBox[GridBox[{
        {
         InterpretationBox[
          StyleBox[
           RowBox[{"1", " ", "->", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<c\>\"", ",", " ", "3"}], "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[1 -> {"c", 3}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"4", " ", "->", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<c\>\"", ",", " ", "6"}], "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[4 -> {"c", 6}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"5", " ", "->", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<d\>\"", ",", " ", "7"}], "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[5 -> {"d", 7}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"8", " ", "->", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<c\>\"", ",", " ", "9"}], "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[8 -> {"c", 9}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"12", " ", "->", " ", 
            RowBox[{"{", "\"\<c\>\"", "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[12 -> {"c"}],
          AutoDelete->True,
          Editable->True]},
        {
         InterpretationBox[
          StyleBox[
           RowBox[{"1", " ", "->", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<c\>\"", ",", " ", "2"}], "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[1 -> {"c", 2}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"5", " ", "->", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<d\>\"", ",", " ", "6"}], "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[5 -> {"d", 6}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"6", " ", "->", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<\>\"", ",", " ", "7"}], "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[6 -> {"", 7}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"9", " ", "->", " ", 
            RowBox[{"{", "8", "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[9 -> {8}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"6", " ", "->", " ", 
            RowBox[{"{", "9", "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[6 -> {9}],
          AutoDelete->True,
          Editable->True]},
        {
         InterpretationBox[
          StyleBox[
           RowBox[{"2", " ", "->", " ", 
            RowBox[{"{", "1", "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[2 -> {1}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"5", " ", "->", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<d\>\"", ",", " ", "6"}], "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[5 -> {"d", 6}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"7", " ", "->", " ", 
            RowBox[{"{", "4", "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[7 -> {4}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"9", " ", "->", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<\>\"", ",", " ", "10"}], "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[9 -> {"", 10}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"6", " ", "->", " ", 
            RowBox[{"{", "11", "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[6 -> {11}],
          AutoDelete->True,
          Editable->True]},
        {
         InterpretationBox[
          StyleBox[
           RowBox[{"2", " ", "->", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<\>\"", ",", " ", "3"}], "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[2 -> {"", 3}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"6", " ", "->", " ", 
            RowBox[{"{", "5", "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[6 -> {5}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"7", " ", "->", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<\>\"", ",", " ", "6"}], "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[7 -> {"", 6}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"10", " ", "->", " ", 
            RowBox[{"{", "\"\<c\>\"", "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[10 -> {"c"}],
          AutoDelete->True,
          Editable->True], "\<\"\"\>"},
        {
         InterpretationBox[
          StyleBox[
           RowBox[{"3", " ", "->", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<d\>\"", ",", " ", "7"}], "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[3 -> {"d", 7}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"6", " ", "->", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<\>\"", ",", " ", "6"}], "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[6 -> {"", 6}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"8", " ", "->", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<c\>\"", ",", " ", "10"}], "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[8 -> {"c", 10}],
          AutoDelete->True,
          Editable->True], 
         InterpretationBox[
          StyleBox[
           RowBox[{"11", " ", "->", " ", 
            RowBox[{"{", 
             RowBox[{"\"\<d\>\"", ",", " ", "12"}], "}"}]}],
           ShowStringCharacters->True,
           NumberMarks->True],
          InputForm[11 -> {"d", 12}],
          AutoDelete->True,
          Editable->True], "\<\"\"\>"}
       },
       AutoDelete->False,
       GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
       GridBoxDividers->{"Columns" -> {False, {True}, False}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Grid"]},
    {"\<\"S\"\>", "2"}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {Right, Left}},
   GridBoxDividers->{
    "Columns" -> {False, True}, "Rows" -> {False, {True}, False}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.6408645780273976`*^9, 3.6408646909448557`*^9}, 
   3.640864854610217*^9, {3.640864889012185*^9, 3.6408648985727315`*^9}, {
   3.640864929375493*^9, 3.6408649519097824`*^9}, 3.640865002710688*^9, 
   3.6408650771659465`*^9, {3.640865123520598*^9, 3.640865126230753*^9}, 
   3.640865194213641*^9, 3.6408653200798407`*^9, {3.6408653610601845`*^9, 
   3.640865450976327*^9}, 3.6408655592165184`*^9, 3.640865631492652*^9, {
   3.640865804404542*^9, 3.6408658100948677`*^9}, 3.6408660103023186`*^9, {
   3.640866049786577*^9, 3.640866069729718*^9}, 3.640866124471849*^9, 
   3.640869333642725*^9, 3.640927306238883*^9, 3.640927519383074*^9, 
   3.640927583041715*^9, 3.6409281549524264`*^9, 3.640928282723735*^9, 
   3.6409284222777166`*^9, 3.640928593716522*^9, {3.6409292116538663`*^9, 
   3.6409292266977267`*^9}, 3.640930133166574*^9}]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["GUIs", "Chapter",
 CellChangeTimes->{{3.640070858399771*^9, 3.6400708843892574`*^9}}],

Cell[CellGroupData[{

Cell["DFA", "Subsection",
 CellChangeTimes->{{3.6400850423490467`*^9, 3.640085042636063*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"DFAManipulate", "@", "init_"}], ":=", 
  RowBox[{"Quiet", "@", "\[IndentingNewLine]", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"button", "=", 
        RowBox[{"Function", "[", 
         RowBox[{",", 
          RowBox[{"Button", "[", 
           RowBox[{"##", ",", 
            RowBox[{
             RowBox[{
              RowBox[{"ImageSize", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"#", ",", "#"}], "}"}]}], "&"}], "@", "16"}], ",", 
            RowBox[{"Appearance", "\[Rule]", "\"\<Palette\>\""}], ",", 
            RowBox[{"ContentPadding", "\[Rule]", "False"}]}], "]"}], ",", 
          RowBox[{"{", "HoldAll", "}"}]}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"inputField", "=", 
        RowBox[{"Function", "[", 
         RowBox[{",", 
          RowBox[{"InputField", "[", 
           RowBox[{"##", ",", 
            RowBox[{"FieldSize", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "10"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{"1", ",", "10"}], "}"}]}], "}"}]}]}], "]"}], ",", 
          RowBox[{"{", "HoldAll", "}"}]}], "]"}]}], ",", 
       RowBox[{"outOptions", "=", 
        RowBox[{"{", 
         RowBox[{
         "\"\<\:0422\:0430\:0431\:043b\:0438\:0446\:044f\>\"", ",", 
          "\"\<\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430\>\""}], 
         "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"outForm", "/.", 
          RowBox[{"{", 
           RowBox[{"Column", "\[Rule]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Column", "[", 
               RowBox[{"#", ",", "Center"}], "]"}], "&"}], ")"}]}], "}"}]}], 
         ")"}], "[", 
        RowBox[{"out", "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
           "\"\<\:0422\:0430\:0431\:043b\:0438\:0446\:044f\>\"", 
            "\[RuleDelayed]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"Replace", "[", 
               RowBox[{"\[Delta]Output", ",", 
                RowBox[{"_", ":>", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"\[Delta]Output", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"TableHeadings", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Q", ",", "\[CapitalSigma]"}], "}"}]}]}], "]"}], 
                    "&"}], ")"}], "/;", "headingsQ\[CapitalSigma]"}]}]}], 
               "]"}], ")"}], "@", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"\[Delta]Elements", "/.", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                  "\"\<\:0406\:043d\:0434\:0435\:043a\:0441\:0438\>\"", 
                   "\[Rule]", "Identity"}], ",", 
                  RowBox[{"\"\<\:0421\:0442\:0430\:043d\:0438\>\"", "\[Rule]", 
                   RowBox[{"ReplaceAll", "@", 
                    RowBox[{"(", 
                    RowBox[{"q_Integer", "\[RuleDelayed]", 
                    RowBox[{
                    "Q", "\[LeftDoubleBracket]", "q", 
                    "\[RightDoubleBracket]"}]}], ")"}]}]}]}], "}"}]}], ")"}], 
              "@", "\[Delta]"}]}]}], ",", 
           RowBox[{
           "\"\<\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430\>\"", 
            "\[RuleDelayed]", 
            RowBox[{
             RowBox[{"Replace", "[", 
              RowBox[{"plot", ",", 
               RowBox[{"DFALayeredPlot", "\[Rule]", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"DFALayeredPlot", "[", 
                   RowBox[{"#1", ",", "lay", ",", "##2"}], "]"}], "&"}], 
                 ")"}]}]}], "]"}], "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
               "Q", ",", "\[CapitalSigma]", ",", "\[Delta]", ",", "s", ",", 
                "F"}], "}"}], ",", 
              RowBox[{"ImageSize", "\[Rule]", "imageSize"}], ",", 
              RowBox[{"PlotLabel", "\[Rule]", "plotLabel"}], ",", 
              RowBox[{"ArrowSize", "\[Rule]", "arrowSize"}], ",", 
              RowBox[{"ArrowPosition", "\[Rule]", "arrowPosition"}], ",", 
              RowBox[{"EdgeLabelPosition", "\[Rule]", "edgeLabelPosition"}], 
              ",", 
              RowBox[{"VertexSize", "\[Rule]", "vertexSize"}]}], "]"}]}]}], 
          "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"Q", ",", 
           RowBox[{
           "init", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
          "}"}], ",", 
         RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\[CapitalSigma]", ",", 
           RowBox[{
           "init", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
          "}"}], ",", 
         RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\[Delta]", ",", 
           RowBox[{
           "init", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}]}], 
          "}"}], ",", 
         RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"OpenerView", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\"\<\:0412\:0438\:0437\:043d\:0430\:0447\:0435\:043d\:043d\:044f \
\:0414\:0421\:0410\>\"", ",", 
           RowBox[{"Dynamic", "@", 
            RowBox[{"Grid", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"ArrayFlatten", "[", 
               RowBox[{"{", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{",", "\"\<\[CapitalSigma]\>\""}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Q\>\"", ",", "\"\<\[Delta]\>\""}], "}"}]}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Array", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"inputField", "@", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    "\[CapitalSigma]", "\[LeftDoubleBracket]", "#", 
                    "\[RightDoubleBracket]"}], "]"}]}], ",", 
                    RowBox[{"button", "[", 
                    RowBox[{"\"\<-\>\"", ",", 
                    RowBox[{"Catch", "@", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "@", "\[CapitalSigma]"}], ">", "1"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\[CapitalSigma]", ",", "\[Delta]"}], "}"}], "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"\[CapitalSigma]", ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}], ",", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"\[Delta]", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}]}], "}"}]}], ",", 
                    RowBox[{"Throw", "@", 
                    RowBox[{"Beep", "[", "]"}]}]}], "]"}]}]}], "]"}]}], "}"}],
                     "&"}], ",", 
                    RowBox[{"Length", "@", "\[CapitalSigma]"}]}], "]"}], 
                    "\[Transpose]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"button", "[", 
                    RowBox[{"\"\<+\>\"", ",", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\[CapitalSigma]", ",", "\[Delta]"}], "}"}], "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Append", "[", 
                    RowBox[{
                    RowBox[{"\[CapitalSigma]", "/.", 
                    RowBox[{"\[Placeholder]", "\[RuleDelayed]", 
                    RowBox[{"Throw", "@", 
                    RowBox[{"Beep", "[", "]"}]}]}]}], ",", "\[Placeholder]"}],
                     "]"}], ",", 
                    RowBox[{"ArrayFlatten", "@", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"\[Delta]", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Range", "@", 
                    RowBox[{"Length", "@", "Q"}]}], "}"}], "\[Transpose]"}]}],
                     "}"}], "}"}]}]}], "}"}]}], "]"}]}], "]"}], "}"}], ",", 
                    RowBox[{"{", "Null", "}"}]}], "}"}]}], "}"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Array", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"inputField", "@", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    "Q", "\[LeftDoubleBracket]", "#", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"v", "\[Function]", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"s", ",", "F"}], "}"}], "=", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"s", ",", "F"}], "}"}], "/.", 
                    RowBox[{
                    RowBox[{
                    "Q", "\[LeftDoubleBracket]", "#", 
                    "\[RightDoubleBracket]"}], "\[Rule]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"Q", ",", "v"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{
                    "Q", "\[LeftDoubleBracket]", "#", 
                    "\[RightDoubleBracket]"}], "=", "v"}], ",", 
                    RowBox[{"Throw", "@", 
                    RowBox[{"Beep", "[", "]"}]}]}], "]"}]}]}]}], "]"}]}]}], 
                    "]"}]}], ",", 
                    RowBox[{"button", "[", 
                    RowBox[{"\"\<-\>\"", ",", 
                    RowBox[{"Catch", "@", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "@", "Q"}], ">", "1"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Q", ",", "\[Delta]"}], "}"}], "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"Q", ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}], ",", 
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"e", ",", "i"}], "}"}], "\[Function]", 
                    RowBox[{"e", "/.", 
                    RowBox[{
                    RowBox[{
                    "Q", "\[LeftDoubleBracket]", "#", 
                    "\[RightDoubleBracket]"}], "\[Rule]", 
                    RowBox[{"Q", "\[LeftDoubleBracket]", 
                    RowBox[{
                    "i", "\[LeftDoubleBracket]", "1", 
                    "\[RightDoubleBracket]"}], 
                    "\[RightDoubleBracket]"}]}]}]}], ",", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"\[Delta]", ",", 
                    RowBox[{"{", "#", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], "/.", 
                    RowBox[{"q_", "\[RuleDelayed]", 
                    RowBox[{
                    RowBox[{"q", "-", "1"}], "/;", 
                    RowBox[{"q", "\[GreaterEqual]", "#"}]}]}]}]}], "]"}]}], 
                    "}"}]}], ",", 
                    RowBox[{"Throw", "@", 
                    RowBox[{"Beep", "[", "]"}]}]}], "]"}]}]}], "]"}]}], "}"}],
                     "&"}], ",", 
                    RowBox[{"Length", "@", "Q"}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"Outer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"inputField", "@", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{"Q", "\[LeftDoubleBracket]", 
                    RowBox[{
                    "\[Delta]", "\[LeftDoubleBracket]", "##", 
                    "\[RightDoubleBracket]"}], "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"v", "\[Function]", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{
                    "\[Delta]", "\[LeftDoubleBracket]", "##", 
                    "\[RightDoubleBracket]"}], "=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"FirstPosition", "[", 
                    RowBox[{"Q", ",", "v"}], "]"}], "\[LeftDoubleBracket]", 
                    "1", "\[RightDoubleBracket]"}], "/.", 
                    RowBox[{"\"\<NotFound\>\"", "\[RuleDelayed]", 
                    RowBox[{"Throw", "@", 
                    RowBox[{"Beep", "[", "]"}]}]}]}], ")"}]}], "]"}]}]}], 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Range", "/@", 
                    RowBox[{"Dimensions", "@", "\[Delta]"}]}]}]}], "]"}], ",",
                    "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{",", 
                    RowBox[{"Length", "@", "Q"}]}], "]"}], "}"}], 
                    "\[Transpose]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"button", "[", 
                    RowBox[{"\"\<+\>\"", ",", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Q", ",", "\[Delta]"}], "}"}], "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Append", "[", 
                    RowBox[{
                    RowBox[{"Q", "/.", 
                    RowBox[{"\[Placeholder]", "\[RuleDelayed]", 
                    RowBox[{"Throw", "@", 
                    RowBox[{"Beep", "[", "]"}]}]}]}], ",", "\[Placeholder]"}],
                     "]"}], ",", 
                    RowBox[{"Append", "[", 
                    RowBox[{"\[Delta]", ",", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "@", "Q"}], "+", "1"}], ",", 
                    RowBox[{"Length", "@", "\[CapitalSigma]"}]}], "]"}]}], 
                    "]"}]}], "}"}]}], "]"}]}], "]"}], ","}], "}"}], "}"}], 
                   ",", "\[IndentingNewLine]", 
                   RowBox[{"{", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{",", 
                    RowBox[{"Length", "@", "\[CapitalSigma]"}]}], "]"}], 
                    "}"}], ","}], "}"}]}], "}"}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"Alignment", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{",", ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{"Center", ",", "Center"}], "}"}]}], "}"}]}], 
                "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{"Dividers", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"False", ",", "True"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"False", ",", "True"}], "}"}]}], "}"}]}]}], 
             "\[IndentingNewLine]", "]"}]}]}], "}"}], ",", "True"}], "]"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"s", ",", 
           RowBox[{
           "init", "\[LeftDoubleBracket]", "4", "\[RightDoubleBracket]"}]}], 
          "}"}], ",", 
         RowBox[{"Thread", "[", 
          RowBox[{
           RowBox[{"Range", "@", 
            RowBox[{"Length", "@", "Q"}]}], "\[Rule]", "Q"}], "]"}], ",", 
         RowBox[{"ControlType", "\[Rule]", "SetterBar"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"F", ",", 
           RowBox[{
           "init", "\[LeftDoubleBracket]", "5", "\[RightDoubleBracket]"}]}], 
          "}"}], ",", 
         RowBox[{"Thread", "[", 
          RowBox[{
           RowBox[{"Range", "@", 
            RowBox[{"Length", "@", "Q"}]}], "\[Rule]", "Q"}], "]"}], ",", 
         RowBox[{"ControlType", "\[Rule]", "TogglerBar"}]}], "}"}], ",", 
       "\[IndentingNewLine]", "Delimiter", ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"out", ",", 
           RowBox[{"outOptions", "\[LeftDoubleBracket]", 
            RowBox[{"{", "2", "}"}], "\[RightDoubleBracket]"}], ",", 
           "\"\<\:0412\:0438\:0432\:0456\:0434 \:0414\:0421\:0410\>\""}], 
          "}"}], ",", "outOptions", ",", 
         RowBox[{"ControlType", "\[Rule]", "TogglerBar"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "outForm", ",", "Column", ",", 
           "\"\<\:0424\:043e\:0440\:043c\:0430\:0442\>\""}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"Column", ",", "Row", ",", "InputForm"}], "}"}]}], "}"}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{"Dynamic", "@", 
        RowBox[{"Column", "[", 
         RowBox[{"out", "/.", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
            "\"\<\:0422\:0430\:0431\:043b\:0438\:0446\:044f\>\"", "\[Rule]", 
             RowBox[{"OpenerView", "[", 
              RowBox[{"{", 
               RowBox[{
               "\"\<\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\
\:043d\:043d\:044f  \:0442\:0430\:0431\:043b\:0438\:0446\:0456 \:043f\:0435\
\:0440\:0435\:0445\:043e\:0434\:0456\:0432\>\"", ",", 
                RowBox[{"Column", "@", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\[Delta]Elements", ",", 
                    "\"\<\:0406\:043d\:0434\:0435\:043a\:0441\:0438\>\"", 
                    ",", 
                    "\"\<\:0415\:043b\:0435\:043c\:0435\:043d\:0442\:0438\>\"\
"}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\:0406\:043d\:0434\:0435\:043a\:0441\:0438\>\"", 
                    ",", "\"\<\:0421\:0442\:0430\:043d\:0438\>\""}], "}"}]}], 
                    "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\[Delta]Output", ",", "MatrixForm", ",", 
                    "\"\<\:0424\:043e\:0440\:043c\:0430 \:0432\:0438\:0432\
\:043e\:0434\:0443\>\""}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"MatrixForm", ",", "TableForm"}], "}"}]}], "}"}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "headingsQ\[CapitalSigma]", ",", "False", ",", 
                    "\"\<\:0417\:0430\:0433\:043e\:043b\:043e\:0432\:043a\
\:0438\>\""}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}]}], "}"}], "]"}]}], 
                  "\[IndentingNewLine]", "}"}]}]}], "}"}], "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
            "\"\<\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430\>\"", 
             "\[Rule]", 
             RowBox[{"OpenerView", "[", 
              RowBox[{"{", 
               RowBox[{
               "\"\<\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\
\:043d\:043d\:044f  \:0434\:0456\:0430\:0433\:0440\:0430\:043c\:0438 \:043f\
\:0435\:0440\:0435\:0445\:043e\:0434\:0456\:0432\>\"", ",", 
                RowBox[{"Column", "@", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "plot", ",", "DFAPlot", ",", 
                    "\"\<\:0424\:0443\:043d\:043a\:0446\:0456\:044f\>\""}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"DFAPlot", ",", "DFALayeredPlot"}], "}"}]}], 
                    "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "lay", ",", "Left", ",", 
                    "\"\<\:041e\:0440\:0456\:0454\:043d\:0442\:0430\:0446\
\:0456\:044f\>\""}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Left", ",", "Right", ",", "Top", ",", "Bottom"}],
                     "}"}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "imageSize", ",", "Medium", ",", "\"\<ImageSize\>\""}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    "Tiny", ",", "Small", ",", "Medium", ",", "Large", ",", 
                    "Full", ",", "Automatic"}], "}"}]}], "}"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "plotLabel", ",", "None", ",", "\"\<PlotLabel\>\""}], 
                    "}"}], ",", "\[IndentingNewLine]", "\"\<\>\"", ",", 
                    RowBox[{"FieldSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"6", ",", "15"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "\[Infinity]"}], "}"}]}], "}"}]}]}], 
                    "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "arrowSize", ",", "Automatic", ",", "\"\<ArrowSize\>\""}],
                     "}"}], ",", "0.", ",", "1."}], "}"}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "arrowPosition", ",", ".8", ",", 
                    "\"\<ArrowPosition\>\""}], "}"}], ",", "0.", ",", "1."}], 
                    "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "edgeLabelPosition", ",", ".5", ",", 
                    "\"\<EdgeLabelPosition\>\""}], "}"}], ",", "0.", ",", 
                    "1."}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Control", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "vertexSize", ",", ".1", ",", "\"\<VertexSize\>\""}], 
                    "}"}], ",", "0.", ",", "1."}], "}"}], "]"}]}], 
                  "\[IndentingNewLine]", "}"}]}]}], "}"}], "]"}]}]}], "}"}]}],
          "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"ControlPlacement", "\[Rule]", "Left"}], ",", 
       RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "]"}]}], 
    "]"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.6387833469796453`*^9, 3.638783402780837*^9}, {
   3.6387836177371316`*^9, 3.638783649685959*^9}, {3.638783685603013*^9, 
   3.638783685913031*^9}, {3.638783754468952*^9, 3.638783758223167*^9}, {
   3.638783810620164*^9, 3.6387839053305807`*^9}, {3.6387841004827433`*^9, 
   3.638784326755685*^9}, {3.6387843671559963`*^9, 3.638784391735402*^9}, {
   3.638784471339955*^9, 3.6387844773813004`*^9}, 3.6387845323164425`*^9, {
   3.638784726601555*^9, 3.638784757165303*^9}, {3.638784799287712*^9, 
   3.638784816742711*^9}, {3.638784874166995*^9, 3.638784960802951*^9}, {
   3.6387849947868943`*^9, 3.638785002940361*^9}, {3.6387851759702578`*^9, 
   3.6387853377315097`*^9}, {3.6387854282946897`*^9, 3.6387854584054117`*^9}, 
   3.6387855576890907`*^9, {3.6387856020716295`*^9, 3.6387856671213493`*^9}, {
   3.6387857247266445`*^9, 3.638785742535663*^9}, {3.6387857972267914`*^9, 
   3.6387857990118933`*^9}, {3.6387858447315083`*^9, 3.638785879056472*^9}, {
   3.638785910968297*^9, 3.638785929866378*^9}, {3.638785964186341*^9, 
   3.6387860364444737`*^9}, {3.6387863156854453`*^9, 3.63878634950638*^9}, {
   3.638786395277998*^9, 3.6387864321861086`*^9}, {3.638786466382065*^9, 
   3.6387864690482173`*^9}, {3.638786519638111*^9, 3.6387865198611236`*^9}, {
   3.638786649892561*^9, 3.6387867306091776`*^9}, {3.638786771607523*^9, 
   3.638786792094694*^9}, {3.6387875223624635`*^9, 3.6387875696101656`*^9}, {
   3.6387876077793493`*^9, 3.638787705078914*^9}, {3.638787744650178*^9, 
   3.6387878218195915`*^9}, {3.638787895138785*^9, 3.6387880442653146`*^9}, {
   3.6387880791933126`*^9, 3.6387881315173054`*^9}, {3.6387881878455267`*^9, 
   3.638788383242703*^9}, 3.638788542058787*^9, {3.6387885763547487`*^9, 
   3.638788626960643*^9}, {3.638788687306094*^9, 3.638788688303151*^9}, {
   3.638788747390531*^9, 3.63878876502454*^9}, {3.6387889061666126`*^9, 
   3.6387889694712334`*^9}, {3.638789002890145*^9, 3.638789266200205*^9}, {
   3.638789306193493*^9, 3.6387893669859695`*^9}, {3.6387893985287743`*^9, 
   3.6387894356328964`*^9}, {3.638789477713303*^9, 3.638789485419744*^9}, {
   3.6387895637722254`*^9, 3.6387896675811625`*^9}, {3.638789704268261*^9, 
   3.638789789368129*^9}, {3.638789833176776*^9, 3.638789911143235*^9}, {
   3.6387899978801966`*^9, 3.6387900326521854`*^9}, {3.6387900659340887`*^9, 
   3.638790121165248*^9}, {3.6387901512739697`*^9, 3.6387901918822927`*^9}, {
   3.63879025932415*^9, 3.6387902743330083`*^9}, {3.6387903772038927`*^9, 
   3.638790542519348*^9}, {3.6387906090371523`*^9, 3.638790615966549*^9}, {
   3.6387908777025194`*^9, 3.6387909072632103`*^9}, {3.638791062379082*^9, 
   3.6387911870732145`*^9}, {3.638791251927924*^9, 3.6387915791076374`*^9}, {
   3.638791644403372*^9, 3.638791697967436*^9}, {3.6387917288182*^9, 
   3.638791745466152*^9}, {3.6387917882816014`*^9, 3.638791915131857*^9}, {
   3.6387919505348816`*^9, 3.6387919638606443`*^9}, {3.6387920657644725`*^9, 
   3.6387921790899544`*^9}, {3.6387922171941338`*^9, 
   3.6387923819545574`*^9}, {3.6387924848074403`*^9, 
   3.6387925523733053`*^9}, {3.638792591132522*^9, 3.6387925968608494`*^9}, {
   3.6387926290986934`*^9, 3.6387926340329757`*^9}, {3.638792670250047*^9, 
   3.6387927296784463`*^9}, {3.6387927716618476`*^9, 
   3.6387927795332975`*^9}, {3.638792872982643*^9, 3.6387929916874323`*^9}, {
   3.6387930285185385`*^9, 3.6387930660136833`*^9}, {3.6387931568358784`*^9, 
   3.6387932470310373`*^9}, {3.638793285444234*^9, 3.6387935415868845`*^9}, {
   3.638793573544713*^9, 3.6387936612737303`*^9}, {3.638793706496317*^9, 
   3.638793768489863*^9}, {3.6387938412120223`*^9, 3.6387938620162125`*^9}, {
   3.6387939559745865`*^9, 3.6387939679242697`*^9}, {3.6387940501789746`*^9, 
   3.638794106942221*^9}, {3.638794992844892*^9, 3.638795030538048*^9}, {
   3.6387951411133723`*^9, 3.6387951465776854`*^9}, {3.6387952791862698`*^9, 
   3.6387952818574224`*^9}, {3.6387971609969034`*^9, 3.638797171918528*^9}, {
   3.6387974761939316`*^9, 3.6387974770489807`*^9}, {3.6387975434287767`*^9, 
   3.638797591347518*^9}, {3.638799224102906*^9, 3.638799226294031*^9}, {
   3.6387994892400713`*^9, 3.6387995159145966`*^9}, {3.6387995542687902`*^9, 
   3.6387996001584153`*^9}, {3.6388000182083263`*^9, 3.638800133909944*^9}, {
   3.6388744039531364`*^9, 3.638874409099431*^9}, {3.6391226487552037`*^9, 
   3.6391226661131964`*^9}, 3.6391232392379775`*^9, {3.639125539919569*^9, 
   3.639125546631953*^9}, {3.6391258247108583`*^9, 3.6391259496360035`*^9}, {
   3.639126292616621*^9, 3.639126374046278*^9}, {3.6391265193473845`*^9, 
   3.639126579657834*^9}, {3.639126622825303*^9, 3.6391266469736843`*^9}, {
   3.6391267192718196`*^9, 3.6391267215819516`*^9}, {3.6391267742679653`*^9, 
   3.6391269965056763`*^9}, {3.6391270566851187`*^9, 
   3.6391270688898163`*^9}, {3.639127116588545*^9, 3.6391271444331374`*^9}, {
   3.639127418831832*^9, 3.6391274210269575`*^9}, {3.639127452925782*^9, 
   3.639127533994419*^9}, {3.6391275691804314`*^9, 3.639127572232606*^9}, {
   3.6391276235685425`*^9, 3.639127677302616*^9}, {3.63912772876956*^9, 
   3.6391279271549063`*^9}, {3.6391280015191603`*^9, 3.639128002113194*^9}, {
   3.6391283437157326`*^9, 3.6391283543663416`*^9}, {3.6391284855778465`*^9, 
   3.639128545925298*^9}, {3.639128653956477*^9, 3.6391286885944586`*^9}, {
   3.6391288087853327`*^9, 3.6391288930381517`*^9}, {3.6391289230568686`*^9, 
   3.639128947984295*^9}, {3.6391290965067897`*^9, 3.639129096979817*^9}, {
   3.639129131456789*^9, 3.639129154537109*^9}, 3.6391291984246187`*^9, {
   3.6391300130572133`*^9, 3.639130105173482*^9}, {3.639130620045931*^9, 
   3.639130654852922*^9}, {3.639130697838381*^9, 3.639130698053393*^9}, {
   3.639130949651784*^9, 3.6391309810375786`*^9}, {3.6391310984192924`*^9, 
   3.6391312571573715`*^9}, {3.639972867546054*^9, 3.639972889999338*^9}, 
   3.6399731412275305`*^9, {3.64042607373197*^9, 3.6404261578347797`*^9}, {
   3.640426224846613*^9, 3.6404262536502604`*^9}, {3.640426289460309*^9, 
   3.64042629176344*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DFAManipulate", "@", 
  RowBox[{
  "DFA", "@", 
   "\"\<\!\(\*SubscriptBox[\(w\), \(2\)]\) \[Congruent] 1 (mod 5)\>\""}]}]], \
"Input",
 CellChangeTimes->{{3.638795056236518*^9, 3.6387950675031624`*^9}, {
  3.6387951361050863`*^9, 3.6387951373061547`*^9}, {3.6388001364210873`*^9, 
  3.6388001377531643`*^9}, {3.6388740958315134`*^9, 3.638874099182705*^9}, {
  3.640426312878648*^9, 3.6404263271984673`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`arrowPosition$$ = 
    0.8, $CellContext`arrowSize$$ = 
    Automatic, $CellContext`edgeLabelPosition$$ = 0.5, $CellContext`F$$ = {
    2}, $CellContext`headingsQ\[CapitalSigma]$$ = 
    False, $CellContext`imageSize$$ = Medium, $CellContext`lay$$ = 
    Left, $CellContext`out$$ = {
    "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, \
$CellContext`outForm$$ = 
    Column, $CellContext`plot$$ = $CellContext`DFALayeredPlot, \
$CellContext`plotLabel$$ = None, $CellContext`Q$$ = {1, 2, 3, 4, 
    5}, $CellContext`s$$ = 1, $CellContext`vertexSize$$ = 
    0.1, $CellContext`\[Delta]$$ = {{1, 2}, {3, 4}, {5, 1}, {2, 3}, {4, 
    5}}, $CellContext`\[Delta]Elements$$ = 
    "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", \
$CellContext`\[Delta]Output$$ = MatrixForm, $CellContext`\[CapitalSigma]$$ = {
    0, 1}, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`Q$$], {1, 2, 3, 4, 5}}}, {{
       Hold[$CellContext`\[CapitalSigma]$$], {0, 1}}}, {{
       Hold[$CellContext`\[Delta]$$], {{1, 2}, {3, 4}, {5, 1}, {2, 3}, {4, 
       5}}}}, {
      Hold[
       OpenerView[{
        "\:0412\:0438\:0437\:043d\:0430\:0447\:0435\:043d\:043d\:044f \:0414\
\:0421\:0410", 
         Dynamic[
          Grid[
           ArrayFlatten[{{{{Null, "\[CapitalSigma]"}, {"Q", "\[Delta]"}}, 
              Transpose[
               Array[{
                 Function[Null, 
                  InputField[
                   SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                  HoldAll}][
                  Dynamic[
                   Part[$CellContext`\[CapitalSigma]$$, #]]], 
                 Function[Null, 
                  Button[
                   SlotSequence[1], 
                   (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                   ContentPadding -> False], {HoldAll}]["-", 
                  Catch[
                   If[
                   Length[$CellContext`\[CapitalSigma]$$] > 
                    1, {$CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$} = {
                    Drop[$CellContext`\[CapitalSigma]$$, {#}], 
                    Drop[$CellContext`\[Delta]$$, {}, {#}]}, 
                    Throw[
                    Beep[]]]]]}& , 
                Length[$CellContext`\[CapitalSigma]$$]]], {{
                Function[Null, 
                 Button[
                  SlotSequence[1], 
                  (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                  ContentPadding -> False], {HoldAll}]["+", 
                 
                 Catch[{$CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`\[CapitalSigma]$$, $CellContext`\
\[Placeholder] :> Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    ArrayFlatten[{{$CellContext`\[Delta]$$, 
                    Transpose[{
                    Range[
                    Length[$CellContext`Q$$]]}]}}]}]]}, {Null}}}, {
              Array[{
                Function[Null, 
                 InputField[
                  SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                 HoldAll}][
                 Dynamic[
                  Part[$CellContext`Q$$, #], 
                  Function[$CellContext`v$, 
                   
                   Catch[{$CellContext`s$$, $CellContext`F$$} = 
                    ReplaceAll[{$CellContext`s$$, $CellContext`F$$}, 
                    Part[$CellContext`Q$$, #] -> If[
                    FreeQ[$CellContext`Q$$, $CellContext`v$], 
                    Part[$CellContext`Q$$, #] = $CellContext`v$, 
                    Throw[
                    Beep[]]]]]]]], 
                Function[Null, 
                 Button[
                  SlotSequence[1], 
                  (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                  ContentPadding -> False], {HoldAll}]["-", 
                 Catch[
                  If[
                  Length[$CellContext`Q$$] > 
                   1, {$CellContext`Q$$, $CellContext`\[Delta]$$} = {
                    Drop[$CellContext`Q$$, {#}], 
                    MapIndexed[
                    Function[{$CellContext`e$, $CellContext`i$}, 
                    
                    ReplaceAll[$CellContext`e$, Part[$CellContext`Q$$, #] -> 
                    Part[$CellContext`Q$$, 
                    Part[$CellContext`i$, 1]]]], 
                    ReplaceAll[
                    Drop[$CellContext`\[Delta]$$, {#}, {}], 
                    Pattern[$CellContext`q, 
                    Blank[]] :> 
                    Condition[$CellContext`q - 1, $CellContext`q >= #]]]}, 
                   Throw[
                    Beep[]]]]]}& , 
               Length[$CellContext`Q$$]], 
              Outer[Function[Null, 
                InputField[
                 SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {HoldAll}][
                Dynamic[
                 Part[$CellContext`Q$$, 
                  Part[$CellContext`\[Delta]$$, 
                   SlotSequence[1]]], 
                 Function[$CellContext`v$, 
                  Catch[Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]] = ReplaceAll[
                    Part[
                    FirstPosition[$CellContext`Q$$, $CellContext`v$], 1], 
                    "NotFound" :> Throw[
                    Beep[]]]]]]]& , 
               Apply[Sequence, 
                Map[Range, 
                 Dimensions[$CellContext`\[Delta]$$]]]], 
              Transpose[{
                ConstantArray[Null, 
                 Length[$CellContext`Q$$]]}]}, {{{
                Function[Null, 
                 Button[
                  SlotSequence[1], 
                  (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                  ContentPadding -> False], {HoldAll}]["+", 
                 Catch[{$CellContext`Q$$, $CellContext`\[Delta]$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`Q$$, $CellContext`\[Placeholder] :> 
                    Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    Append[$CellContext`\[Delta]$$, 
                    ConstantArray[Length[$CellContext`Q$$] + 1, 
                    Length[$CellContext`\[CapitalSigma]$$]]]}]], Null}}, {
               ConstantArray[Null, 
                Length[$CellContext`\[CapitalSigma]$$]]}, Null}}], 
           Alignment -> {Null, Null, {{1, 1} -> {Center, Center}}}, 
           Dividers -> {{False, True}, {False, True}}]]}, True]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`s$$], 1}, 
      Dynamic[
       Thread[Range[
          Length[$CellContext`Q$$]] -> $CellContext`Q$$]]}, {{
       Hold[$CellContext`F$$], {2}}, 
      Dynamic[
       Thread[Range[
          Length[$CellContext`Q$$]] -> $CellContext`Q$$]]}, {{
       Hold[$CellContext`out$$], {
       "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, 
       "\:0412\:0438\:0432\:0456\:0434 \:0414\:0421\:0410"}, {
      "\:0422\:0430\:0431\:043b\:0438\:0446\:044f", 
       "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}}, {{
       Hold[$CellContext`outForm$$], Column, 
       "\:0424\:043e\:0440\:043c\:0430\:0442"}, {Column, Row, InputForm}}, {{
       Hold[$CellContext`\[Delta]Elements$$], 
       "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
       "\:0415\:043b\:0435\:043c\:0435\:043d\:0442\:0438"}, {
      "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
       "\:0421\:0442\:0430\:043d\:0438"}}, {{
       Hold[$CellContext`\[Delta]Output$$], MatrixForm, 
       "\:0424\:043e\:0440\:043c\:0430 \
\:0432\:0438\:0432\:043e\:0434\:0443"}, {MatrixForm, TableForm}}, {{
       Hold[$CellContext`headingsQ\[CapitalSigma]$$], False, 
       "\:0417\:0430\:0433\:043e\:043b\:043e\:0432\:043a\:0438"}, {
      True, False}}, {{
       Hold[$CellContext`plot$$], $CellContext`DFAPlot, 
       "\:0424\:0443\:043d\:043a\:0446\:0456\:044f"}, {$CellContext`DFAPlot, \
$CellContext`DFALayeredPlot}}, {{
       Hold[$CellContext`lay$$], Left, 
       "\:041e\:0440\:0456\:0454\:043d\:0442\:0430\:0446\:0456\:044f"}, {
      Left, Right, Top, Bottom}}, {{
       Hold[$CellContext`imageSize$$], Medium, "ImageSize"}, {
      Tiny, Small, Medium, Large, Full, Automatic}}, {{
       Hold[$CellContext`plotLabel$$], None, "PlotLabel"}, ""}, {{
       Hold[$CellContext`arrowSize$$], Automatic, "ArrowSize"}, 0., 1.}, {{
       Hold[$CellContext`arrowPosition$$], 0.8, "ArrowPosition"}, 0., 1.}, {{
       Hold[$CellContext`edgeLabelPosition$$], 0.5, "EdgeLabelPosition"}, 0., 
      1.}, {{
       Hold[$CellContext`vertexSize$$], 0.1, "VertexSize"}, 0., 1.}, {
      Hold[
       Dynamic[
        Column[
         ReplaceAll[$CellContext`out$$, {
          "\:0422\:0430\:0431\:043b\:0438\:0446\:044f" -> 
           OpenerView[{
             "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0442\:0430\:0431\:043b\:0438\:0446\:0456 \:043f\:0435\:0440\
\:0435\:0445\:043e\:0434\:0456\:0432", 
              Column[{
                Manipulate`Place[1], 
                Manipulate`Place[2], 
                Manipulate`Place[3]}]}], 
           "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430" -> 
           OpenerView[{
             "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0434\:0456\:0430\:0433\:0440\:0430\:043c\:0438 \:043f\:0435\
\:0440\:0435\:0445\:043e\:0434\:0456\:0432", 
              Column[{
                Manipulate`Place[4], 
                Manipulate`Place[5], 
                Manipulate`Place[6], 
                Manipulate`Place[7], 
                Manipulate`Place[8], 
                Manipulate`Place[9], 
                Manipulate`Place[10], 
                Manipulate`Place[11]}]}]}]]]], 
      Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = {
    360., {100.5, 107.5}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`out$37251$$ = 
    False, $CellContext`outForm$37252$$ = 
    0, $CellContext`\[Delta]Elements$37253$$ = 
    False, $CellContext`\[Delta]Output$37254$$ = 
    False, $CellContext`headingsQ\[CapitalSigma]$37255$$ = 
    False, $CellContext`plot$37256$$ = False, $CellContext`lay$37257$$ = 
    0, $CellContext`imageSize$37258$$ = 0, $CellContext`arrowSize$37259$$ = 
    0, $CellContext`arrowPosition$37260$$ = 
    0, $CellContext`edgeLabelPosition$37261$$ = 
    0, $CellContext`vertexSize$37262$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`arrowPosition$$ = 
        0.8, $CellContext`arrowSize$$ = 
        Automatic, $CellContext`edgeLabelPosition$$ = 
        0.5, $CellContext`F$$ = {2}, $CellContext`headingsQ\[CapitalSigma]$$ = 
        False, $CellContext`imageSize$$ = Medium, $CellContext`lay$$ = 
        Left, $CellContext`out$$ = {
         "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, \
$CellContext`outForm$$ = 
        Column, $CellContext`plot$$ = $CellContext`DFAPlot, \
$CellContext`plotLabel$$ = 
        None, $CellContext`Q$$ = {1, 2, 3, 4, 5}, $CellContext`s$$ = 
        1, $CellContext`vertexSize$$ = 
        0.1, $CellContext`\[Delta]$$ = {{1, 2}, {3, 4}, {5, 1}, {2, 3}, {4, 
         5}}, $CellContext`\[Delta]Elements$$ = 
        "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", \
$CellContext`\[Delta]Output$$ = 
        MatrixForm, $CellContext`\[CapitalSigma]$$ = {0, 1}}, 
      "ControllerVariables" :> {
        Hold[$CellContext`out$$, $CellContext`out$37251$$, False], 
        Hold[$CellContext`outForm$$, $CellContext`outForm$37252$$, 0], 
        Hold[$CellContext`\[Delta]Elements$$, \
$CellContext`\[Delta]Elements$37253$$, False], 
        Hold[$CellContext`\[Delta]Output$$, \
$CellContext`\[Delta]Output$37254$$, False], 
        Hold[$CellContext`headingsQ\[CapitalSigma]$$, $CellContext`headingsQ\
\[CapitalSigma]$37255$$, False], 
        Hold[$CellContext`plot$$, $CellContext`plot$37256$$, False], 
        Hold[$CellContext`lay$$, $CellContext`lay$37257$$, 0], 
        Hold[$CellContext`imageSize$$, $CellContext`imageSize$37258$$, 0], 
        Hold[$CellContext`arrowSize$$, $CellContext`arrowSize$37259$$, 0], 
        Hold[$CellContext`arrowPosition$$, $CellContext`arrowPosition$37260$$,
          0], 
        Hold[$CellContext`edgeLabelPosition$$, \
$CellContext`edgeLabelPosition$37261$$, 0], 
        Hold[$CellContext`vertexSize$$, $CellContext`vertexSize$37262$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      ReplaceAll[$CellContext`outForm$$, {Column -> (Column[#, Center]& )}][
        ReplaceAll[$CellContext`out$$, {
         "\:0422\:0430\:0431\:043b\:0438\:0446\:044f" :> 
          Replace[$CellContext`\[Delta]Output$$, Blank[] :> 
            Condition[$CellContext`\[Delta]Output$$[#, 
               TableHeadings -> {$CellContext`Q$$, $CellContext`\
\[CapitalSigma]$$}]& , $CellContext`headingsQ\[CapitalSigma]$$]][
            
            ReplaceAll[$CellContext`\[Delta]Elements$$, {
             "\:0406\:043d\:0434\:0435\:043a\:0441\:0438" -> Identity, 
              "\:0421\:0442\:0430\:043d\:0438" -> 
              ReplaceAll[Pattern[$CellContext`q$, 
                  Blank[Integer]] :> 
                Part[$CellContext`Q$$, $CellContext`q$]]}][$CellContext`\
\[Delta]$$]], "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430" :> 
          Replace[$CellContext`plot$$, $CellContext`DFALayeredPlot -> \
($CellContext`DFALayeredPlot[#, $CellContext`lay$$, 
              SlotSequence[
              2]]& )][{$CellContext`Q$$, $CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$, $CellContext`s$$, $CellContext`F$$}, 
            ImageSize -> $CellContext`imageSize$$, 
            PlotLabel -> $CellContext`plotLabel$$, $CellContext`ArrowSize -> \
$CellContext`arrowSize$$, $CellContext`ArrowPosition -> \
$CellContext`arrowPosition$$, $CellContext`EdgeLabelPosition -> \
$CellContext`edgeLabelPosition$$, VertexSize -> $CellContext`vertexSize$$]}]],
       "Specifications" :> {{{$CellContext`Q$$, {1, 2, 3, 4, 5}}, ControlType -> 
         None}, {{$CellContext`\[CapitalSigma]$$, {0, 1}}, ControlType -> 
         None}, {{$CellContext`\[Delta]$$, {{1, 2}, {3, 4}, {5, 1}, {2, 3}, {
          4, 5}}}, ControlType -> None}, 
        OpenerView[{
         "\:0412\:0438\:0437\:043d\:0430\:0447\:0435\:043d\:043d\:044f \:0414\
\:0421\:0410", 
          Dynamic[
           Grid[
            ArrayFlatten[{{{{Null, "\[CapitalSigma]"}, {"Q", "\[Delta]"}}, 
               Transpose[
                Array[{
                  Function[Null, 
                   InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                   HoldAll}][
                   Dynamic[
                    Part[$CellContext`\[CapitalSigma]$$, #]]], 
                  Function[Null, 
                   Button[
                    SlotSequence[1], 
                    (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                    ContentPadding -> False], {HoldAll}]["-", 
                   Catch[
                    If[
                    Length[$CellContext`\[CapitalSigma]$$] > 
                    1, {$CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$} = {
                    Drop[$CellContext`\[CapitalSigma]$$, {#}], 
                    Drop[$CellContext`\[Delta]$$, {}, {#}]}, 
                    Throw[
                    Beep[]]]]]}& , 
                 Length[$CellContext`\[CapitalSigma]$$]]], {{
                 Function[Null, 
                  Button[
                   SlotSequence[1], 
                   (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                   ContentPadding -> False], {HoldAll}]["+", 
                  
                  Catch[{$CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`\[CapitalSigma]$$, $CellContext`\
\[Placeholder] :> Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    ArrayFlatten[{{$CellContext`\[Delta]$$, 
                    Transpose[{
                    Range[
                    Length[$CellContext`Q$$]]}]}}]}]]}, {Null}}}, {
               Array[{
                 Function[Null, 
                  InputField[
                   SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                  HoldAll}][
                  Dynamic[
                   Part[$CellContext`Q$$, #], 
                   Function[$CellContext`v$, 
                    
                    Catch[{$CellContext`s$$, $CellContext`F$$} = 
                    ReplaceAll[{$CellContext`s$$, $CellContext`F$$}, 
                    Part[$CellContext`Q$$, #] -> If[
                    FreeQ[$CellContext`Q$$, $CellContext`v$], 
                    Part[$CellContext`Q$$, #] = $CellContext`v$, 
                    Throw[
                    Beep[]]]]]]]], 
                 Function[Null, 
                  Button[
                   SlotSequence[1], 
                   (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                   ContentPadding -> False], {HoldAll}]["-", 
                  Catch[
                   If[
                   Length[$CellContext`Q$$] > 
                    1, {$CellContext`Q$$, $CellContext`\[Delta]$$} = {
                    Drop[$CellContext`Q$$, {#}], 
                    MapIndexed[
                    Function[{$CellContext`e$, $CellContext`i$}, 
                    
                    ReplaceAll[$CellContext`e$, Part[$CellContext`Q$$, #] -> 
                    Part[$CellContext`Q$$, 
                    Part[$CellContext`i$, 1]]]], 
                    ReplaceAll[
                    Drop[$CellContext`\[Delta]$$, {#}, {}], 
                    Pattern[$CellContext`q, 
                    Blank[]] :> 
                    Condition[$CellContext`q - 1, $CellContext`q >= #]]]}, 
                    Throw[
                    Beep[]]]]]}& , 
                Length[$CellContext`Q$$]], 
               Outer[Function[Null, 
                 InputField[
                  SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                 HoldAll}][
                 Dynamic[
                  Part[$CellContext`Q$$, 
                   Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]]], 
                  Function[$CellContext`v$, 
                   Catch[Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]] = ReplaceAll[
                    Part[
                    FirstPosition[$CellContext`Q$$, $CellContext`v$], 1], 
                    "NotFound" :> Throw[
                    Beep[]]]]]]]& , 
                Apply[Sequence, 
                 Map[Range, 
                  Dimensions[$CellContext`\[Delta]$$]]]], 
               Transpose[{
                 ConstantArray[Null, 
                  Length[$CellContext`Q$$]]}]}, {{{
                 Function[Null, 
                  Button[
                   SlotSequence[1], 
                   (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                   ContentPadding -> False], {HoldAll}]["+", 
                  Catch[{$CellContext`Q$$, $CellContext`\[Delta]$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`Q$$, $CellContext`\[Placeholder] :> 
                    Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    Append[$CellContext`\[Delta]$$, 
                    ConstantArray[Length[$CellContext`Q$$] + 1, 
                    Length[$CellContext`\[CapitalSigma]$$]]]}]], Null}}, {
                ConstantArray[Null, 
                 Length[$CellContext`\[CapitalSigma]$$]]}, Null}}], 
            Alignment -> {Null, Null, {{1, 1} -> {Center, Center}}}, 
            Dividers -> {{False, True}, {False, True}}]]}, 
         True], {{$CellContext`s$$, 1}, 
         Dynamic[
          Thread[Range[
             Length[$CellContext`Q$$]] -> $CellContext`Q$$]], ControlType -> 
         SetterBar}, {{$CellContext`F$$, {2}}, 
         Dynamic[
          Thread[Range[
             Length[$CellContext`Q$$]] -> $CellContext`Q$$]], ControlType -> 
         TogglerBar}, 
        Delimiter, {{$CellContext`out$$, {
          "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, 
          "\:0412\:0438\:0432\:0456\:0434 \:0414\:0421\:0410"}, {
         "\:0422\:0430\:0431\:043b\:0438\:0446\:044f", 
          "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, ControlType -> 
         TogglerBar}, {{$CellContext`outForm$$, Column, 
          "\:0424\:043e\:0440\:043c\:0430\:0442"}, {
         Column, Row, InputForm}}, {{$CellContext`\[Delta]Elements$$, 
          "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
          "\:0415\:043b\:0435\:043c\:0435\:043d\:0442\:0438"}, {
         "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
          "\:0421\:0442\:0430\:043d\:0438"}, ControlPlacement -> 
         1}, {{$CellContext`\[Delta]Output$$, MatrixForm, 
          "\:0424\:043e\:0440\:043c\:0430 \
\:0432\:0438\:0432\:043e\:0434\:0443"}, {MatrixForm, TableForm}, 
         ControlPlacement -> 
         2}, {{$CellContext`headingsQ\[CapitalSigma]$$, False, 
          "\:0417\:0430\:0433\:043e\:043b\:043e\:0432\:043a\:0438"}, {
         True, False}, ControlPlacement -> 
         3}, {{$CellContext`plot$$, $CellContext`DFAPlot, 
          "\:0424\:0443\:043d\:043a\:0446\:0456\:044f"}, \
{$CellContext`DFAPlot, $CellContext`DFALayeredPlot}, ControlPlacement -> 
         4}, {{$CellContext`lay$$, Left, 
          "\:041e\:0440\:0456\:0454\:043d\:0442\:0430\:0446\:0456\:044f"}, {
         Left, Right, Top, Bottom}, ControlPlacement -> 
         5}, {{$CellContext`imageSize$$, Medium, "ImageSize"}, {
         Tiny, Small, Medium, Large, Full, Automatic}, ControlPlacement -> 
         6}, {{$CellContext`plotLabel$$, None, "PlotLabel"}, "", 
         FieldSize -> {{6, 15}, {1, 
            DirectedInfinity[1]}}, ControlPlacement -> 
         7}, {{$CellContext`arrowSize$$, Automatic, "ArrowSize"}, 0., 1., 
         ControlPlacement -> 
         8}, {{$CellContext`arrowPosition$$, 0.8, "ArrowPosition"}, 0., 1., 
         ControlPlacement -> 
         9}, {{$CellContext`edgeLabelPosition$$, 0.5, "EdgeLabelPosition"}, 
         0., 1., ControlPlacement -> 
         10}, {{$CellContext`vertexSize$$, 0.1, "VertexSize"}, 0., 1., 
         ControlPlacement -> 11}, 
        Dynamic[
         Column[
          
          ReplaceAll[$CellContext`out$$, {
           "\:0422\:0430\:0431\:043b\:0438\:0446\:044f" -> 
            OpenerView[{
              "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0442\:0430\:0431\:043b\:0438\:0446\:0456 \:043f\:0435\:0440\
\:0435\:0445\:043e\:0434\:0456\:0432", 
               Column[{
                 Manipulate`Place[1], 
                 Manipulate`Place[2], 
                 Manipulate`Place[3]}]}], 
            "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430" -> 
            OpenerView[{
              "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0434\:0456\:0430\:0433\:0440\:0430\:043c\:0438 \:043f\:0435\
\:0440\:0435\:0445\:043e\:0434\:0456\:0432", 
               Column[{
                 Manipulate`Place[4], 
                 Manipulate`Place[5], 
                 Manipulate`Place[6], 
                 Manipulate`Place[7], 
                 Manipulate`Place[8], 
                 Manipulate`Place[9], 
                 Manipulate`Place[10], 
                 Manipulate`Place[11]}]}]}]]]}, 
      "Options" :> {ControlPlacement -> Left}, "DefaultOptions" :> {}],
     ImageSizeCache->{596., {174., 181.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`DFALayeredPlot[
         Pattern[$CellContext`M, 
          Blank[]], 
         Pattern[$CellContext`pos, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          
          OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`DFA\[Delta]Edges, 
         Insert[$CellContext`pos, 2], 
         LayeredGraphPlot, $CellContext`opts], $CellContext`DFACustomPlot[{
          Pattern[$CellContext`Q, 
           Blank[]], 
          Pattern[$CellContext`\[CapitalSigma], 
           Blank[]], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`F, 
           Blank[]]}, 
         Pattern[$CellContext`Edges, 
          Blank[]], 
         Pattern[$CellContext`PrePlot, 
          Blank[]], 
         Pattern[Plot, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          OptionsPattern[]]] := 
       With[{$CellContext`Qf = 
          If[Null =!= $CellContext`Q, Part[$CellContext`Q, #]& , 
            Identity], $CellContext`\[CapitalSigma]f = 
          If[Null =!= $CellContext`\[CapitalSigma], 
            Part[$CellContext`\[CapitalSigma], #]& , Characters[
             FromCharacterCode[96 + #]]& ]}, 
         Apply[Plot, 
          $CellContext`PrePlot[{
            If[
             
             OptionValue[$CellContext`EdgeCollapsing], \
$CellContext`DFACollapseEdges, Identity][
             $CellContext`Edges[$CellContext`\[Delta]]], 
            Apply[Sequence, 
             FilterRules[
              FilterRules[{$CellContext`opts}, 
               Options[Plot]], 
              Except[{VertexRenderingFunction, EdgeRenderingFunction}]]], 
            VertexRenderingFunction -> Replace[
              OptionValue[VertexRenderingFunction], 
              Automatic -> ($CellContext`DFARenderState[#2, 
                Replace[$CellContext`s, Null -> 1], $CellContext`F, #, 
                VertexLabeling -> $CellContext`Qf, 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderState]]]]& )], 
            EdgeRenderingFunction -> Replace[
              OptionValue[EdgeRenderingFunction], 
              Automatic -> ($CellContext`DFARenderTransition[#3, #, 
                EdgeLabeling -> If[Null =!= $CellContext`\[CapitalSigma], 
                  Function[$CellContext`l, 
                   If[
                   Length[$CellContext`l] == 
                    Length[$CellContext`\[CapitalSigma]], "\[CapitalSigma]", 
                    If[
                    Length[$CellContext`l] > 
                    Length[$CellContext`\[CapitalSigma]]/2., 
                    Row[{"\[CapitalSigma]", "\[Backslash]", 
                    $CellContext`\[CapitalSigma]f[
                    Complement[
                    Range[
                    Length[$CellContext`\[CapitalSigma]]], $CellContext`l]]}], 
                    $CellContext`\[CapitalSigma]f[$CellContext`l]]]], 
                  FromCharacterCode[# + 96]& ], 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderTransition]]]]& )]}]]], 
       Options[$CellContext`DFACustomPlot] = {
        AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> False, 
         AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, 
         Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, 
         ColorOutput -> Automatic, ContentSelectable -> Automatic, 
         CoordinatesToolOptions -> Automatic, DataRange -> Automatic, 
         DirectedEdges -> False, DisplayFunction :> $DisplayFunction, 
         EdgeLabeling -> True, EdgeRenderingFunction -> Automatic, 
         Epilog -> {}, FormatType :> TraditionalForm, Frame -> False, 
         FrameLabel -> None, FrameStyle -> {}, FrameTicks -> None, 
         FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, 
         ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, 
         ImageSizeRaw -> Automatic, LabelStyle -> {}, Method -> Automatic, 
         MultiedgeStyle -> Automatic, PackingMethod -> Automatic, PlotLabel -> 
         None, PlotRange -> All, PlotRangeClipping -> False, PlotRangePadding -> 
         Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, 
         PreserveImageOptions -> Automatic, Prolog -> {}, RotateLabel -> True,
          SelfLoopStyle -> Automatic, Ticks -> Automatic, TicksStyle -> {}, 
         VertexCoordinateRules -> Automatic, VertexRenderingFunction -> 
         Automatic, $CellContext`EdgeCollapsing -> 
         True, $CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`FinalColor -> GrayLevel[0.85], 
         VertexSize -> 0.1, VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}, $CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFACollapseEdges[
         Pattern[$CellContext`e, 
          Blank[]]] := ReplaceRepeated[$CellContext`e, {
           Pattern[$CellContext`h, 
            BlankNullSequence[]], {
            Pattern[$CellContext`x, 
             Blank[]], 
            Pattern[$CellContext`l1, 
             Blank[]]}, 
           Pattern[$CellContext`u, 
            BlankNullSequence[]], {
            Pattern[$CellContext`x, 
             Blank[]], 
            Pattern[$CellContext`l2, 
             Blank[]]}, 
           Pattern[$CellContext`t, 
            BlankNullSequence[]]} :> {$CellContext`h, {$CellContext`x, 
            
            Flatten[{$CellContext`l1, $CellContext`l2}]}, $CellContext`u, \
$CellContext`t}], $CellContext`t = {
        False, False, False}, $CellContext`DFARenderState[
         Pattern[$CellContext`q, 
          Blank[]], 
         Pattern[$CellContext`s, 
          Blank[]], 
         Pattern[$CellContext`F, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {
         If[$CellContext`q === $CellContext`s, 
          OptionValue[$CellContext`StartColor], 
          OptionValue[$CellContext`FinalColor]], 
         EdgeForm[Black], 
         Disk[$CellContext`p, 
          OptionValue[VertexSize]], 
         If[
          MemberQ[$CellContext`F, $CellContext`q], 
          Disk[$CellContext`p, 0.7 OptionValue[VertexSize]]], 
         Text[
          Style[
           Replace[
            OptionValue[VertexLabeling], Automatic -> 
            Identity][$CellContext`q], 
           Apply[Sequence, 
            OptionValue[VertexLabelStyle]]], $CellContext`p]}, 
       Options[$CellContext`DFARenderState] = {$CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`FinalColor -> GrayLevel[0.85], 
         VertexSize -> 0.1, VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFARenderTransition[
         Pattern[$CellContext`t, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {Black, 
         Arrowheads[{{
            OptionValue[$CellContext`ArrowSize], 
            OptionValue[$CellContext`ArrowPosition]}}], 
         Arrow[
          
          BSplineCurve[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1]], 
         Text[
          Style[
           Replace[
            OptionValue[EdgeLabeling], Automatic -> Identity][$CellContext`t], 
           Apply[Sequence, 
            OptionValue[EdgeLabelStyle]]], 
          
          BSplineFunction[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1][
           OptionValue[$CellContext`EdgeLabelPosition]], Background -> 
          White]}, 
       Options[$CellContext`DFARenderTransition] = {$CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $DisplayFunction = 
       Identity, $CellContext`DFA\[Delta]Edges[
         Pattern[$CellContext`\[Delta], 
          Blank[]]] := With[{$CellContext`rd = Map[Range, 
            Dimensions[$CellContext`\[Delta], 2]]}, 
         Flatten[
          Inner[
           Composition[Reverse, List], 
           Part[$CellContext`rd, 2], 
           Inner[Rule, 
            Part[$CellContext`rd, 1], $CellContext`\[Delta], List], List], 
          1]], $CellContext`DFAPlot[
         Pattern[$CellContext`M, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          
          OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`DFA\[Delta]Edges, Identity, GraphPlot, $CellContext`opts]}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.6404262592105784`*^9, 3.6404262964017057`*^9, 
  3.640426328259528*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DFAManipulate", "@", 
  RowBox[{"ModMxN", "[", 
   RowBox[{"4", ",", "3", ",", "6"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.638795056236518*^9, 3.6387950675031624`*^9}, {
  3.6387951361050863`*^9, 3.6387951373061547`*^9}, {3.6388001364210873`*^9, 
  3.6388001377531643`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`arrowPosition$$ = 
    0.8, $CellContext`arrowSize$$ = 
    Automatic, $CellContext`edgeLabelPosition$$ = 0.5, $CellContext`F$$ = {
    4}, $CellContext`headingsQ\[CapitalSigma]$$ = 
    False, $CellContext`imageSize$$ = Large, $CellContext`out$$ = {
    "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, \
$CellContext`outForm$$ = 
    Column, $CellContext`plot$$ = $CellContext`DFAPlot, \
$CellContext`plotLabel$$ = None, $CellContext`Q$$ = {1, 2, 3, 4, 5, 
    6}, $CellContext`s$$ = 1, $CellContext`vertexSize$$ = 
    0.1, $CellContext`\[Delta]$$ = {{1, 2, 3, 4}, {5, 6, 1, 2}, {3, 4, 5, 
    6}, {1, 2, 3, 4}, {5, 6, 1, 2}, {3, 4, 5, 
    6}}, $CellContext`\[Delta]Elements$$ = 
    "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", \
$CellContext`\[Delta]Output$$ = MatrixForm, $CellContext`\[CapitalSigma]$$ = {
    0, 1, 2, 3}, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`Q$$], {1, 2, 3, 4, 5, 6}}}, {{
       Hold[$CellContext`\[CapitalSigma]$$], {0, 1, 2, 3}}}, {{
       Hold[$CellContext`\[Delta]$$], {{1, 2, 3, 4}, {5, 6, 1, 2}, {3, 4, 5, 
       6}, {1, 2, 3, 4}, {5, 6, 1, 2}, {3, 4, 5, 6}}}}, {
      Hold[
       OpenerView[{
        "\:0412\:0438\:0437\:043d\:0430\:0447\:0435\:043d\:043d\:044f \:0414\
\:0421\:0410", 
         Dynamic[
          Grid[
           ArrayFlatten[{{{{Null, "\[CapitalSigma]"}, {"Q", "\[Delta]"}}, 
              Transpose[
               Array[{
                 Function[Null, 
                  InputField[
                   SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                  HoldAll}][
                  Dynamic[
                   Part[$CellContext`\[CapitalSigma]$$, #]]], 
                 Function[Null, 
                  Button[
                   SlotSequence[1], 
                   (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                   ContentPadding -> False], {HoldAll}]["-", 
                  Catch[
                   If[
                   Length[$CellContext`\[CapitalSigma]$$] > 
                    1, {$CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$} = {
                    Drop[$CellContext`\[CapitalSigma]$$, {#}], 
                    Drop[$CellContext`\[Delta]$$, {}, {#}]}, 
                    Throw[
                    Beep[]]]]]}& , 
                Length[$CellContext`\[CapitalSigma]$$]]], {{
                Function[Null, 
                 Button[
                  SlotSequence[1], 
                  (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                  ContentPadding -> False], {HoldAll}]["+", 
                 
                 Catch[{$CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`\[CapitalSigma]$$, $CellContext`\
\[Placeholder] :> Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    ArrayFlatten[{{$CellContext`\[Delta]$$, 
                    Transpose[{
                    Range[
                    Length[$CellContext`Q$$]]}]}}]}]]}, {Null}}}, {
              Array[{
                Function[Null, 
                 InputField[
                  SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                 HoldAll}][
                 Dynamic[
                  Part[$CellContext`Q$$, #], 
                  Function[$CellContext`v$, 
                   
                   Catch[{$CellContext`s$$, $CellContext`F$$} = 
                    ReplaceAll[{$CellContext`s$$, $CellContext`F$$}, 
                    Part[$CellContext`Q$$, #] -> If[
                    FreeQ[$CellContext`Q$$, $CellContext`v$], 
                    Part[$CellContext`Q$$, #] = $CellContext`v$, 
                    Throw[
                    Beep[]]]]]]]], 
                Function[Null, 
                 Button[
                  SlotSequence[1], 
                  (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                  ContentPadding -> False], {HoldAll}]["-", 
                 Catch[
                  If[
                  Length[$CellContext`Q$$] > 
                   1, {$CellContext`Q$$, $CellContext`\[Delta]$$} = {
                    Drop[$CellContext`Q$$, {#}], 
                    MapIndexed[
                    Function[{$CellContext`e$, $CellContext`i$}, 
                    
                    ReplaceAll[$CellContext`e$, Part[$CellContext`Q$$, #] -> 
                    Part[$CellContext`Q$$, 
                    Part[$CellContext`i$, 1]]]], 
                    ReplaceAll[
                    Drop[$CellContext`\[Delta]$$, {#}, {}], 
                    Pattern[$CellContext`q, 
                    Blank[]] :> 
                    Condition[$CellContext`q - 1, $CellContext`q >= #]]]}, 
                   Throw[
                    Beep[]]]]]}& , 
               Length[$CellContext`Q$$]], 
              Outer[Function[Null, 
                InputField[
                 SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {HoldAll}][
                Dynamic[
                 Part[$CellContext`Q$$, 
                  Part[$CellContext`\[Delta]$$, 
                   SlotSequence[1]]], 
                 Function[$CellContext`v$, 
                  Catch[Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]] = ReplaceAll[
                    Part[
                    FirstPosition[$CellContext`Q$$, $CellContext`v$], 1], 
                    "NotFound" :> Throw[
                    Beep[]]]]]]]& , 
               Apply[Sequence, 
                Map[Range, 
                 Dimensions[$CellContext`\[Delta]$$]]]], 
              Transpose[{
                ConstantArray[Null, 
                 Length[$CellContext`Q$$]]}]}, {{{
                Function[Null, 
                 Button[
                  SlotSequence[1], 
                  (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                  ContentPadding -> False], {HoldAll}]["+", 
                 Catch[{$CellContext`Q$$, $CellContext`\[Delta]$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`Q$$, $CellContext`\[Placeholder] :> 
                    Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    Append[$CellContext`\[Delta]$$, 
                    ConstantArray[Length[$CellContext`Q$$] + 1, 
                    Length[$CellContext`\[CapitalSigma]$$]]]}]], Null}}, {
               ConstantArray[Null, 
                Length[$CellContext`\[CapitalSigma]$$]]}, Null}}], 
           Alignment -> {Null, Null, {{1, 1} -> {Center, Center}}}, 
           Dividers -> {{False, True}, {False, True}}]]}, True]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`s$$], 1}, 
      Dynamic[
       Thread[Range[
          Length[$CellContext`Q$$]] -> $CellContext`Q$$]]}, {{
       Hold[$CellContext`F$$], {4}}, 
      Dynamic[
       Thread[Range[
          Length[$CellContext`Q$$]] -> $CellContext`Q$$]]}, {{
       Hold[$CellContext`out$$], {
       "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, 
       "\:0412\:0438\:0432\:0456\:0434 \:0414\:0421\:0410"}, {
      "\:0422\:0430\:0431\:043b\:0438\:0446\:044f", 
       "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}}, {{
       Hold[$CellContext`outForm$$], Column, 
       "\:0424\:043e\:0440\:043c\:0430\:0442"}, {Column, Row, InputForm}}, {{
       Hold[$CellContext`\[Delta]Elements$$], 
       "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
       "\:0415\:043b\:0435\:043c\:0435\:043d\:0442\:0438"}, {
      "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
       "\:0421\:0442\:0430\:043d\:0438"}}, {{
       Hold[$CellContext`\[Delta]Output$$], MatrixForm, 
       "\:0424\:043e\:0440\:043c\:0430 \
\:0432\:0438\:0432\:043e\:0434\:0443"}, {MatrixForm, TableForm}}, {{
       Hold[$CellContext`headingsQ\[CapitalSigma]$$], False, 
       "\:0417\:0430\:0433\:043e\:043b\:043e\:0432\:043a\:0438"}, {
      True, False}}, {{
       Hold[$CellContext`plot$$], $CellContext`DFAPlot, 
       "\:0424\:0443\:043d\:043a\:0446\:0456\:044f"}, {$CellContext`DFAPlot, \
$CellContext`DFALayeredPlot}}, {{
       Hold[$CellContext`imageSize$$], Medium, "ImageSize"}, {
      Tiny, Small, Medium, Large, Full, Automatic}}, {{
       Hold[$CellContext`plotLabel$$], None, "PlotLabel"}, ""}, {{
       Hold[$CellContext`arrowSize$$], Automatic, "ArrowSize"}, 0., 1.}, {{
       Hold[$CellContext`arrowPosition$$], 0.8, "ArrowPosition"}, 0., 1.}, {{
       Hold[$CellContext`edgeLabelPosition$$], 0.5, "EdgeLabelPosition"}, 0., 
      1.}, {{
       Hold[$CellContext`vertexSize$$], 0.1, "VertexSize"}, 0., 1.}, {
      Hold[
       Dynamic[
        Column[
         ReplaceAll[$CellContext`out$$, {
          "\:0422\:0430\:0431\:043b\:0438\:0446\:044f" -> 
           OpenerView[{
             "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0442\:0430\:0431\:043b\:0438\:0446\:0456 \:043f\:0435\:0440\
\:0435\:0445\:043e\:0434\:0456\:0432", 
              Column[{
                Manipulate`Place[1], 
                Manipulate`Place[2], 
                Manipulate`Place[3]}]}], 
           "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430" -> 
           OpenerView[{
             "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0434\:0456\:0430\:0433\:0440\:0430\:043c\:0438 \:043f\:0435\
\:0440\:0435\:0445\:043e\:0434\:0456\:0432", 
              Column[{
                Manipulate`Place[4], 
                Manipulate`Place[5], 
                Manipulate`Place[6], 
                Manipulate`Place[7], 
                Manipulate`Place[8], 
                Manipulate`Place[9], 
                Manipulate`Place[10]}]}]}]]]], 
      Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = {
    576., {256., 263.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`out$26394$$ = 
    False, $CellContext`outForm$26395$$ = 
    0, $CellContext`\[Delta]Elements$26396$$ = 
    False, $CellContext`\[Delta]Output$26397$$ = 
    False, $CellContext`headingsQ\[CapitalSigma]$26398$$ = 
    False, $CellContext`plot$26399$$ = False, $CellContext`imageSize$26400$$ =
     0, $CellContext`arrowSize$26401$$ = 
    0, $CellContext`arrowPosition$26402$$ = 
    0, $CellContext`edgeLabelPosition$26403$$ = 
    0, $CellContext`vertexSize$26404$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`arrowPosition$$ = 
        0.8, $CellContext`arrowSize$$ = 
        Automatic, $CellContext`edgeLabelPosition$$ = 
        0.5, $CellContext`F$$ = {4}, $CellContext`headingsQ\[CapitalSigma]$$ = 
        False, $CellContext`imageSize$$ = 
        Medium, $CellContext`out$$ = {
         "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, \
$CellContext`outForm$$ = 
        Column, $CellContext`plot$$ = $CellContext`DFAPlot, \
$CellContext`plotLabel$$ = 
        None, $CellContext`Q$$ = {1, 2, 3, 4, 5, 6}, $CellContext`s$$ = 
        1, $CellContext`vertexSize$$ = 
        0.1, $CellContext`\[Delta]$$ = {{1, 2, 3, 4}, {5, 6, 1, 2}, {3, 4, 5, 
         6}, {1, 2, 3, 4}, {5, 6, 1, 2}, {3, 4, 5, 
         6}}, $CellContext`\[Delta]Elements$$ = 
        "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", \
$CellContext`\[Delta]Output$$ = 
        MatrixForm, $CellContext`\[CapitalSigma]$$ = {0, 1, 2, 3}}, 
      "ControllerVariables" :> {
        Hold[$CellContext`out$$, $CellContext`out$26394$$, False], 
        Hold[$CellContext`outForm$$, $CellContext`outForm$26395$$, 0], 
        Hold[$CellContext`\[Delta]Elements$$, \
$CellContext`\[Delta]Elements$26396$$, False], 
        Hold[$CellContext`\[Delta]Output$$, \
$CellContext`\[Delta]Output$26397$$, False], 
        Hold[$CellContext`headingsQ\[CapitalSigma]$$, $CellContext`headingsQ\
\[CapitalSigma]$26398$$, False], 
        Hold[$CellContext`plot$$, $CellContext`plot$26399$$, False], 
        Hold[$CellContext`imageSize$$, $CellContext`imageSize$26400$$, 0], 
        Hold[$CellContext`arrowSize$$, $CellContext`arrowSize$26401$$, 0], 
        Hold[$CellContext`arrowPosition$$, $CellContext`arrowPosition$26402$$,
          0], 
        Hold[$CellContext`edgeLabelPosition$$, \
$CellContext`edgeLabelPosition$26403$$, 0], 
        Hold[$CellContext`vertexSize$$, $CellContext`vertexSize$26404$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      ReplaceAll[$CellContext`outForm$$, {Column -> (Column[#, Center]& )}][
        ReplaceAll[$CellContext`out$$, {
         "\:0422\:0430\:0431\:043b\:0438\:0446\:044f" :> 
          Replace[$CellContext`\[Delta]Output$$, Blank[] :> 
            Condition[$CellContext`\[Delta]Output$$[#, 
               TableHeadings -> {$CellContext`Q$$, $CellContext`\
\[CapitalSigma]$$}]& , $CellContext`headingsQ\[CapitalSigma]$$]][
            
            ReplaceAll[$CellContext`\[Delta]Elements$$, {
             "\:0406\:043d\:0434\:0435\:043a\:0441\:0438" -> Identity, 
              "\:0421\:0442\:0430\:043d\:0438" -> 
              ReplaceAll[Pattern[$CellContext`q$, 
                  Blank[Integer]] :> 
                Part[$CellContext`Q$$, $CellContext`q$]]}][$CellContext`\
\[Delta]$$]], 
          "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430" :> \
$CellContext`plot$$[{$CellContext`Q$$, $CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$, $CellContext`s$$, $CellContext`F$$}, 
            ImageSize -> $CellContext`imageSize$$, 
            PlotLabel -> $CellContext`plotLabel$$, $CellContext`ArrowSize -> \
$CellContext`arrowSize$$, $CellContext`ArrowPosition -> \
$CellContext`arrowPosition$$, $CellContext`EdgeLabelPosition -> \
$CellContext`edgeLabelPosition$$, VertexSize -> $CellContext`vertexSize$$]}]],
       "Specifications" :> {{{$CellContext`Q$$, {1, 2, 3, 4, 5, 6}}, 
         ControlType -> 
         None}, {{$CellContext`\[CapitalSigma]$$, {0, 1, 2, 3}}, ControlType -> 
         None}, {{$CellContext`\[Delta]$$, {{1, 2, 3, 4}, {5, 6, 1, 2}, {3, 4,
           5, 6}, {1, 2, 3, 4}, {5, 6, 1, 2}, {3, 4, 5, 6}}}, ControlType -> 
         None}, 
        OpenerView[{
         "\:0412\:0438\:0437\:043d\:0430\:0447\:0435\:043d\:043d\:044f \:0414\
\:0421\:0410", 
          Dynamic[
           Grid[
            ArrayFlatten[{{{{Null, "\[CapitalSigma]"}, {"Q", "\[Delta]"}}, 
               Transpose[
                Array[{
                  Function[Null, 
                   InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                   HoldAll}][
                   Dynamic[
                    Part[$CellContext`\[CapitalSigma]$$, #]]], 
                  Function[Null, 
                   Button[
                    SlotSequence[1], 
                    (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                    ContentPadding -> False], {HoldAll}]["-", 
                   Catch[
                    If[
                    Length[$CellContext`\[CapitalSigma]$$] > 
                    1, {$CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$} = {
                    Drop[$CellContext`\[CapitalSigma]$$, {#}], 
                    Drop[$CellContext`\[Delta]$$, {}, {#}]}, 
                    Throw[
                    Beep[]]]]]}& , 
                 Length[$CellContext`\[CapitalSigma]$$]]], {{
                 Function[Null, 
                  Button[
                   SlotSequence[1], 
                   (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                   ContentPadding -> False], {HoldAll}]["+", 
                  
                  Catch[{$CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`\[CapitalSigma]$$, $CellContext`\
\[Placeholder] :> Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    ArrayFlatten[{{$CellContext`\[Delta]$$, 
                    Transpose[{
                    Range[
                    Length[$CellContext`Q$$]]}]}}]}]]}, {Null}}}, {
               Array[{
                 Function[Null, 
                  InputField[
                   SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                  HoldAll}][
                  Dynamic[
                   Part[$CellContext`Q$$, #], 
                   Function[$CellContext`v$, 
                    
                    Catch[{$CellContext`s$$, $CellContext`F$$} = 
                    ReplaceAll[{$CellContext`s$$, $CellContext`F$$}, 
                    Part[$CellContext`Q$$, #] -> If[
                    FreeQ[$CellContext`Q$$, $CellContext`v$], 
                    Part[$CellContext`Q$$, #] = $CellContext`v$, 
                    Throw[
                    Beep[]]]]]]]], 
                 Function[Null, 
                  Button[
                   SlotSequence[1], 
                   (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                   ContentPadding -> False], {HoldAll}]["-", 
                  Catch[
                   If[
                   Length[$CellContext`Q$$] > 
                    1, {$CellContext`Q$$, $CellContext`\[Delta]$$} = {
                    Drop[$CellContext`Q$$, {#}], 
                    MapIndexed[
                    Function[{$CellContext`e$, $CellContext`i$}, 
                    
                    ReplaceAll[$CellContext`e$, Part[$CellContext`Q$$, #] -> 
                    Part[$CellContext`Q$$, 
                    Part[$CellContext`i$, 1]]]], 
                    ReplaceAll[
                    Drop[$CellContext`\[Delta]$$, {#}, {}], 
                    Pattern[$CellContext`q, 
                    Blank[]] :> 
                    Condition[$CellContext`q - 1, $CellContext`q >= #]]]}, 
                    Throw[
                    Beep[]]]]]}& , 
                Length[$CellContext`Q$$]], 
               Outer[Function[Null, 
                 InputField[
                  SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                 HoldAll}][
                 Dynamic[
                  Part[$CellContext`Q$$, 
                   Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]]], 
                  Function[$CellContext`v$, 
                   Catch[Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]] = ReplaceAll[
                    Part[
                    FirstPosition[$CellContext`Q$$, $CellContext`v$], 1], 
                    "NotFound" :> Throw[
                    Beep[]]]]]]]& , 
                Apply[Sequence, 
                 Map[Range, 
                  Dimensions[$CellContext`\[Delta]$$]]]], 
               Transpose[{
                 ConstantArray[Null, 
                  Length[$CellContext`Q$$]]}]}, {{{
                 Function[Null, 
                  Button[
                   SlotSequence[1], 
                   (ImageSize -> {#, #}& )[16], Appearance -> "Palette", 
                   ContentPadding -> False], {HoldAll}]["+", 
                  Catch[{$CellContext`Q$$, $CellContext`\[Delta]$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`Q$$, $CellContext`\[Placeholder] :> 
                    Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    Append[$CellContext`\[Delta]$$, 
                    ConstantArray[Length[$CellContext`Q$$] + 1, 
                    Length[$CellContext`\[CapitalSigma]$$]]]}]], Null}}, {
                ConstantArray[Null, 
                 Length[$CellContext`\[CapitalSigma]$$]]}, Null}}], 
            Alignment -> {Null, Null, {{1, 1} -> {Center, Center}}}, 
            Dividers -> {{False, True}, {False, True}}]]}, 
         True], {{$CellContext`s$$, 1}, 
         Dynamic[
          Thread[Range[
             Length[$CellContext`Q$$]] -> $CellContext`Q$$]], ControlType -> 
         SetterBar}, {{$CellContext`F$$, {4}}, 
         Dynamic[
          Thread[Range[
             Length[$CellContext`Q$$]] -> $CellContext`Q$$]], ControlType -> 
         TogglerBar}, 
        Delimiter, {{$CellContext`out$$, {
          "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, 
          "\:0412\:0438\:0432\:0456\:0434 \:0414\:0421\:0410"}, {
         "\:0422\:0430\:0431\:043b\:0438\:0446\:044f", 
          "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, ControlType -> 
         TogglerBar}, {{$CellContext`outForm$$, Column, 
          "\:0424\:043e\:0440\:043c\:0430\:0442"}, {
         Column, Row, InputForm}}, {{$CellContext`\[Delta]Elements$$, 
          "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
          "\:0415\:043b\:0435\:043c\:0435\:043d\:0442\:0438"}, {
         "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
          "\:0421\:0442\:0430\:043d\:0438"}, ControlPlacement -> 
         1}, {{$CellContext`\[Delta]Output$$, MatrixForm, 
          "\:0424\:043e\:0440\:043c\:0430 \
\:0432\:0438\:0432\:043e\:0434\:0443"}, {MatrixForm, TableForm}, 
         ControlPlacement -> 
         2}, {{$CellContext`headingsQ\[CapitalSigma]$$, False, 
          "\:0417\:0430\:0433\:043e\:043b\:043e\:0432\:043a\:0438"}, {
         True, False}, ControlPlacement -> 
         3}, {{$CellContext`plot$$, $CellContext`DFAPlot, 
          "\:0424\:0443\:043d\:043a\:0446\:0456\:044f"}, \
{$CellContext`DFAPlot, $CellContext`DFALayeredPlot}, ControlPlacement -> 
         4}, {{$CellContext`imageSize$$, Medium, "ImageSize"}, {
         Tiny, Small, Medium, Large, Full, Automatic}, ControlPlacement -> 
         5}, {{$CellContext`plotLabel$$, None, "PlotLabel"}, "", 
         FieldSize -> {{6, 15}, {1, 
            DirectedInfinity[1]}}, ControlPlacement -> 
         6}, {{$CellContext`arrowSize$$, Automatic, "ArrowSize"}, 0., 1., 
         ControlPlacement -> 
         7}, {{$CellContext`arrowPosition$$, 0.8, "ArrowPosition"}, 0., 1., 
         ControlPlacement -> 
         8}, {{$CellContext`edgeLabelPosition$$, 0.5, "EdgeLabelPosition"}, 
         0., 1., ControlPlacement -> 
         9}, {{$CellContext`vertexSize$$, 0.1, "VertexSize"}, 0., 1., 
         ControlPlacement -> 10}, 
        Dynamic[
         Column[
          
          ReplaceAll[$CellContext`out$$, {
           "\:0422\:0430\:0431\:043b\:0438\:0446\:044f" -> 
            OpenerView[{
              "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0442\:0430\:0431\:043b\:0438\:0446\:0456 \:043f\:0435\:0440\
\:0435\:0445\:043e\:0434\:0456\:0432", 
               Column[{
                 Manipulate`Place[1], 
                 Manipulate`Place[2], 
                 Manipulate`Place[3]}]}], 
            "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430" -> 
            OpenerView[{
              "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0434\:0456\:0430\:0433\:0440\:0430\:043c\:0438 \:043f\:0435\
\:0440\:0435\:0445\:043e\:0434\:0456\:0432", 
               Column[{
                 Manipulate`Place[4], 
                 Manipulate`Place[5], 
                 Manipulate`Place[6], 
                 Manipulate`Place[7], 
                 Manipulate`Place[8], 
                 Manipulate`Place[9], 
                 Manipulate`Place[10]}]}]}]]]}, 
      "Options" :> {ControlPlacement -> Left}, "DefaultOptions" :> {}],
     ImageSizeCache->{812., {286., 293.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`DFAPlot[
         Pattern[$CellContext`M, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          
          OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`DFA\[Delta]Edges, Identity, 
         GraphPlot, $CellContext`opts], $CellContext`DFACustomPlot[{
          Pattern[$CellContext`Q, 
           Blank[]], 
          Pattern[$CellContext`\[CapitalSigma], 
           Blank[]], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`F, 
           Blank[]]}, 
         Pattern[$CellContext`Edges, 
          Blank[]], 
         Pattern[$CellContext`PrePlot, 
          Blank[]], 
         Pattern[Plot, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          OptionsPattern[]]] := 
       With[{$CellContext`Qf = 
          If[Null =!= $CellContext`Q, Part[$CellContext`Q, #]& , 
            Identity], $CellContext`\[CapitalSigma]f = 
          If[Null =!= $CellContext`\[CapitalSigma], 
            Part[$CellContext`\[CapitalSigma], #]& , Characters[
             FromCharacterCode[96 + #]]& ]}, 
         Apply[Plot, 
          $CellContext`PrePlot[{
            If[
             
             OptionValue[$CellContext`EdgeCollapsing], \
$CellContext`DFACollapseEdges, Identity][
             $CellContext`Edges[$CellContext`\[Delta]]], 
            Apply[Sequence, 
             FilterRules[
              FilterRules[{$CellContext`opts}, 
               Options[Plot]], 
              Except[{VertexRenderingFunction, EdgeRenderingFunction}]]], 
            VertexRenderingFunction -> Replace[
              OptionValue[VertexRenderingFunction], 
              Automatic -> ($CellContext`DFARenderState[#2, 
                Replace[$CellContext`s, Null -> 1], $CellContext`F, #, 
                VertexLabeling -> $CellContext`Qf, 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderState]]]]& )], 
            EdgeRenderingFunction -> Replace[
              OptionValue[EdgeRenderingFunction], 
              Automatic -> ($CellContext`DFARenderTransition[#3, #, 
                EdgeLabeling -> If[Null =!= $CellContext`\[CapitalSigma], 
                  Function[$CellContext`l, 
                   If[
                   Length[$CellContext`l] == 
                    Length[$CellContext`\[CapitalSigma]], "\[CapitalSigma]", 
                    If[
                    Length[$CellContext`l] > 
                    Length[$CellContext`\[CapitalSigma]]/2., 
                    Row[{"\[CapitalSigma]", "\[Backslash]", 
                    $CellContext`\[CapitalSigma]f[
                    Complement[
                    Range[
                    Length[$CellContext`\[CapitalSigma]]], $CellContext`l]]}], 
                    $CellContext`\[CapitalSigma]f[$CellContext`l]]]], 
                  FromCharacterCode[# + 96]& ], 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderTransition]]]]& )]}]]], 
       Options[$CellContext`DFACustomPlot] = {
        AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> False, 
         AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, 
         Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, 
         ColorOutput -> Automatic, ContentSelectable -> Automatic, 
         CoordinatesToolOptions -> Automatic, DataRange -> Automatic, 
         DirectedEdges -> False, DisplayFunction :> $DisplayFunction, 
         EdgeLabeling -> True, EdgeRenderingFunction -> Automatic, 
         Epilog -> {}, FormatType :> TraditionalForm, Frame -> False, 
         FrameLabel -> None, FrameStyle -> {}, FrameTicks -> None, 
         FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, 
         ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, 
         ImageSizeRaw -> Automatic, LabelStyle -> {}, Method -> Automatic, 
         MultiedgeStyle -> Automatic, PackingMethod -> Automatic, PlotLabel -> 
         None, PlotRange -> All, PlotRangeClipping -> False, PlotRangePadding -> 
         Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, 
         PreserveImageOptions -> Automatic, Prolog -> {}, RotateLabel -> True,
          SelfLoopStyle -> Automatic, Ticks -> Automatic, TicksStyle -> {}, 
         VertexCoordinateRules -> Automatic, VertexRenderingFunction -> 
         Automatic, $CellContext`EdgeCollapsing -> 
         True, $CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`FinalColor -> GrayLevel[0.85], 
         VertexSize -> 0.1, VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}, $CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFACollapseEdges[
         Pattern[$CellContext`e, 
          Blank[]]] := ReplaceRepeated[$CellContext`e, {
           Pattern[$CellContext`h, 
            BlankNullSequence[]], {
            Pattern[$CellContext`x, 
             Blank[]], 
            Pattern[$CellContext`l1, 
             Blank[]]}, 
           Pattern[$CellContext`u, 
            BlankNullSequence[]], {
            Pattern[$CellContext`x, 
             Blank[]], 
            Pattern[$CellContext`l2, 
             Blank[]]}, 
           Pattern[$CellContext`t, 
            BlankNullSequence[]]} :> {$CellContext`h, {$CellContext`x, 
            
            Flatten[{$CellContext`l1, $CellContext`l2}]}, $CellContext`u, \
$CellContext`t}], $CellContext`t = {
        False, False, False}, $CellContext`DFARenderState[
         Pattern[$CellContext`q, 
          Blank[]], 
         Pattern[$CellContext`s, 
          Blank[]], 
         Pattern[$CellContext`F, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {
         If[$CellContext`q === $CellContext`s, 
          OptionValue[$CellContext`StartColor], 
          OptionValue[$CellContext`FinalColor]], 
         EdgeForm[Black], 
         Disk[$CellContext`p, 
          OptionValue[VertexSize]], 
         If[
          MemberQ[$CellContext`F, $CellContext`q], 
          Disk[$CellContext`p, 0.7 OptionValue[VertexSize]]], 
         Text[
          Style[
           Replace[
            OptionValue[VertexLabeling], Automatic -> 
            Identity][$CellContext`q], 
           Apply[Sequence, 
            OptionValue[VertexLabelStyle]]], $CellContext`p]}, 
       Options[$CellContext`DFARenderState] = {$CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`FinalColor -> GrayLevel[0.85], 
         VertexSize -> 0.1, VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFARenderTransition[
         Pattern[$CellContext`t, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {Black, 
         Arrowheads[{{
            OptionValue[$CellContext`ArrowSize], 
            OptionValue[$CellContext`ArrowPosition]}}], 
         Arrow[
          
          BSplineCurve[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1]], 
         Text[
          Style[
           Replace[
            OptionValue[EdgeLabeling], Automatic -> Identity][$CellContext`t], 
           Apply[Sequence, 
            OptionValue[EdgeLabelStyle]]], 
          
          BSplineFunction[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1][
           OptionValue[$CellContext`EdgeLabelPosition]], Background -> 
          White]}, 
       Options[$CellContext`DFARenderTransition] = {$CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $DisplayFunction = 
       Identity, $CellContext`DFA\[Delta]Edges[
         Pattern[$CellContext`\[Delta], 
          Blank[]]] := With[{$CellContext`rd = Map[Range, 
            Dimensions[$CellContext`\[Delta], 2]]}, 
         Flatten[
          Inner[
           Composition[Reverse, List], 
           Part[$CellContext`rd, 2], 
           Inner[Rule, 
            Part[$CellContext`rd, 1], $CellContext`\[Delta], List], List], 
          1]], $CellContext`DFALayeredPlot[
         Pattern[$CellContext`M, 
          Blank[]], 
         Optional[
          Pattern[$CellContext`pos, 
           Blank[]], Left], 
         Pattern[$CellContext`opts, 
          
          OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`DFA\[Delta]Edges, 
         Insert[$CellContext`pos, 2], LayeredGraphPlot, $CellContext`opts]}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.640411171869632*^9, 3.640425241055343*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["NFA", "Subsection",
 CellChangeTimes->{{3.64008505254463*^9, 3.6400850528036447`*^9}, {
  3.6404225717926702`*^9, 3.6404225765219407`*^9}, {3.6404227231313267`*^9, 
  3.640422723318337*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"NFAManipulate", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "Q0_", ",", "\[CapitalSigma]0_", ",", "\[Delta]0_", ",", "s0_", ",", 
      "F0_"}], "}"}], ",", 
    RowBox[{"opts", ":", 
     RowBox[{"OptionsPattern", "@", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"ControlPlacement", "\[Rule]", "Left"}], ",", 
        RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "}"}]}]}]}], "]"}], 
  ":=", "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"button", "=", 
       RowBox[{"Function", "[", 
        RowBox[{",", 
         RowBox[{"Button", "[", 
          RowBox[{"##", ",", 
           RowBox[{"ImageSize", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"16", ",", "16"}], "}"}]}], ",", 
           RowBox[{"Appearance", "\[Rule]", "\"\<Palette\>\""}], ",", 
           RowBox[{"ContentPadding", "\[Rule]", "False"}]}], "]"}], ",", 
         RowBox[{"{", "HoldAll", "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"inputField", "=", 
       RowBox[{"Function", "[", 
        RowBox[{",", 
         RowBox[{"InputField", "[", 
          RowBox[{"##", ",", 
           RowBox[{"FieldSize", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"1", ",", "10"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"1", ",", "10"}], "}"}]}], "}"}]}]}], "]"}], ",", 
         RowBox[{"{", "HoldAll", "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"outOptions", "=", 
       RowBox[{"{", 
        RowBox[{
        "\"\<\:0422\:0430\:0431\:043b\:0438\:0446\:044f\>\"", ",", 
         "\"\<\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430\>\""}], 
        "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"outForm", "/.", 
         RowBox[{"{", 
          RowBox[{"Column", "\[Rule]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Column", "[", 
              RowBox[{"#", ",", "Center"}], "]"}], "&"}], ")"}]}], "}"}]}], 
        ")"}], "[", 
       RowBox[{"out", "/.", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
          "\"\<\:0422\:0430\:0431\:043b\:0438\:0446\:044f\>\"", 
           "\[RuleDelayed]", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"Replace", "[", 
              RowBox[{"\[Delta]Output", ",", 
               RowBox[{"_", ":>", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"\[Delta]Output", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"TableHeadings", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Q", ",", "\[CapitalSigma]"}], "}"}]}]}], "]"}], 
                   "&"}], ")"}], "/;", "headingsQ\[CapitalSigma]"}]}]}], 
              "]"}], ")"}], "@", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"\[Delta]Elements", "/.", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                 "\"\<\:0406\:043d\:0434\:0435\:043a\:0441\:0438\>\"", 
                  "\[Rule]", "Identity"}], ",", 
                 RowBox[{"\"\<\:0421\:0442\:0430\:043d\:0438\>\"", "\[Rule]", 
                  RowBox[{"ReplaceAll", "@", 
                   RowBox[{"(", 
                    RowBox[{"q_Integer", "\[RuleDelayed]", 
                    RowBox[{
                    "Q", "\[LeftDoubleBracket]", "q", 
                    "\[RightDoubleBracket]"}]}], ")"}]}]}]}], "}"}]}], ")"}], 
             "@", "\[Delta]"}]}]}], ",", 
          RowBox[{
          "\"\<\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430\>\"", 
           "\[RuleDelayed]", 
           RowBox[{
            RowBox[{"Replace", "[", 
             RowBox[{"plot", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"DFALayeredPlot", "\[Rule]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"DFALayeredPlot", "[", 
                    RowBox[{"#1", ",", "lay", ",", "##2"}], "]"}], "&"}], 
                  ")"}]}], ",", 
                RowBox[{"NFALayeredPlot", "\[Rule]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"NFALayeredPlot", "[", 
                    RowBox[{"#1", ",", "lay", ",", "##2"}], "]"}], "&"}], 
                  ")"}]}]}], "}"}]}], "]"}], "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "Q", ",", "\[CapitalSigma]", ",", "\[Delta]", ",", "s", ",", 
               "F"}], "}"}], ",", 
             RowBox[{"ImageSize", "\[Rule]", "imageSize"}], ",", 
             RowBox[{"PlotLabel", "\[Rule]", "plotLabel"}], ",", 
             RowBox[{"ArrowSize", "\[Rule]", "arrowSize"}], ",", 
             RowBox[{"ArrowPosition", "\[Rule]", "arrowPosition"}], ",", 
             RowBox[{"EdgeLabelPosition", "\[Rule]", "edgeLabelPosition"}], 
             ",", 
             RowBox[{"VertexSize", "\[Rule]", "vertexSize"}]}], "]"}]}]}], 
         "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Q", ",", "Q0"}], "}"}], ",", 
        RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CapitalSigma]", ",", "\[CapitalSigma]0"}], "}"}], ",", 
        RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[Delta]", ",", "\[Delta]0"}], "}"}], ",", 
        RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"sSel", ",", 
          RowBox[{"Thread", "[", 
           RowBox[{"s0", "\[Equal]", 
            RowBox[{"Range", "@", 
             RowBox[{"Length", "@", "Q0"}]}]}], "]"}]}], "}"}], ",", 
        RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"FSel", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{"F0", ",", "#"}], "]"}], "&"}], "/@", 
           RowBox[{"Range", "@", 
            RowBox[{"Length", "@", "Q0"}]}]}]}], "}"}], ",", 
        RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"s", ",", "s0"}], "}"}], ",", 
        RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"F", ",", "F0"}], "}"}], ",", 
        RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"type", ",", "2"}], "}"}], ",", 
        RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"OpenerView", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "\"\<\:0412\:0438\:0437\:043d\:0430\:0447\:0435\:043d\:043d\:044f\>\"\
", ",", 
          RowBox[{"Dynamic", "@", 
           RowBox[{"Grid", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"ArrayFlatten", "[", 
              RowBox[{"List", "@", 
               RowBox[{"{", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SetterBar", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "type", "]"}], ",", 
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\:0414\:0421\:0410\>\"", ",", 
                    "\"\<\:041d\:0421\:0410\>\""}], "}"}]}], "]"}], ",", 
                    RowBox[{"Enabled", "\[Rule]", "False"}]}], "]"}], ";"}], 
                    ",", "\"\<s\>\""}], "}"}], ",", 
                    RowBox[{"Array", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Toggler", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    "sSel", "\[LeftDoubleBracket]", "#", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"v", "\[Function]", 
                    RowBox[{"CompoundExpression", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSel", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"FirstPosition", "[", 
                    RowBox[{"sSel", ",", "True"}], "]"}], 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                    "\[RightDoubleBracket]"}], "=", "False"}], ",", 
                    RowBox[{
                    RowBox[{
                    "sSel", "\[LeftDoubleBracket]", "#", 
                    "\[RightDoubleBracket]"}], "=", "True"}], ",", 
                    RowBox[{"s", "=", "#"}]}], "]"}]}]}], "]"}], ",", 
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}], "\[Rule]", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"#", ",", "Bold"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\[Rule]\>\"", ",", "\"\< \>\""}], "}"}]}], 
                    "]"}]}], "]"}]}], "]"}], "&"}], ",", 
                    RowBox[{"Length", "@", "Q"}]}], "]"}], ",", 
                    RowBox[{"{", "Null", "}"}]}], "]"}], "}"}], 
                  "\[Transpose]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\[SpanFromLeft]", ",", "\"\<F\>\""}], "}"}], ",", 
                    RowBox[{"Array", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Toggler", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    "FSel", "\[LeftDoubleBracket]", "#", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"v", "\[Function]", 
                    RowBox[{"CompoundExpression", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "FSel", "\[LeftDoubleBracket]", "#", 
                    "\[RightDoubleBracket]"}], "=", "v"}], ",", 
                    RowBox[{"F", "=", 
                    RowBox[{"Pick", "[", 
                    RowBox[{
                    RowBox[{"Range", "@", 
                    RowBox[{"Length", "@", "Q"}]}], ",", "FSel"}], "]"}]}]}], 
                    "]"}]}]}], "]"}], ",", 
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}], "\[Rule]", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"#", ",", "15"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"\<*\>\"", ",", "\"\< \>\""}], "}"}]}], "]"}]}],
                     "]"}]}], "]"}], "&"}], ",", 
                    RowBox[{"Length", "@", "Q"}]}], "]"}], ",", 
                    RowBox[{"{", "Null", "}"}]}], "]"}], "}"}], 
                  "\[Transpose]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"ArrayFlatten", "[", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\[SpanFromLeft]", ",", "\"\<\[CapitalSigma]\>\""}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Q\>\"", ",", "\"\<\[Delta]\>\""}], "}"}]}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Prepend", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\[CurlyEpsilon]\>\"", ","}], "}"}], "]"}], 
                    "@", 
                    RowBox[{"Array", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"inputField", "@", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    "\[CapitalSigma]", "\[LeftDoubleBracket]", "#", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"v", "\[Function]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{"ReplacePart", "[", 
                    RowBox[{"\[CapitalSigma]", ",", 
                    RowBox[{"#", "\[Rule]", "\"\<\>\""}]}], "]"}], ",", "v"}],
                     "]"}], ",", 
                    RowBox[{
                    RowBox[{
                    "\[CapitalSigma]", "\[LeftDoubleBracket]", "#", 
                    "\[RightDoubleBracket]"}], "=", "v"}], ",", 
                    RowBox[{"Beep", "[", "]"}]}], "]"}]}]}], "]"}]}], ",", 
                    RowBox[{"button", "[", 
                    RowBox[{"\"\<-\>\"", ",", 
                    RowBox[{"Catch", "@", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "@", "\[CapitalSigma]"}], ">", "1"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\[CapitalSigma]", ",", "\[Delta]"}], "}"}], "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"\[CapitalSigma]", ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}], ",", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"\[Delta]", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}]}], "}"}]}], ",", 
                    RowBox[{"Throw", "@", 
                    RowBox[{"Beep", "[", "]"}]}]}], "]"}]}]}], "]"}]}], "}"}],
                     "&"}], ",", 
                    RowBox[{
                    RowBox[{"Length", "@", "\[CapitalSigma]"}], "-", "1"}], 
                    ",", "2"}], "]"}]}], "\[Transpose]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"button", "[", 
                    RowBox[{"\"\<+\>\"", ",", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\[CapitalSigma]", ",", "\[Delta]"}], "}"}], "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Append", "[", 
                    RowBox[{
                    RowBox[{"\[CapitalSigma]", "/.", 
                    RowBox[{"\[Placeholder]", "\[RuleDelayed]", 
                    RowBox[{"Throw", "@", 
                    RowBox[{"Beep", "[", "]"}]}]}]}], ",", "\[Placeholder]"}],
                     "]"}], ",", 
                    RowBox[{"ArrayFlatten", "@", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"\[Delta]", ",", 
                    RowBox[{"{", "}"}]}], "}"}], "}"}]}]}], "}"}]}], "]"}]}], 
                    "]"}], "}"}], ",", 
                    RowBox[{"{", "Null", "}"}]}], "}"}]}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"MapAt", "[", 
                    RowBox[{
                    RowBox[{"Null", "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"s", ",", "2"}], "}"}]}], "]"}], "@", 
                    RowBox[{"Array", "[", 
                    RowBox[{
                    RowBox[{"qi", "\[Function]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"inputField", "@", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    "Q", "\[LeftDoubleBracket]", "qi", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"v", "\[Function]", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"s", ",", "F"}], "}"}], "=", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"s", ",", "F"}], "}"}], "/.", 
                    RowBox[{
                    RowBox[{
                    "Q", "\[LeftDoubleBracket]", "qi", 
                    "\[RightDoubleBracket]"}], "\[Rule]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"Q", ",", "v"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{
                    "Q", "\[LeftDoubleBracket]", "qi", 
                    "\[RightDoubleBracket]"}], "=", "v"}], ",", 
                    RowBox[{"Throw", "@", 
                    RowBox[{"Beep", "[", "]"}]}]}], "]"}]}]}]}], "]"}]}]}], 
                    "]"}]}], ",", 
                    RowBox[{"button", "[", 
                    RowBox[{"\"\<-\>\"", ",", 
                    RowBox[{"Catch", "@", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "@", "Q"}], ">", "1"}], ",", 
                    RowBox[{"CompoundExpression", "[", 
                    RowBox[{
                    RowBox[{"Q", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"Q", ",", 
                    RowBox[{"{", "qi", "}"}]}], "]"}]}], ",", 
                    RowBox[{"\[Delta]", "=", 
                    RowBox[{
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"\[Delta]", ",", 
                    RowBox[{"{", "qi", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "qi", ",", 
                    RowBox[{"{", "3", "}"}]}], "]"}], "/.", 
                    RowBox[{"q_", "\[RuleDelayed]", 
                    RowBox[{
                    RowBox[{"q", "-", "1"}], "/;", 
                    RowBox[{"q", ">", "qi"}]}]}]}]}], ",", 
                    RowBox[{"sSel", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"sSel", ",", 
                    RowBox[{"{", "qi", "}"}]}], "]"}]}], ",", 
                    RowBox[{"FSel", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"FSel", ",", 
                    RowBox[{"{", "qi", "}"}]}], "]"}]}], ",", 
                    RowBox[{"s", "=", 
                    RowBox[{
                    RowBox[{"FirstPosition", "[", 
                    RowBox[{"sSel", ",", "True"}], "]"}], 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
                    ",", 
                    RowBox[{"F", "=", 
                    RowBox[{"Pick", "[", 
                    RowBox[{
                    RowBox[{"Range", "@", 
                    RowBox[{"Length", "@", "Q"}]}], ",", "FSel"}], "]"}]}]}], 
                    "]"}], ",", 
                    RowBox[{"Throw", "@", 
                    RowBox[{"Beep", "[", "]"}]}]}], "]"}]}]}], "]"}]}], 
                    "}"}]}], ",", 
                    RowBox[{"Length", "@", "Q"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Outer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"inputField", "@", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{"Q", "\[LeftDoubleBracket]", 
                    RowBox[{
                    "\[Delta]", "\[LeftDoubleBracket]", "##", 
                    "\[RightDoubleBracket]"}], "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"v", "\[Function]", 
                    RowBox[{"Catch", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "@", "v"}], "===", "List"}], ",", 
                    RowBox[{
                    RowBox[{
                    "\[Delta]", "\[LeftDoubleBracket]", "##", 
                    "\[RightDoubleBracket]"}], "=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"FirstPosition", "[", 
                    RowBox[{"Q", ",", "#"}], "]"}], "\[LeftDoubleBracket]", 
                    "1", "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"\"\<NotFound\>\"", "\[RuleDelayed]", 
                    RowBox[{"Throw", "@", 
                    RowBox[{"Beep", "[", "]"}]}]}]}], "]"}], "&"}], "/@", 
                    "v"}], ")"}]}], ",", 
                    RowBox[{"Throw", "@", 
                    RowBox[{"Beep", "[", "]"}]}]}], "]"}], "]"}]}]}], "]"}]}],
                     "&"}], ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Range", "/@", 
                    RowBox[{"Dimensions", "@", "\[Delta]"}]}]}]}], "]"}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{",", 
                    RowBox[{"Length", "@", "Q"}]}], "]"}], "}"}], 
                    "\[Transpose]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"button", "[", 
                    RowBox[{"\"\<+\>\"", ",", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Q", ",", "\[Delta]", ",", "sSel", ",", "FSel"}], 
                    "}"}], "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Append", "[", 
                    RowBox[{
                    RowBox[{"Q", "/.", 
                    RowBox[{"\[Placeholder]", "\[RuleDelayed]", 
                    RowBox[{"Throw", "@", 
                    RowBox[{"Beep", "[", "]"}]}]}]}], ",", "\[Placeholder]"}],
                     "]"}], ",", 
                    RowBox[{"Append", "[", 
                    RowBox[{"\[Delta]", ",", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"Length", "@", "\[CapitalSigma]"}]}], "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"Append", "[", 
                    RowBox[{"sSel", ",", "False"}], "]"}], ",", 
                    RowBox[{"Append", "[", 
                    RowBox[{"FSel", ",", "False"}], "]"}]}], "}"}]}], "]"}]}],
                     "]"}], ","}], "}"}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{",", 
                    RowBox[{"Length", "@", "\[CapitalSigma]"}]}], "]"}], 
                    "}"}], ","}], "}"}]}], "}"}], "]"}]}], "}"}]}], "]"}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{"Alignment", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{",", ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
                  RowBox[{"{", 
                   RowBox[{"Center", ",", "Center"}], "}"}]}], "}"}]}], 
               "}"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Dividers", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                  "False", ",", "True", ",", "True", ",", "True", ",", "True",
                    ",", 
                   RowBox[{"{", "False", "}"}], ",", "True", ",", "False"}], 
                  "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"False", ",", "True", ",", "True", ",", 
                   RowBox[{"{", "False", "}"}], ",", "True", ",", "False"}], 
                  "}"}]}], "}"}]}], "/.", 
              RowBox[{"True", "\[Rule]", "Gray"}]}]}], "\[IndentingNewLine]", 
            "]"}]}]}], "}"}], ",", "True"}], "]"}], ",", 
      "\[IndentingNewLine]", "Delimiter", ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"out", ",", 
          RowBox[{"outOptions", "\[LeftDoubleBracket]", 
           RowBox[{"{", "2", "}"}], "\[RightDoubleBracket]"}], ",", 
          "\"\<\:0412\:0438\:0432\:0456\:0434 \:0414\:0421\:0410\>\""}], 
         "}"}], ",", "outOptions", ",", 
        RowBox[{"ControlType", "\[Rule]", "TogglerBar"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "outForm", ",", "Column", ",", 
          "\"\<\:0424\:043e\:0440\:043c\:0430\:0442\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"Column", ",", "Row", ",", "InputForm"}], "}"}]}], "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"Dynamic", "@", 
       RowBox[{"Column", "[", 
        RowBox[{"out", "/.", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
           "\"\<\:0422\:0430\:0431\:043b\:0438\:0446\:044f\>\"", "\[Rule]", 
            RowBox[{"OpenerView", "[", 
             RowBox[{"{", 
              RowBox[{
              "\"\<\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\
\:043d\:043d\:044f  \:0442\:0430\:0431\:043b\:0438\:0446\:0456 \:043f\:0435\
\:0440\:0435\:0445\:043e\:0434\:0456\:0432\>\"", ",", 
               RowBox[{"Column", "@", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Control", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\[Delta]Elements", ",", 
                    "\"\<\:0406\:043d\:0434\:0435\:043a\:0441\:0438\>\"", 
                    ",", "\"\<\:0415\:043b\:0435\:043c\:0435\:043d\:0442\:0438\
\>\""}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\:0406\:043d\:0434\:0435\:043a\:0441\:0438\>\"", 
                    ",", "\"\<\:0421\:0442\:0430\:043d\:0438\>\""}], "}"}]}], 
                    "}"}], "]"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Control", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\[Delta]Output", ",", "MatrixForm", ",", 
                    "\"\<\:0424\:043e\:0440\:043c\:0430 \:0432\:0438\:0432\
\:043e\:0434\:0443\>\""}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"MatrixForm", ",", "TableForm"}], "}"}]}], "}"}], 
                   "]"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Control", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "headingsQ\[CapitalSigma]", ",", "False", ",", 
                    "\"\<\:0417\:0430\:0433\:043e\:043b\:043e\:0432\:043a\
\:0438\>\""}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}]}], "}"}], "]"}]}], 
                 "\[IndentingNewLine]", "}"}]}]}], "}"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
           "\"\<\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430\>\"", 
            "\[Rule]", 
            RowBox[{"OpenerView", "[", 
             RowBox[{"{", 
              RowBox[{
              "\"\<\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\
\:043d\:043d\:044f  \:0434\:0456\:0430\:0433\:0440\:0430\:043c\:0438 \:043f\
\:0435\:0440\:0435\:0445\:043e\:0434\:0456\:0432\>\"", ",", 
               RowBox[{"Column", "@", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Control", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "plot", ",", "NFAPlot", ",", 
                    "\"\<\:0424\:0443\:043d\:043a\:0446\:0456\:044f\>\""}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"NFAPlot", ",", "NFALayeredPlot"}], "}"}]}], 
                    "}"}], "]"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Control", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "lay", ",", "Left", ",", 
                    "\"\<\:041e\:0440\:0456\:0454\:043d\:0442\:0430\:0446\
\:0456\:044f\>\""}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"Left", ",", "Right", ",", "Top", ",", "Bottom"}],
                     "}"}]}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Control", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "imageSize", ",", "Medium", ",", "\"\<ImageSize\>\""}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    "Tiny", ",", "Small", ",", "Medium", ",", "Large", ",", 
                    "Full", ",", "Automatic"}], "}"}]}], "}"}], "]"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Control", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "plotLabel", ",", "None", ",", "\"\<PlotLabel\>\""}], 
                    "}"}], ",", "\[IndentingNewLine]", "\"\<\>\"", ",", 
                    RowBox[{"FieldSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"6", ",", "15"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "\[Infinity]"}], "}"}]}], "}"}]}]}], 
                    "}"}], "]"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Control", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "arrowSize", ",", "Automatic", ",", "\"\<ArrowSize\>\""}],
                     "}"}], ",", "0.", ",", "1."}], "}"}], "]"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Control", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "arrowPosition", ",", ".8", ",", 
                    "\"\<ArrowPosition\>\""}], "}"}], ",", "0.", ",", "1."}], 
                    "}"}], "]"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Control", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "edgeLabelPosition", ",", ".5", ",", 
                    "\"\<EdgeLabelPosition\>\""}], "}"}], ",", "0.", ",", 
                    "1."}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Control", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "vertexSize", ",", ".1", ",", "\"\<VertexSize\>\""}], 
                    "}"}], ",", "0.", ",", "1."}], "}"}], "]"}]}], 
                 "\[IndentingNewLine]", "}"}]}]}], "}"}], "]"}]}]}], "}"}]}], 
        "]"}]}], ",", "\[IndentingNewLine]", "opts"}], "]"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.64008507107469*^9, 3.640085071660723*^9}, {
   3.640086723222187*^9, 3.640086729029519*^9}, {3.64008683132237*^9, 
   3.6400869278548913`*^9}, {3.640086991894554*^9, 3.640086993059621*^9}, {
   3.6400883213985977`*^9, 3.640088322649669*^9}, 3.640088387690389*^9, {
   3.640088419992237*^9, 3.640088438534297*^9}, {3.6404227273815694`*^9, 
   3.6404227600854397`*^9}, {3.6404264205868087`*^9, 
   3.6404264666194415`*^9}, {3.640426532578214*^9, 3.6404265452769403`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NFAManipulate", "[", 
  RowBox[{"NFA", "@", "\"\<Real short\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.640087010758633*^9, 3.6400870196461415`*^9}, {
  3.6400883266018953`*^9, 3.6400883702303905`*^9}, {3.640426555969552*^9, 
  3.6404265671651926`*^9}, {3.640426908993744*^9, 3.640426916000145*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`arrowPosition$$ = 
    0.8, $CellContext`arrowSize$$ = 
    0.018000000000000002`, $CellContext`edgeLabelPosition$$ = 
    0.5, $CellContext`F$$ = {3, 5, 6, 9}, $CellContext`FSel$$ = {
    False, False, True, False, True, True, False, False, 
     True}, $CellContext`headingsQ\[CapitalSigma]$$ = 
    False, $CellContext`imageSize$$ = Large, $CellContext`lay$$ = 
    Bottom, $CellContext`out$$ = {
    "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, \
$CellContext`outForm$$ = 
    Column, $CellContext`plot$$ = $CellContext`NFAPlot, \
$CellContext`plotLabel$$ = Null, $CellContext`Q$$ = {
    "S", "+-", "D", ".", "D.", "F", "E", "E+-", "ED"}, $CellContext`s$$ = 
    1, $CellContext`sSel$$ = {
    True, False, False, False, False, False, False, False, 
     False}, $CellContext`type$$ = 2, $CellContext`vertexSize$$ = 
    0.1, $CellContext`\[Delta]$$ = {{{}, {2}, {2}, {3}, {
      4}, {}}, {{}, {}, {}, {3}, {4}, {}}, {{}, {}, {}, {3}, {
      5}, {}}, {{}, {}, {}, {6}, {}, {}}, {{}, {}, {}, {6}, {}, {
      7}}, {{}, {}, {}, {6}, {}, {7}}, {{}, {8}, {8}, {
      9}, {}, {}}, {{}, {}, {}, {9}, {}, {}}, {{}, {}, {}, {
      9}, {}, {}}}, $CellContext`\[Delta]Elements$$ = 
    "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", \
$CellContext`\[Delta]Output$$ = MatrixForm, $CellContext`\[CapitalSigma]$$ = {
    "", "+", "-", "D", ".", "E"}, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`Q$$], {
       "S", "+-", "D", ".", "D.", "F", "E", "E+-", "ED"}}}, {{
       Hold[$CellContext`\[CapitalSigma]$$], {
       "", "+", "-", "D", ".", "E"}}}, {{
       Hold[$CellContext`\[Delta]$$], {{{}, {2}, {2}, {3}, {
         4}, {}}, {{}, {}, {}, {3}, {4}, {}}, {{}, {}, {}, {3}, {
         5}, {}}, {{}, {}, {}, {6}, {}, {}}, {{}, {}, {}, {6}, {}, {
         7}}, {{}, {}, {}, {6}, {}, {7}}, {{}, {8}, {8}, {
         9}, {}, {}}, {{}, {}, {}, {9}, {}, {}}, {{}, {}, {}, {
         9}, {}, {}}}}}, {{
       Hold[$CellContext`sSel$$], {
       True, False, False, False, False, False, False, False, False}}}, {{
       Hold[$CellContext`FSel$$], {
       False, False, True, False, True, True, False, False, True}}}, {{
       Hold[$CellContext`s$$], 1}}, {{
       Hold[$CellContext`F$$], {3, 5, 6, 9}}}, {{
       Hold[$CellContext`type$$], 2}}, {
      Hold[
       OpenerView[{
        "\:0412\:0438\:0437\:043d\:0430\:0447\:0435\:043d\:043d\:044f", 
         Dynamic[
          Grid[
           ArrayFlatten[{{
              Transpose[{
                Join[{SetterBar[
                    Dynamic[$CellContext`type$$], 
                    
                    Thread[{1, 2} -> {
                    "\:0414\:0421\:0410", "\:041d\:0421\:0410"}], Enabled -> 
                    False]; Null, "s"}, 
                 Array[Toggler[
                   Dynamic[
                    Part[$CellContext`sSel$$, #], 
                    Function[$CellContext`v$, Part[$CellContext`sSel$$, 
                    Part[
                    FirstPosition[$CellContext`sSel$$, True], 1]] = False; 
                    Part[$CellContext`sSel$$, #] = 
                    True; $CellContext`s$$ = #]], 
                   
                   Thread[{True, False} -> 
                    Map[Style[#, Bold]& , {"\[Rule]", " "}]]]& , 
                  Length[$CellContext`Q$$]], {Null}]}], 
              Transpose[{
                Join[{$CellContext`\[SpanFromLeft], "F"}, 
                 Array[Toggler[
                   Dynamic[
                    Part[$CellContext`FSel$$, #], 
                    
                    Function[$CellContext`v$, 
                    Part[$CellContext`FSel$$, #] = $CellContext`v$; \
$CellContext`F$$ = Pick[
                    Range[
                    Length[$CellContext`Q$$]], $CellContext`FSel$$]]], 
                   
                   Thread[{True, False} -> 
                    Map[Style[#, 15]& , {"*", " "}]]]& , 
                  Length[$CellContext`Q$$]], {Null}]}], 
              ArrayFlatten[{{{{$CellContext`\[SpanFromLeft], 
                   "\[CapitalSigma]"}, {"Q", "\[Delta]"}}, 
                 Transpose[
                  Prepend[{"\[CurlyEpsilon]", Null}][
                   Array[{
                    Function[Null, 
                    InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                    HoldAll}][
                    Dynamic[
                    Part[$CellContext`\[CapitalSigma]$$, #], 
                    Function[$CellContext`v$, 
                    If[
                    FreeQ[
                    
                    ReplacePart[$CellContext`\[CapitalSigma]$$, # -> 
                    ""], $CellContext`v$], 
                    Part[$CellContext`\[CapitalSigma]$$, #] = $CellContext`v$, 
                    Beep[]]]]], 
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["-", 
                    Catch[
                    If[
                    Length[$CellContext`\[CapitalSigma]$$] > 
                    1, {$CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$} = {
                    Drop[$CellContext`\[CapitalSigma]$$, {#}], 
                    Drop[$CellContext`\[Delta]$$, {}, {#}]}, 
                    Throw[
                    Beep[]]]]]}& , Length[$CellContext`\[CapitalSigma]$$] - 1,
                     2]]], {{
                   Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["+", 
                    
                    Catch[{$CellContext`\[CapitalSigma]$$, $CellContext`\
\[Delta]$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`\[CapitalSigma]$$, $CellContext`\
\[Placeholder] :> Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    ArrayFlatten[{{$CellContext`\[Delta]$$, {}}}]}]]}, {
                  Null}}}, {
                 MapAt[Null& , {$CellContext`s$$, 2}][
                  Array[
                   Function[$CellContext`qi$, {
                    Function[Null, 
                    InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                    HoldAll}][
                    Dynamic[
                    Part[$CellContext`Q$$, $CellContext`qi$], 
                    Function[$CellContext`v$, 
                    
                    Catch[{$CellContext`s$$, $CellContext`F$$} = 
                    ReplaceAll[{$CellContext`s$$, $CellContext`F$$}, 
                    Part[$CellContext`Q$$, $CellContext`qi$] -> If[
                    FreeQ[$CellContext`Q$$, $CellContext`v$], 
                    Part[$CellContext`Q$$, $CellContext`qi$] = \
$CellContext`v$, 
                    Throw[
                    Beep[]]]]]]]], 
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["-", 
                    Catch[
                    If[
                    Length[$CellContext`Q$$] > 
                    1, $CellContext`Q$$ = 
                    Drop[$CellContext`Q$$, {$CellContext`qi$}]; $CellContext`\
\[Delta]$$ = ReplaceAll[
                    DeleteCases[
                    
                    Drop[$CellContext`\[Delta]$$, {$CellContext`qi$}, {}], \
$CellContext`qi$, {3}], Pattern[$CellContext`q$, 
                    Blank[]] :> 
                    Condition[$CellContext`q$ - 
                    1, $CellContext`q$ > $CellContext`qi$]]; \
$CellContext`sSel$$ = 
                    Drop[$CellContext`sSel$$, {$CellContext`qi$}]; \
$CellContext`FSel$$ = 
                    Drop[$CellContext`FSel$$, {$CellContext`qi$}]; \
$CellContext`s$$ = Part[
                    FirstPosition[$CellContext`sSel$$, True], 
                    1]; $CellContext`F$$ = Pick[
                    Range[
                    Length[$CellContext`Q$$]], $CellContext`FSel$$], 
                    Throw[
                    Beep[]]]]]}], 
                   Length[$CellContext`Q$$]]], 
                 Outer[Function[Null, 
                   InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                   HoldAll}][
                   Dynamic[
                    Part[$CellContext`Q$$, 
                    Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]]], 
                    Function[$CellContext`v$, 
                    Catch[
                    If[
                    Head[$CellContext`v$] === List, 
                    Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]] = Map[Replace[
                    Part[
                    FirstPosition[$CellContext`Q$$, #], 1], "NotFound" :> 
                    Throw[
                    Beep[]]]& , $CellContext`v$], 
                    Throw[
                    Beep[]]]]]]]& , 
                  Apply[Sequence, 
                   Map[Range, 
                    Dimensions[$CellContext`\[Delta]$$]]]], 
                 Transpose[{
                   ConstantArray[Null, 
                    Length[$CellContext`Q$$]]}]}, {{{
                   Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["+", 
                    
                    Catch[{$CellContext`Q$$, $CellContext`\[Delta]$$, \
$CellContext`sSel$$, $CellContext`FSel$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`Q$$, $CellContext`\[Placeholder] :> 
                    Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    Append[$CellContext`\[Delta]$$, 
                    ConstantArray[{}, 
                    Length[$CellContext`\[CapitalSigma]$$]]], 
                    Append[$CellContext`sSel$$, False], 
                    Append[$CellContext`FSel$$, False]}]], Null}}, {
                  ConstantArray[Null, 
                   Length[$CellContext`\[CapitalSigma]$$]]}, Null}}]}}], 
           Alignment -> {Null, Null, {{1, 1} -> {Center, Center}}}, 
           ReplaceAll[
           Dividers -> {{
              False, True, True, True, True, {False}, True, False}, {
              False, True, True, {False}, True, False}}, True -> Gray]]]}, 
        True]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`out$$], {
       "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, 
       "\:0412\:0438\:0432\:0456\:0434 \:0414\:0421\:0410"}, {
      "\:0422\:0430\:0431\:043b\:0438\:0446\:044f", 
       "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}}, {{
       Hold[$CellContext`outForm$$], Column, 
       "\:0424\:043e\:0440\:043c\:0430\:0442"}, {Column, Row, InputForm}}, {{
       Hold[$CellContext`\[Delta]Elements$$], 
       "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
       "\:0415\:043b\:0435\:043c\:0435\:043d\:0442\:0438"}, {
      "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
       "\:0421\:0442\:0430\:043d\:0438"}}, {{
       Hold[$CellContext`\[Delta]Output$$], MatrixForm, 
       "\:0424\:043e\:0440\:043c\:0430 \
\:0432\:0438\:0432\:043e\:0434\:0443"}, {MatrixForm, TableForm}}, {{
       Hold[$CellContext`headingsQ\[CapitalSigma]$$], False, 
       "\:0417\:0430\:0433\:043e\:043b\:043e\:0432\:043a\:0438"}, {
      True, False}}, {{
       Hold[$CellContext`plot$$], $CellContext`NFAPlot, 
       "\:0424\:0443\:043d\:043a\:0446\:0456\:044f"}, {$CellContext`NFAPlot, \
$CellContext`NFALayeredPlot}}, {{
       Hold[$CellContext`lay$$], Left, 
       "\:041e\:0440\:0456\:0454\:043d\:0442\:0430\:0446\:0456\:044f"}, {
      Left, Right, Top, Bottom}}, {{
       Hold[$CellContext`imageSize$$], Medium, "ImageSize"}, {
      Tiny, Small, Medium, Large, Full, Automatic}}, {{
       Hold[$CellContext`plotLabel$$], None, "PlotLabel"}, ""}, {{
       Hold[$CellContext`arrowSize$$], Automatic, "ArrowSize"}, 0., 1.}, {{
       Hold[$CellContext`arrowPosition$$], 0.8, "ArrowPosition"}, 0., 1.}, {{
       Hold[$CellContext`edgeLabelPosition$$], 0.5, "EdgeLabelPosition"}, 0., 
      1.}, {{
       Hold[$CellContext`vertexSize$$], 0.1, "VertexSize"}, 0., 1.}, {
      Hold[
       Dynamic[
        Column[
         ReplaceAll[$CellContext`out$$, {
          "\:0422\:0430\:0431\:043b\:0438\:0446\:044f" -> 
           OpenerView[{
             "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0442\:0430\:0431\:043b\:0438\:0446\:0456 \:043f\:0435\:0440\
\:0435\:0445\:043e\:0434\:0456\:0432", 
              Column[{
                Manipulate`Place[1], 
                Manipulate`Place[2], 
                Manipulate`Place[3]}]}], 
           "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430" -> 
           OpenerView[{
             "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0434\:0456\:0430\:0433\:0440\:0430\:043c\:0438 \:043f\:0435\
\:0440\:0435\:0445\:043e\:0434\:0456\:0432", 
              Column[{
                Manipulate`Place[4], 
                Manipulate`Place[5], 
                Manipulate`Place[6], 
                Manipulate`Place[7], 
                Manipulate`Place[8], 
                Manipulate`Place[9], 
                Manipulate`Place[10], 
                Manipulate`Place[11]}]}]}]]]], 
      Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = {
    576., {116., 123.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`out$41955$$ = 
    False, $CellContext`outForm$41956$$ = 
    0, $CellContext`\[Delta]Elements$41957$$ = 
    False, $CellContext`\[Delta]Output$41958$$ = 
    False, $CellContext`headingsQ\[CapitalSigma]$41959$$ = 
    False, $CellContext`plot$41960$$ = False, $CellContext`lay$41961$$ = 
    0, $CellContext`imageSize$41962$$ = 0, $CellContext`arrowSize$41963$$ = 
    0, $CellContext`arrowPosition$41964$$ = 
    0, $CellContext`edgeLabelPosition$41965$$ = 
    0, $CellContext`vertexSize$41966$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`arrowPosition$$ = 
        0.8, $CellContext`arrowSize$$ = 
        Automatic, $CellContext`edgeLabelPosition$$ = 
        0.5, $CellContext`F$$ = {3, 5, 6, 9}, $CellContext`FSel$$ = {
         False, False, True, False, True, True, False, False, 
          True}, $CellContext`headingsQ\[CapitalSigma]$$ = 
        False, $CellContext`imageSize$$ = Medium, $CellContext`lay$$ = 
        Left, $CellContext`out$$ = {
         "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, \
$CellContext`outForm$$ = 
        Column, $CellContext`plot$$ = $CellContext`NFAPlot, \
$CellContext`plotLabel$$ = 
        None, $CellContext`Q$$ = {
         "S", "+-", "D", ".", "D.", "F", "E", "E+-", "ED"}, $CellContext`s$$ = 
        1, $CellContext`sSel$$ = {
         True, False, False, False, False, False, False, False, 
          False}, $CellContext`type$$ = 2, $CellContext`vertexSize$$ = 
        0.1, $CellContext`\[Delta]$$ = {{{}, {2}, {2}, {3}, {
           4}, {}}, {{}, {}, {}, {3}, {4}, {}}, {{}, {}, {}, {3}, {
           5}, {}}, {{}, {}, {}, {6}, {}, {}}, {{}, {}, {}, {6}, {}, {
           7}}, {{}, {}, {}, {6}, {}, {7}}, {{}, {8}, {8}, {
           9}, {}, {}}, {{}, {}, {}, {9}, {}, {}}, {{}, {}, {}, {
           9}, {}, {}}}, $CellContext`\[Delta]Elements$$ = 
        "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", \
$CellContext`\[Delta]Output$$ = 
        MatrixForm, $CellContext`\[CapitalSigma]$$ = {
         "", "+", "-", "D", ".", "E"}}, "ControllerVariables" :> {
        Hold[$CellContext`out$$, $CellContext`out$41955$$, False], 
        Hold[$CellContext`outForm$$, $CellContext`outForm$41956$$, 0], 
        Hold[$CellContext`\[Delta]Elements$$, \
$CellContext`\[Delta]Elements$41957$$, False], 
        Hold[$CellContext`\[Delta]Output$$, \
$CellContext`\[Delta]Output$41958$$, False], 
        Hold[$CellContext`headingsQ\[CapitalSigma]$$, $CellContext`headingsQ\
\[CapitalSigma]$41959$$, False], 
        Hold[$CellContext`plot$$, $CellContext`plot$41960$$, False], 
        Hold[$CellContext`lay$$, $CellContext`lay$41961$$, 0], 
        Hold[$CellContext`imageSize$$, $CellContext`imageSize$41962$$, 0], 
        Hold[$CellContext`arrowSize$$, $CellContext`arrowSize$41963$$, 0], 
        Hold[$CellContext`arrowPosition$$, $CellContext`arrowPosition$41964$$,
          0], 
        Hold[$CellContext`edgeLabelPosition$$, \
$CellContext`edgeLabelPosition$41965$$, 0], 
        Hold[$CellContext`vertexSize$$, $CellContext`vertexSize$41966$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      ReplaceAll[$CellContext`outForm$$, {Column -> (Column[#, Center]& )}][
        ReplaceAll[$CellContext`out$$, {
         "\:0422\:0430\:0431\:043b\:0438\:0446\:044f" :> 
          Replace[$CellContext`\[Delta]Output$$, Blank[] :> 
            Condition[$CellContext`\[Delta]Output$$[#, 
               TableHeadings -> {$CellContext`Q$$, $CellContext`\
\[CapitalSigma]$$}]& , $CellContext`headingsQ\[CapitalSigma]$$]][
            
            ReplaceAll[$CellContext`\[Delta]Elements$$, {
             "\:0406\:043d\:0434\:0435\:043a\:0441\:0438" -> Identity, 
              "\:0421\:0442\:0430\:043d\:0438" -> 
              ReplaceAll[Pattern[$CellContext`q$, 
                  Blank[Integer]] :> 
                Part[$CellContext`Q$$, $CellContext`q$]]}][$CellContext`\
\[Delta]$$]], "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430" :> 
          Replace[$CellContext`plot$$, {$CellContext`DFALayeredPlot -> \
($CellContext`DFALayeredPlot[#, $CellContext`lay$$, 
               SlotSequence[
               2]]& ), $CellContext`NFALayeredPlot -> \
($CellContext`NFALayeredPlot[#, $CellContext`lay$$, 
               SlotSequence[
               2]]& )}][{$CellContext`Q$$, $CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$, $CellContext`s$$, $CellContext`F$$}, 
            ImageSize -> $CellContext`imageSize$$, 
            PlotLabel -> $CellContext`plotLabel$$, $CellContext`ArrowSize -> \
$CellContext`arrowSize$$, $CellContext`ArrowPosition -> \
$CellContext`arrowPosition$$, $CellContext`EdgeLabelPosition -> \
$CellContext`edgeLabelPosition$$, VertexSize -> $CellContext`vertexSize$$]}]],
       "Specifications" :> {{{$CellContext`Q$$, {
          "S", "+-", "D", ".", "D.", "F", "E", "E+-", "ED"}}, ControlType -> 
         None}, {{$CellContext`\[CapitalSigma]$$, {
          "", "+", "-", "D", ".", "E"}}, ControlType -> 
         None}, {{$CellContext`\[Delta]$$, {{{}, {2}, {2}, {3}, {
            4}, {}}, {{}, {}, {}, {3}, {4}, {}}, {{}, {}, {}, {3}, {
            5}, {}}, {{}, {}, {}, {6}, {}, {}}, {{}, {}, {}, {6}, {}, {
            7}}, {{}, {}, {}, {6}, {}, {7}}, {{}, {8}, {8}, {
            9}, {}, {}}, {{}, {}, {}, {9}, {}, {}}, {{}, {}, {}, {
            9}, {}, {}}}}, ControlType -> 
         None}, {{$CellContext`sSel$$, {
          True, False, False, False, False, False, False, False, False}}, 
         ControlType -> 
         None}, {{$CellContext`FSel$$, {
          False, False, True, False, True, True, False, False, True}}, 
         ControlType -> None}, {{$CellContext`s$$, 1}, ControlType -> 
         None}, {{$CellContext`F$$, {3, 5, 6, 9}}, ControlType -> 
         None}, {{$CellContext`type$$, 2}, ControlType -> None}, 
        OpenerView[{
         "\:0412\:0438\:0437\:043d\:0430\:0447\:0435\:043d\:043d\:044f", 
          Dynamic[
           Grid[
            ArrayFlatten[{{
               Transpose[{
                 Join[{SetterBar[
                    Dynamic[$CellContext`type$$], 
                    
                    Thread[{1, 2} -> {
                    "\:0414\:0421\:0410", "\:041d\:0421\:0410"}], Enabled -> 
                    False]; Null, "s"}, 
                  Array[Toggler[
                    Dynamic[
                    Part[$CellContext`sSel$$, #], 
                    Function[$CellContext`v$, Part[$CellContext`sSel$$, 
                    Part[
                    FirstPosition[$CellContext`sSel$$, True], 1]] = False; 
                    Part[$CellContext`sSel$$, #] = 
                    True; $CellContext`s$$ = #]], 
                    
                    Thread[{True, False} -> 
                    Map[Style[#, Bold]& , {"\[Rule]", " "}]]]& , 
                   Length[$CellContext`Q$$]], {Null}]}], 
               Transpose[{
                 Join[{$CellContext`\[SpanFromLeft], "F"}, 
                  Array[Toggler[
                    Dynamic[
                    Part[$CellContext`FSel$$, #], 
                    
                    Function[$CellContext`v$, 
                    Part[$CellContext`FSel$$, #] = $CellContext`v$; \
$CellContext`F$$ = Pick[
                    Range[
                    Length[$CellContext`Q$$]], $CellContext`FSel$$]]], 
                    
                    Thread[{True, False} -> 
                    Map[Style[#, 15]& , {"*", " "}]]]& , 
                   Length[$CellContext`Q$$]], {Null}]}], 
               
               ArrayFlatten[{{{{$CellContext`\[SpanFromLeft], 
                    "\[CapitalSigma]"}, {"Q", "\[Delta]"}}, 
                  Transpose[
                   Prepend[{"\[CurlyEpsilon]", Null}][
                    Array[{
                    Function[Null, 
                    InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                    HoldAll}][
                    Dynamic[
                    Part[$CellContext`\[CapitalSigma]$$, #], 
                    Function[$CellContext`v$, 
                    If[
                    FreeQ[
                    
                    ReplacePart[$CellContext`\[CapitalSigma]$$, # -> 
                    ""], $CellContext`v$], 
                    Part[$CellContext`\[CapitalSigma]$$, #] = $CellContext`v$, 
                    Beep[]]]]], 
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["-", 
                    Catch[
                    If[
                    Length[$CellContext`\[CapitalSigma]$$] > 
                    1, {$CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$} = {
                    Drop[$CellContext`\[CapitalSigma]$$, {#}], 
                    Drop[$CellContext`\[Delta]$$, {}, {#}]}, 
                    Throw[
                    Beep[]]]]]}& , Length[$CellContext`\[CapitalSigma]$$] - 1,
                     2]]], {{
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["+", 
                    
                    Catch[{$CellContext`\[CapitalSigma]$$, $CellContext`\
\[Delta]$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`\[CapitalSigma]$$, $CellContext`\
\[Placeholder] :> Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    ArrayFlatten[{{$CellContext`\[Delta]$$, {}}}]}]]}, {
                   Null}}}, {
                  MapAt[Null& , {$CellContext`s$$, 2}][
                   Array[
                    Function[$CellContext`qi$, {
                    Function[Null, 
                    InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                    HoldAll}][
                    Dynamic[
                    Part[$CellContext`Q$$, $CellContext`qi$], 
                    Function[$CellContext`v$, 
                    
                    Catch[{$CellContext`s$$, $CellContext`F$$} = 
                    ReplaceAll[{$CellContext`s$$, $CellContext`F$$}, 
                    Part[$CellContext`Q$$, $CellContext`qi$] -> If[
                    FreeQ[$CellContext`Q$$, $CellContext`v$], 
                    Part[$CellContext`Q$$, $CellContext`qi$] = \
$CellContext`v$, 
                    Throw[
                    Beep[]]]]]]]], 
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["-", 
                    Catch[
                    If[
                    Length[$CellContext`Q$$] > 
                    1, $CellContext`Q$$ = 
                    Drop[$CellContext`Q$$, {$CellContext`qi$}]; $CellContext`\
\[Delta]$$ = ReplaceAll[
                    DeleteCases[
                    
                    Drop[$CellContext`\[Delta]$$, {$CellContext`qi$}, {}], \
$CellContext`qi$, {3}], Pattern[$CellContext`q$, 
                    Blank[]] :> 
                    Condition[$CellContext`q$ - 
                    1, $CellContext`q$ > $CellContext`qi$]]; \
$CellContext`sSel$$ = 
                    Drop[$CellContext`sSel$$, {$CellContext`qi$}]; \
$CellContext`FSel$$ = 
                    Drop[$CellContext`FSel$$, {$CellContext`qi$}]; \
$CellContext`s$$ = Part[
                    FirstPosition[$CellContext`sSel$$, True], 
                    1]; $CellContext`F$$ = Pick[
                    Range[
                    Length[$CellContext`Q$$]], $CellContext`FSel$$], 
                    Throw[
                    Beep[]]]]]}], 
                    Length[$CellContext`Q$$]]], 
                  Outer[Function[Null, 
                    InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                    HoldAll}][
                    Dynamic[
                    Part[$CellContext`Q$$, 
                    Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]]], 
                    Function[$CellContext`v$, 
                    Catch[
                    If[
                    Head[$CellContext`v$] === List, 
                    Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]] = Map[Replace[
                    Part[
                    FirstPosition[$CellContext`Q$$, #], 1], "NotFound" :> 
                    Throw[
                    Beep[]]]& , $CellContext`v$], 
                    Throw[
                    Beep[]]]]]]]& , 
                   Apply[Sequence, 
                    Map[Range, 
                    Dimensions[$CellContext`\[Delta]$$]]]], 
                  Transpose[{
                    ConstantArray[Null, 
                    Length[$CellContext`Q$$]]}]}, {{{
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["+", 
                    
                    Catch[{$CellContext`Q$$, $CellContext`\[Delta]$$, \
$CellContext`sSel$$, $CellContext`FSel$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`Q$$, $CellContext`\[Placeholder] :> 
                    Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    Append[$CellContext`\[Delta]$$, 
                    ConstantArray[{}, 
                    Length[$CellContext`\[CapitalSigma]$$]]], 
                    Append[$CellContext`sSel$$, False], 
                    Append[$CellContext`FSel$$, False]}]], Null}}, {
                   ConstantArray[Null, 
                    Length[$CellContext`\[CapitalSigma]$$]]}, Null}}]}}], 
            Alignment -> {Null, Null, {{1, 1} -> {Center, Center}}}, 
            ReplaceAll[
            Dividers -> {{
               False, True, True, True, True, {False}, True, False}, {
               False, True, True, {False}, True, False}}, True -> Gray]]]}, 
         True], Delimiter, {{$CellContext`out$$, {
          "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, 
          "\:0412\:0438\:0432\:0456\:0434 \:0414\:0421\:0410"}, {
         "\:0422\:0430\:0431\:043b\:0438\:0446\:044f", 
          "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, ControlType -> 
         TogglerBar}, {{$CellContext`outForm$$, Column, 
          "\:0424\:043e\:0440\:043c\:0430\:0442"}, {
         Column, Row, InputForm}}, {{$CellContext`\[Delta]Elements$$, 
          "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
          "\:0415\:043b\:0435\:043c\:0435\:043d\:0442\:0438"}, {
         "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
          "\:0421\:0442\:0430\:043d\:0438"}, ControlPlacement -> 
         1}, {{$CellContext`\[Delta]Output$$, MatrixForm, 
          "\:0424\:043e\:0440\:043c\:0430 \
\:0432\:0438\:0432\:043e\:0434\:0443"}, {MatrixForm, TableForm}, 
         ControlPlacement -> 
         2}, {{$CellContext`headingsQ\[CapitalSigma]$$, False, 
          "\:0417\:0430\:0433\:043e\:043b\:043e\:0432\:043a\:0438"}, {
         True, False}, ControlPlacement -> 
         3}, {{$CellContext`plot$$, $CellContext`NFAPlot, 
          
          "\:0424\:0443\:043d\:043a\:0446\:0456\:044f"}, \
{$CellContext`NFAPlot, $CellContext`NFALayeredPlot}, ControlPlacement -> 
         4}, {{$CellContext`lay$$, Left, 
          "\:041e\:0440\:0456\:0454\:043d\:0442\:0430\:0446\:0456\:044f"}, {
         Left, Right, Top, Bottom}, ControlPlacement -> 
         5}, {{$CellContext`imageSize$$, Medium, "ImageSize"}, {
         Tiny, Small, Medium, Large, Full, Automatic}, ControlPlacement -> 
         6}, {{$CellContext`plotLabel$$, None, "PlotLabel"}, "", 
         FieldSize -> {{6, 15}, {1, 
            DirectedInfinity[1]}}, ControlPlacement -> 
         7}, {{$CellContext`arrowSize$$, Automatic, "ArrowSize"}, 0., 1., 
         ControlPlacement -> 
         8}, {{$CellContext`arrowPosition$$, 0.8, "ArrowPosition"}, 0., 1., 
         ControlPlacement -> 
         9}, {{$CellContext`edgeLabelPosition$$, 0.5, "EdgeLabelPosition"}, 
         0., 1., ControlPlacement -> 
         10}, {{$CellContext`vertexSize$$, 0.1, "VertexSize"}, 0., 1., 
         ControlPlacement -> 11}, 
        Dynamic[
         Column[
          
          ReplaceAll[$CellContext`out$$, {
           "\:0422\:0430\:0431\:043b\:0438\:0446\:044f" -> 
            OpenerView[{
              "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0442\:0430\:0431\:043b\:0438\:0446\:0456 \:043f\:0435\:0440\
\:0435\:0445\:043e\:0434\:0456\:0432", 
               Column[{
                 Manipulate`Place[1], 
                 Manipulate`Place[2], 
                 Manipulate`Place[3]}]}], 
            "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430" -> 
            OpenerView[{
              "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0434\:0456\:0430\:0433\:0440\:0430\:043c\:0438 \:043f\:0435\
\:0440\:0435\:0445\:043e\:0434\:0456\:0432", 
               Column[{
                 Manipulate`Place[4], 
                 Manipulate`Place[5], 
                 Manipulate`Place[6], 
                 Manipulate`Place[7], 
                 Manipulate`Place[8], 
                 Manipulate`Place[9], 
                 Manipulate`Place[10], 
                 Manipulate`Place[11]}]}]}]]]}, 
      "Options" :> {ControlPlacement -> Left}, "DefaultOptions" :> {}],
     ImageSizeCache->{1010., {216., 223.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`DFALayeredPlot[
         Pattern[$CellContext`M, 
          Blank[]], 
         Pattern[$CellContext`pos, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          
          OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`DFA\[Delta]Edges, 
         Insert[$CellContext`pos, 2], 
         LayeredGraphPlot, $CellContext`opts], $CellContext`DFACustomPlot[{
          Pattern[$CellContext`Q, 
           Blank[]], 
          Pattern[$CellContext`\[CapitalSigma], 
           Blank[]], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`F, 
           Blank[]]}, 
         Pattern[$CellContext`Edges, 
          Blank[]], 
         Pattern[$CellContext`PrePlot, 
          Blank[]], 
         Pattern[Plot, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          OptionsPattern[]]] := 
       With[{$CellContext`Qf = 
          If[Null =!= $CellContext`Q, Part[$CellContext`Q, #]& , 
            Identity], $CellContext`\[CapitalSigma]f = 
          If[Null =!= $CellContext`\[CapitalSigma], 
            Part[$CellContext`\[CapitalSigma], #]& , Characters[
             FromCharacterCode[96 + #]]& ]}, 
         Apply[Plot, 
          $CellContext`PrePlot[{
            If[
             
             OptionValue[$CellContext`EdgeCollapsing], \
$CellContext`DFACollapseEdges, Identity][
             $CellContext`Edges[$CellContext`\[Delta]]], 
            Apply[Sequence, 
             FilterRules[
              FilterRules[{$CellContext`opts}, 
               Options[Plot]], 
              Except[{VertexRenderingFunction, EdgeRenderingFunction}]]], 
            VertexRenderingFunction -> Replace[
              OptionValue[VertexRenderingFunction], 
              Automatic -> ($CellContext`DFARenderState[#2, 
                Replace[$CellContext`s, Null -> 1], $CellContext`F, #, 
                VertexLabeling -> $CellContext`Qf, 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderState]]]]& )], 
            EdgeRenderingFunction -> Replace[
              OptionValue[EdgeRenderingFunction], 
              Automatic -> ($CellContext`DFARenderTransition[#3, #, 
                EdgeLabeling -> If[Null =!= $CellContext`\[CapitalSigma], 
                  Function[$CellContext`l, 
                   If[
                   Length[$CellContext`l] == 
                    Length[$CellContext`\[CapitalSigma]], "\[CapitalSigma]", 
                    If[
                    Length[$CellContext`l] > 
                    Length[$CellContext`\[CapitalSigma]]/2., 
                    Row[{"\[CapitalSigma]", "\[Backslash]", 
                    $CellContext`\[CapitalSigma]f[
                    Complement[
                    Range[
                    Length[$CellContext`\[CapitalSigma]]], $CellContext`l]]}], 
                    $CellContext`\[CapitalSigma]f[$CellContext`l]]]], 
                  FromCharacterCode[# + 96]& ], 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderTransition]]]]& )]}]]], 
       Options[$CellContext`DFACustomPlot] = {
        AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> False, 
         AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, 
         Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, 
         ColorOutput -> Automatic, ContentSelectable -> Automatic, 
         CoordinatesToolOptions -> Automatic, DataRange -> Automatic, 
         DirectedEdges -> False, DisplayFunction :> $DisplayFunction, 
         EdgeLabeling -> True, EdgeRenderingFunction -> Automatic, 
         Epilog -> {}, FormatType :> TraditionalForm, Frame -> False, 
         FrameLabel -> None, FrameStyle -> {}, FrameTicks -> None, 
         FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, 
         ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, 
         ImageSizeRaw -> Automatic, LabelStyle -> {}, Method -> Automatic, 
         MultiedgeStyle -> Automatic, PackingMethod -> Automatic, PlotLabel -> 
         None, PlotRange -> All, PlotRangeClipping -> False, PlotRangePadding -> 
         Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, 
         PreserveImageOptions -> Automatic, Prolog -> {}, RotateLabel -> True,
          SelfLoopStyle -> Automatic, Ticks -> Automatic, TicksStyle -> {}, 
         VertexCoordinateRules -> Automatic, VertexRenderingFunction -> 
         Automatic, $CellContext`EdgeCollapsing -> 
         True, $CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`FinalColor -> GrayLevel[0.85], 
         VertexSize -> 0.1, VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}, $CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFACollapseEdges[
         Pattern[$CellContext`e, 
          Blank[]]] := ReplaceRepeated[$CellContext`e, {
           Pattern[$CellContext`h, 
            BlankNullSequence[]], {
            Pattern[$CellContext`x, 
             Blank[]], 
            Pattern[$CellContext`l1, 
             Blank[]]}, 
           Pattern[$CellContext`u, 
            BlankNullSequence[]], {
            Pattern[$CellContext`x, 
             Blank[]], 
            Pattern[$CellContext`l2, 
             Blank[]]}, 
           Pattern[$CellContext`t, 
            BlankNullSequence[]]} :> {$CellContext`h, {$CellContext`x, 
            
            Flatten[{$CellContext`l1, $CellContext`l2}]}, $CellContext`u, \
$CellContext`t}], $CellContext`t = {
        False, False, False}, $CellContext`DFARenderState[
         Pattern[$CellContext`q, 
          Blank[]], 
         Pattern[$CellContext`s, 
          Blank[]], 
         Pattern[$CellContext`F, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {
         If[$CellContext`q === $CellContext`s, 
          OptionValue[$CellContext`StartColor], 
          OptionValue[$CellContext`FinalColor]], 
         EdgeForm[Black], 
         Disk[$CellContext`p, 
          OptionValue[VertexSize]], 
         If[
          MemberQ[$CellContext`F, $CellContext`q], 
          Disk[$CellContext`p, 0.7 OptionValue[VertexSize]]], 
         Text[
          Style[
           Replace[
            OptionValue[VertexLabeling], Automatic -> 
            Identity][$CellContext`q], 
           Apply[Sequence, 
            OptionValue[VertexLabelStyle]]], $CellContext`p]}, 
       Options[$CellContext`DFARenderState] = {$CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`FinalColor -> GrayLevel[0.85], 
         VertexSize -> 0.1, VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFARenderTransition[
         Pattern[$CellContext`t, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {Black, 
         Arrowheads[{{
            OptionValue[$CellContext`ArrowSize], 
            OptionValue[$CellContext`ArrowPosition]}}], 
         Arrow[
          
          BSplineCurve[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1]], 
         Text[
          Style[
           Replace[
            OptionValue[EdgeLabeling], Automatic -> Identity][$CellContext`t], 
           Apply[Sequence, 
            OptionValue[EdgeLabelStyle]]], 
          
          BSplineFunction[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1][
           OptionValue[$CellContext`EdgeLabelPosition]], Background -> 
          White]}, 
       Options[$CellContext`DFARenderTransition] = {$CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $DisplayFunction = 
       Identity, $CellContext`DFA\[Delta]Edges[
         Pattern[$CellContext`\[Delta], 
          Blank[]]] := With[{$CellContext`rd = Map[Range, 
            Dimensions[$CellContext`\[Delta], 2]]}, 
         Flatten[
          Inner[
           Composition[Reverse, List], 
           Part[$CellContext`rd, 2], 
           Inner[Rule, 
            Part[$CellContext`rd, 1], $CellContext`\[Delta], List], List], 
          1]], $CellContext`NFALayeredPlot[
         Pattern[$CellContext`M, 
          Blank[]], 
         Pattern[$CellContext`pos, Left], 
         Pattern[$CellContext`opts, 
          
          OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`NFA\[Delta]Edges, 
         Insert[$CellContext`pos, 2], 
         LayeredGraphPlot, $CellContext`opts], $CellContext`NFALayeredPlot[
         Pattern[$CellContext`M, 
          Blank[]], 
         Pattern[$CellContext`pos, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          
          OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`NFA\[Delta]Edges, 
         Insert[$CellContext`pos, 2], 
         LayeredGraphPlot, $CellContext`opts], $CellContext`NFALayeredPlot[
         Pattern[$CellContext`M, 
          Blank[]], 
         Optional[
          Pattern[$CellContext`pos, 
           Blank[]], Left], 
         Pattern[$CellContext`opts, 
          
          OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`NFA\[Delta]Edges, 
         Insert[$CellContext`pos, 2], 
         LayeredGraphPlot, $CellContext`opts], $CellContext`NFA\[Delta]Edges[
         Pattern[$CellContext`\[Delta], 
          Blank[]]] := With[{$CellContext`rl = Map[Range, 
            Dimensions[$CellContext`\[Delta]]]}, 
         Flatten[
          Inner[
           Composition[Thread, Reverse, List], 
           Part[$CellContext`rl, 2], 
           Inner[
            Composition[Thread, Rule], 
            Part[$CellContext`rl, 1], $CellContext`\[Delta], 
            Composition[Flatten, List]], List], 1]], 
       Attributes[$CellContext`qi$] = {Temporary}, 
       Attributes[$CellContext`v$] = {Temporary}, 
       Attributes[$CellContext`q$] = {Temporary}, $CellContext`NFAPlot[
         Pattern[$CellContext`M, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          
          OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`NFA\[Delta]Edges, Identity, GraphPlot, $CellContext`opts]}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.6400883718714848`*^9, 3.64008844819785*^9, 3.6404227644276886`*^9, 
   3.6404236413018427`*^9, 3.6404246120053635`*^9, 3.640424648956477*^9, 
   3.6404246897458105`*^9, 3.6404258525943213`*^9, 3.6404264822833376`*^9, {
   3.640426550804257*^9, 3.6404265684182644`*^9}, {3.640426910475829*^9, 
   3.6404269163821664`*^9}, 3.640426958543578*^9, 3.640427002302081*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["DFA & NFA", "Subsection",
 CellChangeTimes->{{3.640411052195787*^9, 3.6404110548609395`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"FABuilder", "[", 
   RowBox[{"{", 
    RowBox[{
    "Q0_", ",", "\[CapitalSigma]0_", ",", "\[Delta]0_", ",", "s0_", ",", 
     "F0_"}], "}"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"button", "=", 
       RowBox[{"Function", "[", 
        RowBox[{",", 
         RowBox[{"Button", "[", 
          RowBox[{"##", ",", 
           RowBox[{"ImageSize", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"16", ",", "16"}], "}"}]}], ",", 
           RowBox[{"Appearance", "\[Rule]", "\"\<Palette\>\""}], ",", 
           RowBox[{"ContentPadding", "\[Rule]", "False"}]}], "]"}], ",", 
         RowBox[{"{", "HoldAll", "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"inputField", "=", 
       RowBox[{"Function", "[", 
        RowBox[{",", 
         RowBox[{"InputField", "[", 
          RowBox[{"##", ",", 
           RowBox[{"FieldSize", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"1", ",", "10"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"1", ",", "10"}], "}"}]}], "}"}]}]}], "]"}], ",", 
         RowBox[{"{", "HoldAll", "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"outOptions", "=", 
       RowBox[{"{", 
        RowBox[{
        "\"\<\:0422\:0430\:0431\:043b\:0438\:0446\:044f\>\"", ",", 
         "\"\<\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430\>\""}], 
        "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"outForm", "/.", 
         RowBox[{"{", 
          RowBox[{"Column", "\[Rule]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Column", "[", 
              RowBox[{"#", ",", "Center"}], "]"}], "&"}], ")"}]}], "}"}]}], 
        ")"}], "[", 
       RowBox[{"out", "/.", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
          "\"\<\:0422\:0430\:0431\:043b\:0438\:0446\:044f\>\"", 
           "\[RuleDelayed]", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"Replace", "[", 
              RowBox[{"\[Delta]Output", ",", 
               RowBox[{"_", ":>", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"\[Delta]Output", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"TableHeadings", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Q", ",", "\[CapitalSigma]"}], "}"}]}]}], "]"}], 
                   "&"}], ")"}], "/;", "headingsQ\[CapitalSigma]"}]}]}], 
              "]"}], ")"}], "@", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"\[Delta]Elements", "/.", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                 "\"\<\:0406\:043d\:0434\:0435\:043a\:0441\:0438\>\"", 
                  "\[Rule]", "Identity"}], ",", 
                 RowBox[{"\"\<\:0421\:0442\:0430\:043d\:0438\>\"", "\[Rule]", 
                  RowBox[{"ReplaceAll", "@", 
                   RowBox[{"(", 
                    RowBox[{"q_Integer", "\[RuleDelayed]", 
                    RowBox[{
                    "Q", "\[LeftDoubleBracket]", "q", 
                    "\[RightDoubleBracket]"}]}], ")"}]}]}]}], "}"}]}], ")"}], 
             "@", "\[Delta]"}]}]}], ",", 
          RowBox[{
          "\"\<\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430\>\"", 
           "\[RuleDelayed]", 
           RowBox[{"plot", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "Q", ",", "\[CapitalSigma]", ",", "\[Delta]", ",", "s", ",", 
               "F"}], "}"}], ",", 
             RowBox[{"ImageSize", "\[Rule]", "imageSize"}], ",", 
             RowBox[{"PlotLabel", "\[Rule]", "plotLabel"}], ",", 
             RowBox[{"ArrowSize", "\[Rule]", "arrowSize"}], ",", 
             RowBox[{"ArrowPosition", "\[Rule]", "arrowPosition"}], ",", 
             RowBox[{"EdgeLabelPosition", "\[Rule]", "edgeLabelPosition"}], 
             ",", 
             RowBox[{"VertexSize", "\[Rule]", "vertexSize"}]}], "]"}]}]}], 
         "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Q", ",", "Q0"}], "}"}], ",", 
        RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[CapitalSigma]", ",", "\[CapitalSigma]0"}], "}"}], ",", 
        RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\[Delta]", ",", "\[Delta]0"}], "}"}], ",", 
        RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"sSel", ",", 
          RowBox[{"Thread", "[", 
           RowBox[{"s0", "\[Equal]", 
            RowBox[{"Range", "@", 
             RowBox[{"Length", "@", "Q0"}]}]}], "]"}]}], "}"}], ",", 
        RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"FSel", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{"F0", ",", "#"}], "]"}], "&"}], "/@", 
           RowBox[{"Range", "@", 
            RowBox[{"Length", "@", "Q0"}]}]}]}], "}"}], ",", 
        RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"s", ",", "s0"}], "}"}], ",", 
        RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"F", ",", "F0"}], "}"}], ",", 
        RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"type", ",", "2"}], "}"}], ",", 
        RowBox[{"ControlType", "\[Rule]", "None"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"OpenerView", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "\"\<\:0412\:0438\:0437\:043d\:0430\:0447\:0435\:043d\:043d\:044f\>\"\
", ",", 
          RowBox[{"Dynamic", "@", 
           RowBox[{"Grid", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"ArrayFlatten", "[", 
              RowBox[{"List", "@", 
               RowBox[{"{", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SetterBar", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", "type", "]"}], ",", 
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\:0414\:0421\:0410\>\"", ",", 
                    "\"\<\:041d\:0421\:0410\>\""}], "}"}]}], "]"}], ",", 
                    RowBox[{"Enabled", "\[Rule]", "False"}]}], "]"}], ";"}], 
                    ",", "\"\<s\>\""}], "}"}], ",", 
                    RowBox[{"Array", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Toggler", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    "sSel", "\[LeftDoubleBracket]", "#", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"v", "\[Function]", 
                    RowBox[{"CompoundExpression", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"sSel", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"FirstPosition", "[", 
                    RowBox[{"sSel", ",", "True"}], "]"}], 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
                    "\[RightDoubleBracket]"}], "=", "False"}], ",", 
                    RowBox[{
                    RowBox[{
                    "sSel", "\[LeftDoubleBracket]", "#", 
                    "\[RightDoubleBracket]"}], "=", "True"}], ",", 
                    RowBox[{"s", "=", "#"}]}], "]"}]}]}], "]"}], ",", 
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}], "\[Rule]", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"#", ",", "Bold"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\[Rule]\>\"", ",", "\"\< \>\""}], "}"}]}], 
                    "]"}]}], "]"}]}], "]"}], "&"}], ",", 
                    RowBox[{"Length", "@", "Q"}]}], "]"}], ",", 
                    RowBox[{"{", "Null", "}"}]}], "]"}], "}"}], 
                  "\[Transpose]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\[SpanFromLeft]", ",", "\"\<F\>\""}], "}"}], ",", 
                    RowBox[{"Array", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Toggler", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    "FSel", "\[LeftDoubleBracket]", "#", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"v", "\[Function]", 
                    RowBox[{"CompoundExpression", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "FSel", "\[LeftDoubleBracket]", "#", 
                    "\[RightDoubleBracket]"}], "=", "v"}], ",", 
                    RowBox[{"F", "=", 
                    RowBox[{"Pick", "[", 
                    RowBox[{
                    RowBox[{"Range", "@", 
                    RowBox[{"Length", "@", "Q"}]}], ",", "FSel"}], "]"}]}]}], 
                    "]"}]}]}], "]"}], ",", 
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}], "\[Rule]", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Style", "[", 
                    RowBox[{"#", ",", "15"}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"\<*\>\"", ",", "\"\< \>\""}], "}"}]}], "]"}]}],
                     "]"}]}], "]"}], "&"}], ",", 
                    RowBox[{"Length", "@", "Q"}]}], "]"}], ",", 
                    RowBox[{"{", "Null", "}"}]}], "]"}], "}"}], 
                  "\[Transpose]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"ArrayFlatten", "[", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\[SpanFromLeft]", ",", "\"\<\[CapitalSigma]\>\""}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\"\<Q\>\"", ",", "\"\<\[Delta]\>\""}], "}"}]}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Prepend", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\[CurlyEpsilon]\>\"", ","}], "}"}], "]"}], 
                    "@", 
                    RowBox[{"Array", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"inputField", "@", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    "\[CapitalSigma]", "\[LeftDoubleBracket]", "#", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"v", "\[Function]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{"ReplacePart", "[", 
                    RowBox[{"\[CapitalSigma]", ",", 
                    RowBox[{"#", "\[Rule]", "\"\<\>\""}]}], "]"}], ",", "v"}],
                     "]"}], ",", 
                    RowBox[{
                    RowBox[{
                    "\[CapitalSigma]", "\[LeftDoubleBracket]", "#", 
                    "\[RightDoubleBracket]"}], "=", "v"}], ",", 
                    RowBox[{"Beep", "[", "]"}]}], "]"}]}]}], "]"}]}], ",", 
                    RowBox[{"button", "[", 
                    RowBox[{"\"\<-\>\"", ",", 
                    RowBox[{"Catch", "@", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "@", "\[CapitalSigma]"}], ">", "1"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\[CapitalSigma]", ",", "\[Delta]"}], "}"}], "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"\[CapitalSigma]", ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}], ",", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"\[Delta]", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}]}], "}"}]}], ",", 
                    RowBox[{"Throw", "@", 
                    RowBox[{"Beep", "[", "]"}]}]}], "]"}]}]}], "]"}]}], "}"}],
                     "&"}], ",", 
                    RowBox[{
                    RowBox[{"Length", "@", "\[CapitalSigma]"}], "-", "1"}], 
                    ",", "2"}], "]"}]}], "\[Transpose]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"button", "[", 
                    RowBox[{"\"\<+\>\"", ",", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\[CapitalSigma]", ",", "\[Delta]"}], "}"}], "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Append", "[", 
                    RowBox[{
                    RowBox[{"\[CapitalSigma]", "/.", 
                    RowBox[{"\[Placeholder]", "\[RuleDelayed]", 
                    RowBox[{"Throw", "@", 
                    RowBox[{"Beep", "[", "]"}]}]}]}], ",", "\[Placeholder]"}],
                     "]"}], ",", 
                    RowBox[{"ArrayFlatten", "@", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"\[Delta]", ",", 
                    RowBox[{"{", "}"}]}], "}"}], "}"}]}]}], "}"}]}], "]"}]}], 
                    "]"}], "}"}], ",", 
                    RowBox[{"{", "Null", "}"}]}], "}"}]}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"MapAt", "[", 
                    RowBox[{
                    RowBox[{"Null", "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"s", ",", "2"}], "}"}]}], "]"}], "@", 
                    RowBox[{"Array", "[", 
                    RowBox[{
                    RowBox[{"qi", "\[Function]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"inputField", "@", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{
                    "Q", "\[LeftDoubleBracket]", "qi", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"v", "\[Function]", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"s", ",", "F"}], "}"}], "=", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"s", ",", "F"}], "}"}], "/.", 
                    RowBox[{
                    RowBox[{
                    "Q", "\[LeftDoubleBracket]", "qi", 
                    "\[RightDoubleBracket]"}], "\[Rule]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"Q", ",", "v"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{
                    "Q", "\[LeftDoubleBracket]", "qi", 
                    "\[RightDoubleBracket]"}], "=", "v"}], ",", 
                    RowBox[{"Throw", "@", 
                    RowBox[{"Beep", "[", "]"}]}]}], "]"}]}]}]}], "]"}]}]}], 
                    "]"}]}], ",", 
                    RowBox[{"button", "[", 
                    RowBox[{"\"\<-\>\"", ",", 
                    RowBox[{"Catch", "@", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "@", "Q"}], ">", "1"}], ",", 
                    RowBox[{"CompoundExpression", "[", 
                    RowBox[{
                    RowBox[{"Q", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"Q", ",", 
                    RowBox[{"{", "qi", "}"}]}], "]"}]}], ",", 
                    RowBox[{"\[Delta]", "=", 
                    RowBox[{
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"\[Delta]", ",", 
                    RowBox[{"{", "qi", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ",", "qi", ",", 
                    RowBox[{"{", "3", "}"}]}], "]"}], "/.", 
                    RowBox[{"q_", "\[RuleDelayed]", 
                    RowBox[{
                    RowBox[{"q", "-", "1"}], "/;", 
                    RowBox[{"q", ">", "qi"}]}]}]}]}], ",", 
                    RowBox[{"sSel", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"sSel", ",", 
                    RowBox[{"{", "qi", "}"}]}], "]"}]}], ",", 
                    RowBox[{"FSel", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"FSel", ",", 
                    RowBox[{"{", "qi", "}"}]}], "]"}]}], ",", 
                    RowBox[{"s", "=", 
                    RowBox[{
                    RowBox[{"FirstPosition", "[", 
                    RowBox[{"sSel", ",", "True"}], "]"}], 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], 
                    ",", 
                    RowBox[{"F", "=", 
                    RowBox[{"Pick", "[", 
                    RowBox[{
                    RowBox[{"Range", "@", 
                    RowBox[{"Length", "@", "Q"}]}], ",", "FSel"}], "]"}]}]}], 
                    "]"}], ",", 
                    RowBox[{"Throw", "@", 
                    RowBox[{"Beep", "[", "]"}]}]}], "]"}]}]}], "]"}]}], 
                    "}"}]}], ",", 
                    RowBox[{"Length", "@", "Q"}]}], "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Outer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"inputField", "@", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{
                    RowBox[{"Q", "\[LeftDoubleBracket]", 
                    RowBox[{
                    "\[Delta]", "\[LeftDoubleBracket]", "##", 
                    "\[RightDoubleBracket]"}], "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"v", "\[Function]", 
                    RowBox[{"Catch", "[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Head", "@", "v"}], "===", "List"}], ",", 
                    RowBox[{
                    RowBox[{
                    "\[Delta]", "\[LeftDoubleBracket]", "##", 
                    "\[RightDoubleBracket]"}], "=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"FirstPosition", "[", 
                    RowBox[{"Q", ",", "#"}], "]"}], "\[LeftDoubleBracket]", 
                    "1", "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"\"\<NotFound\>\"", "\[RuleDelayed]", 
                    RowBox[{"Throw", "@", 
                    RowBox[{"Beep", "[", "]"}]}]}]}], "]"}], "&"}], "/@", 
                    "v"}], ")"}]}], ",", 
                    RowBox[{"Throw", "@", 
                    RowBox[{"Beep", "[", "]"}]}]}], "]"}], "]"}]}]}], "]"}]}],
                     "&"}], ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Range", "/@", 
                    RowBox[{"Dimensions", "@", "\[Delta]"}]}]}]}], "]"}], ",",
                     "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{",", 
                    RowBox[{"Length", "@", "Q"}]}], "]"}], "}"}], 
                    "\[Transpose]"}]}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"button", "[", 
                    RowBox[{"\"\<+\>\"", ",", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Q", ",", "\[Delta]", ",", "sSel", ",", "FSel"}], 
                    "}"}], "=", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Append", "[", 
                    RowBox[{
                    RowBox[{"Q", "/.", 
                    RowBox[{"\[Placeholder]", "\[RuleDelayed]", 
                    RowBox[{"Throw", "@", 
                    RowBox[{"Beep", "[", "]"}]}]}]}], ",", "\[Placeholder]"}],
                     "]"}], ",", 
                    RowBox[{"Append", "[", 
                    RowBox[{"\[Delta]", ",", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"Length", "@", "\[CapitalSigma]"}]}], "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"Append", "[", 
                    RowBox[{"sSel", ",", "False"}], "]"}], ",", 
                    RowBox[{"Append", "[", 
                    RowBox[{"FSel", ",", "False"}], "]"}]}], "}"}]}], "]"}]}],
                     "]"}], ","}], "}"}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{",", 
                    RowBox[{"Length", "@", "\[CapitalSigma]"}]}], "]"}], 
                    "}"}], ","}], "}"}]}], "}"}], "]"}]}], "}"}]}], "]"}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{"Alignment", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{",", ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
                  RowBox[{"{", 
                   RowBox[{"Center", ",", "Center"}], "}"}]}], "}"}]}], 
               "}"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Dividers", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                  "False", ",", "True", ",", "True", ",", "True", ",", "True",
                    ",", 
                   RowBox[{"{", "False", "}"}], ",", "True", ",", "False"}], 
                  "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"False", ",", "True", ",", "True", ",", 
                   RowBox[{"{", "False", "}"}], ",", "True", ",", "False"}], 
                  "}"}]}], "}"}]}], "/.", 
              RowBox[{"True", "\[Rule]", "Gray"}]}]}], "\[IndentingNewLine]", 
            "]"}]}]}], "}"}], ",", "True"}], "]"}], ",", 
      "\[IndentingNewLine]", "Delimiter", ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"out", ",", 
          RowBox[{"outOptions", "\[LeftDoubleBracket]", 
           RowBox[{"{", "2", "}"}], "\[RightDoubleBracket]"}], ",", 
          "\"\<\:0412\:0438\:0432\:0456\:0434 \:0414\:0421\:0410\>\""}], 
         "}"}], ",", "outOptions", ",", 
        RowBox[{"ControlType", "\[Rule]", "TogglerBar"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "outForm", ",", "Column", ",", 
          "\"\<\:0424\:043e\:0440\:043c\:0430\:0442\>\""}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"Column", ",", "Row", ",", "InputForm"}], "}"}]}], "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"Dynamic", "@", 
       RowBox[{"Column", "[", 
        RowBox[{"out", "/.", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
           "\"\<\:0422\:0430\:0431\:043b\:0438\:0446\:044f\>\"", "\[Rule]", 
            RowBox[{"OpenerView", "[", 
             RowBox[{"{", 
              RowBox[{
              "\"\<\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\
\:043d\:043d\:044f  \:0442\:0430\:0431\:043b\:0438\:0446\:0456 \:043f\:0435\
\:0440\:0435\:0445\:043e\:0434\:0456\:0432\>\"", ",", 
               RowBox[{"Column", "@", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Control", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\[Delta]Elements", ",", 
                    "\"\<\:0406\:043d\:0434\:0435\:043a\:0441\:0438\>\"", 
                    ",", "\"\<\:0415\:043b\:0435\:043c\:0435\:043d\:0442\:0438\
\>\""}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<\:0406\:043d\:0434\:0435\:043a\:0441\:0438\>\"", 
                    ",", "\"\<\:0421\:0442\:0430\:043d\:0438\>\""}], "}"}]}], 
                    "}"}], "]"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Control", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\[Delta]Output", ",", "MatrixForm", ",", 
                    "\"\<\:0424\:043e\:0440\:043c\:0430 \:0432\:0438\:0432\
\:043e\:0434\:0443\>\""}], "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"MatrixForm", ",", "TableForm"}], "}"}]}], "}"}], 
                   "]"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Control", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "headingsQ\[CapitalSigma]", ",", "False", ",", 
                    "\"\<\:0417\:0430\:0433\:043e\:043b\:043e\:0432\:043a\
\:0438\>\""}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}]}], "}"}], "]"}]}], 
                 "\[IndentingNewLine]", "}"}]}]}], "}"}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
           "\"\<\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430\>\"", 
            "\[Rule]", 
            RowBox[{"OpenerView", "[", 
             RowBox[{"{", 
              RowBox[{
              "\"\<\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\
\:043d\:043d\:044f  \:0434\:0456\:0430\:0433\:0440\:0430\:043c\:0438 \:043f\
\:0435\:0440\:0435\:0445\:043e\:0434\:0456\:0432\>\"", ",", 
               RowBox[{"Column", "@", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Control", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "plot", ",", "NFAPlot", ",", 
                    "\"\<\:0424\:0443\:043d\:043a\:0446\:0456\:044f\>\""}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"NFAPlot", ",", "NFALayeredPlot"}], "}"}]}], 
                    "}"}], "]"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Control", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "imageSize", ",", "Medium", ",", "\"\<ImageSize\>\""}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    "Tiny", ",", "Small", ",", "Medium", ",", "Large", ",", 
                    "Full", ",", "Automatic"}], "}"}]}], "}"}], "]"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Control", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "plotLabel", ",", "None", ",", "\"\<PlotLabel\>\""}], 
                    "}"}], ",", "\[IndentingNewLine]", "\"\<\>\"", ",", 
                    RowBox[{"FieldSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"6", ",", "15"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "\[Infinity]"}], "}"}]}], "}"}]}]}], 
                    "}"}], "]"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Control", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "arrowSize", ",", "Automatic", ",", "\"\<ArrowSize\>\""}],
                     "}"}], ",", "0.", ",", "1."}], "}"}], "]"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Control", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "arrowPosition", ",", ".8", ",", 
                    "\"\<ArrowPosition\>\""}], "}"}], ",", "0.", ",", "1."}], 
                    "}"}], "]"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Control", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "edgeLabelPosition", ",", ".5", ",", 
                    "\"\<EdgeLabelPosition\>\""}], "}"}], ",", "0.", ",", 
                    "1."}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                  RowBox[{"Control", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "vertexSize", ",", ".1", ",", "\"\<VertexSize\>\""}], 
                    "}"}], ",", "0.", ",", "1."}], "}"}], "]"}]}], 
                 "\[IndentingNewLine]", "}"}]}]}], "}"}], "]"}]}]}], "}"}]}], 
        "]"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"ControlPlacement", "\[Rule]", "Left"}], ",", 
      RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.6404110625543795`*^9, 3.640411148487294*^9}, {
   3.640411286913212*^9, 3.6404113284275866`*^9}, {3.6404115721475267`*^9, 
   3.640411579972974*^9}, {3.640411614220933*^9, 3.640411627551696*^9}, 
   3.6404117942572303`*^9, 3.640412559138979*^9, {3.6404126993479986`*^9, 
   3.640412845486357*^9}, {3.6404129672623224`*^9, 3.6404129970730276`*^9}, {
   3.6404130633158164`*^9, 3.6404131768133082`*^9}, {3.640413343515843*^9, 
   3.640413399479044*^9}, {3.640413587687809*^9, 3.640413745601841*^9}, {
   3.640413832169792*^9, 3.6404138751442504`*^9}, {3.640414021313611*^9, 
   3.6404141920683775`*^9}, {3.640414238116011*^9, 3.6404142579991484`*^9}, {
   3.6404142882848806`*^9, 3.6404143571568203`*^9}, {3.6404144058776064`*^9, 
   3.6404144203674355`*^9}, {3.640414458113594*^9, 3.6404145089625025`*^9}, {
   3.640414577440419*^9, 3.640414622596002*^9}, {3.640414733096322*^9, 
   3.6404150435220776`*^9}, {3.6404150738848143`*^9, 
   3.6404152088785353`*^9}, {3.640415277465459*^9, 3.640415423034785*^9}, {
   3.6404156026370573`*^9, 3.640415624213291*^9}, {3.6404156544440203`*^9, 
   3.6404157325724893`*^9}, {3.640415812464059*^9, 3.6404158612308483`*^9}, {
   3.640415909029582*^9, 3.64041596983706*^9}, {3.640416101101568*^9, 
   3.6404161775889425`*^9}, {3.6404162394384804`*^9, 
   3.6404162636908674`*^9}, {3.640416301366022*^9, 3.6404163134537134`*^9}, {
   3.640416372734104*^9, 3.6404164762640257`*^9}, {3.640416707097229*^9, 
   3.6404167587291822`*^9}, {3.6404169481190147`*^9, 3.640416980966893*^9}, {
   3.6404170286486206`*^9, 3.6404170639856415`*^9}, {3.6404172537114935`*^9, 
   3.640417253783498*^9}, {3.6404173448567066`*^9, 3.6404173451217217`*^9}, {
   3.6404174088993697`*^9, 3.6404174089683733`*^9}, 3.6404174856687603`*^9, {
   3.6404188287375793`*^9, 3.6404188343979034`*^9}, {3.64041904798612*^9, 
   3.6404190484681473`*^9}, 3.640419085732279*^9, {3.64041914606773*^9, 
   3.64041914711279*^9}, {3.6404192034230103`*^9, 3.640419275287121*^9}, {
   3.6404194470799465`*^9, 3.6404194475809755`*^9}, {3.640419484702099*^9, 
   3.640419484876109*^9}, {3.640419587035952*^9, 3.6404195904871492`*^9}, {
   3.6404196887327685`*^9, 3.6404197079938707`*^9}, {3.64041974837218*^9, 
   3.640419759020789*^9}, {3.640419819146228*^9, 3.6404198258216095`*^9}, {
   3.640419886381074*^9, 3.640419887808155*^9}, {3.640420199871004*^9, 
   3.6404202013470883`*^9}, 3.640420238069189*^9, {3.6404203040289617`*^9, 
   3.640420320419899*^9}, {3.6404205952086163`*^9, 3.6404206227401905`*^9}, {
   3.640420657605185*^9, 3.6404206625604687`*^9}, {3.6404207108022275`*^9, 
   3.64042075489775*^9}, {3.640420877896785*^9, 3.6404209194301605`*^9}, {
   3.6404210251382065`*^9, 3.6404210401900673`*^9}, {3.640421129086152*^9, 
   3.6404212224024897`*^9}, {3.640421291697453*^9, 3.640421291874463*^9}, {
   3.640421769934807*^9, 3.640421801392606*^9}, {3.6404218408628635`*^9, 
   3.64042185094344*^9}, {3.6404219757635794`*^9, 3.6404220125846853`*^9}, {
   3.640422053806043*^9, 3.6404221448052483`*^9}, {3.6404221988233376`*^9, 
   3.64042220061244*^9}, {3.6404222484241743`*^9, 3.6404223070175257`*^9}, {
   3.6404223913453493`*^9, 3.6404224243742385`*^9}, 3.640425836506401*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FABuilder", "@", 
  RowBox[{"NFA", "@", "\"\<TM\>\""}]}]], "Input",
 CellChangeTimes->{{3.6404110625543795`*^9, 3.640411148487294*^9}, {
   3.640411286913212*^9, 3.6404113284275866`*^9}, {3.6404115721475267`*^9, 
   3.640411579972974*^9}, {3.640411614220933*^9, 3.640411627551696*^9}, 
   3.6404117942572303`*^9, 3.640412559138979*^9, {3.6404126993479986`*^9, 
   3.640412845486357*^9}, {3.6404129672623224`*^9, 3.6404129970730276`*^9}, {
   3.6404130633158164`*^9, 3.6404131768133082`*^9}, {3.640413343515843*^9, 
   3.640413399479044*^9}, {3.640413587687809*^9, 3.640413745601841*^9}, {
   3.640413832169792*^9, 3.6404138751442504`*^9}, {3.640414021313611*^9, 
   3.6404141920683775`*^9}, {3.640414238116011*^9, 3.6404142579991484`*^9}, {
   3.6404142882848806`*^9, 3.6404143571568203`*^9}, {3.6404144058776064`*^9, 
   3.6404144203674355`*^9}, {3.640414458113594*^9, 3.6404145089625025`*^9}, {
   3.640414577440419*^9, 3.640414622596002*^9}, {3.640414733096322*^9, 
   3.6404150435220776`*^9}, {3.6404150738848143`*^9, 
   3.6404152088785353`*^9}, {3.640415277465459*^9, 3.640415423034785*^9}, {
   3.6404156026370573`*^9, 3.640415624213291*^9}, {3.6404156544440203`*^9, 
   3.6404157325724893`*^9}, {3.640415812464059*^9, 3.6404158612308483`*^9}, {
   3.640415909029582*^9, 3.64041596983706*^9}, {3.640416101101568*^9, 
   3.6404161775889425`*^9}, {3.6404162394384804`*^9, 
   3.6404162636908674`*^9}, {3.640416301366022*^9, 3.6404163134537134`*^9}, {
   3.640416372734104*^9, 3.6404164762640257`*^9}, {3.640416707097229*^9, 
   3.6404167587291822`*^9}, {3.6404169481190147`*^9, 3.640416980966893*^9}, {
   3.6404170286486206`*^9, 3.6404170781954546`*^9}, 3.640418810650545*^9, {
   3.640419536984089*^9, 3.640419541950373*^9}, {3.6404224761211977`*^9, 
   3.640422480131428*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`arrowPosition$$ = 
    0.8, $CellContext`arrowSize$$ = 
    Automatic, $CellContext`edgeLabelPosition$$ = 0.5, $CellContext`F$$ = {1, 
    2, 4}, $CellContext`FSel$$ = {
    True, True, False, True, False, 
     False}, $CellContext`headingsQ\[CapitalSigma]$$ = 
    False, $CellContext`imageSize$$ = Medium, $CellContext`out$$ = {
    "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, \
$CellContext`outForm$$ = 
    Column, $CellContext`plot$$ = $CellContext`NFAPlot, \
$CellContext`plotLabel$$ = None, $CellContext`Q$$ = {0, 1, 2, 3, 4, 
    5}, $CellContext`s$$ = 3, $CellContext`sSel$$ = {
    False, False, True, False, False, False}, $CellContext`type$$ = 
    2, $CellContext`vertexSize$$ = 
    0.1, $CellContext`\[Delta]$$ = {{{3}, {}, {}}, {{3}, {}, {}}, {{}, {5, 
      4}, {6}}, {{}, {}, {}}, {{}, {}, {1}}, {{}, {
      2}, {}}}, $CellContext`\[Delta]Elements$$ = 
    "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", \
$CellContext`\[Delta]Output$$ = MatrixForm, $CellContext`\[CapitalSigma]$$ = {
    "", "0", "1"}, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`Q$$], {0, 1, 2, 3, 4, 5}}}, {{
       Hold[$CellContext`\[CapitalSigma]$$], {"", "0", "1"}}}, {{
       Hold[$CellContext`\[Delta]$$], {{{3}, {}, {}}, {{3}, {}, {}}, {{}, {5, 
         4}, {6}}, {{}, {}, {}}, {{}, {}, {1}}, {{}, {2}, {}}}}}, {{
       Hold[$CellContext`sSel$$], {
       False, False, True, False, False, False}}}, {{
       Hold[$CellContext`FSel$$], {True, True, False, True, False, False}}}, {{
       Hold[$CellContext`s$$], 3}}, {{
       Hold[$CellContext`F$$], {1, 2, 4}}}, {{
       Hold[$CellContext`type$$], 2}}, {
      Hold[
       OpenerView[{
        "\:0412\:0438\:0437\:043d\:0430\:0447\:0435\:043d\:043d\:044f", 
         Dynamic[
          Grid[
           ArrayFlatten[{{
              Transpose[{
                Join[{
                  SetterBar[
                   Dynamic[$CellContext`type$$], 
                   
                   Thread[{1, 2} -> {
                    "\:0414\:0421\:0410", "\:041d\:0421\:0410"}], Enabled -> 
                   False], "s"}, 
                 Array[Toggler[
                   Dynamic[
                    Part[$CellContext`sSel$$, #], 
                    Function[$CellContext`v$, Part[$CellContext`sSel$$, 
                    Part[
                    FirstPosition[$CellContext`sSel$$, True], 1]] = False; 
                    Part[$CellContext`sSel$$, #] = 
                    True; $CellContext`s$$ = #]], 
                   
                   Thread[{True, False} -> 
                    Map[Style[#, Bold]& , {"\[Rule]", " "}]]]& , 
                  Length[$CellContext`Q$$]], {Null}]}], 
              Transpose[{
                Join[{$CellContext`\[SpanFromLeft], "F"}, 
                 Array[Toggler[
                   Dynamic[
                    Part[$CellContext`FSel$$, #], 
                    
                    Function[$CellContext`v$, 
                    Part[$CellContext`FSel$$, #] = $CellContext`v$; \
$CellContext`F$$ = Pick[
                    Range[
                    Length[$CellContext`Q$$]], $CellContext`FSel$$]]], 
                   
                   Thread[{True, False} -> 
                    Map[Style[#, 15]& , {"*", " "}]]]& , 
                  Length[$CellContext`Q$$]], {Null}]}], 
              
              ArrayFlatten[{{{{$CellContext`\[SpanFromLeft], 
                   "\[CapitalSigma]"}, {"Q", "\[Delta]"}}, 
                 Transpose[
                  Prepend[{"\[CurlyEpsilon]", Null}][
                   Array[{
                    Function[Null, 
                    InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                    HoldAll}][
                    Dynamic[
                    Part[$CellContext`\[CapitalSigma]$$, #], 
                    Function[$CellContext`v$, 
                    If[
                    FreeQ[
                    
                    ReplacePart[$CellContext`\[CapitalSigma]$$, # -> 
                    ""], $CellContext`v$], 
                    Part[$CellContext`\[CapitalSigma]$$, #] = $CellContext`v$, 
                    Beep[]]]]], 
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["-", 
                    Catch[
                    If[
                    Length[$CellContext`\[CapitalSigma]$$] > 
                    1, {$CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$} = {
                    Drop[$CellContext`\[CapitalSigma]$$, {#}], 
                    Drop[$CellContext`\[Delta]$$, {}, {#}]}, 
                    Throw[
                    Beep[]]]]]}& , Length[$CellContext`\[CapitalSigma]$$] - 1,
                     2]]], {{
                   Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["+", 
                    
                    Catch[{$CellContext`\[CapitalSigma]$$, $CellContext`\
\[Delta]$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`\[CapitalSigma]$$, $CellContext`\
\[Placeholder] :> Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    ArrayFlatten[{{$CellContext`\[Delta]$$, {}}}]}]]}, {
                  Null}}}, {
                 MapAt[Null& , {$CellContext`s$$, 2}][
                  Array[
                   Function[$CellContext`qi$, {
                    Function[Null, 
                    InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                    HoldAll}][
                    Dynamic[
                    Part[$CellContext`Q$$, $CellContext`qi$], 
                    Function[$CellContext`v$, 
                    
                    Catch[{$CellContext`s$$, $CellContext`F$$} = 
                    ReplaceAll[{$CellContext`s$$, $CellContext`F$$}, 
                    Part[$CellContext`Q$$, $CellContext`qi$] -> If[
                    FreeQ[$CellContext`Q$$, $CellContext`v$], 
                    Part[$CellContext`Q$$, $CellContext`qi$] = \
$CellContext`v$, 
                    Throw[
                    Beep[]]]]]]]], 
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["-", 
                    Catch[
                    If[
                    Length[$CellContext`Q$$] > 
                    1, $CellContext`Q$$ = 
                    Drop[$CellContext`Q$$, {$CellContext`qi$}]; $CellContext`\
\[Delta]$$ = ReplaceAll[
                    DeleteCases[
                    
                    Drop[$CellContext`\[Delta]$$, {$CellContext`qi$}, {}], \
$CellContext`qi$, {3}], Pattern[$CellContext`q$, 
                    Blank[]] :> 
                    Condition[$CellContext`q$ - 
                    1, $CellContext`q$ > $CellContext`qi$]]; \
$CellContext`sSel$$ = 
                    Drop[$CellContext`sSel$$, {$CellContext`qi$}]; \
$CellContext`FSel$$ = 
                    Drop[$CellContext`FSel$$, {$CellContext`qi$}]; \
$CellContext`s$$ = Part[
                    FirstPosition[$CellContext`sSel$$, True], 
                    1]; $CellContext`F$$ = Pick[
                    Range[
                    Length[$CellContext`Q$$]], $CellContext`FSel$$], 
                    Throw[
                    Beep[]]]]]}], 
                   Length[$CellContext`Q$$]]], 
                 Outer[Function[Null, 
                   InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                   HoldAll}][
                   Dynamic[
                    Part[$CellContext`Q$$, 
                    Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]]], 
                    Function[$CellContext`v$, 
                    Catch[
                    If[
                    Head[$CellContext`v$] === List, 
                    Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]] = Map[Replace[
                    Part[
                    FirstPosition[$CellContext`Q$$, #], 1], "NotFound" :> 
                    Throw[
                    Beep[]]]& , $CellContext`v$], 
                    Throw[
                    Beep[]]]]]]]& , 
                  Apply[Sequence, 
                   Map[Range, 
                    Dimensions[$CellContext`\[Delta]$$]]]], 
                 Transpose[{
                   ConstantArray[Null, 
                    Length[$CellContext`Q$$]]}]}, {{{
                   Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["+", 
                    
                    Catch[{$CellContext`Q$$, $CellContext`\[Delta]$$, \
$CellContext`sSel$$, $CellContext`FSel$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`Q$$, $CellContext`\[Placeholder] :> 
                    Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    Append[$CellContext`\[Delta]$$, 
                    ConstantArray[{}, 
                    Length[$CellContext`\[CapitalSigma]$$]]], 
                    Append[$CellContext`sSel$$, False], 
                    Append[$CellContext`FSel$$, False]}]], Null}}, {
                  ConstantArray[Null, 
                   Length[$CellContext`\[CapitalSigma]$$]]}, Null}}]}}], 
           Alignment -> {Null, Null, {{1, 1} -> {Center, Center}}}, 
           ReplaceAll[
           Dividers -> {{
              False, True, True, True, True, {False}, True, False}, {
              False, True, True, {False}, True, False}}, True -> Gray]]]}, 
        True]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`out$$], {
       "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, 
       "\:0412\:0438\:0432\:0456\:0434 \:0414\:0421\:0410"}, {
      "\:0422\:0430\:0431\:043b\:0438\:0446\:044f", 
       "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}}, {{
       Hold[$CellContext`outForm$$], Column, 
       "\:0424\:043e\:0440\:043c\:0430\:0442"}, {Column, Row, InputForm}}, {{
       Hold[$CellContext`\[Delta]Elements$$], 
       "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
       "\:0415\:043b\:0435\:043c\:0435\:043d\:0442\:0438"}, {
      "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
       "\:0421\:0442\:0430\:043d\:0438"}}, {{
       Hold[$CellContext`\[Delta]Output$$], MatrixForm, 
       "\:0424\:043e\:0440\:043c\:0430 \
\:0432\:0438\:0432\:043e\:0434\:0443"}, {MatrixForm, TableForm}}, {{
       Hold[$CellContext`headingsQ\[CapitalSigma]$$], False, 
       "\:0417\:0430\:0433\:043e\:043b\:043e\:0432\:043a\:0438"}, {
      True, False}}, {{
       Hold[$CellContext`plot$$], $CellContext`NFAPlot, 
       "\:0424\:0443\:043d\:043a\:0446\:0456\:044f"}, {$CellContext`NFAPlot, \
$CellContext`NFALayeredPlot}}, {{
       Hold[$CellContext`imageSize$$], Medium, "ImageSize"}, {
      Tiny, Small, Medium, Large, Full, Automatic}}, {{
       Hold[$CellContext`plotLabel$$], None, "PlotLabel"}, ""}, {{
       Hold[$CellContext`arrowSize$$], Automatic, "ArrowSize"}, 0., 1.}, {{
       Hold[$CellContext`arrowPosition$$], 0.8, "ArrowPosition"}, 0., 1.}, {{
       Hold[$CellContext`edgeLabelPosition$$], 0.5, "EdgeLabelPosition"}, 0., 
      1.}, {{
       Hold[$CellContext`vertexSize$$], 0.1, "VertexSize"}, 0., 1.}, {
      Hold[
       Dynamic[
        Column[
         ReplaceAll[$CellContext`out$$, {
          "\:0422\:0430\:0431\:043b\:0438\:0446\:044f" -> 
           OpenerView[{
             "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0442\:0430\:0431\:043b\:0438\:0446\:0456 \:043f\:0435\:0440\
\:0435\:0445\:043e\:0434\:0456\:0432", 
              Column[{
                Manipulate`Place[1], 
                Manipulate`Place[2], 
                Manipulate`Place[3]}]}], 
           "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430" -> 
           OpenerView[{
             "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0434\:0456\:0430\:0433\:0440\:0430\:043c\:0438 \:043f\:0435\
\:0440\:0435\:0445\:043e\:0434\:0456\:0432", 
              Column[{
                Manipulate`Place[4], 
                Manipulate`Place[5], 
                Manipulate`Place[6], 
                Manipulate`Place[7], 
                Manipulate`Place[8], 
                Manipulate`Place[9], 
                Manipulate`Place[10]}]}]}]]]], 
      Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = {
    360., {151., 158.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False, $CellContext`out$140619$$ = 
    False, $CellContext`outForm$140620$$ = 
    0, $CellContext`\[Delta]Elements$140621$$ = 
    False, $CellContext`\[Delta]Output$140622$$ = 
    False, $CellContext`headingsQ\[CapitalSigma]$140623$$ = 
    False, $CellContext`plot$140624$$ = 
    False, $CellContext`imageSize$140625$$ = 
    0, $CellContext`arrowSize$140626$$ = 
    0, $CellContext`arrowPosition$140627$$ = 
    0, $CellContext`edgeLabelPosition$140628$$ = 
    0, $CellContext`vertexSize$140629$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     2, StandardForm, 
      "Variables" :> {$CellContext`arrowPosition$$ = 
        0.8, $CellContext`arrowSize$$ = 
        Automatic, $CellContext`edgeLabelPosition$$ = 
        0.5, $CellContext`F$$ = {1, 2, 4}, $CellContext`FSel$$ = {
         True, True, False, True, False, 
          False}, $CellContext`headingsQ\[CapitalSigma]$$ = 
        False, $CellContext`imageSize$$ = 
        Medium, $CellContext`out$$ = {
         "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, \
$CellContext`outForm$$ = 
        Column, $CellContext`plot$$ = $CellContext`NFAPlot, \
$CellContext`plotLabel$$ = 
        None, $CellContext`Q$$ = {0, 1, 2, 3, 4, 5}, $CellContext`s$$ = 
        3, $CellContext`sSel$$ = {
         False, False, True, False, False, False}, $CellContext`type$$ = 
        2, $CellContext`vertexSize$$ = 
        0.1, $CellContext`\[Delta]$$ = {{{3}, {}, {}}, {{3}, {}, {}}, {{}, {5,
            4}, {6}}, {{}, {}, {}}, {{}, {}, {1}}, {{}, {
           2}, {}}}, $CellContext`\[Delta]Elements$$ = 
        "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", \
$CellContext`\[Delta]Output$$ = 
        MatrixForm, $CellContext`\[CapitalSigma]$$ = {"", "0", "1"}}, 
      "ControllerVariables" :> {
        Hold[$CellContext`out$$, $CellContext`out$140619$$, False], 
        Hold[$CellContext`outForm$$, $CellContext`outForm$140620$$, 0], 
        Hold[$CellContext`\[Delta]Elements$$, \
$CellContext`\[Delta]Elements$140621$$, False], 
        Hold[$CellContext`\[Delta]Output$$, \
$CellContext`\[Delta]Output$140622$$, False], 
        Hold[$CellContext`headingsQ\[CapitalSigma]$$, $CellContext`headingsQ\
\[CapitalSigma]$140623$$, False], 
        Hold[$CellContext`plot$$, $CellContext`plot$140624$$, False], 
        Hold[$CellContext`imageSize$$, $CellContext`imageSize$140625$$, 0], 
        Hold[$CellContext`arrowSize$$, $CellContext`arrowSize$140626$$, 0], 
        Hold[$CellContext`arrowPosition$$, \
$CellContext`arrowPosition$140627$$, 0], 
        Hold[$CellContext`edgeLabelPosition$$, \
$CellContext`edgeLabelPosition$140628$$, 0], 
        Hold[$CellContext`vertexSize$$, $CellContext`vertexSize$140629$$, 0]},
       "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      ReplaceAll[$CellContext`outForm$$, {Column -> (Column[#, Center]& )}][
        ReplaceAll[$CellContext`out$$, {
         "\:0422\:0430\:0431\:043b\:0438\:0446\:044f" :> 
          Replace[$CellContext`\[Delta]Output$$, Blank[] :> 
            Condition[$CellContext`\[Delta]Output$$[#, 
               TableHeadings -> {$CellContext`Q$$, $CellContext`\
\[CapitalSigma]$$}]& , $CellContext`headingsQ\[CapitalSigma]$$]][
            ReplaceAll[$CellContext`\[Delta]Elements$$, {
             "\:0406\:043d\:0434\:0435\:043a\:0441\:0438" -> Identity, 
              "\:0421\:0442\:0430\:043d\:0438" -> 
              ReplaceAll[Pattern[$CellContext`q$, 
                  Blank[Integer]] :> 
                Part[$CellContext`Q$$, $CellContext`q$]]}][$CellContext`\
\[Delta]$$]], 
          "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430" :> \
$CellContext`plot$$[{$CellContext`Q$$, $CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$, $CellContext`s$$, $CellContext`F$$}, 
            ImageSize -> $CellContext`imageSize$$, 
            PlotLabel -> $CellContext`plotLabel$$, $CellContext`ArrowSize -> \
$CellContext`arrowSize$$, $CellContext`ArrowPosition -> \
$CellContext`arrowPosition$$, $CellContext`EdgeLabelPosition -> \
$CellContext`edgeLabelPosition$$, VertexSize -> $CellContext`vertexSize$$]}]],
       "Specifications" :> {{{$CellContext`Q$$, {0, 1, 2, 3, 4, 5}}, 
         ControlType -> 
         None}, {{$CellContext`\[CapitalSigma]$$, {"", "0", "1"}}, 
         ControlType -> 
         None}, {{$CellContext`\[Delta]$$, {{{3}, {}, {}}, {{
            3}, {}, {}}, {{}, {5, 4}, {6}}, {{}, {}, {}}, {{}, {}, {
            1}}, {{}, {2}, {}}}}, ControlType -> 
         None}, {{$CellContext`sSel$$, {
          False, False, True, False, False, False}}, ControlType -> 
         None}, {{$CellContext`FSel$$, {
          True, True, False, True, False, False}}, ControlType -> 
         None}, {{$CellContext`s$$, 3}, ControlType -> 
         None}, {{$CellContext`F$$, {1, 2, 4}}, ControlType -> 
         None}, {{$CellContext`type$$, 2}, ControlType -> None}, 
        OpenerView[{
         "\:0412\:0438\:0437\:043d\:0430\:0447\:0435\:043d\:043d\:044f", 
          Dynamic[
           Grid[
            ArrayFlatten[{{
               Transpose[{
                 Join[{
                   SetterBar[
                    Dynamic[$CellContext`type$$], 
                    
                    Thread[{1, 2} -> {
                    "\:0414\:0421\:0410", "\:041d\:0421\:0410"}], Enabled -> 
                    False], "s"}, 
                  Array[Toggler[
                    Dynamic[
                    Part[$CellContext`sSel$$, #], 
                    Function[$CellContext`v$, Part[$CellContext`sSel$$, 
                    Part[
                    FirstPosition[$CellContext`sSel$$, True], 1]] = False; 
                    Part[$CellContext`sSel$$, #] = 
                    True; $CellContext`s$$ = #]], 
                    
                    Thread[{True, False} -> 
                    Map[Style[#, Bold]& , {"\[Rule]", " "}]]]& , 
                   Length[$CellContext`Q$$]], {Null}]}], 
               Transpose[{
                 Join[{$CellContext`\[SpanFromLeft], "F"}, 
                  Array[Toggler[
                    Dynamic[
                    Part[$CellContext`FSel$$, #], 
                    
                    Function[$CellContext`v$, 
                    Part[$CellContext`FSel$$, #] = $CellContext`v$; \
$CellContext`F$$ = Pick[
                    Range[
                    Length[$CellContext`Q$$]], $CellContext`FSel$$]]], 
                    
                    Thread[{True, False} -> 
                    Map[Style[#, 15]& , {"*", " "}]]]& , 
                   Length[$CellContext`Q$$]], {Null}]}], 
               
               ArrayFlatten[{{{{$CellContext`\[SpanFromLeft], 
                    "\[CapitalSigma]"}, {"Q", "\[Delta]"}}, 
                  Transpose[
                   Prepend[{"\[CurlyEpsilon]", Null}][
                    Array[{
                    Function[Null, 
                    InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                    HoldAll}][
                    Dynamic[
                    Part[$CellContext`\[CapitalSigma]$$, #], 
                    Function[$CellContext`v$, 
                    If[
                    FreeQ[
                    
                    ReplacePart[$CellContext`\[CapitalSigma]$$, # -> 
                    ""], $CellContext`v$], 
                    Part[$CellContext`\[CapitalSigma]$$, #] = $CellContext`v$, 
                    Beep[]]]]], 
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["-", 
                    Catch[
                    If[
                    Length[$CellContext`\[CapitalSigma]$$] > 
                    1, {$CellContext`\[CapitalSigma]$$, \
$CellContext`\[Delta]$$} = {
                    Drop[$CellContext`\[CapitalSigma]$$, {#}], 
                    Drop[$CellContext`\[Delta]$$, {}, {#}]}, 
                    Throw[
                    Beep[]]]]]}& , Length[$CellContext`\[CapitalSigma]$$] - 1,
                     2]]], {{
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["+", 
                    
                    Catch[{$CellContext`\[CapitalSigma]$$, $CellContext`\
\[Delta]$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`\[CapitalSigma]$$, $CellContext`\
\[Placeholder] :> Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    ArrayFlatten[{{$CellContext`\[Delta]$$, {}}}]}]]}, {
                   Null}}}, {
                  MapAt[Null& , {$CellContext`s$$, 2}][
                   Array[
                    Function[$CellContext`qi$, {
                    Function[Null, 
                    InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                    HoldAll}][
                    Dynamic[
                    Part[$CellContext`Q$$, $CellContext`qi$], 
                    Function[$CellContext`v$, 
                    
                    Catch[{$CellContext`s$$, $CellContext`F$$} = 
                    ReplaceAll[{$CellContext`s$$, $CellContext`F$$}, 
                    Part[$CellContext`Q$$, $CellContext`qi$] -> If[
                    FreeQ[$CellContext`Q$$, $CellContext`v$], 
                    Part[$CellContext`Q$$, $CellContext`qi$] = \
$CellContext`v$, 
                    Throw[
                    Beep[]]]]]]]], 
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["-", 
                    Catch[
                    If[
                    Length[$CellContext`Q$$] > 
                    1, $CellContext`Q$$ = 
                    Drop[$CellContext`Q$$, {$CellContext`qi$}]; $CellContext`\
\[Delta]$$ = ReplaceAll[
                    DeleteCases[
                    
                    Drop[$CellContext`\[Delta]$$, {$CellContext`qi$}, {}], \
$CellContext`qi$, {3}], Pattern[$CellContext`q$, 
                    Blank[]] :> 
                    Condition[$CellContext`q$ - 
                    1, $CellContext`q$ > $CellContext`qi$]]; \
$CellContext`sSel$$ = 
                    Drop[$CellContext`sSel$$, {$CellContext`qi$}]; \
$CellContext`FSel$$ = 
                    Drop[$CellContext`FSel$$, {$CellContext`qi$}]; \
$CellContext`s$$ = Part[
                    FirstPosition[$CellContext`sSel$$, True], 
                    1]; $CellContext`F$$ = Pick[
                    Range[
                    Length[$CellContext`Q$$]], $CellContext`FSel$$], 
                    Throw[
                    Beep[]]]]]}], 
                    Length[$CellContext`Q$$]]], 
                  Outer[Function[Null, 
                    InputField[
                    SlotSequence[1], FieldSize -> {{1, 10}, {1, 10}}], {
                    HoldAll}][
                    Dynamic[
                    Part[$CellContext`Q$$, 
                    Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]]], 
                    Function[$CellContext`v$, 
                    Catch[
                    If[
                    Head[$CellContext`v$] === List, 
                    Part[$CellContext`\[Delta]$$, 
                    SlotSequence[1]] = Map[Replace[
                    Part[
                    FirstPosition[$CellContext`Q$$, #], 1], "NotFound" :> 
                    Throw[
                    Beep[]]]& , $CellContext`v$], 
                    Throw[
                    Beep[]]]]]]]& , 
                   Apply[Sequence, 
                    Map[Range, 
                    Dimensions[$CellContext`\[Delta]$$]]]], 
                  Transpose[{
                    ConstantArray[Null, 
                    Length[$CellContext`Q$$]]}]}, {{{
                    Function[Null, 
                    Button[
                    SlotSequence[1], ImageSize -> {16, 16}, Appearance -> 
                    "Palette", ContentPadding -> False], {HoldAll}]["+", 
                    
                    Catch[{$CellContext`Q$$, $CellContext`\[Delta]$$, \
$CellContext`sSel$$, $CellContext`FSel$$} = {
                    Append[
                    
                    ReplaceAll[$CellContext`Q$$, $CellContext`\[Placeholder] :> 
                    Throw[
                    Beep[]]], $CellContext`\[Placeholder]], 
                    Append[$CellContext`\[Delta]$$, 
                    ConstantArray[{}, 
                    Length[$CellContext`\[CapitalSigma]$$]]], 
                    Append[$CellContext`sSel$$, False], 
                    Append[$CellContext`FSel$$, False]}]], Null}}, {
                   ConstantArray[Null, 
                    Length[$CellContext`\[CapitalSigma]$$]]}, Null}}]}}], 
            Alignment -> {Null, Null, {{1, 1} -> {Center, Center}}}, 
            ReplaceAll[
            Dividers -> {{
               False, True, True, True, True, {False}, True, False}, {
               False, True, True, {False}, True, False}}, True -> Gray]]]}, 
         True], Delimiter, {{$CellContext`out$$, {
          "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, 
          "\:0412\:0438\:0432\:0456\:0434 \:0414\:0421\:0410"}, {
         "\:0422\:0430\:0431\:043b\:0438\:0446\:044f", 
          "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430"}, ControlType -> 
         TogglerBar}, {{$CellContext`outForm$$, Column, 
          "\:0424\:043e\:0440\:043c\:0430\:0442"}, {
         Column, Row, InputForm}}, {{$CellContext`\[Delta]Elements$$, 
          "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
          "\:0415\:043b\:0435\:043c\:0435\:043d\:0442\:0438"}, {
         "\:0406\:043d\:0434\:0435\:043a\:0441\:0438", 
          "\:0421\:0442\:0430\:043d\:0438"}, ControlPlacement -> 
         1}, {{$CellContext`\[Delta]Output$$, MatrixForm, 
          "\:0424\:043e\:0440\:043c\:0430 \
\:0432\:0438\:0432\:043e\:0434\:0443"}, {MatrixForm, TableForm}, 
         ControlPlacement -> 
         2}, {{$CellContext`headingsQ\[CapitalSigma]$$, False, 
          "\:0417\:0430\:0433\:043e\:043b\:043e\:0432\:043a\:0438"}, {
         True, False}, ControlPlacement -> 
         3}, {{$CellContext`plot$$, $CellContext`NFAPlot, 
          "\:0424\:0443\:043d\:043a\:0446\:0456\:044f"}, \
{$CellContext`NFAPlot, $CellContext`NFALayeredPlot}, ControlPlacement -> 
         4}, {{$CellContext`imageSize$$, Medium, "ImageSize"}, {
         Tiny, Small, Medium, Large, Full, Automatic}, ControlPlacement -> 
         5}, {{$CellContext`plotLabel$$, None, "PlotLabel"}, "", 
         FieldSize -> {{6, 15}, {1, 
            DirectedInfinity[1]}}, ControlPlacement -> 
         6}, {{$CellContext`arrowSize$$, Automatic, "ArrowSize"}, 0., 1., 
         ControlPlacement -> 
         7}, {{$CellContext`arrowPosition$$, 0.8, "ArrowPosition"}, 0., 1., 
         ControlPlacement -> 
         8}, {{$CellContext`edgeLabelPosition$$, 0.5, "EdgeLabelPosition"}, 
         0., 1., ControlPlacement -> 
         9}, {{$CellContext`vertexSize$$, 0.1, "VertexSize"}, 0., 1., 
         ControlPlacement -> 10}, 
        Dynamic[
         Column[
          
          ReplaceAll[$CellContext`out$$, {
           "\:0422\:0430\:0431\:043b\:0438\:0446\:044f" -> 
            OpenerView[{
              "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0442\:0430\:0431\:043b\:0438\:0446\:0456 \:043f\:0435\:0440\
\:0435\:0445\:043e\:0434\:0456\:0432", 
               Column[{
                 Manipulate`Place[1], 
                 Manipulate`Place[2], 
                 Manipulate`Place[3]}]}], 
            "\:0414\:0456\:0430\:0433\:0440\:0430\:043c\:0430" -> 
            OpenerView[{
              "\:041d\:0430\:043b\:0430\:0448\:0442\:0443\:0432\:0430\:043d\
\:043d\:044f  \:0434\:0456\:0430\:0433\:0440\:0430\:043c\:0438 \:043f\:0435\
\:0440\:0435\:0445\:043e\:0434\:0456\:0432", 
               Column[{
                 Manipulate`Place[4], 
                 Manipulate`Place[5], 
                 Manipulate`Place[6], 
                 Manipulate`Place[7], 
                 Manipulate`Place[8], 
                 Manipulate`Place[9], 
                 Manipulate`Place[10]}]}]}]]]}, 
      "Options" :> {ControlPlacement -> Left}, "DefaultOptions" :> {}],
     ImageSizeCache->{629., {181., 188.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({
      Attributes[$CellContext`qi$] = {Temporary}, 
       Attributes[$CellContext`v$] = {Temporary}, 
       Attributes[$CellContext`q$] = {Temporary}, $CellContext`NFAPlot[
         Pattern[$CellContext`M, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          
          OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`NFA\[Delta]Edges, Identity, 
         GraphPlot, $CellContext`opts], $CellContext`DFACustomPlot[{
          Pattern[$CellContext`Q, 
           Blank[]], 
          Pattern[$CellContext`\[CapitalSigma], 
           Blank[]], 
          Pattern[$CellContext`\[Delta], 
           Blank[]], 
          Pattern[$CellContext`s, 
           Blank[]], 
          Pattern[$CellContext`F, 
           Blank[]]}, 
         Pattern[$CellContext`Edges, 
          Blank[]], 
         Pattern[$CellContext`PrePlot, 
          Blank[]], 
         Pattern[Plot, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          OptionsPattern[]]] := 
       With[{$CellContext`Qf = 
          If[Null =!= $CellContext`Q, Part[$CellContext`Q, #]& , 
            Identity], $CellContext`\[CapitalSigma]f = 
          If[Null =!= $CellContext`\[CapitalSigma], 
            Part[$CellContext`\[CapitalSigma], #]& , Characters[
             FromCharacterCode[96 + #]]& ]}, 
         Apply[Plot, 
          $CellContext`PrePlot[{
            If[
             
             OptionValue[$CellContext`EdgeCollapsing], \
$CellContext`DFACollapseEdges, Identity][
             $CellContext`Edges[$CellContext`\[Delta]]], 
            Apply[Sequence, 
             FilterRules[
              FilterRules[{$CellContext`opts}, 
               Options[Plot]], 
              Except[{VertexRenderingFunction, EdgeRenderingFunction}]]], 
            VertexRenderingFunction -> Replace[
              OptionValue[VertexRenderingFunction], 
              Automatic -> ($CellContext`DFARenderState[#2, 
                Replace[$CellContext`s, Null -> 1], $CellContext`F, #, 
                VertexLabeling -> $CellContext`Qf, 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderState]]]]& )], 
            EdgeRenderingFunction -> Replace[
              OptionValue[EdgeRenderingFunction], 
              Automatic -> ($CellContext`DFARenderTransition[#3, #, 
                EdgeLabeling -> If[Null =!= $CellContext`\[CapitalSigma], 
                  Function[$CellContext`l, 
                   If[
                   Length[$CellContext`l] == 
                    Length[$CellContext`\[CapitalSigma]], "\[CapitalSigma]", 
                    If[
                    Length[$CellContext`l] > 
                    Length[$CellContext`\[CapitalSigma]]/2., 
                    Row[{"\[CapitalSigma]", "\[Backslash]", 
                    $CellContext`\[CapitalSigma]f[
                    Complement[
                    Range[
                    Length[$CellContext`\[CapitalSigma]]], $CellContext`l]]}], 
                    $CellContext`\[CapitalSigma]f[$CellContext`l]]]], 
                  FromCharacterCode[# + 96]& ], 
                Apply[Sequence, 
                 FilterRules[{$CellContext`opts}, 
                  Options[$CellContext`DFARenderTransition]]]]& )]}]]], 
       Options[$CellContext`DFACustomPlot] = {
        AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> False, 
         AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, 
         Background -> None, BaselinePosition -> Automatic, BaseStyle -> {}, 
         ColorOutput -> Automatic, ContentSelectable -> Automatic, 
         CoordinatesToolOptions -> Automatic, DataRange -> Automatic, 
         DirectedEdges -> False, DisplayFunction :> $DisplayFunction, 
         EdgeLabeling -> True, EdgeRenderingFunction -> Automatic, 
         Epilog -> {}, FormatType :> TraditionalForm, Frame -> False, 
         FrameLabel -> None, FrameStyle -> {}, FrameTicks -> None, 
         FrameTicksStyle -> {}, GridLines -> None, GridLinesStyle -> {}, 
         ImageMargins -> 0., ImagePadding -> All, ImageSize -> Automatic, 
         ImageSizeRaw -> Automatic, LabelStyle -> {}, Method -> Automatic, 
         MultiedgeStyle -> Automatic, PackingMethod -> Automatic, PlotLabel -> 
         None, PlotRange -> All, PlotRangeClipping -> False, PlotRangePadding -> 
         Automatic, PlotRegion -> Automatic, PlotStyle -> Automatic, 
         PreserveImageOptions -> Automatic, Prolog -> {}, RotateLabel -> True,
          SelfLoopStyle -> Automatic, Ticks -> Automatic, TicksStyle -> {}, 
         VertexCoordinateRules -> Automatic, VertexRenderingFunction -> 
         Automatic, $CellContext`EdgeCollapsing -> 
         True, $CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`FinalColor -> GrayLevel[0.85], 
         VertexSize -> 0.1, VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}, $CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFACollapseEdges[
         Pattern[$CellContext`e, 
          Blank[]]] := ReplaceRepeated[$CellContext`e, {
           Pattern[$CellContext`h, 
            BlankNullSequence[]], {
            Pattern[$CellContext`x, 
             Blank[]], 
            Pattern[$CellContext`l1, 
             Blank[]]}, 
           Pattern[$CellContext`u, 
            BlankNullSequence[]], {
            Pattern[$CellContext`x, 
             Blank[]], 
            Pattern[$CellContext`l2, 
             Blank[]]}, 
           Pattern[$CellContext`t, 
            BlankNullSequence[]]} :> {$CellContext`h, {$CellContext`x, 
            
            Flatten[{$CellContext`l1, $CellContext`l2}]}, $CellContext`u, \
$CellContext`t}], $CellContext`t = {
        False, False, False}, $CellContext`DFARenderState[
         Pattern[$CellContext`q, 
          Blank[]], 
         Pattern[$CellContext`s, 
          Blank[]], 
         Pattern[$CellContext`F, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {
         If[$CellContext`q === $CellContext`s, 
          OptionValue[$CellContext`StartColor], 
          OptionValue[$CellContext`FinalColor]], 
         EdgeForm[Black], 
         Disk[$CellContext`p, 
          OptionValue[VertexSize]], 
         If[
          MemberQ[$CellContext`F, $CellContext`q], 
          Disk[$CellContext`p, 0.7 OptionValue[VertexSize]]], 
         Text[
          Style[
           Replace[
            OptionValue[VertexLabeling], Automatic -> 
            Identity][$CellContext`q], 
           Apply[Sequence, 
            OptionValue[VertexLabelStyle]]], $CellContext`p]}, 
       Options[$CellContext`DFARenderState] = {$CellContext`StartColor -> 
         RGBColor[1, 1, 0.85], $CellContext`FinalColor -> GrayLevel[0.85], 
         VertexSize -> 0.1, VertexLabeling -> Automatic, VertexLabelStyle -> {
           GrayLevel[0], 12}}, $CellContext`DFARenderTransition[
         Pattern[$CellContext`t, 
          Blank[]], 
         Pattern[$CellContext`p, 
          Blank[]], 
         OptionsPattern[]] := {Black, 
         Arrowheads[{{
            OptionValue[$CellContext`ArrowSize], 
            OptionValue[$CellContext`ArrowPosition]}}], 
         Arrow[
          
          BSplineCurve[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1]], 
         Text[
          Style[
           Replace[
            OptionValue[EdgeLabeling], Automatic -> Identity][$CellContext`t], 
           Apply[Sequence, 
            OptionValue[EdgeLabelStyle]]], 
          
          BSplineFunction[$CellContext`p, SplineDegree -> 
           Length[$CellContext`p] - 1][
           OptionValue[$CellContext`EdgeLabelPosition]], Background -> 
          White]}, 
       Options[$CellContext`DFARenderTransition] = {$CellContext`ArrowSize -> 
         Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
         Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
           GrayLevel[0], 12}}, $DisplayFunction = 
       Identity, $CellContext`NFA\[Delta]Edges[
         Pattern[$CellContext`\[Delta], 
          Blank[]]] := With[{$CellContext`rl = Map[Range, 
            Dimensions[$CellContext`\[Delta]]]}, 
         Flatten[
          Inner[
           Composition[Thread, Reverse, List], 
           Part[$CellContext`rl, 2], 
           Inner[
            Composition[Thread, Rule], 
            Part[$CellContext`rl, 1], $CellContext`\[Delta], 
            Composition[Flatten, List]], List], 
          1]], $CellContext`NFALayeredPlot[
         Pattern[$CellContext`M, 
          Blank[]], 
         Optional[
          Pattern[$CellContext`pos, 
           Blank[]], Left], 
         Pattern[$CellContext`opts, 
          
          OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`NFA\[Delta]Edges, 
         Insert[$CellContext`pos, 2], LayeredGraphPlot, $CellContext`opts]}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.640419917803871*^9, 3.6404199255113115`*^9}, 
   3.6404199683467617`*^9, {3.640420013408339*^9, 3.6404200297652745`*^9}, 
   3.640420205032299*^9, 3.640420470990511*^9, 3.640420627221447*^9, {
   3.640420665179618*^9, 3.6404206775033236`*^9}, 3.640420736423693*^9, {
   3.6404209231333723`*^9, 3.640420933198948*^9}, 3.640420979528598*^9, {
   3.640421028812417*^9, 3.6404210486545515`*^9}, {3.6404212278598013`*^9, 
   3.6404212681451063`*^9}, 3.6404212990988765`*^9, 3.6404217273763723`*^9, 
   3.6404218076669645`*^9, 3.640421862706113*^9, 3.6404219300609655`*^9, {
   3.6404219906494308`*^9, 3.640422017592972*^9}, 3.640422152687699*^9, 
   3.6404222035216064`*^9, 3.6404222578997164`*^9, {3.640422294287798*^9, 
   3.6404223094366646`*^9}, {3.640422394910553*^9, 3.64042242912051*^9}, {
   3.640422476280207*^9, 3.6404224831526003`*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Tree DFA", "Subsection",
 CellChangeTimes->{{3.6400850588009872`*^9, 3.6400850610241146`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"With", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"input", "=", 
      RowBox[{"Function", "[", 
       RowBox[{",", 
        RowBox[{"InputField", "[", 
         RowBox[{"#", ",", "String", ",", 
          RowBox[{"FieldSize", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"4", ",", "\[Infinity]"}], "}"}], ",", "1"}], "}"}]}]}],
          "]"}], ",", 
        RowBox[{"{", "HoldAll", "}"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"button", "=", 
      RowBox[{"Function", "[", 
       RowBox[{",", 
        RowBox[{"Button", "[", 
         RowBox[{
          RowBox[{"Style", "[", 
           RowBox[{"#1", ",", "Gray", ",", "16"}], "]"}], ",", "#2", ",", 
          RowBox[{"Appearance", "\[Rule]", "\"\<Frameless\>\""}]}], "]"}], 
        ",", 
        RowBox[{"{", "HoldAll", "}"}]}], "]"}]}]}], "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"DynamicModule", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"W", "=", 
        RowBox[{"StringSplit", "@", "\"\<one two three\>\""}]}], ",", "A", 
       ",", 
       RowBox[{"w", "=", "\"\<\>\""}], ",", 
       RowBox[{"showPlot", "=", "False"}]}], "}"}], ",", 
     RowBox[{"Column", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Dynamic", "@", 
         RowBox[{"Row", "@", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"\"\<\:0421\:043b\:043e\:0432\:0430:\>\"", ",", 
              RowBox[{"Spacer", "[", "10", "]"}]}], "}"}], ",", 
            RowBox[{"Array", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Superscript", "[", 
                RowBox[{
                 RowBox[{"input", "[", 
                  RowBox[{"Dynamic", "[", 
                   RowBox[{
                    RowBox[{
                    "W", "\[LeftDoubleBracket]", "#", 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"v", "\[Function]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringLength", "@", "v"}], ">", "0"}], ",", 
                    RowBox[{
                    RowBox[{
                    "W", "\[LeftDoubleBracket]", "#", 
                    "\[RightDoubleBracket]"}], "=", "v"}], ",", 
                    RowBox[{"Beep", "[", "]"}]}], "]"}]}]}], "]"}], "]"}], 
                 ",", 
                 RowBox[{"button", "[", 
                  RowBox[{"\"\<\[Times]\>\"", ",", 
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "@", "W"}], ">", "1"}], ",", 
                    RowBox[{"W", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"W", ",", 
                    RowBox[{"{", "#", "}"}]}], "]"}]}], ",", 
                    RowBox[{"Beep", "[", "]"}]}], "]"}]}], "]"}]}], "]"}], 
               "&"}], ",", 
              RowBox[{"Length", "@", "W"}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Spacer", "[", "10", "]"}], ",", 
              RowBox[{"Superscript", "[", 
               RowBox[{
                RowBox[{"input", "@", 
                 RowBox[{"Dynamic", "@", "w"}]}], ",", 
                RowBox[{"button", "[", 
                 RowBox[{"\"\<+\>\"", ",", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"w", "=!=", "\"\<\>\""}], "&&", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"W", ",", "w"}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"AppendTo", "[", 
                    RowBox[{"W", ",", "w"}], "]"}], 
                    RowBox[{"(", 
                    RowBox[{"w", "=", "\"\<\>\""}], ")"}]}], ",", 
                    RowBox[{"Beep", "[", "]"}]}], "]"}]}], "]"}]}], "]"}]}], 
             "}"}]}], "]"}]}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"Dynamic", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"TableForm", "[", 
            RowBox[{
             RowBox[{
             "#", "\[LeftDoubleBracket]", "3", "\[RightDoubleBracket]"}], ",", 
             RowBox[{"TableHeadings", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"MapAt", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Row", "@", 
                    RowBox[{"{", 
                    RowBox[{"\"\<*\>\"", ",", 
                    RowBox[{"Spacer", "@", "5"}], ",", "#"}], "}"}]}], "&"}], 
                   ",", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"ArrayReshape", "[", 
                    RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Length", "@", "#"}], ",", "1"}], "}"}]}], "]"}], 
                    "&"}], "@", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "5", 
                    "\[RightDoubleBracket]"}]}]}], "]"}], "@", 
                 RowBox[{
                  RowBox[{"MapAt", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Row", "@", 
                    RowBox[{"{", 
                    RowBox[{"\"\<\[Rule]\>\"", ",", 
                    RowBox[{"Spacer", "@", "5"}], ",", "#"}], "}"}]}], "&"}], 
                    ",", 
                    RowBox[{
                    "#", "\[LeftDoubleBracket]", "4", 
                    "\[RightDoubleBracket]"}]}], "]"}], "@", 
                  RowBox[{
                  "#", "\[LeftDoubleBracket]", "1", 
                   "\[RightDoubleBracket]"}]}]}], ",", 
                RowBox[{
                "#", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}],
                "}"}]}], ",", 
             RowBox[{"TableAlignments", "\[Rule]", 
              RowBox[{"{", "Right", "}"}]}]}], "]"}], "&"}], "[", 
          RowBox[{"A", "=", 
           RowBox[{"TreeDFA", "[", 
            RowBox[{"W", ",", 
             RowBox[{"Union", "@@", 
              RowBox[{"Characters", "@", "W"}]}]}], "]"}]}], "]"}], "]"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"Row", "@", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Checkbox", "[", 
            RowBox[{"Dynamic", "[", "showPlot", "]"}], "]"}], ",", 
           RowBox[{"Spacer", "@", "5"}], ",", 
           "\"\<\:041c\:0430\:043b\:044e\:0432\:0430\:0442\:0438 \:0434\:0456\
\:0430\:0433\:0440\:0430\:043c\:0443\>\""}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Dynamic", "@", 
         RowBox[{"If", "[", 
          RowBox[{"showPlot", ",", 
           RowBox[{"DFALayeredPlot", "[", 
            RowBox[{
             RowBox[{"TreeDFA", "[", 
              RowBox[{"W", ",", 
               RowBox[{"Union", "@@", 
                RowBox[{"Characters", "@", "W"}]}]}], "]"}], ",", "Left", ",", 
             RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
             RowBox[{"ArrowSize", "\[Rule]", ".02"}]}], "]"}], ",", 
           "\"\<\>\""}], "]"}]}]}], "}"}], "]"}], ",", 
     RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
    "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.638798291859585*^9, 3.6387983669258785`*^9}, {
   3.6387984046590366`*^9, 3.6387984181138062`*^9}, {3.638798448546547*^9, 
   3.6387987535479918`*^9}, {3.6387987870309067`*^9, 
   3.6387988877556677`*^9}, {3.638798931986198*^9, 3.638798966619179*^9}, 
   3.6387990130708356`*^9, {3.6387990437125883`*^9, 3.6387990956575594`*^9}, 
   3.638799129863516*^9, {3.6387991777802563`*^9, 3.6387991780252705`*^9}, {
   3.638799306551622*^9, 3.6387993382264338`*^9}, {3.6388001536800747`*^9, 
   3.638800159904431*^9}, {3.6388002017308235`*^9, 3.638800461637689*^9}, {
   3.6388005519898567`*^9, 3.6388005594232817`*^9}, {3.6388006049498863`*^9, 
   3.6388006267081304`*^9}, {3.638800665585354*^9, 3.6388007006653605`*^9}, {
   3.6388008326499095`*^9, 3.638800839729315*^9}, {3.63880089209931*^9, 
   3.6388009685866847`*^9}, {3.63880102602997*^9, 3.638801471805467*^9}, {
   3.6388015438325872`*^9, 3.638801728827168*^9}, {3.638801769750509*^9, 
   3.638801802186364*^9}, {3.6388018398775196`*^9, 3.638801982246663*^9}, {
   3.638802043600172*^9, 3.6388020780811443`*^9}, {3.638802133102291*^9, 
   3.638802367589703*^9}, {3.6388024005655894`*^9, 3.6388024201467094`*^9}, {
   3.6388024561807704`*^9, 3.6388025104748755`*^9}, {3.6388026442265263`*^9, 
   3.6388027058650513`*^9}, {3.6388028501093016`*^9, 3.63880301599679*^9}, {
   3.638964381463552*^9, 3.638964386267827*^9}}],

Cell[BoxData[
 DynamicModuleBox[{$CellContext`W$$ = {
  "one", "two", 
   "three"}, $CellContext`A$$ = {{{1}, {2}, {9}, {3}, {10, 8}, {4}, {5}, {11, 
    7}, {6}}, {"e", "h", "n", "o", "r", "t", "w"}, {{2, 2, 2, 3, 2, 4, 2}, {2,
    2, 2, 2, 2, 2, 2}, {2, 2, 5, 2, 2, 2, 2}, {2, 6, 2, 2, 2, 2, 7}, {8, 2, 2,
    2, 2, 2, 2}, {2, 2, 2, 2, 9, 2, 2}, {2, 2, 2, 8, 2, 2, 2}, {2, 2, 2, 2, 2,
    2, 2}, {5, 2, 2, 2, 2, 2, 2}}, 1, {8}}, $CellContext`w$$ = 
  "", $CellContext`showPlot$$ = False}, 
  TagBox[GridBox[{
     {
      DynamicBox[ToBoxes[
        Row[
         Join[{"\:0421\:043b\:043e\:0432\:0430:", 
           Spacer[10]}, 
          Array[Superscript[
            Function[Null, 
             InputField[#, String, FieldSize -> {{4, Infinity}, 1}], {
             HoldAll}][
             Dynamic[
              Part[$CellContext`W$$, #], 
              Function[$CellContext`v$, 
               If[
               StringLength[$CellContext`v$] > 0, 
                Part[$CellContext`W$$, #] = $CellContext`v$, 
                Beep[]]]]], 
            Function[Null, 
             Button[
              Style[#, Gray, 16], #2, Appearance -> "Frameless"], {HoldAll}][
            "\[Times]", 
             If[
             Length[$CellContext`W$$] > 1, $CellContext`W$$ = 
              Drop[$CellContext`W$$, {#}], 
              Beep[]]]]& , 
           Length[$CellContext`W$$]], {
           Spacer[10], 
           Superscript[
            Function[Null, 
             InputField[#, String, FieldSize -> {{4, Infinity}, 1}], {
             HoldAll}][
             Dynamic[$CellContext`w$$]], 
            Function[Null, 
             Button[
              Style[#, Gray, 16], #2, Appearance -> "Frameless"], {HoldAll}][
            "+", 
             If[
              And[$CellContext`w$$ =!= "", 
               FreeQ[$CellContext`W$$, $CellContext`w$$]], 
              AppendTo[$CellContext`W$$, $CellContext`w$$] ($CellContext`w$$ = 
               ""), 
              Beep[]]]]}]], StandardForm],
       ImageSizeCache->{380., {7., 26.}}]},
     {
      DynamicBox[ToBoxes[
        (TableForm[
         Part[#, 3], TableHeadings -> {
           MapAt[Row[{"*", 
              Spacer[5], #}]& , 
            (ArrayReshape[#, {
              Length[#], 1}]& )[
             Part[#, 5]]][
            MapAt[Row[{"\[Rule]", 
               Spacer[5], #}]& , 
             Part[#, 4]][
             Part[#, 1]]], 
           Part[#, 2]}, 
         TableAlignments -> {
          Right}]& )[$CellContext`A$$ = $CellContext`TreeDFA[$CellContext`W$$, 
           Apply[Union, 
            Characters[$CellContext`W$$]]]], StandardForm],
       ImageSizeCache->{312., {69.5, 76.5}}]},
     {
      TemplateBox[{CheckboxBox[
         Dynamic[$CellContext`showPlot$$]],InterpretationBox[
         StyleBox[
          GraphicsBox[{}, ImageSize -> {5, 0}, BaselinePosition -> Baseline], 
          "CacheGraphics" -> False], 
         Spacer[5]],
        "\"\:041c\:0430\:043b\:044e\:0432\:0430\:0442\:0438 \
\:0434\:0456\:0430\:0433\:0440\:0430\:043c\:0443\""},
       "RowDefault"]},
     {
      DynamicBox[ToBoxes[
        If[$CellContext`showPlot$$, 
         $CellContext`DFALayeredPlot[
          $CellContext`TreeDFA[$CellContext`W$$, 
           Apply[Union, 
            Characters[$CellContext`W$$]]], Left, ImageSize -> 
          Large, $CellContext`ArrowSize -> 0.02], ""], StandardForm],
       ImageSizeCache->{0., {0., 6.}}]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
   "Column"],
  DynamicModuleValues:>{},
  Initialization:>{
   Attributes[Superscript] = {NHoldRest, ReadProtected}, 
    Attributes[$CellContext`v$] = {Temporary}, $CellContext`TreeDFA[{}, 
      Pattern[N, 
       Blank[Integer]]] := {
      ConstantArray[1, N], {}}, $CellContext`TreeDFA[{
       Alternatives["", "\[CurlyEpsilon]"]}, 
      Pattern[N, 
       Blank[Integer]]] := {
      ConstantArray[2, {2, N}], {1}}, $CellContext`TreeDFA[{
       Pattern[$CellContext`a, 
        Blank[String]], 
       Pattern[$CellContext`b, 
        BlankSequence[]]}, 
      Pattern[N, 
       Blank[Integer]]] := $CellContext`DFAUnion[
      $CellContext`TreeDFA[{$CellContext`a}, N], 
      $CellContext`TreeDFA[{$CellContext`b}, N]], $CellContext`TreeDFA[{
       Pattern[$CellContext`a, 
        Blank[String]]}, 
      Pattern[N, 
       Blank[Integer]]] := 
    Module[{$CellContext`Qn = 
       StringLength[$CellContext`a] + 2, $CellContext`c = 
       Characters[$CellContext`a], $CellContext`m}, $CellContext`m = 
       ConstantArray[$CellContext`Qn, {$CellContext`Qn, N}]; 
      Do[Part[$CellContext`m, $CellContext`i, ToCharacterCode[
            Part[$CellContext`c, $CellContext`i]] - 96] = $CellContext`i + 
         1, {$CellContext`i, 
         Length[$CellContext`c]}]; $CellContext`DFAMinimize[{
         Range[
          Length[$CellContext`m]], 
         CharacterRange["a", 
          FromCharacterCode[96 + Length[
             Part[$CellContext`m, 1]]]], $CellContext`m, 
         1, {$CellContext`Qn - 1}}]], $CellContext`TreeDFA[{}, 
      Pattern[$CellContext`\[CapitalSigma], 
       Blank[List]]] := {
      ConstantArray[1, 
       Length[$CellContext`\[CapitalSigma]]], {}}, $CellContext`TreeDFA[{
       Alternatives["", "\[CurlyEpsilon]"]}, 
      Pattern[$CellContext`\[CapitalSigma], 
       Blank[List]]] := {
      ConstantArray[2, {2, 
        Length[$CellContext`\[CapitalSigma]]}], {1}}, $CellContext`TreeDFA[{
       Pattern[$CellContext`a, 
        Blank[String]], 
       Pattern[$CellContext`b, 
        BlankSequence[]]}, 
      Pattern[$CellContext`\[CapitalSigma], 
       Blank[List]]] := $CellContext`DFAUnion[
      $CellContext`TreeDFA[{$CellContext`a}, $CellContext`\[CapitalSigma]], 
      $CellContext`TreeDFA[{$CellContext`b}, $CellContext`\[CapitalSigma]]], \
$CellContext`TreeDFA[{
       Pattern[$CellContext`a, 
        Blank[String]]}, 
      Pattern[$CellContext`\[CapitalSigma], 
       Blank[List]]] := 
    Module[{$CellContext`Qn = 
       StringLength[$CellContext`a] + 2, $CellContext`c = 
       Characters[$CellContext`a], $CellContext`m}, $CellContext`m = 
       ConstantArray[$CellContext`Qn, {$CellContext`Qn, 
          Length[$CellContext`\[CapitalSigma]]}]; 
      Do[Part[$CellContext`m, $CellContext`i, 
          First[
           FirstPosition[$CellContext`\[CapitalSigma], 
            Part[$CellContext`c, $CellContext`i]]]] = $CellContext`i + 
         1, {$CellContext`i, 
         Length[$CellContext`c]}]; $CellContext`DFAMinimize[{
         Range[
          
          Length[$CellContext`m]], $CellContext`\[CapitalSigma], \
$CellContext`m, 1, {$CellContext`Qn - 1}}]], $CellContext`DFAUnion[
      Pattern[$CellContext`A, 
       Blank[]], 
      Pattern[$CellContext`B, 
       Blank[]]] := 
    Module[{$CellContext`f, $CellContext`s, $CellContext`Q, $CellContext`\
\[CapitalSigma], $CellContext`PA, $CellContext`PB, $CellContext`\[Delta]A, \
$CellContext`\[Delta]B, $CellContext`\[Delta]q, $CellContext`m = {}, \
$CellContext`rlQ}, $CellContext`\[CapitalSigma] = DeleteDuplicates[
         Join[
          Part[$CellContext`A, 2], 
          Part[$CellContext`B, 2]]]; $CellContext`PA = Flatten[
         ReplaceAll[
          Map[FirstPosition[
            Part[$CellContext`A, 2], #]& , $CellContext`\[CapitalSigma]], 
          Blank[Missing] -> Length[
             Part[$CellContext`A, 2]] + 1]]; $CellContext`PB = Flatten[
         ReplaceAll[
          Map[FirstPosition[
            Part[$CellContext`B, 2], #]& , $CellContext`\[CapitalSigma]], 
          Blank[Missing] -> Length[
             Part[$CellContext`B, 2]] + 1]]; $CellContext`\[Delta]A = Part[
         If[Length[$CellContext`\[CapitalSigma]] > Length[
            Part[$CellContext`A, 2]], 
          ArrayPad[
           Part[$CellContext`A, 3], {{0, 1}, {0, 1}}, Length[
             Part[$CellContext`A, 1]] + 1], 
          Part[$CellContext`A, 3]], 
         All, $CellContext`PA]; $CellContext`\[Delta]B = Part[
         If[Length[$CellContext`\[CapitalSigma]] > Length[
            Part[$CellContext`B, 2]], 
          ArrayPad[
           Part[$CellContext`B, 3], {{0, 1}, {0, 1}}, Length[
             Part[$CellContext`B, 1]] + 1], 
          Part[$CellContext`B, 3]], All, $CellContext`PB]; $CellContext`Q = {{
          Part[$CellContext`A, 4], 
          Part[$CellContext`B, 4]}}; 
      While[$CellContext`Q != {}, {$CellContext`f, $CellContext`s} = 
         Part[$CellContext`Q, 1]; $CellContext`\[Delta]q = Thread[{
            Part[$CellContext`\[Delta]A, $CellContext`f], 
            Part[$CellContext`\[Delta]B, $CellContext`s]}]; 
        AppendTo[$CellContext`m, {{$CellContext`f, $CellContext`s}, \
$CellContext`\[Delta]q}]; $CellContext`Q = Complement[
           Join[$CellContext`Q, $CellContext`\[Delta]q], 
           Part[$CellContext`m, All, 1]]]; $CellContext`Q = 
       Part[$CellContext`m, All, 1]; $CellContext`rlQ = Range[
         Length[$CellContext`Q]]; $CellContext`DFAMinimize[
        ReplaceAll[
         Join[{$CellContext`rlQ, 
           DeleteDuplicates[
            Join[
             Part[$CellContext`A, 2], 
             Part[$CellContext`B, 2]]]}, {
           Part[$CellContext`m, All, 2], 
           Part[$CellContext`Q, 1], 
           Select[$CellContext`Q, Or[
             MemberQ[
              Part[$CellContext`A, 5], 
              Part[#, 1]], 
             MemberQ[
              Part[$CellContext`B, 5], 
              Part[#, 2]]]& ]}], 
         Thread[$CellContext`Q -> $CellContext`rlQ]]]], \
$CellContext`DFAMinimize[{
       Pattern[$CellContext`Q, 
        Blank[]], 
       Pattern[$CellContext`\[CapitalSigma], 
        Blank[]], 
       Pattern[$CellContext`\[Delta], 
        Blank[]], 
       Pattern[$CellContext`s, 
        Blank[]], 
       Pattern[$CellContext`F, 
        Blank[]]}] := 
    Module[{$CellContext`M, 
       C}, $CellContext`M = \
$CellContext`DFADeleteInaccesibleStates[{$CellContext`Q, $CellContext`\
\[CapitalSigma], $CellContext`\[Delta], $CellContext`s, $CellContext`F}]; 
      C = $CellContext`DFAEquivalenceClasses[$CellContext`M]; Join[{
         Map[Part[$CellContext`M, 1, #]& , C], $CellContext`\[CapitalSigma]}, 
        MapAt[Union, -1][
         ReplaceAll[{
           Part[$CellContext`M, 3, 
            Part[C, All, 1]], $CellContext`s, 
           Part[$CellContext`M, 5]}, 
          Flatten[
           MapThread[
            Composition[Thread, Rule], {C, 
             Range[
              Length[C]]}]]]]]], $CellContext`DFADeleteInaccesibleStates[{
       Pattern[$CellContext`Q, 
        Blank[]], 
       Pattern[$CellContext`\[CapitalSigma], 
        Blank[]], 
       Pattern[$CellContext`\[Delta], 
        Blank[]], 
       Pattern[$CellContext`s, 
        Blank[]], 
       Pattern[$CellContext`F, 
        Blank[]]}] := (Join[{
       Part[$CellContext`Q, #], $CellContext`\[CapitalSigma]}, 
      Insert[$CellContext`s, 2][
       ReplaceAll[{
         Part[$CellContext`\[Delta], #], 
         Intersection[$CellContext`F, #]}, 
        Thread[# -> Range[
           Length[#]]]]]]& )[
      VertexOutComponent[
       Graph[
        Flatten[
         Inner[DirectedEdge, 
          Range[
           Length[$CellContext`\[Delta]]], $CellContext`\[Delta], 
          List]]], $CellContext`s]], $CellContext`DFAEquivalenceClasses[{
       Blank[], 
       Blank[], 
       Pattern[$CellContext`\[Delta], 
        Blank[]], 
       Blank[], 
       Pattern[$CellContext`F, 
        Blank[]]}] := 
    Module[{$CellContext`Q, $CellContext`\[CapitalSigma], $CellContext`P, 
       C}, {$CellContext`Q, $CellContext`\[CapitalSigma]} = Map[Range, 
         Dimensions[$CellContext`\[Delta], 2]]; $CellContext`P = Flatten[
         Append[
          Transpose[{$CellContext`Q, $CellContext`Q}]][
          Map[Subsets[
            Sort[#], {2}]& , {
            Complement[$CellContext`Q, $CellContext`F], $CellContext`F}]], 
         1]; $CellContext`P = FixedPoint[DeleteCases[#, 
          Condition[
           Pattern[$CellContext`p, 
            Blank[]], 
           MemberQ[$CellContext`\[CapitalSigma], 
            Condition[
             Pattern[$CellContext`a, 
              Blank[]], 
             FreeQ[#, 
              Sort[
               
               Part[$CellContext`\[Delta], $CellContext`p, \
$CellContext`a]]]]]]]& , $CellContext`P, SameTest -> (Equal[
           Map[Length, 
            Unevaluated[
             SlotSequence[1]]]]& )]; C = ReplaceRepeated[$CellContext`P, {
           Pattern[$CellContext`h, 
            BlankNullSequence[]], {
            Pattern[$CellContext`a, 
             BlankNullSequence[]], 
            Pattern[$CellContext`x, 
             Blank[]], 
            Pattern[$CellContext`b, 
             BlankNullSequence[]]}, 
           Pattern[$CellContext`u, 
            BlankNullSequence[]], {
            Pattern[$CellContext`p, 
             BlankNullSequence[]], 
            Pattern[$CellContext`x, 
             Blank[]], 
            Pattern[$CellContext`q, 
             BlankNullSequence[]]}, 
           Pattern[$CellContext`t, 
            
            BlankNullSequence[]]} :> {$CellContext`h, {$CellContext`a, \
$CellContext`x, $CellContext`b, $CellContext`p, $CellContext`q}, \
$CellContext`u, $CellContext`t}]; C = ((SortBy[First][
         Map[Union, #, {1}]]& )[
         Join[#, 
          (If[# != {}, 
           ArrayReshape[#, {
             Length[#], 1}], #]& )[
           Complement[$CellContext`Q, 
            Flatten[#]]]]]& )[C]], $CellContext`t = {
     False, False, False}, $CellContext`DFALayeredPlot[
      Pattern[$CellContext`M, 
       Blank[]], 
      Pattern[$CellContext`pos, 
       Blank[]], 
      Pattern[$CellContext`opts, 
       OptionsPattern[]]] := $CellContext`DFACustomPlot[$CellContext`M, \
$CellContext`DFA\[Delta]Edges, 
      Insert[$CellContext`pos, 2], 
      LayeredGraphPlot, $CellContext`opts], $CellContext`DFACustomPlot[{
       Pattern[$CellContext`Q, 
        Blank[]], 
       Pattern[$CellContext`\[CapitalSigma], 
        Blank[]], 
       Pattern[$CellContext`\[Delta], 
        Blank[]], 
       Pattern[$CellContext`s, 
        Blank[]], 
       Pattern[$CellContext`F, 
        Blank[]]}, 
      Pattern[$CellContext`Edges, 
       Blank[]], 
      Pattern[$CellContext`PrePlot, 
       Blank[]], 
      Pattern[Plot, 
       Blank[]], 
      Pattern[$CellContext`opts, 
       OptionsPattern[]]] := 
    With[{$CellContext`Qf = 
       If[Null =!= $CellContext`Q, Part[$CellContext`Q, #]& , 
         Identity], $CellContext`\[CapitalSigma]f = 
       If[Null =!= $CellContext`\[CapitalSigma], 
         Part[$CellContext`\[CapitalSigma], #]& , Characters[
          FromCharacterCode[96 + #]]& ]}, 
      Apply[Plot, 
       $CellContext`PrePlot[{
         If[
          
          OptionValue[$CellContext`EdgeCollapsing], \
$CellContext`DFACollapseEdges, Identity][
          $CellContext`Edges[$CellContext`\[Delta]]], 
         Apply[Sequence, 
          FilterRules[
           FilterRules[{$CellContext`opts}, 
            Options[Plot]], 
           Except[{VertexRenderingFunction, EdgeRenderingFunction}]]], 
         VertexRenderingFunction -> Replace[
           OptionValue[VertexRenderingFunction], 
           Automatic -> ($CellContext`DFARenderState[#2, 
             Replace[$CellContext`s, Null -> 1], $CellContext`F, #, 
             VertexLabeling -> $CellContext`Qf, 
             Apply[Sequence, 
              FilterRules[{$CellContext`opts}, 
               Options[$CellContext`DFARenderState]]]]& )], 
         EdgeRenderingFunction -> Replace[
           OptionValue[EdgeRenderingFunction], 
           Automatic -> ($CellContext`DFARenderTransition[#3, #, EdgeLabeling -> 
             If[Null =!= $CellContext`\[CapitalSigma], 
               Function[$CellContext`l, 
                If[
                Length[$CellContext`l] == 
                 Length[$CellContext`\[CapitalSigma]], "\[CapitalSigma]", 
                 If[
                 Length[$CellContext`l] > 
                  Length[$CellContext`\[CapitalSigma]]/2., 
                  Row[{"\[CapitalSigma]", "\[Backslash]", 
                    $CellContext`\[CapitalSigma]f[
                    Complement[
                    Range[
                    Length[$CellContext`\[CapitalSigma]]], $CellContext`l]]}], 
                  $CellContext`\[CapitalSigma]f[$CellContext`l]]]], 
               FromCharacterCode[# + 96]& ], 
             Apply[Sequence, 
              FilterRules[{$CellContext`opts}, 
               Options[$CellContext`DFARenderTransition]]]]& )]}]]], 
    Options[$CellContext`DFACustomPlot] = {
     AlignmentPoint -> Center, AspectRatio -> Automatic, Axes -> False, 
      AxesLabel -> None, AxesOrigin -> Automatic, AxesStyle -> {}, Background -> 
      None, BaselinePosition -> Automatic, BaseStyle -> {}, ColorOutput -> 
      Automatic, ContentSelectable -> Automatic, CoordinatesToolOptions -> 
      Automatic, DataRange -> Automatic, DirectedEdges -> False, 
      DisplayFunction :> $DisplayFunction, EdgeLabeling -> True, 
      EdgeRenderingFunction -> Automatic, Epilog -> {}, FormatType :> 
      TraditionalForm, Frame -> False, FrameLabel -> None, FrameStyle -> {}, 
      FrameTicks -> None, FrameTicksStyle -> {}, GridLines -> None, 
      GridLinesStyle -> {}, ImageMargins -> 0., ImagePadding -> All, 
      ImageSize -> Automatic, ImageSizeRaw -> Automatic, LabelStyle -> {}, 
      Method -> Automatic, MultiedgeStyle -> Automatic, PackingMethod -> 
      Automatic, PlotLabel -> None, PlotRange -> All, PlotRangeClipping -> 
      False, PlotRangePadding -> Automatic, PlotRegion -> Automatic, 
      PlotStyle -> Automatic, PreserveImageOptions -> Automatic, Prolog -> {},
       RotateLabel -> True, SelfLoopStyle -> Automatic, Ticks -> Automatic, 
      TicksStyle -> {}, VertexCoordinateRules -> Automatic, 
      VertexRenderingFunction -> Automatic, $CellContext`EdgeCollapsing -> 
      True, $CellContext`StartColor -> 
      RGBColor[1, 1, 0.85], $CellContext`FinalColor -> GrayLevel[0.85], 
      VertexSize -> 0.1, VertexLabeling -> Automatic, VertexLabelStyle -> {
        GrayLevel[0], 12}, $CellContext`ArrowSize -> 
      Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
      Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
        GrayLevel[0], 12}}, $CellContext`DFACollapseEdges[
      Pattern[$CellContext`e, 
       Blank[]]] := MapAt[Replace[#, Pattern[$CellContext`l, 
         Blank[List]] :> Flatten[$CellContext`l]]& , {All, 2}][
      ReplaceRepeated[$CellContext`e, {
         Pattern[$CellContext`h, 
          BlankNullSequence[]], {
          Pattern[$CellContext`x, 
           Blank[]], 
          Pattern[$CellContext`l1, 
           Blank[]]}, 
         Pattern[$CellContext`u, 
          BlankNullSequence[]], {
          Pattern[$CellContext`x, 
           Blank[]], 
          Pattern[$CellContext`l2, 
           Blank[]]}, 
         Pattern[$CellContext`t, 
          
          BlankNullSequence[]]} :> {$CellContext`h, {$CellContext`x, \
{$CellContext`l1, $CellContext`l2}}, $CellContext`u, $CellContext`t}]], \
$CellContext`DFARenderState[
      Pattern[$CellContext`q, 
       Blank[]], 
      Pattern[$CellContext`s, 
       Blank[]], 
      Pattern[$CellContext`F, 
       Blank[]], 
      Pattern[$CellContext`p, 
       Blank[]], 
      OptionsPattern[]] := {
      If[$CellContext`q === $CellContext`s, 
       OptionValue[$CellContext`StartColor], 
       OptionValue[$CellContext`FinalColor]], 
      EdgeForm[Black], 
      Disk[$CellContext`p, 
       OptionValue[VertexSize]], 
      If[
       MemberQ[$CellContext`F, $CellContext`q], 
       Disk[$CellContext`p, 0.7 OptionValue[VertexSize]]], 
      Text[
       Replace[
        OptionValue[VertexLabeling], Automatic -> 
        Identity][$CellContext`q], $CellContext`p, BaseStyle -> 
       OptionValue[VertexLabelStyle]]}, 
    Options[$CellContext`DFARenderState] = {$CellContext`StartColor -> 
      RGBColor[1, 1, 0.85], $CellContext`FinalColor -> GrayLevel[0.85], 
      VertexSize -> 0.1, VertexLabeling -> Automatic, VertexLabelStyle -> {
        GrayLevel[0], 12}}, $CellContext`DFARenderTransition[
      Pattern[$CellContext`t, 
       Blank[]], 
      Pattern[$CellContext`p, 
       Blank[]], 
      OptionsPattern[]] := {Black, 
      Arrowheads[{{
         OptionValue[$CellContext`ArrowSize], 
         OptionValue[$CellContext`ArrowPosition]}}], 
      Arrow[
       BSplineCurve[$CellContext`p, SplineDegree -> 
        Length[$CellContext`p] - 1]], 
      Text[
       Style[
        Replace[
         OptionValue[EdgeLabeling], Automatic -> Identity][$CellContext`t], 
        Apply[Sequence, 
         OptionValue[EdgeLabelStyle]]], 
       BSplineFunction[$CellContext`p, SplineDegree -> 
        Length[$CellContext`p] - 1][
        OptionValue[$CellContext`EdgeLabelPosition]], Background -> White]}, 
    Options[$CellContext`DFARenderTransition] = {$CellContext`ArrowSize -> 
      Automatic, $CellContext`ArrowPosition -> 0.8, EdgeLabeling -> 
      Automatic, $CellContext`EdgeLabelPosition -> 0.5, EdgeLabelStyle -> {
        GrayLevel[0], 12}}, $DisplayFunction = 
    Identity, $CellContext`DFA\[Delta]Edges[
      Pattern[$CellContext`\[Delta], 
       Blank[]]] := With[{$CellContext`rd = Map[Range, 
         Dimensions[$CellContext`\[Delta], 2]]}, 
      Flatten[
       Inner[
        Composition[Reverse, List], 
        Part[$CellContext`rd, 2], 
        Inner[Rule, 
         Part[$CellContext`rd, 1], $CellContext`\[Delta], List], List], 
       1]]}]], "Output",
 CellChangeTimes->{3.6404281290555277`*^9}]
}, Open  ]]
}, Closed]],

Cell["RE \[RightArrow] RG, DFA", "Subsection",
 CellChangeTimes->{{3.641027468416031*^9, 3.6410275229521503`*^9}}]
}, Closed]]
},
WindowSize->{1366, 730},
WindowMargins->{{-4, Automatic}, {Automatic, -4}},
FrontEndVersion->"10.0 for Microsoft Windows (64-bit) (December 4, 2014)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 102, 1, 64, "Chapter"],
Cell[CellGroupData[{
Cell[707, 27, 103, 1, 62, "Subchapter"],
Cell[CellGroupData[{
Cell[835, 32, 102, 1, 63, "Section"],
Cell[940, 35, 7287, 191, 232, "Input",
 InitializationCell->True],
Cell[8230, 228, 1419, 34, 31, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[9674, 266, 105, 1, 43, "Subsection"],
Cell[CellGroupData[{
Cell[9804, 271, 917, 23, 29, "Item"],
Cell[10724, 296, 1459656, 23933, 268, "ItemParagraph"]
}, Closed]],
Cell[1470395, 24232, 749, 19, 27, "Input",
 InitializationCell->True]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1471193, 24257, 106, 1, 49, "Section"],
Cell[1471302, 24260, 1115, 18, 31, "Input",
 InitializationCell->True],
Cell[1472420, 24280, 7707, 210, 212, "Input",
 InitializationCell->True],
Cell[1480130, 24492, 264, 5, 25, "Subitem"],
Cell[1480397, 24499, 1495, 46, 31, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[1481917, 24549, 159, 2, 25, "Subitem"],
Cell[1482079, 24553, 110, 1, 21, "SubitemParagraph"],
Cell[1482192, 24556, 140, 1, 21, "SubitemParagraph"]
}, Closed]],
Cell[1482347, 24560, 2692, 75, 66, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[1485064, 24639, 222, 4, 31, "Input"],
Cell[1485289, 24645, 123301, 2698, 355, "Output"]
}, Closed]],
Cell[1608605, 27346, 6565, 200, 106, "Input"],
Cell[CellGroupData[{
Cell[1615195, 27550, 239, 5, 31, "Input"],
Cell[1615437, 27557, 35418, 708, 1104, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[1650892, 28270, 276, 6, 25, "Input"],
Cell[1651171, 28278, 188, 4, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1651396, 28287, 239, 5, 31, "Input"],
Cell[1651638, 28294, 31130, 644, 386, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[1682805, 28943, 103, 1, 28, "Subsubsection"],
Cell[1682911, 28946, 2739, 70, 72, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[1685675, 29020, 980, 22, 31, "Input"],
Cell[1686658, 29044, 1069, 38, 42, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[1687764, 29087, 2664, 64, 66, "Input"],
Cell[1690431, 29153, 1059, 37, 42, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[1691539, 29196, 100, 1, 28, "Subsubsection"],
Cell[1691642, 29199, 4192, 102, 92, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[1695859, 29305, 210, 4, 31, "Input"],
Cell[1696072, 29311, 874, 28, 31, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[1696983, 29344, 2363, 52, 152, "Input"],
Cell[1699349, 29398, 801, 24, 72, "Output"]
}, Closed]],
Cell[1700165, 29425, 1875, 46, 72, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[1702065, 29475, 1904, 54, 72, "Input"],
Cell[1703972, 29531, 1558, 43, 31, "Output"]
}, Closed]]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[1705603, 29582, 186, 2, 46, "Subchapter"],
Cell[1705792, 29586, 2453, 58, 52, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[1708270, 29648, 822, 18, 31, "Input"],
Cell[1709095, 29668, 1392, 43, 57, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[1710524, 29716, 866, 18, 25, "Input"],
Cell[1711393, 29736, 12088, 377, 272, "Output"]
}, Closed]],
Cell[1723496, 30116, 1053, 31, 25, "Input",
 InitializationCell->True],
Cell[1724552, 30149, 4403, 85, 132, "Input",
 InitializationCell->True],
Cell[1728958, 30236, 1388, 31, 31, "Input"],
Cell[1730349, 30269, 4558, 89, 112, "Input",
 InitializationCell->True],
Cell[1734910, 30360, 2418, 52, 52, "Input"],
Cell[1737331, 30414, 9675, 215, 372, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[1747031, 30633, 2772, 49, 72, "Input"],
Cell[1749806, 30684, 6401, 135, 131, "Output"],
Cell[1756210, 30821, 6234, 133, 131, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1762481, 30959, 1889, 39, 72, "Input"],
Cell[1764373, 31000, 12156, 233, 430, "Output"],
Cell[1776532, 31235, 16159, 345, 482, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1792728, 31585, 1550, 38, 31, "Input"],
Cell[1794281, 31625, 6553, 141, 324, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1800883, 31772, 132, 2, 46, "Subchapter"],
Cell[1801018, 31776, 4863, 102, 112, "Input",
 InitializationCell->True],
Cell[1805884, 31880, 4154, 71, 52, "Input"],
Cell[1810041, 31953, 1930, 38, 31, "Input",
 InitializationCell->True],
Cell[1811974, 31993, 3691, 77, 112, "Input"],
Cell[1815668, 32072, 1034, 22, 31, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[1816739, 32099, 180, 2, 46, "Subchapter"],
Cell[1816922, 32103, 2326, 51, 72, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[1819273, 32158, 2275, 46, 52, "Input"],
Cell[1821551, 32206, 13980, 309, 312, "Output"]
}, Closed]],
Cell[1835546, 32518, 8122, 162, 126, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[1843693, 32684, 225, 4, 31, "Input"],
Cell[1843921, 32690, 283, 8, 31, "Output"]
}, Closed]],
Cell[1844219, 32701, 3302, 84, 126, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[1847546, 32789, 1025, 21, 31, "Input"],
Cell[1848574, 32812, 17163, 359, 430, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[1865786, 33177, 106, 1, 46, "Subchapter"],
Cell[1865895, 33180, 442, 10, 52, "Input"],
Cell[CellGroupData[{
Cell[1866362, 33194, 147, 2, 31, "Input"],
Cell[1866512, 33198, 189, 4, 31, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1866750, 33208, 209, 3, 46, "Subchapter"],
Cell[CellGroupData[{
Cell[1866984, 33215, 99, 1, 43, "Subsection"],
Cell[1867086, 33218, 1099, 27, 52, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[1868210, 33249, 171, 3, 31, "Input"],
Cell[1868384, 33254, 790, 25, 31, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1869223, 33285, 95, 1, 35, "Subsection"],
Cell[1869321, 33288, 11544, 265, 272, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[1880890, 33557, 2092, 40, 72, "Input"],
Cell[1882985, 33599, 37259, 726, 510, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[1920281, 34330, 590, 17, 25, "Input"],
Cell[1920874, 34349, 43359, 901, 192, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1964282, 35256, 102, 1, 35, "Subsection"],
Cell[1964387, 35259, 807, 20, 72, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[1965219, 35283, 785, 21, 52, "Input"],
Cell[1966007, 35306, 26381, 569, 361, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1992437, 35881, 100, 1, 35, "Subsection"],
Cell[1992540, 35884, 769, 18, 72, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[1993346, 35907, 103, 1, 35, "Subsection"],
Cell[1993452, 35910, 11099, 271, 372, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[2004576, 36185, 1701, 33, 72, "Input"],
Cell[2006280, 36220, 20072, 388, 267, "Output"],
Cell[2026355, 36610, 35538, 715, 1072, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[2061942, 37331, 99, 1, 35, "Subsection"],
Cell[2062044, 37334, 5949, 153, 272, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[2068018, 37491, 1261, 23, 31, "Input"],
Cell[2069282, 37516, 19654, 399, 443, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[2088985, 37921, 156, 2, 49, "Section"],
Cell[2089144, 37925, 765, 21, 31, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[2089946, 37951, 156, 2, 49, "Section"],
Cell[2090105, 37955, 4676, 113, 172, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[2094806, 38072, 872, 18, 31, "Input"],
Cell[2095681, 38092, 5631, 126, 162, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2101349, 38223, 4690, 106, 112, "Input"],
Cell[2106042, 38331, 8172, 196, 336, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2114287, 38535, 105, 1, 64, "Chapter"],
Cell[CellGroupData[{
Cell[2114417, 38540, 107, 1, 62, "Subchapter"],
Cell[CellGroupData[{
Cell[2114549, 38545, 100, 1, 63, "Section"],
Cell[2114652, 38548, 237, 6, 31, "Input",
 InitializationCell->True],
Cell[2114892, 38556, 2404, 70, 72, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[2117333, 38631, 96, 1, 49, "Section"],
Cell[2117432, 38634, 4975, 112, 132, "Input",
 InitializationCell->True]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[2122456, 38752, 110, 1, 46, "Subchapter"],
Cell[2122569, 38755, 3355, 86, 92, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[2125961, 38846, 169, 2, 46, "Subchapter"],
Cell[2126133, 38850, 3957, 101, 112, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[2130115, 38955, 749, 18, 31, "Input"],
Cell[2130867, 38975, 9291, 257, 90, "Output"]
}, Open  ]],
Cell[2140173, 39235, 4113, 103, 92, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[2144311, 39342, 601, 16, 31, "Input"],
Cell[2144915, 39360, 8347, 234, 90, "Output"]
}, Open  ]],
Cell[2153277, 39597, 2856, 70, 92, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[2156158, 39671, 1710, 46, 92, "Input"],
Cell[2157871, 39719, 7533, 211, 90, "Output"]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2165465, 39937, 149, 2, 64, "Chapter"],
Cell[CellGroupData[{
Cell[2165639, 39943, 216, 3, 62, "Subchapter"],
Cell[2165858, 39948, 8393, 124, 52, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[2174276, 40076, 724, 20, 33, "Input"],
Cell[2175003, 40098, 33996, 714, 416, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[2209048, 40818, 215, 3, 46, "Subchapter"],
Cell[CellGroupData[{
Cell[2209288, 40825, 111, 1, 43, "Subsection"],
Cell[2209402, 40828, 845, 25, 31, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[2210284, 40858, 110, 1, 35, "Subsection"],
Cell[2210397, 40861, 1413, 35, 52, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[2211835, 40900, 177, 3, 31, "Input"],
Cell[2212015, 40905, 340, 9, 31, "Output"]
}, Open  ]],
Cell[2212370, 40917, 3628, 84, 112, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[2216023, 41005, 422, 8, 31, "Input"],
Cell[2216448, 41015, 17824, 369, 190, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2234309, 41389, 423, 8, 31, "Input"],
Cell[2234735, 41399, 7997, 224, 147, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2242769, 41628, 4441, 125, 172, "Input"],
Cell[2247213, 41755, 3219, 82, 52, "Output"],
Cell[2250435, 41839, 5863, 163, 222, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2256335, 42007, 2030, 51, 172, "Input"],
Cell[2258368, 42060, 1983, 61, 161, "Output"],
Cell[2260354, 42123, 3265, 91, 117, "Output"]
}, Closed]],
Cell[2263634, 42217, 4221, 97, 326, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[2267880, 42318, 196, 5, 31, "Input"],
Cell[2268079, 42325, 113, 2, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2268229, 42332, 328, 9, 31, "Input"],
Cell[2268560, 42343, 230, 6, 31, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2268827, 42354, 251, 5, 31, "Input"],
Cell[2269081, 42361, 32252, 745, 220, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2301370, 43111, 2821, 70, 212, "Input"],
Cell[2304194, 43183, 33944, 713, 416, "Output"]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[2338199, 43903, 110, 1, 46, "Subchapter"],
Cell[2338312, 43906, 2650, 64, 92, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[2340987, 43974, 248, 6, 33, "Input"],
Cell[2341238, 43982, 3360, 100, 90, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2344635, 44087, 594, 10, 33, "Input"],
Cell[2345232, 44099, 3018, 80, 76, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2348287, 44184, 218, 5, 33, "Input"],
Cell[2348508, 44191, 2576, 74, 76, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2351121, 44270, 3639, 92, 116, "Input"],
Cell[2354763, 44364, 2563, 70, 106, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2357363, 44439, 3300, 87, 116, "Input"],
Cell[2360666, 44528, 2338, 63, 106, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2363041, 44596, 1290, 25, 33, "Input"],
Cell[2364334, 44623, 9234, 264, 136, "Output"]
}, Open  ]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2373629, 44894, 91, 1, 64, "Chapter"],
Cell[CellGroupData[{
Cell[2373745, 44899, 93, 1, 43, "Subsection"],
Cell[2373841, 44902, 31893, 675, 1072, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[2405759, 45581, 432, 9, 31, "Input"],
Cell[2406194, 45592, 33651, 710, 578, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[2439882, 46307, 302, 6, 25, "Input"],
Cell[2440187, 46315, 33184, 702, 596, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[2473420, 47023, 196, 3, 35, "Subsection"],
Cell[2473619, 47028, 34228, 779, 1312, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[2507872, 47811, 326, 5, 31, "Input"],
Cell[2508201, 47818, 43420, 911, 456, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[2551670, 48735, 99, 1, 35, "Subsection"],
Cell[2551772, 48738, 35583, 781, 1272, "Input"],
Cell[CellGroupData[{
Cell[2587380, 49523, 1808, 26, 31, "Input"],
Cell[2589191, 49551, 40331, 846, 386, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[2629571, 50403, 100, 1, 35, "Subsection"],
Cell[CellGroupData[{
Cell[2629696, 50408, 8792, 201, 292, "Input"],
Cell[2638491, 50611, 21778, 525, 235, "Output"]
}, Open  ]]
}, Closed]],
Cell[2660296, 51140, 114, 1, 35, "Subsection"]
}, Closed]]
}
]
*)

(* End of internal cache information *)
